<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_chroma\grey_yuv.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC_FOURCC</name></cpp:macro> <cpp:value>"GREY"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEST_FOURCC</name></cpp:macro> <cpp:value>"I420,YUY2"</cpp:value></cpp:define>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Activate</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GREY_I420</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GREY_YUY2</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>GREY_I420_Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>GREY_YUY2_Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>




<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Conversions from "</literal> SRC_FOURCC <literal type="string">" to "</literal> DEST_FOURCC)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video converter"</literal></argument>, <argument><literal type="number">80</literal></argument> )</argument_list></macro>
<macro><name>set_callback</name><argument_list>( <argument>Activate</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>






<function><type><specifier>static</specifier> <name>int</name></type> <name>Activate</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>&amp;</operator> <literal type="number">1</literal>
<operator>||</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name>
<operator>||</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name>
<operator>||</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_GREY</name></expr>:</case>
<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>GREY_I420_Filter</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_YUYV</name></expr>:</case>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>GREY_YUY2_Filter</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<macro><name>VIDEO_FILTER_WRAPPER</name><argument_list>( <argument>GREY_I420</argument> )</argument_list></macro>
<macro><name>VIDEO_FILTER_WRAPPER</name><argument_list>( <argument>GREY_YUY2</argument> )</argument_list></macro>






<function><type><specifier>static</specifier> <name>void</name></type> <name>GREY_I420</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_source</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dest</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_line</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_y</name> <init>= <expr><name><name>p_dest</name><operator>-&gt;</operator><name>Y_PIXELS</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_u</name> <init>= <expr><name><name>p_dest</name><operator>-&gt;</operator><name>U_PIXELS</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_v</name> <init>= <expr><name><name>p_dest</name><operator>-&gt;</operator><name>V_PIXELS</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>, <decl><type ref="prev"/><name>i_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_source_margin</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name>
<operator>-</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dest_margin</name> <init>= <expr><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>-</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dest_margin_c</name> <init>= <expr><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>-</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i_y</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p_u</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_u</name> <operator>+=</operator> <name>i_dest_margin_c</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p_v</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_v</name> <operator>+=</operator> <name>i_dest_margin_c</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</init> <condition><expr><name>i_y</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_y</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_line</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_y</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_line</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_y</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_line</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_y</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_line</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_y</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_line</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_y</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_line</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_y</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_line</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_y</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_line</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>%</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_y</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_line</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_line</name> <operator>+=</operator> <name>i_source_margin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_y</name> <operator>+=</operator> <name>i_dest_margin</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>GREY_YUY2</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_source</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dest</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>, <decl><type ref="prev"/><name>i_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_source_margin</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name>
<operator>-</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dest_margin</name> <init>= <expr><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name>
<operator>-</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</init> <condition><expr><name>i_y</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name>i_source_margin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name>i_dest_margin</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

</unit>
