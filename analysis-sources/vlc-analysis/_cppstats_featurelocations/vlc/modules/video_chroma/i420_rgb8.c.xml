<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_chroma\i420_rgb8.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"i420_rgb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"i420_rgb_c.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SetOffset</name><parameter_list>( <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>




<function><type><name>void</name></type> <name>I420_RGB8</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dest</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_y</name> <init>= <expr><name><name>p_src</name><operator>-&gt;</operator><name>Y_PIXELS</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_u</name> <init>= <expr><name><name>p_src</name><operator>-&gt;</operator><name>U_PIXELS</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_v</name> <init>= <expr><name><name>p_src</name><operator>-&gt;</operator><name>V_PIXELS</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_hscale</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_vscale</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_x</name></decl>, <decl><type ref="prev"/><name>i_y</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_real_y</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_right_margin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_scale_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_chroma_width</name> <init>= <expr><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>p_lookup</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_base</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type> <name>p_offset_start</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type> <name>p_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_source_margin</name> <init>= <expr><name><name>p_src</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>-</operator> <name><name>p_src</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name>
<operator>-</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_source_margin_c</name> <init>= <expr><name><name>p_src</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>-</operator> <name><name>p_src</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name>
<operator>-</operator> <operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>dither10</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0xa</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>dither11</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0xe</literal></expr>, <expr><literal type="number">0x6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>dither12</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0xb</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>dither13</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xf</literal></expr>, <expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0xd</literal></expr>, <expr><literal type="number">0x5</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>dither20</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x14</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>dither21</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0xc</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>dither22</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x12</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>dither23</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xe</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xa</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetOffset</name><argument_list>( <argument><expr><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><name>b_hscale</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_vscale</name></expr></argument>, <argument><expr><name>p_offset_start</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_right_margin</name> <operator>=</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>-</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name>i_scale_count</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>i_vscale</name> <operator>==</operator> <literal type="number">1</literal> <operator>)</operator></expr> ?</condition><then>
<expr><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i_real_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_y</name> <operator>&lt;</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i_y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<expr_stmt><expr><call><name>SCALE_WIDTH_DITHER</name><argument_list>( <argument><expr><literal type="number">420</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SCALE_HEIGHT_DITHER</name><argument_list>( <argument><expr><literal type="number">420</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_y</name> <operator>+=</operator> <name>i_source_margin</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_y</name> <operator>%</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_u</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_v</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type> <name>SetOffset</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pic_width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_pic_height</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_hscale</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_vscale</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_offset</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_scale_count</name></decl>;</decl_stmt> 




<if_stmt><if>if<condition>( <expr><name>i_pic_width</name> <operator>-</operator> <name>i_width</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pb_hscale</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_pic_width</name> <operator>-</operator> <name>i_width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_dummy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><operator>*</operator><name>pb_hscale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_scale_count</name> <operator>=</operator> <name>i_pic_width</name></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <name>i_width</name></expr>;</init> <condition><expr><name>i_x</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<while>while<condition>( <expr><operator>(</operator><name>i_scale_count</name> <operator>-=</operator> <name>i_width</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_offset</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_offset</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>p_offset</name><operator>++</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_offset</name><operator>++</operator> <operator>=</operator> <name>i_dummy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dummy</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>i_dummy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_scale_count</name> <operator>+=</operator> <name>i_pic_width</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_remainder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_jump</name></decl>;</decl_stmt>


<expr_stmt><expr><operator>*</operator><name>pb_hscale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_scale_count</name> <operator>=</operator> <name>i_width</name></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <name>i_pic_width</name></expr>;</init> <condition><expr><name>i_x</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i_jump</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while<condition>( <expr><operator>(</operator><name>i_scale_count</name> <operator>-=</operator> <name>i_pic_width</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_jump</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>p_offset</name><operator>++</operator> <operator>=</operator> <name>i_jump</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_offset</name><operator>++</operator> <operator>=</operator> <operator>(</operator> <name>i_jump</name> <operator>+=</operator> <name>i_remainder</name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_remainder</name> <operator>=</operator> <name>i_jump</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_scale_count</name> <operator>+=</operator> <name>i_width</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if<condition>( <expr><name>i_pic_height</name> <operator>-</operator> <name>i_height</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_vscale</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_pic_height</name> <operator>-</operator> <name>i_height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_vscale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_vscale</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
