<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_chroma\i420_yuy2.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_altivec</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALTIVEC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;altivec.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"i420_yuy2.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC_FOURCC</name></cpp:macro> <cpp:value>"I420,IYUV,YV12"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEST_FOURCC</name></cpp:macro> <cpp:value>"YUY2,YUNV,YVYU,UYVY,UYNV,Y422,IUYV,Y211"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TARGET</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_mmx</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEST_FOURCC</name></cpp:macro> <cpp:value>"YUY2,YUNV,YVYU,UYVY,UYNV,Y422,IUYV"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TARGET</name></cpp:macro> <cpp:value>VLC_MMX</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_sse2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEST_FOURCC</name></cpp:macro> <cpp:value>"YUY2,YUNV,YVYU,UYVY,UYNV,Y422,IUYV"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TARGET</name></cpp:macro> <cpp:value>VLC_SSE</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_altivec</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEST_FOURCC</name></cpp:macro> <cpp:value>"YUY2,YUNV,YVYU,UYVY,UYNV,Y422"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TARGET</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Activate</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>I420_YUY2</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>I420_YVYU</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>I420_UYVY</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>I420_YUY2_Filter</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>I420_YVYU_Filter</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>I420_UYVY_Filter</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_altivec</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>I420_IUYV</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>I420_IUYV_Filter</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>I420_Y211</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>I420_Y211_Filter</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Conversions from "</literal> SRC_FOURCC <literal type="string">" to "</literal> DEST_FOURCC)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video converter"</literal></argument>, <argument><literal type="number">80</literal></argument> )</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_CPU_capable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(true)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_mmx</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"MMX conversions from "</literal> SRC_FOURCC <literal type="string">" to "</literal> DEST_FOURCC)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video converter"</literal></argument>, <argument><literal type="number">160</literal></argument> )</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_CPU_capable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>vlc_CPU_MMX()</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_sse2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"SSE2 conversions from "</literal> SRC_FOURCC <literal type="string">" to "</literal> DEST_FOURCC)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video converter"</literal></argument>, <argument><literal type="number">250</literal></argument> )</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_CPU_capable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>vlc_CPU_SSE2()</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_altivec</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>set_description</name><argument_list>(
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"AltiVec conversions from "</literal> <name>SRC_FOURCC</name> <literal type="string">" to "</literal> <name>DEST_FOURCC</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video converter"</literal></argument>, <argument><literal type="number">250</literal></argument> )</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_CPU_capable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>vlc_CPU_ALTIVEC()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>set_callback</name><argument_list>( <argument>Activate</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>






<function><type><specifier>static</specifier> <name>int</name></type> <name>Activate</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_CPU_capable</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal>
<operator>||</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name>
<operator>||</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name>
<operator>||</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>

<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>
<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_YUYV</name></expr>:</case>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>I420_YUY2_Filter</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_YVYU</name></expr>:</case>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>I420_YVYU_Filter</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_UYVY</name></expr>:</case>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>I420_UYVY_Filter</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_altivec</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'U'</literal></expr></argument>,<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>I420_IUYV_Filter</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>VLC_CODEC_Y211</name></expr>:</case>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>I420_Y211_Filter</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static inline unsigned long long read_cycles(void)
{
unsigned long long v;
__asm__ __volatile__("rdtsc" : "=A" (v): );

return v;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<macro><name>VIDEO_FILTER_WRAPPER</name><argument_list>( <argument>I420_YUY2</argument> )</argument_list></macro>
<macro><name>VIDEO_FILTER_WRAPPER</name><argument_list>( <argument>I420_YVYU</argument> )</argument_list></macro>
<macro><name>VIDEO_FILTER_WRAPPER</name><argument_list>( <argument>I420_UYVY</argument> )</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_altivec</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>VIDEO_FILTER_WRAPPER</name><argument_list>( <argument>I420_IUYV</argument> )</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>VIDEO_FILTER_WRAPPER</name><argument_list>( <argument>I420_Y211</argument> )</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>VLC_TARGET</name>
<specifier>static</specifier> <name>void</name></type> <name>I420_YUY2</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_source</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dest</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_line1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line2</name> <init>= <expr><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_y1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_y2</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>Y_PIXELS</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_u</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>U_PIXELS</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_v</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>V_PIXELS</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>, <decl><type ref="prev"/><name>i_y</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_altivec</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_NEXT_LINES</name><parameter_list>( )</parameter_list></cpp:macro> <cpp:value>p_line1 = p_line2; p_line2 += p_dest-&gt;p-&gt;i_pitch; p_y1 = p_y2; p_y2 += p_source-&gt;p[Y_PLANE].i_pitch;</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_LOAD_UV</name><parameter_list>( )</parameter_list></cpp:macro> <cpp:value>u_vec = vec_ld( 0, p_u ); p_u += 16; v_vec = vec_ld( 0, p_v ); p_v += 16;</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_MERGE</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>uv_vec = a( u_vec, v_vec ); y_vec = vec_ld( 0, p_y1 ); p_y1 += 16; vec_st( vec_mergeh( y_vec, uv_vec ), 0, p_line1 ); p_line1 += 16; vec_st( vec_mergel( y_vec, uv_vec ), 0, p_line1 ); p_line1 += 16; y_vec = vec_ld( 0, p_y2 ); p_y2 += 16; vec_st( vec_mergeh( y_vec, uv_vec ), 0, p_line2 ); p_line2 += 16; vec_st( vec_mergel( y_vec, uv_vec ), 0, p_line2 ); p_line2 += 16;</cpp:value></cpp:define>








<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>u_vec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_vec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>uv_vec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>y_vec</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>%</operator> <literal type="number">32</literal> <operator>)</operator> <operator>|</operator>
<operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i_y</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>VEC_NEXT_LINES</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">32</literal></expr> ;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>VEC_LOAD_UV</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_MERGE</name><argument_list>( <argument><expr><name>vec_mergeh</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_MERGE</name><argument_list>( <argument><expr><name>vec_mergel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if>
<cpp:warning>#<cpp:directive>warning</cpp:directive> FIXME: converting widths % 16 but !widths % 32 is broken on altivec</cpp:warning>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
else if( !( ( (p_filter-&gt;fmt_in.video.i_x_offset + p_filter-&gt;fmt_in.video.i_visible_width) % 16 ) |
( (p_filter-&gt;fmt_in.video.i_y_offset + p_filter-&gt;fmt_in.video.i_visible_height) % 4 ) ) )
{

for( i_y = (p_filter-&gt;fmt_in.video.i_y_offset + p_filter-&gt;fmt_in.video.i_visible_height) / 4 ; i_y-- ; )
{

VEC_NEXT_LINES( );
for( i_x = (p_filter-&gt;fmt_in.video.i_x_offset + p_filter-&gt;fmt_in.video.i_visible_width) / 32 ; i_x-- ; )
{
VEC_LOAD_UV( );
VEC_MERGE( vec_mergeh );
VEC_MERGE( vec_mergel );
}


VEC_LOAD_UV( );
VEC_MERGE( vec_mergeh );


VEC_NEXT_LINES( );
VEC_MERGE( vec_mergel );


for( i_x = (p_filter-&gt;fmt_in.video.i_x_offset + p_filter-&gt;fmt_in.video.i_visible_width) / 32 ; i_x-- ; )
{
VEC_LOAD_UV( );
VEC_MERGE( vec_mergeh );
VEC_MERGE( vec_mergel );
}
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else
<block>{<block_content>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VEC_NEXT_LINES</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VEC_LOAD_UV</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VEC_MERGE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_source_margin</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>-</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name>
<operator>-</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_source_margin_c</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>-</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name>
<operator>-</operator> <operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dest_margin</name> <init>= <expr><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name>
<operator>-</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name>
<operator>-</operator> <operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_sse2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i_y</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p_line1</name> <operator>=</operator> <name>p_line2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_y1</name> <operator>=</operator> <name>p_y2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_mmx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>C_YUV420_YUYV</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C_YUV420_YUYV</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C_YUV420_YUYV</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C_YUV420_YUYV</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>MMX_CALL</name><argument_list>( <argument><expr><name>MMX_YUV420_YUYV</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>%</operator> <literal type="number">8</literal> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>C_YUV420_YUYV</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name>i_source_margin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_u</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_v</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name>i_dest_margin</name></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_mmx</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>MMX_END</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_altivec</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 





<if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>==</operator> <operator>(</operator><literal type="number">15</literal> <operator>&amp;</operator> <operator>(</operator><name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name><operator>|</operator><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name><operator>|</operator>
<operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>p_line2</name><operator>|</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>p_y2</name><operator>)</operator><operator>)</operator><operator>)</operator></expr> )</condition>
<block>{<block_content>

<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i_y</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p_line1</name> <operator>=</operator> <name>p_line2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_y1</name> <operator>=</operator> <name>p_y2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr> ;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>SSE2_CALL</name><argument_list>( <argument><expr><name>SSE2_YUV420_YUYV_ALIGNED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>%</operator> <literal type="number">16</literal> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>C_YUV420_YUYV</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name>i_source_margin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_u</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_v</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name>i_dest_margin</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i_y</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p_line1</name> <operator>=</operator> <name>p_line2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_y1</name> <operator>=</operator> <name>p_y2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr> ;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>SSE2_CALL</name><argument_list>( <argument><expr><name>SSE2_YUV420_YUYV_UNALIGNED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>%</operator> <literal type="number">16</literal> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>C_YUV420_YUYV</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name>i_source_margin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_u</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_v</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name>i_dest_margin</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>SSE2_END</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>




<function><type><name>VLC_TARGET</name>
<specifier>static</specifier> <name>void</name></type> <name>I420_YVYU</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_source</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dest</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_line1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line2</name> <init>= <expr><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_y1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_y2</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>Y_PIXELS</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_u</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>U_PIXELS</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_v</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>V_PIXELS</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>, <decl><type ref="prev"/><name>i_y</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_altivec</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_NEXT_LINES</name><parameter_list>( )</parameter_list></cpp:macro> <cpp:value>p_line1 = p_line2; p_line2 += p_dest-&gt;p-&gt;i_pitch; p_y1 = p_y2; p_y2 += p_source-&gt;p[Y_PLANE].i_pitch;</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_LOAD_UV</name><parameter_list>( )</parameter_list></cpp:macro> <cpp:value>u_vec = vec_ld( 0, p_u ); p_u += 16; v_vec = vec_ld( 0, p_v ); p_v += 16;</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_MERGE</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>vu_vec = a( v_vec, u_vec ); y_vec = vec_ld( 0, p_y1 ); p_y1 += 16; vec_st( vec_mergeh( y_vec, vu_vec ), 0, p_line1 ); p_line1 += 16; vec_st( vec_mergel( y_vec, vu_vec ), 0, p_line1 ); p_line1 += 16; y_vec = vec_ld( 0, p_y2 ); p_y2 += 16; vec_st( vec_mergeh( y_vec, vu_vec ), 0, p_line2 ); p_line2 += 16; vec_st( vec_mergel( y_vec, vu_vec ), 0, p_line2 ); p_line2 += 16;</cpp:value></cpp:define>








<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>u_vec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_vec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>vu_vec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>y_vec</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>%</operator> <literal type="number">32</literal> <operator>)</operator> <operator>|</operator>
<operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i_y</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>VEC_NEXT_LINES</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">32</literal></expr> ;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>VEC_LOAD_UV</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_MERGE</name><argument_list>( <argument><expr><name>vec_mergeh</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_MERGE</name><argument_list>( <argument><expr><name>vec_mergel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><operator>(</operator> <operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>%</operator> <literal type="number">16</literal> <operator>)</operator> <operator>|</operator>
<operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>%</operator> <literal type="number">4</literal> <operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr> ;</init> <condition><expr><name>i_y</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>

<expr_stmt><expr><call><name>VEC_NEXT_LINES</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">32</literal></expr> ;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>VEC_LOAD_UV</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_MERGE</name><argument_list>( <argument><expr><name>vec_mergeh</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_MERGE</name><argument_list>( <argument><expr><name>vec_mergel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>VEC_LOAD_UV</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_MERGE</name><argument_list>( <argument><expr><name>vec_mergeh</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>VEC_NEXT_LINES</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_MERGE</name><argument_list>( <argument><expr><name>vec_mergel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">32</literal></expr> ;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>VEC_LOAD_UV</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_MERGE</name><argument_list>( <argument><expr><name>vec_mergeh</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_MERGE</name><argument_list>( <argument><expr><name>vec_mergel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VEC_NEXT_LINES</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VEC_LOAD_UV</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VEC_MERGE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_source_margin</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>-</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name>
<operator>-</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_source_margin_c</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>-</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name>
<operator>-</operator> <operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dest_margin</name> <init>= <expr><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name>
<operator>-</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name>
<operator>-</operator> <operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_sse2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i_y</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p_line1</name> <operator>=</operator> <name>p_line2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_y1</name> <operator>=</operator> <name>p_y2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr> ;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_mmx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>C_YUV420_YVYU</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C_YUV420_YVYU</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C_YUV420_YVYU</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C_YUV420_YVYU</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>MMX_CALL</name><argument_list>( <argument><expr><name>MMX_YUV420_YVYU</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>%</operator> <literal type="number">8</literal> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>C_YUV420_YVYU</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name>i_source_margin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_u</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_v</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name>i_dest_margin</name></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_mmx</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>MMX_END</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_altivec</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 




<if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>==</operator> <operator>(</operator><literal type="number">15</literal> <operator>&amp;</operator> <operator>(</operator><name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name><operator>|</operator><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name><operator>|</operator>
<operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>p_line2</name><operator>|</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>p_y2</name><operator>)</operator><operator>)</operator><operator>)</operator></expr> )</condition>
<block>{<block_content>

<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i_y</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p_line1</name> <operator>=</operator> <name>p_line2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_y1</name> <operator>=</operator> <name>p_y2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr> ;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>SSE2_CALL</name><argument_list>( <argument><expr><name>SSE2_YUV420_YVYU_ALIGNED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>%</operator> <literal type="number">16</literal> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>C_YUV420_YVYU</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name>i_source_margin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_u</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_v</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name>i_dest_margin</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i_y</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p_line1</name> <operator>=</operator> <name>p_line2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_y1</name> <operator>=</operator> <name>p_y2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr> ;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>SSE2_CALL</name><argument_list>( <argument><expr><name>SSE2_YUV420_YVYU_UNALIGNED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>%</operator> <literal type="number">16</literal> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>C_YUV420_YVYU</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name>i_source_margin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_u</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_v</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name>i_dest_margin</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>SSE2_END</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>




<function><type><name>VLC_TARGET</name>
<specifier>static</specifier> <name>void</name></type> <name>I420_UYVY</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_source</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dest</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_line1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line2</name> <init>= <expr><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_y1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_y2</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>Y_PIXELS</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_u</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>U_PIXELS</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_v</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>V_PIXELS</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>, <decl><type ref="prev"/><name>i_y</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_altivec</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_NEXT_LINES</name><parameter_list>( )</parameter_list></cpp:macro> <cpp:value>p_line1 = p_line2; p_line2 += p_dest-&gt;p-&gt;i_pitch; p_y1 = p_y2; p_y2 += p_source-&gt;p[Y_PLANE].i_pitch;</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_LOAD_UV</name><parameter_list>( )</parameter_list></cpp:macro> <cpp:value>u_vec = vec_ld( 0, p_u ); p_u += 16; v_vec = vec_ld( 0, p_v ); p_v += 16;</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_MERGE</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>uv_vec = a( u_vec, v_vec ); y_vec = vec_ld( 0, p_y1 ); p_y1 += 16; vec_st( vec_mergeh( uv_vec, y_vec ), 0, p_line1 ); p_line1 += 16; vec_st( vec_mergel( uv_vec, y_vec ), 0, p_line1 ); p_line1 += 16; y_vec = vec_ld( 0, p_y2 ); p_y2 += 16; vec_st( vec_mergeh( uv_vec, y_vec ), 0, p_line2 ); p_line2 += 16; vec_st( vec_mergel( uv_vec, y_vec ), 0, p_line2 ); p_line2 += 16;</cpp:value></cpp:define>








<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>u_vec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_vec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>uv_vec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>y_vec</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>%</operator> <literal type="number">32</literal> <operator>)</operator> <operator>|</operator>
<operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i_y</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>VEC_NEXT_LINES</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">32</literal></expr> ;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>VEC_LOAD_UV</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_MERGE</name><argument_list>( <argument><expr><name>vec_mergeh</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_MERGE</name><argument_list>( <argument><expr><name>vec_mergel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><operator>(</operator> <operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>%</operator> <literal type="number">16</literal> <operator>)</operator> <operator>|</operator>
<operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>%</operator> <literal type="number">4</literal> <operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr> ;</init> <condition><expr><name>i_y</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>

<expr_stmt><expr><call><name>VEC_NEXT_LINES</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">32</literal></expr> ;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>VEC_LOAD_UV</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_MERGE</name><argument_list>( <argument><expr><name>vec_mergeh</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_MERGE</name><argument_list>( <argument><expr><name>vec_mergel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>VEC_LOAD_UV</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_MERGE</name><argument_list>( <argument><expr><name>vec_mergeh</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>VEC_NEXT_LINES</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_MERGE</name><argument_list>( <argument><expr><name>vec_mergel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">32</literal></expr> ;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>VEC_LOAD_UV</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_MERGE</name><argument_list>( <argument><expr><name>vec_mergeh</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_MERGE</name><argument_list>( <argument><expr><name>vec_mergel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VEC_NEXT_LINES</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VEC_LOAD_UV</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VEC_MERGE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_source_margin</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>-</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name>
<operator>-</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_source_margin_c</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>-</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name>
<operator>-</operator> <operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dest_margin</name> <init>= <expr><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name>
<operator>-</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name>
<operator>-</operator> <operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_sse2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i_y</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p_line1</name> <operator>=</operator> <name>p_line2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_y1</name> <operator>=</operator> <name>p_y2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr> ;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_mmx</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>C_YUV420_UYVY</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C_YUV420_UYVY</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C_YUV420_UYVY</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C_YUV420_UYVY</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>MMX_CALL</name><argument_list>( <argument><expr><name>MMX_YUV420_UYVY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>%</operator> <literal type="number">8</literal> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i_x</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>C_YUV420_UYVY</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name>i_source_margin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_u</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_v</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name>i_dest_margin</name></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_mmx</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>MMX_END</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_altivec</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 




<if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>==</operator> <operator>(</operator><literal type="number">15</literal> <operator>&amp;</operator> <operator>(</operator><name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name><operator>|</operator><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name><operator>|</operator>
<operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>p_line2</name><operator>|</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>p_y2</name><operator>)</operator><operator>)</operator><operator>)</operator></expr> )</condition>
<block>{<block_content>

<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i_y</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p_line1</name> <operator>=</operator> <name>p_line2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_y1</name> <operator>=</operator> <name>p_y2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr> ;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>SSE2_CALL</name><argument_list>( <argument><expr><name>SSE2_YUV420_UYVY_ALIGNED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>%</operator> <literal type="number">16</literal> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>C_YUV420_UYVY</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name>i_source_margin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_u</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_v</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name>i_dest_margin</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i_y</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p_line1</name> <operator>=</operator> <name>p_line2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_y1</name> <operator>=</operator> <name>p_y2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr> ;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>SSE2_CALL</name><argument_list>( <argument><expr><name>SSE2_YUV420_UYVY_UNALIGNED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>%</operator> <literal type="number">16</literal> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>C_YUV420_UYVY</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name>i_source_margin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_u</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_v</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name>i_dest_margin</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>SSE2_END</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2_altivec</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>void</name></type> <name>I420_IUYV</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_source</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dest</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"I420_IUYV unimplemented, please harass &lt;sam@zoy.org&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MODULE_NAME_IS_i420_yuy2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>I420_Y211</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_source</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dest</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_line1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line2</name> <init>= <expr><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_y1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_y2</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>Y_PIXELS</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_u</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>U_PIXELS</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_v</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>V_PIXELS</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>, <decl><type ref="prev"/><name>i_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_source_margin</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>-</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name>
<operator>-</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_source_margin_c</name> <init>= <expr><name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>-</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name>
<operator>-</operator> <operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dest_margin</name> <init>= <expr><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name>
<operator>-</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name>
<operator>-</operator> <operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i_y</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p_line1</name> <operator>=</operator> <name>p_line2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_y1</name> <operator>=</operator> <name>p_y2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name><name>p_source</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr> ;</init> <condition><expr><name>i_x</name><operator>--</operator></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>C_YUV420_Y211</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>C_YUV420_Y211</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_y2</name> <operator>+=</operator> <name>i_source_margin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_u</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_v</name> <operator>+=</operator> <name>i_source_margin_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line2</name> <operator>+=</operator> <name>i_dest_margin</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
