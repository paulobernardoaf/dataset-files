<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_chroma\d3d9_fmt.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_VIDEOCHROMA_D3D9_FMT_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VIDEOCHROMA_D3D9_FMT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d9.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dxgi_fmt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVAHD_TEXT</name></cpp:macro> <cpp:value>N_("Use DXVA-HD for color conversion")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVAHD_LONGTEXT</name></cpp:macro> <cpp:value>N_("Use DXVA-HD for color conversion")</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>IDirect3DSurface9</name> <modifier>*</modifier></type><name>surface</name></decl>;</decl_stmt>
}</block></struct></type> <name>picture_sys_d3d9_t</name>;</typedef>

<struct>struct <name>d3d9_pic_context</name>
<block>{
<decl_stmt><decl><type><name>picture_context_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_sys_d3d9_t</name></type> <name>picsys</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hdll</name></decl>;</decl_stmt> 
<union>union <block>{
<decl_stmt><decl><type><name>IDirect3D9</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDirect3D9Ex</name> <modifier>*</modifier></type><name>objex</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>bool</name></type> <name>use_ex</name></decl>;</decl_stmt>
}</block></struct></type> <name>d3d9_handle_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<union>union
<block>{
<decl_stmt><decl><type><name>IDirect3DDevice9</name> <modifier>*</modifier></type><name>dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDirect3DDevice9Ex</name> <modifier>*</modifier></type><name>devex</name></decl>;</decl_stmt>
}</block>;</union>


<decl_stmt><decl><type><name>UINT</name></type> <name>adapterId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DCAPS9</name></type> <name>caps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3DADAPTER_IDENTIFIER9</name></type> <name>identifier</name></decl>;</decl_stmt>
}</block></struct></type> <name>d3d9_device_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>d3d9_handle_t</name></type> <name>hd3d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>d3d9_device_t</name></type> <name>d3ddev</name></decl>;</decl_stmt>
}</block></struct></type> <name>d3d9_decoder_device_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>format</name></decl>;</decl_stmt>
}</block></struct></type> <name>d3d9_video_context_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_d3d9_opaque</name><parameter_list>(<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>chroma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>chroma</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_D3D9_OPAQUE</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_D3D9_OPAQUE_10B</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_video_context_operations</name></name></type> <name>d3d9_vctx_ops</name></decl>;</decl_stmt>

<function_decl><type><name>picture_sys_d3d9_t</name> <modifier>*</modifier></type><name>ActiveD3D9PictureSys</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>d3d9_decoder_device_t</name> <modifier>*</modifier></type><name>GetD3D9OpaqueDevice</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>device</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>device</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>VLC_DECODER_DEVICE_DXVA2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>device</name><operator>-&gt;</operator><name>opaque</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>d3d9_decoder_device_t</name> <modifier>*</modifier></type><name>GetD3D9OpaqueContext</name><parameter_list>(<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><ternary><condition><expr><name>vctx</name></expr> ?</condition><then> <expr><call><name>vlc_video_context_HoldDevice</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>device</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VLC_DECODER_DEVICE_DXVA2</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>opaque</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GetD3D9OpaqueDevice</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>d3d9_video_context_t</name> <modifier>*</modifier></type><name>GetD3D9ContextPrivate</name><parameter_list>(<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>d3d9_video_context_t</name> <operator>*</operator><operator>)</operator> <call><name>vlc_video_context_GetPrivate</name><argument_list>( <argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>VLC_VIDEO_CONTEXT_DXVA2</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>AcquireD3D9PictureSys</name><parameter_list>(<parameter><decl><type><name>picture_sys_d3d9_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>IDirect3DSurface9_AddRef</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ReleaseD3D9PictureSys</name><parameter_list>(<parameter><decl><type><name>picture_sys_d3d9_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>IDirect3DSurface9_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type><name>D3D9_CreateDevice</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3D9_CreateDevice</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>D3D9_CreateDevice( VLC_OBJECT(a) )</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>D3D9_ReleaseDevice</name><parameter_list>(<parameter><decl><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>D3D9_ResetDevice</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>d3d9_pic_context_destroy</name><parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>d3d9_pic_context_copy</name><parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
