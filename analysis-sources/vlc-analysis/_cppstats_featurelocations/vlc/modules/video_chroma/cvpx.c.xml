<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_chroma\cvpx.c">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QuartzCore/QuartzCore.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;TargetConditionals.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../codec/vt_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../video_chroma/copy.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open_CVPX_to_CVPX</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close_CVPX_to_CVPX</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>CVPixelBufferPoolRef</name></type> <name>pool</name></decl>;</decl_stmt>
<union>union
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>copy_cache_t</name></type> <name>cache</name></decl>;</decl_stmt>
}</block> <decl><name>sw</name></decl>;</struct>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>
<decl_stmt><decl><type><name>VTPixelTransferSessionRef</name></type> <name>vttransfer</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</union>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument><literal type="string">"Conversions from/to CoreVideo buffers"</literal></argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"video converter"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>
<macro><name>add_submodule</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument><literal type="string">"Conversions between CoreVideo buffers"</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open_CVPX_to_CVPX</argument>, <argument>Close_CVPX_to_CVPX</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>






<function><type><specifier>static</specifier> <name>void</name></type> <name>Copy</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src_planes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>,
<expr><name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>,
<expr><name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>src_pitches</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>,
<expr><name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>,
<expr><name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x(dst, src_planes, src_pitches, height, &amp;p_sys-&gt;sw.cache)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_S</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x(dst, src_planes, src_pitches, height, shift, &amp;p_sys-&gt;sw.cache)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x(dst, src_planes[0], src_pitches[0], height, &amp;p_sys-&gt;sw.cache)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name>infcc</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name>outfcc</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>infcc</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_NV12</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>outfcc</name> <operator>==</operator> <name>VLC_CODEC_NV12</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><name>Copy420_SP_to_SP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>outfcc</name> <operator>==</operator> <name>VLC_CODEC_I420</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><name>Copy420_SP_to_P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_P010</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>outfcc</name> <operator>==</operator> <name>VLC_CODEC_P010</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><name>Copy420_SP_to_SP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_I420_10L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_S</name><argument_list>(<argument><expr><name>Copy420_16_SP_to_P</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>outfcc</name> <operator>==</operator> <name>VLC_CODEC_I420</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><name>Copy420_P_to_P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>outfcc</name> <operator>==</operator> <name>VLC_CODEC_NV12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><name>Copy420_P_to_SP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_I420_10L</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>outfcc</name> <operator>==</operator> <name>VLC_CODEC_P010</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_S</name><argument_list>(<argument><expr><name>Copy420_16_P_to_SP</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_UYVY</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>outfcc</name> <operator>==</operator> <name>VLC_CODEC_UYVY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_P</name><argument_list>(<argument><expr><name>CopyPacked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_BGRA</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>outfcc</name> <operator>==</operator> <name>VLC_CODEC_BGRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_P</name><argument_list>(<argument><expr><name>CopyPacked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO_S</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO_P</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>CVPX_TO_SW_Filter</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CVPixelBufferRef</name></type> <name>cvpx</name> <init>= <expr><call><name>cvpxpic_get_ref</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src_sw</name> <init>=
<expr><call><name>cvpxpic_create_mapped</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>sw</name><operator>.</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>cvpx</name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src_sw</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>filter_NewPicture</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src_sw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>height</name> <init>= <expr><call><name>CVPixelBufferGetHeight</name><argument_list>(<argument><expr><name>cvpx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Copy</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src_sw</name></expr></argument>, <argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src_sw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>SW_TO_CVPX_Filter</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CVPixelBufferRef</name></type> <name>cvpx</name> <init>= <expr><call><name>cvpxpool_new_cvpx</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cvpx</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>mapped_dst</name> <init>=
<expr><call><name>cvpxpic_create_mapped</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>sw</name><operator>.</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>cvpx</name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cvpx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mapped_dst</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>picture_NewFromFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>mapped_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>height</name> <init>= <expr><call><name>CVPixelBufferGetHeight</name><argument_list>(<argument><expr><name>cvpx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Copy</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>mapped_dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>cvpxpic_attach</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>cvpxpic_get_ref</name><argument_list>(<argument><expr><name>mapped_dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>mapped_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pool</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CVPixelBufferPoolRelease</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CopyCleanCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>sw</name><operator>.</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name>
<operator>||</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>sw_fmt</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_CVPX_INPUT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>i420_fcc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case VLC_CODEC_CVPX_##x: sw_fmt = p_filter-&gt;fmt_out.video; if (p_filter-&gt;fmt_out.video.i_chroma == VLC_CODEC_##x) p_filter-&gt;pf_video_filter = CVPX_TO_SW_Filter; else if (i420_fcc != 0 &amp;&amp; p_filter-&gt;fmt_out.video.i_chroma == i420_fcc) { p_filter-&gt;pf_video_filter = CVPX_TO_SW_Filter; sw_fmt.i_chroma = VLC_CODEC_##x; } else return VLC_EGENERIC;</cpp:value></cpp:define> 









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_CVPX_OUTPUT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>i420_fcc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case VLC_CODEC_CVPX_##x: sw_fmt = p_filter-&gt;fmt_in.video; if (p_filter-&gt;fmt_in.video.i_chroma == VLC_CODEC_##x) { p_filter-&gt;pf_video_filter = SW_TO_CVPX_Filter; } else if (i420_fcc != 0 &amp;&amp; p_filter-&gt;fmt_in.video.i_chroma == i420_fcc) { p_filter-&gt;pf_video_filter = SW_TO_CVPX_Filter; sw_fmt.i_chroma = VLC_CODEC_##x; } else return VLC_EGENERIC; b_need_pool = true;</cpp:value></cpp:define>











<decl_stmt><decl><type><name>bool</name></type> <name>b_need_pool</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_cache_pixel_bytes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr>)</condition>
<block>{<block_content>
<macro><name>CASE_CVPX_INPUT</name><argument_list>(<argument>NV12</argument>, <argument>VLC_CODEC_I420</argument>)</argument_list></macro>
<break>break;</break>
<macro><name>CASE_CVPX_INPUT</name><argument_list>(<argument>P010</argument>, <argument>VLC_CODEC_I420_10L</argument>)</argument_list></macro>
<expr_stmt><expr><name>i_cache_pixel_bytes</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<macro><name>CASE_CVPX_INPUT</name><argument_list>(<argument>UYVY</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<break>break;</break>
<macro><name>CASE_CVPX_INPUT</name><argument_list>(<argument>I420</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<break>break;</break>
<macro><name>CASE_CVPX_INPUT</name><argument_list>(<argument>BGRA</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<break>break;</break>
<default>default:</default>
<switch>switch <condition>(<expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr>)</condition>
<block>{<block_content>
<macro><name>CASE_CVPX_OUTPUT</name><argument_list>(<argument>NV12</argument>, <argument>VLC_CODEC_I420</argument>)</argument_list></macro>
<break>break;</break>
<macro><name>CASE_CVPX_OUTPUT</name><argument_list>(<argument>P010</argument>, <argument>VLC_CODEC_I420_10L</argument>)</argument_list></macro>
<expr_stmt><expr><name>i_cache_pixel_bytes</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<macro><name>CASE_CVPX_OUTPUT</name><argument_list>(<argument>UYVY</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<break>break;</break>
<macro><name>CASE_CVPX_OUTPUT</name><argument_list>(<argument>I420</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<break>break;</break>
<macro><name>CASE_CVPX_OUTPUT</name><argument_list>(<argument>BGRA</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filter_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_sys</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sw</name><operator>.</operator><name>fmt</name></name> <operator>=</operator> <name>sw_fmt</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_cache_width</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>*</operator> <name>i_cache_pixel_bytes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>CopyInitCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>sw</name><operator>.</operator><name>cache</name></name></expr></argument>, <argument><expr><name>i_cache_width</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b_need_pool</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_dev</name> <init>=
<expr><call><name>filter_HoldDecoderDeviceType</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>,
<argument><expr><name>VLC_DECODER_DEVICE_VIDEOTOOLBOX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dec_dev</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Missing decoder device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name><name>struct</name> <name>vlc_video_context_operations</name></name></type> <name>vt_vctx_ops</name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name> <operator>=</operator>
<call><name>vlc_video_context_CreateCVPX</name><argument_list>(<argument><expr><name>dec_dev</name></expr></argument>, <argument><expr><name>CVPX_VIDEO_CONTEXT_DEFAULT</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vt_vctx_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <call><name>cvpxpool_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pool</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_in</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>vlc_video_context_GetType</name><argument_list>(<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_VIDEO_CONTEXT_CVPX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CASE_CVPX_INPUT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CASE_CVPX_OUTPUT</name></cpp:undef>
</block_content>}</block></function>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type>
<name>Filter</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CVPixelBufferRef</name></type> <name>src_cvpx</name> <init>= <expr><call><name>cvpxpic_get_ref</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>src_cvpx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>filter_NewPicture</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>CVPixelBufferRef</name></type> <name>dst_cvpx</name> <init>= <expr><call><name>cvpxpool_new_cvpx</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dst_cvpx</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VTPixelTransferSessionTransferImage</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vttransfer</name></name></expr></argument>,
<argument><expr><name>src_cvpx</name></expr></argument>, <argument><expr><name>dst_cvpx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cvpxpic_attach</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_cvpx</name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_fourcc_t</name> <specifier>const</specifier></type> <name><name>supported_chromas</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>VLC_CODEC_CVPX_BGRA</name></expr>,
<expr><name>VLC_CODEC_CVPX_I420</name></expr>,
<expr><name>VLC_CODEC_CVPX_NV12</name></expr>,
<expr><name>VLC_CODEC_CVPX_P010</name></expr>,
<expr><name>VLC_CODEC_CVPX_UYVY</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>Open_CVPX_to_CVPX</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_in</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>vlc_video_context_GetType</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_VIDEO_CONTEXT_CVPX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_CHROMA</name><parameter_list>(<parameter><type><name>fourcc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>i = 0; while (i &lt; ARRAY_SIZE(supported_chromas) &amp;&amp; fourcc != supported_chromas[i]) ++i; if (i == ARRAY_SIZE(supported_chromas)) return VLC_EGENERIC;</cpp:value></cpp:define> 







<macro><name>CHECK_CHROMA</name><argument_list>(<argument>filter-&gt;fmt_in.video.i_chroma</argument>)</argument_list></macro>
<macro><name>CHECK_CHROMA</name><argument_list>(<argument>filter-&gt;fmt_out.video.i_chroma</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_CHROMA</name></cpp:undef>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filter_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VTPixelTransferSessionCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>vttransfer</name></name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>noErr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <call><name>cvpxpool_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>VTPixelTransferSessionInvalidate</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vttransfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vttransfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_out</name></name> <operator>=</operator> <call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>Close_CVPX_to_CVPX</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VTPixelTransferSessionInvalidate</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vttransfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vttransfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CVPixelBufferPoolRelease</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
