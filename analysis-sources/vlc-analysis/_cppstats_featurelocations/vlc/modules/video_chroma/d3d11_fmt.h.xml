<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_chroma\d3d11_fmt.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_VIDEOCHROMA_D3D11_FMT_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_VIDEOCHROMA_D3D11_FMT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d11.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dxgi_fmt.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_CONTEXT_MUTEX</name></expr></argument>, <argument><expr><literal type="number">0x472e8835</literal></expr></argument>, <argument><expr><literal type="number">0x3f8e</literal></expr></argument>, <argument><expr><literal type="number">0x4f93</literal></expr></argument>, <argument><expr><literal type="number">0xa0</literal></expr></argument>, <argument><expr><literal type="number">0xcb</literal></expr></argument>, <argument><expr><literal type="number">0x25</literal></expr></argument>, <argument><expr><literal type="number">0x79</literal></expr></argument>, <argument><expr><literal type="number">0x77</literal></expr></argument>, <argument><expr><literal type="number">0x6c</literal></expr></argument>, <argument><expr><literal type="number">0xed</literal></expr></argument>, <argument><expr><literal type="number">0x86</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<struct>struct <name>wddm_version</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>wddm</name></decl>, <decl><type ref="prev"/><name>d3d_features</name></decl>, <decl><type ref="prev"/><name>revision</name></decl>, <decl><type ref="prev"/><name>build</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>ID3D11Device</name> <modifier>*</modifier></type><name>d3ddevice</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ID3D11DeviceContext</name> <modifier>*</modifier></type><name>d3dcontext</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>mutex_owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>context_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wddm_version</name></name></type> <name>WDDM</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D_FEATURE_LEVEL</name></type> <name>feature_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXGI_ADAPTER_DESC</name></type> <name>adapterDesc</name></decl>;</decl_stmt>
}</block></struct></type> <name>d3d11_device_t</name>;</typedef>


<typedef>typedef <type><struct>struct
<block>{
<union>union <block>{
<decl_stmt><decl><type><name>ID3D11Texture2D</name> <modifier>*</modifier></type><name><name>texture</name><index>[<expr><name>D3D11_MAX_SHADER_VIEW</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID3D11Resource</name> <modifier>*</modifier></type><name><name>resource</name><index>[<expr><name>D3D11_MAX_SHADER_VIEW</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>unsigned</name></type> <name>slice_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID3D11VideoProcessorInputView</name> <modifier>*</modifier></type><name>processorInput</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ID3D11VideoProcessorOutputView</name> <modifier>*</modifier></type><name>processorOutput</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ID3D11ShaderResourceView</name> <modifier>*</modifier></type><name><name>renderSrc</name><index>[<expr><name>D3D11_MAX_SHADER_VIEW</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>picture_sys_d3d11_t</name>;</typedef>

<struct>struct <name>d3d11_pic_context</name>
<block>{
<decl_stmt><decl><type><name>picture_context_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_sys_d3d11_t</name></type> <name>picsys</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>d3d11_device_t</name></type> <name>d3d_dev</name></decl>;</decl_stmt>
}</block></struct></type> <name>d3d11_decoder_device_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>DXGI_FORMAT</name></type> <name>format</name></decl>;</decl_stmt>
}</block></struct></type> <name>d3d11_video_context_t</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KNOWN_DXGI_INDEX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_d3d11_opaque</name><parameter_list>(<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>chroma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>chroma</name> <operator>==</operator> <name>VLC_CODEC_D3D11_OPAQUE</name> <operator>||</operator>
<name>chroma</name> <operator>==</operator> <name>VLC_CODEC_D3D11_OPAQUE_10B</name> <operator>||</operator>
<name>chroma</name> <operator>==</operator> <name>VLC_CODEC_D3D11_OPAQUE_RGBA</name> <operator>||</operator>
<name>chroma</name> <operator>==</operator> <name>VLC_CODEC_D3D11_OPAQUE_BGRA</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_video_context_operations</name></name></type> <name>d3d11_vctx_ops</name></decl>;</decl_stmt>

<function_decl><type><name>picture_sys_d3d11_t</name> <modifier>*</modifier></type><name>ActiveD3D11PictureSys</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>d3d11_decoder_device_t</name> <modifier>*</modifier></type><name>GetD3D11OpaqueDevice</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>device</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>device</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>VLC_DECODER_DEVICE_D3D11VA</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>device</name><operator>-&gt;</operator><name>opaque</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>d3d11_decoder_device_t</name> <modifier>*</modifier></type><name>GetD3D11OpaqueContext</name><parameter_list>(<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><ternary><condition><expr><name>vctx</name></expr> ?</condition><then> <expr><call><name>vlc_video_context_HoldDevice</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>device</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>d3d11_decoder_device_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>device</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VLC_DECODER_DEVICE_D3D11VA</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>opaque</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GetD3D11OpaqueDevice</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>d3d11_video_context_t</name> <modifier>*</modifier></type><name>GetD3D11ContextPrivate</name><parameter_list>(<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>d3d11_video_context_t</name> <operator>*</operator><operator>)</operator> <call><name>vlc_video_context_GetPrivate</name><argument_list>( <argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>VLC_VIDEO_CONTEXT_D3D11VA</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>D3D11CreateVideoContext</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>DXGI_FORMAT</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>AcquireD3D11PictureSys</name><parameter_list>(<parameter><decl><type><name>picture_sys_d3d11_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ReleaseD3D11PictureSys</name><parameter_list>(<parameter><decl><type><name>picture_sys_d3d11_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>D3D11_AllocateResourceView</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ID3D11Device</name> <modifier>*</modifier></type><name>d3ddevice</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><name>ID3D11Texture2D</name> <modifier>*</modifier></type><name><name>p_texture</name><index>[<expr><name>D3D11_MAX_SHADER_VIEW</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>slice_index</name></decl></parameter>,
<parameter><decl><type><name>ID3D11ShaderResourceView</name> <modifier>*</modifier></type><name><name>output</name><index>[<expr><name>D3D11_MAX_SHADER_VIEW</name></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3D11_AllocateResourceView</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>D3D11_AllocateResourceView(VLC_OBJECT(a),b,c,d,e,f)</cpp:value></cpp:define>

<function_decl><type><name>d3d11_decoder_device_t</name> <modifier>*</modifier></type><name>D3D11_CreateDevice</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>IDXGIAdapter</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>hw_decoding</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forced</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3D11_CreateDevice</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>D3D11_CreateDevice( VLC_OBJECT(a), b, c, d )</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>D3D11_ReleaseDevice</name><parameter_list>(<parameter><decl><type><name>d3d11_decoder_device_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>D3D11_LogResources</name><parameter_list>(<parameter><decl><type><name>d3d11_decoder_device_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>isXboxHardware</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>d3d11_device_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>IDXGIAdapter</name> <modifier>*</modifier></type><name>D3D11DeviceAdapter</name><parameter_list>(<parameter><decl><type><name>ID3D11Device</name> <modifier>*</modifier></type><name>d3ddev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>D3D11CheckDriverVersion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>d3d11_device_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>vendorId</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wddm_version</name></name> <modifier>*</modifier></type><name>min_ver</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>DeviceSupportsFormat</name><parameter_list>(<parameter><decl><type><name>ID3D11Device</name> <modifier>*</modifier></type><name>d3ddevice</name></decl></parameter>, <parameter><decl><type><name>DXGI_FORMAT</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>supportFlags</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3D11_RGB_FORMAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3D11_YUV_FORMAT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3D11_CHROMA_CPU</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3D11_CHROMA_GPU</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function_decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>FindD3D11Format</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>d3d11_device_t</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_src_chroma</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>rgb_yuv</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>bits_per_channel</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>widthDenominator</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>heightDenominator</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cpu_gpu</name></decl></parameter>,
<parameter><decl><type><name>UINT</name></type> <name>supportFlags</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FindD3D11Format</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FindD3D11Format(VLC_OBJECT(a),b,c,d,e,f,g,h,i)</cpp:value></cpp:define>


<function_decl><type><name>int</name></type> <name>AllocateTextures</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>pool_size</name></decl></parameter>, <parameter><decl><type><name>ID3D11Texture2D</name> <modifier>*</modifier></type><name><name>textures</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>plane_t</name></type> <name><name>planes</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AllocateTextures</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AllocateTextures(VLC_OBJECT(a),b,c,d,e,f,g)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>d3d11_device_lock</name><parameter_list>(<parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>context_mutex</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>WaitForSingleObjectEx</name><argument_list>( <argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>context_mutex</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>d3d11_device_unlock</name><parameter_list>(<parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>context_mutex</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>( <argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>context_mutex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>d3d11_pic_context_destroy</name><parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>d3d11_pic_context_copy</name><parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>picture_t</name> <modifier>*</modifier></type><name>D3D11_AllocPicture</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
