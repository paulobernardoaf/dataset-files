<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_chroma\yuvp.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>








<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"YUVP converter"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video converter"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Convert_Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Convert</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Yuv2Rgb</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>u1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v1</name></decl></parameter> )</parameter_list>;</function_decl>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_YUVP</name> <operator>||</operator>
<operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_YUVA</name> <operator>&amp;&amp;</operator>
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_RGBA</name> <operator>&amp;&amp;</operator>
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_ARGB</name> <operator>&amp;&amp;</operator>
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_BGRA</name> <operator>)</operator> <operator>||</operator>
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>||</operator>
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>||</operator>
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Convert_Filter</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"YUVP to %4.4s converter"</literal></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<macro><name>VIDEO_FILTER_WRAPPER</name><argument_list>( <argument>Convert</argument> )</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Convert</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_source</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dest</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>video_palette_t</name> <modifier>*</modifier></type><name>p_yuvp</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>p_palette</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_yuvp</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_YUVP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>==</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>==</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_YUVA</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_line</name> <init>= <expr><operator>&amp;</operator><name><name>p_source</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>p_source</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_y</name> <init>= <expr><operator>&amp;</operator><name><name>p_dest</name><operator>-&gt;</operator><name>Y_PIXELS</name><index>[<expr><name>y</name><operator>*</operator><name><name>p_dest</name><operator>-&gt;</operator><name>Y_PITCH</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_u</name> <init>= <expr><operator>&amp;</operator><name><name>p_dest</name><operator>-&gt;</operator><name>U_PIXELS</name><index>[<expr><name>y</name><operator>*</operator><name><name>p_dest</name><operator>-&gt;</operator><name>U_PITCH</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_v</name> <init>= <expr><operator>&amp;</operator><name><name>p_dest</name><operator>-&gt;</operator><name>V_PIXELS</name><index>[<expr><name>y</name><operator>*</operator><name><name>p_dest</name><operator>-&gt;</operator><name>V_PITCH</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_a</name> <init>= <expr><operator>&amp;</operator><name><name>p_dest</name><operator>-&gt;</operator><name>A_PIXELS</name><index>[<expr><name>y</name><operator>*</operator><name><name>p_dest</name><operator>-&gt;</operator><name>A_PITCH</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><name><name>p_line</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>v</name> <operator>&gt;</operator> <name><name>p_yuvp</name><operator>-&gt;</operator><name>i_entries</name></name></expr> )</condition><block type="pseudo"><block_content> 
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_y</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>p_yuvp</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_u</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>p_yuvp</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_v</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>p_yuvp</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>p_yuvp</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>video_palette_t</name></type> <name>rgbp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_ARGB</name></expr>:</case> <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>g</name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_RGBA</name></expr>:</case> <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>g</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>a</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_BGRA</name></expr>:</case> <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>g</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>a</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>rgbp</name><operator>.</operator><name>i_entries</name></name> <operator>=</operator> <name><name>p_yuvp</name><operator>-&gt;</operator><name>i_entries</name></name></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_yuvp</name><operator>-&gt;</operator><name>i_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_yuvp</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>rgbp</name><operator>.</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>rgbp</name><operator>.</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Yuv2Rgb</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>rgbp</name><operator>.</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rgbp</name><operator>.</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rgbp</name><operator>.</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_yuvp</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_yuvp</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_yuvp</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgbp</name><operator>.</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name><name>p_yuvp</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_line</name> <init>= <expr><operator>&amp;</operator><name><name>p_source</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>p_source</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pixels</name> <init>= <expr><operator>&amp;</operator><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>p_dest</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><name><name>p_line</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>v</name> <operator>&gt;=</operator> <name><name>rgbp</name><operator>.</operator><name>i_entries</name></name></expr> )</condition><block type="pseudo"><block_content> 
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_pixels</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rgbp</name><operator>.</operator><name>palette</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pixels</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>rgbp</name><operator>.</operator><name>palette</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pixels</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>rgbp</name><operator>.</operator><name>palette</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pixels</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>rgbp</name><operator>.</operator><name>palette</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>vlc_uint8</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>v</name> <operator>&gt;</operator> <literal type="number">255</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">255</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>Yuv2Rgb</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>u1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v1</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALEBITS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_HALF</name></cpp:macro> <cpp:value>(1 &lt;&lt; (SCALEBITS - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int) ((x) * (1&lt;&lt;SCALEBITS) + 0.5))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>cb</name></decl>, <decl><type ref="prev"/><name>cr</name></decl>, <decl><type ref="prev"/><name>r_add</name></decl>, <decl><type ref="prev"/><name>g_add</name></decl>, <decl><type ref="prev"/><name>b_add</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>u1</name> <operator>-</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cr</name> <operator>=</operator> <name>v1</name> <operator>-</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r_add</name> <operator>=</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">1.40200</literal><operator>*</operator><literal type="number">255.0</literal><operator>/</operator><literal type="number">224.0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>cr</name> <operator>+</operator> <name>ONE_HALF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_add</name> <operator>=</operator> <operator>-</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.34414</literal><operator>*</operator><literal type="number">255.0</literal><operator>/</operator><literal type="number">224.0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>cb</name>
<operator>-</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.71414</literal><operator>*</operator><literal type="number">255.0</literal><operator>/</operator><literal type="number">224.0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>cr</name> <operator>+</operator> <name>ONE_HALF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_add</name> <operator>=</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">1.77200</literal><operator>*</operator><literal type="number">255.0</literal><operator>/</operator><literal type="number">224.0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>cb</name> <operator>+</operator> <name>ONE_HALF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y1</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">255.0</literal><operator>/</operator><literal type="number">219.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <call><name>vlc_uint8</name><argument_list>( <argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <name>r_add</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>SCALEBITS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>g</name> <operator>=</operator> <call><name>vlc_uint8</name><argument_list>( <argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <name>g_add</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>SCALEBITS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <call><name>vlc_uint8</name><argument_list>( <argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <name>b_add</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>SCALEBITS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FIX</name></cpp:undef>
</block_content>}</block></function>
</unit>
