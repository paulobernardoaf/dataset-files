<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_chroma\d3d11_fmt.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_renderer_discoverer.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media_player.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d11.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DXGIDEBUG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initguid.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dxgidebug.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d3d11_fmt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3D11_PICCONTEXT_FROM_PICCTX</name><parameter_list>(<parameter><type><name>pic_ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of((pic_ctx), struct d3d11_pic_context, s)</cpp:value></cpp:define>


<function><type><name>picture_sys_d3d11_t</name> <modifier>*</modifier></type><name>ActiveD3D11PictureSys</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>d3d11_pic_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><call><name>D3D11_PICCONTEXT_FROM_PICCTX</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>picsys</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AcquireD3D11PictureSys</name><parameter_list>(<parameter><decl><type><name>picture_sys_d3d11_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>D3D11_MAX_SHADER_VIEW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>renderSrc</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11ShaderResourceView_AddRef</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>renderSrc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>texture</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11Texture2D_AddRef</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>texture</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>processorInput</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11VideoProcessorInputView_AddRef</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>processorInput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>processorOutput</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11VideoProcessorOutputView_AddRef</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>processorOutput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ReleaseD3D11PictureSys</name><parameter_list>(<parameter><decl><type><name>picture_sys_d3d11_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>D3D11_MAX_SHADER_VIEW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>renderSrc</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11ShaderResourceView_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>renderSrc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>texture</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11Texture2D_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>texture</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>processorInput</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11VideoProcessorInputView_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>processorInput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>processorOutput</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11VideoProcessorOutputView_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>processorOutput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D3D11_AllocateResourceView</name></cpp:undef>
<function><type><name>int</name></type> <name>D3D11_AllocateResourceView</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ID3D11Device</name> <modifier>*</modifier></type><name>d3ddevice</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><name>ID3D11Texture2D</name> <modifier>*</modifier></type><name><name>p_texture</name><index>[<expr><name>D3D11_MAX_SHADER_VIEW</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>slice_index</name></decl></parameter>,
<parameter><decl><type><name>ID3D11ShaderResourceView</name> <modifier>*</modifier></type><name><name>renderSrc</name><index>[<expr><name>D3D11_MAX_SHADER_VIEW</name></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11_SHADER_RESOURCE_VIEW_DESC</name></type> <name>resviewDesc</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>texDesc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ID3D11Texture2D_GetDesc</name><argument_list>(<argument><expr><name><name>p_texture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>texDesc</name><operator>.</operator><name>BindFlags</name></name> <operator>&amp;</operator> <name>D3D11_BIND_SHADER_RESOURCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>texDesc</name><operator>.</operator><name>ArraySize</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>resviewDesc</name><operator>.</operator><name>ViewDimension</name></name> <operator>=</operator> <name>D3D11_SRV_DIMENSION_TEXTURE2D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resviewDesc</name><operator>.</operator><name>Texture2D</name><operator>.</operator><name>MipLevels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>resviewDesc</name><operator>.</operator><name>ViewDimension</name></name> <operator>=</operator> <name>D3D11_SRV_DIMENSION_TEXTURE2DARRAY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resviewDesc</name><operator>.</operator><name>Texture2DArray</name><operator>.</operator><name>MipLevels</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resviewDesc</name><operator>.</operator><name>Texture2DArray</name><operator>.</operator><name>ArraySize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resviewDesc</name><operator>.</operator><name>Texture2DArray</name><operator>.</operator><name>FirstArraySlice</name></name> <operator>=</operator> <name>slice_index</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>slice_index</name> <operator>&lt;</operator> <name><name>texDesc</name><operator>.</operator><name>ArraySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>D3D11_MAX_SHADER_VIEW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>resviewDesc</name><operator>.</operator><name>Format</name></name> <operator>=</operator> <name><name>format</name><operator>-&gt;</operator><name>resourceFormat</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>resviewDesc</name><operator>.</operator><name>Format</name></name> <operator>==</operator> <name>DXGI_FORMAT_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>renderSrc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CreateShaderResourceView</name><argument_list>(<argument><expr><name>d3ddevice</name></expr></argument>, <argument><expr><operator>(</operator><name>ID3D11Resource</name><operator>*</operator><operator>)</operator><name><name>p_texture</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resviewDesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>renderSrc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Could not Create the Texture ResourceView %d slice %d. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>slice_index</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>D3D11_MAX_SHADER_VIEW</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ID3D11ShaderResourceView_Release</name><argument_list>(<argument><expr><name><name>renderSrc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>renderSrc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>HKEY</name></type> <name>GetAdapterRegistry</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>DXGI_ADAPTER_DESC</name> <modifier>*</modifier></type><name>adapterDesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>key</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>szData</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>lookup</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LSTATUS</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_snwprintf</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"pci\\ven_%04x&amp;dev_%04x"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>adapterDesc</name><operator>-&gt;</operator><name>VendorId</name></name></expr></argument>, <argument><expr><name><name>adapterDesc</name><operator>-&gt;</operator><name>DeviceId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>_snwprintf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"SYSTEM\\CurrentControlSet\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\%04d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>KEY_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>ret</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"failed to read the %d Display Adapter registry key (%ld)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>szData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>RegQueryValueEx</name><argument_list>( <argument><expr><name>hKey</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"MatchingDeviceId"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator> <operator>&amp;</operator><name>szData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>ret</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>wcsncmp</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>, <argument><expr><name>szData</name></expr></argument>, <argument><expr><call><name>wcslen</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>hKey</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"different %d device %ls vs %ls"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>lookup</name></expr></argument>, <argument><expr><name>szData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"failed to get the %d MatchingDeviceId (%ld)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>D3D11_GetDriverVersion</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d3d_dev</name><operator>-&gt;</operator><name>WDDM</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>WDDM</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>err</name> <init>= <expr><name>ERROR_ACCESS_DENIED</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>szData</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>szData</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name> <init>= <expr><call><name>GetAdapterRegistry</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d3d_dev</name><operator>-&gt;</operator><name>adapterDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hKey</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"can't find adapter in registry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>RegQueryValueEx</name><argument_list>( <argument><expr><name>hKey</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"DriverVersion"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator> <operator>&amp;</operator><name>szData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"failed to read the adapter DriverVersion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wddm</name></decl>, <decl><type ref="prev"/><name>d3d_features</name></decl>, <decl><type ref="prev"/><name>revision</name></decl>, <decl><type ref="prev"/><name>build</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>swscanf</name><argument_list>(<argument><expr><name>szData</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"%d.%d.%d.%d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>wddm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3d_features</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>revision</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>build</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"the adapter DriverVersion '%ls' doesn't match the expected format"</literal></expr></argument>, <argument><expr><name>szData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>WDDM</name><operator>.</operator><name>wddm</name></name> <operator>=</operator> <name>wddm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>WDDM</name><operator>.</operator><name>d3d_features</name></name> <operator>=</operator> <name>d3d_features</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>WDDM</name><operator>.</operator><name>revision</name></name> <operator>=</operator> <name>revision</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>WDDM</name><operator>.</operator><name>build</name></name> <operator>=</operator> <name>build</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"%s WDDM driver %d.%d.%d.%d"</literal></expr></argument>, <argument><expr><call><name>DxgiVendorStr</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>adapterDesc</name><operator>.</operator><name>VendorId</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wddm</name></expr></argument>, <argument><expr><name>d3d_features</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>build</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>adapterDesc</name><operator>.</operator><name>VendorId</name></name> <operator>==</operator> <name>GPU_MANUFACTURER_INTEL</name> <operator>&amp;&amp;</operator> <name>revision</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>WDDM</name><operator>.</operator><name>build</name></name> <operator>+=</operator> <operator>(</operator><name>revision</name> <operator>-</operator> <literal type="number">100</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<function><type><specifier>static</specifier> <name>void</name></type> <name>D3D11_GetDriverVersion</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>d3d_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><struct>struct
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hdll</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DXGIDEBUG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>dxgidebug_dll</name></decl>;</decl_stmt>
<function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>pf_DXGIGetDebugInterface</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>riid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppDebug</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>d3d11_handle_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_video_output_cleanup_cb</name></type> <name>cleanupDeviceCb</name></decl>;</decl_stmt>
}</block> <decl><name>external</name></decl>;</struct>

<decl_stmt><decl><type><name>d3d11_handle_t</name></type> <name>hd3d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>d3d11_decoder_device_t</name></type> <name>dec_device</name></decl>;</decl_stmt>
}</block></struct></type> <name>d3d11_decoder_device</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>D3D11_Create</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>d3d11_handle_t</name> <modifier>*</modifier></type><name>hd3d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>
<expr_stmt><expr><name><name>hd3d</name><operator>-&gt;</operator><name>hdll</name></name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"D3D11.DLL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hd3d</name><operator>-&gt;</operator><name>hdll</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot load d3d11.dll, aborting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DXGIDEBUG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>hd3d</name><operator>-&gt;</operator><name>dxgidebug_dll</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd3d</name><operator>-&gt;</operator><name>pf_DXGIGetDebugInterface</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IsDebuggerPresent</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hd3d</name><operator>-&gt;</operator><name>dxgidebug_dll</name></name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"DXGIDEBUG.DLL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hd3d</name><operator>-&gt;</operator><name>dxgidebug_dll</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hd3d</name><operator>-&gt;</operator><name>pf_DXGIGetDebugInterface</name></name> <operator>=</operator>
<operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>hd3d</name><operator>-&gt;</operator><name>dxgidebug_dll</name></name></expr></argument>, <argument><expr><literal type="string">"DXGIGetDebugInterface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>hd3d</name><operator>-&gt;</operator><name>pf_DXGIGetDebugInterface</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>hd3d</name><operator>-&gt;</operator><name>dxgidebug_dll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hd3d</name><operator>-&gt;</operator><name>dxgidebug_dll</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>D3D11_Destroy</name><parameter_list>(<parameter><decl><type><name>d3d11_handle_t</name> <modifier>*</modifier></type><name>hd3d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>hd3d</name><operator>-&gt;</operator><name>hdll</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>hd3d</name><operator>-&gt;</operator><name>hdll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DXGIDEBUG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>hd3d</name><operator>-&gt;</operator><name>dxgidebug_dll</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>hd3d</name><operator>-&gt;</operator><name>dxgidebug_dll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>D3D11_ReleaseDevice</name><parameter_list>(<parameter><decl><type><name>d3d11_decoder_device_t</name> <modifier>*</modifier></type><name>dev_sys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>d3d11_decoder_device</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>dev_sys</name></expr></argument>, <argument><expr><name>d3d11_decoder_device</name></expr></argument>, <argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name> <init>= <expr><operator>&amp;</operator><name><name>dev_sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ID3D11DeviceContext_Flush</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ID3D11DeviceContext_Release</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ID3D11Device_Release</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ID3D11VIDEODECODER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>mutex_owner</name></name> <operator>&amp;&amp;</operator> <name><name>d3d_dev</name><operator>-&gt;</operator><name>context_mutex</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>( <argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>context_mutex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>context_mutex</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>external</name><operator>.</operator><name>cleanupDeviceCb</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>sys</name><operator>-&gt;</operator><name>external</name><operator>.</operator><name>cleanupDeviceCb</name></name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>external</name><operator>.</operator><name>opaque</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>D3D11_LogResources</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D3D11_Destroy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>hd3d</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type> <name>D3D11_CreateDeviceExternal</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>ID3D11DeviceContext</name> <modifier>*</modifier></type><name>d3d11ctx</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>hw_decoding</name></decl></parameter>, <parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ID3D11DeviceContext_GetDevice</name><argument_list>( <argument><expr><name>d3d11ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hw_decoding</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>UINT</name></type> <name>creationFlags</name> <init>= <expr><call><name>ID3D11Device_GetCreationFlags</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>creationFlags</name> <operator>&amp;</operator> <name>D3D11_CREATE_DEVICE_VIDEO_SUPPORT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"the provided D3D11 device doesn't support decoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ID3D11Device_Release</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>d3ddevice</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>E_FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IDXGIAdapter</name> <modifier>*</modifier></type><name>pAdapter</name> <init>= <expr><call><name>D3D11DeviceAdapter</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>pAdapter</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"can't get adapter from device %p"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ID3D11Device_Release</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>d3ddevice</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>E_FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXGIAdapter_GetDesc</name><argument_list>(<argument><expr><name>pAdapter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>adapterDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IDXGIAdapter_Release</name><argument_list>(<argument><expr><name>pAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"can't get adapter description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_AddRef</name><argument_list>( <argument><expr><name>d3d11ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>d3dcontext</name></name> <operator>=</operator> <name>d3d11ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>mutex_owner</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>feature_level</name></name> <operator>=</operator> <call><name>ID3D11Device_GetFeatureLevel</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>context_lock</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>dataSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>context_lock</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11DeviceContext_GetPrivateData</name><argument_list>(<argument><expr><name>d3d11ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GUID_CONTEXT_MUTEX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>context_mutex</name></name> <operator>=</operator> <name>context_lock</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>context_mutex</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>D3D11_GetDriverVersion</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type> <name>CreateDevice</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>d3d11_handle_t</name> <modifier>*</modifier></type><name>hd3d</name></decl></parameter>,
<parameter><decl><type><name>IDXGIAdapter</name> <modifier>*</modifier></type><name>adapter</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>hw_decoding</name></decl></parameter>, <parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3D11CreateDevice</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pf_CreateDevice(args)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>PFN_D3D11_CREATE_DEVICE</name></type> <name>pf_CreateDevice</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pf_CreateDevice</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>hd3d</name><operator>-&gt;</operator><name>hdll</name></name></expr></argument>, <argument><expr><literal type="string">"D3D11CreateDevice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pf_CreateDevice</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Cannot locate reference to D3D11CreateDevice ABI in DLL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>E_NOINTERFACE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><name>E_NOTIMPL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>creationFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hw_decoding</name> <operator>||</operator> <operator>!</operator><name><name>obj</name><operator>-&gt;</operator><name>force</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>creationFlags</name> <operator>|=</operator> <name>D3D11_CREATE_DEVICE_VIDEO_SUPPORT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>IsDebuggerPresent</name><argument_list>()</argument_list></call></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<block>{<block_content>
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>sdklayer_dll</name> <init>= <expr><call><name>LoadLibrary</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"d3d11_1sdklayers.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sdklayer_dll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>creationFlags</name> <operator>|=</operator> <name>D3D11_CREATE_DEVICE_DEBUG</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>sdklayer_dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>D3D_DRIVER_TYPE</name></type> <name><name>driverAttempts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>D3D_DRIVER_TYPE_HARDWARE</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
D3D_DRIVER_TYPE_REFERENCE,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>D3D_FEATURE_LEVEL</name></type> <name><name>D3D11_features</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>D3D_FEATURE_LEVEL_11_1</name></expr>, <expr><name>D3D_FEATURE_LEVEL_11_0</name></expr>,
<expr><name>D3D_FEATURE_LEVEL_10_1</name></expr>, <expr><name>D3D_FEATURE_LEVEL_10_0</name></expr>,
<expr><name>D3D_FEATURE_LEVEL_9_3</name></expr>, <expr><name>D3D_FEATURE_LEVEL_9_2</name></expr>, <expr><name>D3D_FEATURE_LEVEL_9_1</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>UINT</name></type> <name>driver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>driver</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name>adapter</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>driverAttempts</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>driver</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>D3D11CreateDevice</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><ternary><condition><expr><name>adapter</name></expr> ?</condition><then> <expr><name>D3D_DRIVER_TYPE_UNKNOWN</name></expr> </then><else>: <expr><name><name>driverAttempts</name><index>[<expr><name>driver</name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>creationFlags</name></expr></argument>,
<argument><expr><name>D3D11_features</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>D3D11_features</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>D3D11_SDK_VERSION</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>feature_level</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Created the D3D11 device type %d level %x."</literal></expr></argument>,
<argument><expr><name><name>driverAttempts</name><index>[<expr><name>driver</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>feature_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>adapter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXGIAdapter_GetDesc</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>adapterDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>IDXGIAdapter</name> <modifier>*</modifier></type><name>adap</name> <init>= <expr><call><name>D3D11DeviceAdapter</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>adap</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <name>E_FAIL</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXGIAdapter_GetDesc</name><argument_list>(<argument><expr><name>adap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>adapterDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IDXGIAdapter_Release</name><argument_list>(<argument><expr><name>adap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"can't get adapter description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>D3D11_GetDriverVersion</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>obj</name><operator>-&gt;</operator><name>force</name></name> <operator>||</operator> <name><name>out</name><operator>-&gt;</operator><name>feature_level</name></name> <operator>&gt;=</operator> <name>D3D_FEATURE_LEVEL_11_0</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Incompatible feature level %x"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>feature_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ID3D11DeviceContext_Release</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ID3D11Device_Release</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>d3dcontext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>d3ddevice</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <name>E_NOTIMPL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>hw_decoding</name> <operator>&amp;&amp;</operator> <call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ID3D11VIDEODECODER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>context_mutex</name></name> <operator>=</operator> <call><name>CreateMutexEx</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SYNCHRONIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ID3D11DeviceContext_SetPrivateData</name><argument_list>( <argument><expr><name><name>out</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GUID_CONTEXT_MUTEX</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>out</name><operator>-&gt;</operator><name>context_mutex</name></name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>context_mutex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>mutex_owner</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>context_mutex</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>hr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>d3d11_decoder_device_t</name> <modifier>*</modifier></type>(<name>D3D11_CreateDevice</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><name>IDXGIAdapter</name> <modifier>*</modifier></type><name>adapter</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>hw_decoding</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forced</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>d3d11_decoder_device</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name><operator>==</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>D3D11_Create</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>hd3d</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_obj_free</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>external</name><operator>.</operator><name>cleanupDeviceCb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><name>E_FAIL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<decl_stmt><decl><type><name>ID3D11DeviceContext</name> <modifier>*</modifier></type><name>d3dcontext</name> <init>= <expr><operator>(</operator><name>ID3D11DeviceContext</name><operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"winrt-d3dcontext"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>d3dcontext</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>D3D11_CreateDeviceExternal</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>d3dcontext</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name><operator>.</operator><name>d3d_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>libvlc_video_engine_t</name></type> <name>engineType</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-type"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_video_output_setup_cb</name></type> <name>setupDeviceCb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>engineType</name> <operator>==</operator> <name>libvlc_video_engine_d3d11</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>setupDeviceCb</name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-setup"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>setupDeviceCb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>external</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-opaque"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>external</name><operator>.</operator><name>cleanupDeviceCb</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-cleanup"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>libvlc_video_setup_device_cfg_t</name></type> <name>cfg</name> <init>= <expr><block>{
<expr><operator>.</operator><name>hardware_decoding</name> <operator>=</operator> <name>true</name></expr>, 
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libvlc_video_setup_device_info_t</name></type> <name>out</name> <init>= <expr><block>{ <expr><operator>.</operator><name><name>d3d11</name><operator>.</operator><name>device_context</name></name> <operator>=</operator> <name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>setupDeviceCb</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>external</name><operator>.</operator><name>opaque</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument> )</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>external</name><operator>.</operator><name>cleanupDeviceCb</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>sys</name><operator>-&gt;</operator><name>external</name><operator>.</operator><name>cleanupDeviceCb</name></name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>external</name><operator>.</operator><name>opaque</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>D3D11_CreateDeviceExternal</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>d3d11</name><operator>.</operator><name>device_context</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name><operator>.</operator><name>d3d_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><name>engineType</name> <operator>==</operator> <name>libvlc_video_engine_disable</name> <operator>||</operator>
<name>engineType</name> <operator>==</operator> <name>libvlc_video_engine_d3d11</name></expr> )</condition>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>forced</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>isWin81OrGreater</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>hKernel32</name> <init>= <expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>hKernel32</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>isWin81OrGreater</name> <operator>=</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hKernel32</name></expr></argument>, <argument><expr><literal type="string">"IsProcessCritical"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isWin81OrGreater</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CreateDevice</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>hd3d</name></name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>hw_decoding</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name><operator>.</operator><name>d3d_dev</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>D3D11_LogResources</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>D3D11_Destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>hd3d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_obj_free</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IDXGIAdapter</name> <modifier>*</modifier></type><name>D3D11DeviceAdapter</name><parameter_list>(<parameter><decl><type><name>ID3D11Device</name> <modifier>*</modifier></type><name>d3ddev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IDXGIDevice</name> <modifier>*</modifier></type><name>pDXGIDevice</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>ID3D11Device_QueryInterface</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IDXGIDevice</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pDXGIDevice</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IDXGIAdapter</name> <modifier>*</modifier></type><name>p_adapter</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXGIDevice_GetAdapter</name><argument_list>(<argument><expr><name>pDXGIDevice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IDXGIDevice_Release</name><argument_list>(<argument><expr><name>pDXGIDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_adapter</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isXboxHardware</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3ddev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d3ddev</name><operator>-&gt;</operator><name>adapterDesc</name><operator>.</operator><name>VendorId</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>d3ddev</name><operator>-&gt;</operator><name>adapterDesc</name><operator>.</operator><name>DeviceId</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>wcscmp</name><argument_list>(<argument><expr><literal type="string">L"ROOT\\SraKmd\\0000"</literal></expr></argument>, <argument><expr><name><name>d3ddev</name><operator>-&gt;</operator><name>adapterDesc</name><operator>.</operator><name>Description</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>D3D11CheckDriverVersion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>vendorId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wddm_version</name></name> <modifier>*</modifier></type><name>min_ver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vendorId</name> <operator>&amp;&amp;</operator> <name><name>d3d_dev</name><operator>-&gt;</operator><name>adapterDesc</name><operator>.</operator><name>VendorId</name></name> <operator>!=</operator> <name>vendorId</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>min_ver</name><operator>-&gt;</operator><name>wddm</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>WDDM</name><operator>.</operator><name>wddm</name></name> <operator>&gt;</operator> <name><name>min_ver</name><operator>-&gt;</operator><name>wddm</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>WDDM</name><operator>.</operator><name>wddm</name></name> <operator>!=</operator> <name><name>min_ver</name><operator>-&gt;</operator><name>wddm</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>min_ver</name><operator>-&gt;</operator><name>d3d_features</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>WDDM</name><operator>.</operator><name>d3d_features</name></name> <operator>&gt;</operator> <name><name>min_ver</name><operator>-&gt;</operator><name>d3d_features</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>WDDM</name><operator>.</operator><name>d3d_features</name></name> <operator>!=</operator> <name><name>min_ver</name><operator>-&gt;</operator><name>d3d_features</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>min_ver</name><operator>-&gt;</operator><name>revision</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>WDDM</name><operator>.</operator><name>revision</name></name> <operator>&gt;</operator> <name><name>min_ver</name><operator>-&gt;</operator><name>revision</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>WDDM</name><operator>.</operator><name>revision</name></name> <operator>!=</operator> <name><name>min_ver</name><operator>-&gt;</operator><name>revision</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>min_ver</name><operator>-&gt;</operator><name>build</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>WDDM</name><operator>.</operator><name>build</name></name> <operator>&gt;</operator> <name><name>min_ver</name><operator>-&gt;</operator><name>build</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>WDDM</name><operator>.</operator><name>build</name></name> <operator>!=</operator> <name><name>min_ver</name><operator>-&gt;</operator><name>build</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>CanReallyUseFormat</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl></parameter>,
<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl></parameter>, <parameter><decl><type><name>DXGI_FORMAT</name></type> <name>dxgi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dxgi</name> <operator>==</operator> <name>DXGI_FORMAT_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name>i_chroma</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ID3D11Texture2D</name> <modifier>*</modifier></type><name>texture</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>texDesc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>texDesc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>texDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>MipLevels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>SampleDesc</name><operator>.</operator><name>Count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>MiscFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>BindFlags</name></name> <operator>=</operator> <name>D3D11_BIND_SHADER_RESOURCE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Usage</name></name> <operator>=</operator> <name>D3D11_USAGE_DYNAMIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>CPUAccessFlags</name></name> <operator>=</operator> <name>D3D11_CPU_ACCESS_WRITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>ArraySize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Format</name></name> <operator>=</operator> <name>dxgi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Height</name></name> <operator>=</operator> <literal type="number">144</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Width</name></name> <operator>=</operator> <literal type="number">176</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>ID3D11Device_CreateTexture2D</name><argument_list>( <argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texDesc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texture</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate a writable texture type %s. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><call><name>DxgiFormatToStr</name><argument_list>(<argument><expr><name>dxgi</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>D3D11_MAPPED_SUBRESOURCE</name></type> <name>mappedResource</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11DeviceContext_Map</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ID3D11Resource</name><operator>*</operator><operator>)</operator><name>texture</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_MAP_WRITE_DISCARD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mappedResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"The texture type %s cannot be mapped. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><call><name>DxgiFormatToStr</name><argument_list>(<argument><expr><name>dxgi</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ID3D11DeviceContext_Unmap</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ID3D11Resource</name><operator>*</operator><operator>)</operator><name>texture</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dxgi</name> <operator>==</operator> <name>DXGI_FORMAT_YUY2</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>p_chroma_desc</name> <init>= <expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>( <argument><expr><name>i_chroma</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_chroma_desc</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"No pixel format for %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mappedResource</name><operator>.</operator><name>RowPitch</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>texDesc</name><operator>.</operator><name>Width</name></name> <operator>*</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>den</name></name> <operator>*</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>pixel_size</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Bogus %4.4s pitch detected type %s. %d should be %d"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i_chroma</name></expr></argument>,
<argument><expr><call><name>DxgiFormatToStr</name><argument_list>(<argument><expr><name>dxgi</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>mappedResource</name><operator>.</operator><name>RowPitch</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>texDesc</name><operator>.</operator><name>Width</name></name> <operator>*</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>den</name></name> <operator>*</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>pixel_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>ID3D11Texture2D_Release</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>DeviceSupportsFormat</name><parameter_list>(<parameter><decl><type><name>ID3D11Device</name> <modifier>*</modifier></type><name>d3ddevice</name></decl></parameter>, <parameter><decl><type><name>DXGI_FORMAT</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>supportFlags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UINT</name></type> <name>i_formatSupport</name></decl>;</decl_stmt>
<return>return <expr><call><name>SUCCEEDED</name><argument_list>( <argument><expr><call><name>ID3D11Device_CheckFormatSupport</name><argument_list>(<argument><expr><name>d3ddevice</name></expr></argument>, <argument><expr><name>format</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_formatSupport</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator> <name>i_formatSupport</name> <operator>&amp;</operator> <name>supportFlags</name> <operator>)</operator> <operator>==</operator> <name>supportFlags</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type>(<name>FindD3D11Format</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl></parameter>,
<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_src_chroma</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>rgb_yuv</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>bits_per_channel</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>widthDenominator</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>heightDenominator</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cpu_gpu</name></decl></parameter>,
<parameter><decl><type><name>UINT</name></type> <name>supportFlags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>supportFlags</name> <operator>|=</operator> <name>D3D11_FORMAT_SUPPORT_TEXTURE2D</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>output_format</name> <init>= <expr><call><name>GetRenderFormatList</name><argument_list>()</argument_list></call></expr></init></decl>;</init>
<condition><expr><name><name>output_format</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>output_format</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i_src_chroma</name> <operator>&amp;&amp;</operator> <name>i_src_chroma</name> <operator>!=</operator> <name><name>output_format</name><operator>-&gt;</operator><name>fourcc</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bits_per_channel</name> <operator>&amp;&amp;</operator> <name>bits_per_channel</name> <operator>&gt;</operator> <name><name>output_format</name><operator>-&gt;</operator><name>bitsPerChannel</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_gpu_fmt</name> <init>= <expr><ternary><condition><expr><call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name><name>output_format</name><operator>-&gt;</operator><name>fourcc</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>D3D11_CHROMA_GPU</name></expr> </then><else>: <expr><name>D3D11_CHROMA_CPU</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cpu_gpu</name> <operator>&amp;</operator> <name>cpu_gpu_fmt</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>format</name> <init>= <expr><ternary><condition><expr><call><name>vlc_fourcc_IsYUV</name><argument_list>(<argument><expr><name><name>output_format</name><operator>-&gt;</operator><name>fourcc</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>D3D11_YUV_FORMAT</name></expr> </then><else>: <expr><name>D3D11_RGB_FORMAT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rgb_yuv</name> <operator>&amp;</operator> <name>format</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>widthDenominator</name> <operator>&amp;&amp;</operator> <name>widthDenominator</name> <operator>&lt;</operator> <name><name>output_format</name><operator>-&gt;</operator><name>widthDenominator</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>heightDenominator</name> <operator>&amp;&amp;</operator> <name>heightDenominator</name> <operator>&lt;</operator> <name><name>output_format</name><operator>-&gt;</operator><name>heightDenominator</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>DXGI_FORMAT</name></type> <name>textureFormat</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>output_format</name><operator>-&gt;</operator><name>formatTexture</name></name> <operator>==</operator> <name>DXGI_FORMAT_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>textureFormat</name> <operator>=</operator> <name><name>output_format</name><operator>-&gt;</operator><name>resourceFormat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>textureFormat</name> <operator>=</operator> <name><name>output_format</name><operator>-&gt;</operator><name>formatTexture</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>DeviceSupportsFormat</name><argument_list>( <argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><name>textureFormat</name></expr></argument>, <argument><expr><name>supportFlags</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>CanReallyUseFormat</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>d3d_dev</name></expr></argument>, <argument><expr><name><name>output_format</name><operator>-&gt;</operator><name>fourcc</name></name></expr></argument>, <argument><expr><name><name>output_format</name><operator>-&gt;</operator><name>formatTexture</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>output_format</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AllocateTextures</name></cpp:undef>
<function><type><name>int</name></type> <name>AllocateTextures</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>pool_size</name></decl></parameter>, <parameter><decl><type><name>ID3D11Texture2D</name> <modifier>*</modifier></type><name><name>textures</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>plane_t</name></type> <name><name>out_planes</name><index>[]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>plane_t</name></type> <name><name>planes</name><index>[<expr><name>PICTURE_PLANE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>plane</name></decl>, <decl><type ref="prev"/><name>plane_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID3D11Texture2D</name> <modifier>*</modifier></type><name>slicedTexture</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>texDesc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>texDesc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>texDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>MipLevels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>SampleDesc</name><operator>.</operator><name>Count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>MiscFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>BindFlags</name></name> <operator>=</operator> <name>D3D11_BIND_SHADER_RESOURCE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>BindFlags</name></name> <operator>|=</operator> <name>D3D11_BIND_DECODER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Usage</name></name> <operator>=</operator> <name>D3D11_USAGE_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>CPUAccessFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Usage</name></name> <operator>=</operator> <name>D3D11_USAGE_DYNAMIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>CPUAccessFlags</name></name> <operator>=</operator> <name>D3D11_CPU_ACCESS_WRITE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>ArraySize</name></name> <operator>=</operator> <name>pool_size</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>p_chroma_desc</name> <init>= <expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_chroma_desc</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>-&gt;</operator><name>formatTexture</name></name> <operator>==</operator> <name>DXGI_FORMAT_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_chroma_desc</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"failed to get the pixel format planes for %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_chroma_desc</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>&lt;=</operator> <name>D3D11_MAX_SHADER_VIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>plane_count</name> <operator>=</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>plane_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Format</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>resourceFormat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>resourceFormat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>cfg</name><operator>-&gt;</operator><name>resourceFormat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>resourceFormat</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>cfg</name><operator>-&gt;</operator><name>resourceFormat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>plane_count</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_chroma_desc</name><operator>-&gt;</operator><name>plane_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Format</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>formatTexture</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Height</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Width</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CreateTexture2D</name><argument_list>( <argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texDesc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slicedTexture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"CreateTexture2D failed for the %d pool. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>pool_size</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>plane_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>i_lines</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name> <operator>*</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>*</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name> <operator>*</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>den</name></name> <operator>*</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>*</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>den</name></name> <operator>*</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name> <operator>=</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>picture_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>picture_count</name> <operator>&lt;</operator> <name>pool_size</name></expr>;</condition> <incr><expr><name>picture_count</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name>plane_count</name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>slicedTexture</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>textures</name><index>[<expr><name>picture_count</name> <operator>*</operator> <name>D3D11_MAX_SHADER_VIEW</name> <operator>+</operator> <name>plane</name></expr>]</index></name> <operator>=</operator> <name>slicedTexture</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ID3D11Texture2D_AddRef</name><argument_list>(<argument><expr><name>slicedTexture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Height</name></name> <operator>=</operator> <name><name>planes</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Width</name></name> <operator>=</operator> <name><name>planes</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CreateTexture2D</name><argument_list>( <argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texDesc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>textures</name><index>[<expr><name>picture_count</name> <operator>*</operator> <name>D3D11_MAX_SHADER_VIEW</name> <operator>+</operator> <name>plane</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"CreateTexture2D failed for the %d pool. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>pool_size</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>out_planes</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>p_chroma_desc</name><operator>-&gt;</operator><name>plane_count</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>out_planes</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name><name>planes</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name>D3D11_MAX_SHADER_VIEW</name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cfg</name><operator>-&gt;</operator><name>resourceFormat</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>textures</name><index>[<expr><name>picture_count</name> <operator>*</operator> <name>D3D11_MAX_SHADER_VIEW</name> <operator>+</operator> <name>plane</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>textures</name><index>[<expr><name>picture_count</name> <operator>*</operator> <name>D3D11_MAX_SHADER_VIEW</name> <operator>+</operator> <name>plane</name></expr>]</index></name> <operator>=</operator> <name><name>textures</name><index>[<expr><name>picture_count</name> <operator>*</operator> <name>D3D11_MAX_SHADER_VIEW</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ID3D11Texture2D_AddRef</name><argument_list>(<argument><expr><name><name>textures</name><index>[<expr><name>picture_count</name> <operator>*</operator> <name>D3D11_MAX_SHADER_VIEW</name> <operator>+</operator> <name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>slicedTexture</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11Texture2D_Release</name><argument_list>(<argument><expr><name>slicedTexture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>slicedTexture</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11Texture2D_Release</name><argument_list>(<argument><expr><name>slicedTexture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>D3D11_LogResources</name><parameter_list>(<parameter><decl><type><name>d3d11_decoder_device_t</name> <modifier>*</modifier></type><name>dev_sys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DXGIDEBUG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>d3d11_decoder_device</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>dev_sys</name></expr></argument>, <argument><expr><name>d3d11_decoder_device</name></expr></argument>, <argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>d3d11_handle_t</name> <modifier>*</modifier></type><name>hd3d</name> <init>= <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>hd3d</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hd3d</name><operator>-&gt;</operator><name>pf_DXGIGetDebugInterface</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>IDXGIDebug</name> <modifier>*</modifier></type><name>pDXGIDebug</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>hd3d</name><operator>-&gt;</operator><name>pf_DXGIGetDebugInterface</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>IID_IDXGIDebug</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pDXGIDebug</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDXGIDebug_ReportLiveObjects</name><argument_list>(<argument><expr><name>pDXGIDebug</name></expr></argument>, <argument><expr><name>DXGI_DEBUG_ALL</name></expr></argument>, <argument><expr><name>DXGI_DEBUG_RLO_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_video_context_operations</name></name></type> <name>d3d11_vctx_ops</name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>D3D11CreateVideoContext</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_dev</name></decl></parameter>, <parameter><decl><type><name>DXGI_FORMAT</name></type> <name>vctx_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name> <init>= <expr><call><name>vlc_video_context_Create</name><argument_list>( <argument><expr><name>dec_dev</name></expr></argument>, <argument><expr><name>VLC_VIDEO_CONTEXT_D3D11VA</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>d3d11_video_context_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3d11_vctx_ops</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>vctx</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>d3d11_video_context_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>GetD3D11ContextPrivate</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>vctx_fmt</name></expr>;</expr_stmt>
<return>return <expr><name>vctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>d3d11_pic_context_destroy</name><parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d3d11_pic_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><call><name>D3D11_PICCONTEXT_FROM_PICCTX</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ReleaseD3D11PictureSys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>picsys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>picture_context_t</name> <modifier>*</modifier></type><name>d3d11_pic_context_copy</name><parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d3d11_pic_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pic_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pic_ctx</name><operator>==</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pic_ctx</name> <operator>=</operator> <operator>*</operator><call><name>D3D11_PICCONTEXT_FROM_PICCTX</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AcquireD3D11PictureSys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>picsys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>s</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>picture_t</name> <modifier>*</modifier></type><name>D3D11_AllocPicture</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>cfg</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>d3d11_pic_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pic_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pic_ctx</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><call><name>picture_NewFromFormat</name><argument_list>( <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pic</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>d3d11_decoder_device_t</name> <modifier>*</modifier></type><name>dev_sys</name> <init>= <expr><call><name>GetD3D11OpaqueContext</name><argument_list>(<argument><expr><name>vctx_out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>AllocateTextures</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dev_sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>,
<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>picsys</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>D3D11_AllocateResourceView</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>dev_sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>.</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>picsys</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>picsys</name><operator>.</operator><name>renderSrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <operator>(</operator><name>picture_context_t</name><operator>)</operator> <block>{
<expr><name>d3d11_pic_context_destroy</name></expr>, <expr><name>d3d11_pic_context_copy</name></expr>,
<expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name>vctx_out</name></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<return>return <expr><name>pic</name></expr>;</return>
</block_content>}</block></function>
</unit>
