<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\textst.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../demux/mpeg/timestamps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"substext.h"</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>palette</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"HDMV TextST subtitles decoder"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_SCODEC</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"spu decoder"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BD_TEXTST_DATA_STRING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BD_TEXTST_DATA_FONT_ID</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BD_TEXTST_DATA_FONT_STYLE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BD_TEXTST_DATA_FONT_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BD_TEXTST_DATA_FONT_COLOR</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BD_TEXTST_DATA_NEWLINE</name></cpp:macro> <cpp:value>0x0a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BD_TEXTST_DATA_RESET_STYLE</name></cpp:macro> <cpp:value>0x0b</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>textst_FillRegion</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>,
<parameter><decl><type><name>substext_updater_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_last</name> <init>= <expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_segments</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>






<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_data</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_data_length</name> <init>= <expr><call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_data</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <name>i_data_length</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_data</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_data</name> <operator>=</operator> <name>i_data_length</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>i_data</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>code</name> <init>= <expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0x1b</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p_data</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i_data</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name> <init>= <expr><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>length</name> <init>= <expr><name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_data</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&gt;</operator> <name>i_data</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>BD_TEXTST_DATA_STRING</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name>strndup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_last</name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>p_style</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pp_last</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pp_last</name><operator>)</operator><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <call><name>text_style_Duplicate</name><argument_list>(<argument><expr><name>p_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>BD_TEXTST_DATA_FONT_ID</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>BD_TEXTST_DATA_FONT_STYLE</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>i_data</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>p_style</name> <operator>||</operator> <operator>(</operator><name>p_style</name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_BOLD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x02</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_ITALIC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_OUTLINE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_outline_color</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00FFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_outline_alpha</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name> <operator>|</operator> <name>STYLE_HAS_OUTLINE_ALPHA</name> <operator>|</operator> <name>STYLE_HAS_OUTLINE_COLOR</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>BD_TEXTST_DATA_FONT_SIZE</name></expr>:</case>



<break>break;</break>
<case>case <expr><name>BD_TEXTST_DATA_FONT_COLOR</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>i_data</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>p_style</name> <operator>||</operator> <operator>(</operator><name>p_style</name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00FFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_alpha</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_ALPHA</name> <operator>|</operator> <name>STYLE_HAS_FONT_COLOR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>BD_TEXTST_DATA_NEWLINE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pp_last</name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BD_TEXTST_DATA_RESET_STYLE</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>p_style</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>(<argument><expr><name>p_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_style</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pp_last</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pp_last</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pp_last</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>p_style</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>(<argument><expr><name>p_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_data_length</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>textst_Decode_palette</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_data</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_size</name> <init>= <expr><call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_data</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name>i_data</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name>i_data</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i_data</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> 
<operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator><literal type="number">1.402f</literal> <operator>*</operator> <operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>|</operator>
<operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator><literal type="number">0.34414</literal> <operator>*</operator> <operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-</operator><literal type="number">128</literal><operator>)</operator> <operator>-</operator><literal type="number">0.71414</literal> <operator>*</operator> <operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator>
<operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator><literal type="number">1.722</literal> <operator>*</operator> <operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>)</operator> <operator>)</operator> <operator>|</operator>
<operator>(</operator> <operator>(</operator><literal type="number">0xFF</literal> <operator>-</operator> <name><name>p_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_data</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>i_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>textst_FillRegions</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>,
<parameter><decl><type><name>substext_updater_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>substext_updater_region_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_last</name> <init>= <expr><operator>&amp;</operator><name>p_region</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>palette_update_flag</name> <init>= <expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_data</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i_data</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>palette_update_flag</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_read</name> <init>= <expr><call><name>textst_Decode_palette</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_read</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_read</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>i_data</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_region_count</name> <init>= <expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_data</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i_data</name><operator>--</operator></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>i</name><argument_list type="generic">&lt;<argument><expr><name>i_region_count</name> <operator>&amp;&amp;</operator> <name>i_data</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pp_last</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_last</name> <operator>=</operator> <call><name>SubpictureUpdaterSysRegionNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>pp_last</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_read</name> <init>= <expr><call><name>textst_FillRegion</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument>, <argument><expr><operator>*</operator><name>pp_last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pp_last</name><operator>)</operator><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pp_last</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pp_last</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_read</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_read</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_sub</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">18</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>p_sub</name> <operator>=</operator> <call><name>decoder_NewSubpictureText</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sub</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <call><name>FROM_SCALE</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <call><name>GetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sub</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <call><name>FROM_SCALE</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <call><name>GetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sub</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&lt;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sub</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>+=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name><name>p_sub</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sub</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>subtext_updater_sys_t</name> <modifier>*</modifier></type><name>p_spusys</name> <init>= <expr><name><name>p_sub</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>textst_FillRegions</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">13</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_spusys</name><operator>-&gt;</operator><name>region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sub</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decoder_QueueSub</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_BD_TEXT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_sys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>Decode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

</unit>
