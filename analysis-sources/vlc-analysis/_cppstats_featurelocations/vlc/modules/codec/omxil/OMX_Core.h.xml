<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\omxil\OMX_Core.h">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OMX_Core_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_Core_h</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OMX_Index.h&gt;</cpp:file></cpp:include>






<typedef>typedef <type><enum>enum <name>OMX_COMMANDTYPE</name>
<block>{
<decl><name>OMX_CommandStateSet</name></decl>, 
<decl><name>OMX_CommandFlush</name></decl>, 
<decl><name>OMX_CommandPortDisable</name></decl>, 
<decl><name>OMX_CommandPortEnable</name></decl>, 
<decl><name>OMX_CommandMarkBuffer</name></decl>, 
<decl><name>OMX_CommandKhronosExtensions</name> <init>= <expr><literal type="number">0x6F000000</literal></expr></init></decl>, 
<decl><name>OMX_CommandVendorStartUnused</name> <init>= <expr><literal type="number">0x7F000000</literal></expr></init></decl>, 
<decl><name>OMX_CommandMax</name> <init>= <expr><literal type="number">0X7FFFFFFF</literal></expr></init></decl>
}</block></enum></type> <name>OMX_COMMANDTYPE</name>;</typedef>
































<typedef>typedef <type><enum>enum <name>OMX_STATETYPE</name>
<block>{
<decl><name>OMX_StateInvalid</name></decl>, 


<decl><name>OMX_StateLoaded</name></decl>, 




<decl><name>OMX_StateIdle</name></decl>, 


<decl><name>OMX_StateExecuting</name></decl>, 

<decl><name>OMX_StatePause</name></decl>, 
<decl><name>OMX_StateWaitForResources</name></decl>, 


<decl><name>OMX_StateKhronosExtensions</name> <init>= <expr><literal type="number">0x6F000000</literal></expr></init></decl>, 
<decl><name>OMX_StateVendorStartUnused</name> <init>= <expr><literal type="number">0x7F000000</literal></expr></init></decl>, 
<decl><name>OMX_StateMax</name> <init>= <expr><literal type="number">0X7FFFFFFF</literal></expr></init></decl>
}</block></enum></type> <name>OMX_STATETYPE</name>;</typedef>











<typedef>typedef <type><enum>enum <name>OMX_ERRORTYPE</name>
<block>{
<decl><name>OMX_ErrorNone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>OMX_ErrorInsufficientResources</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001000</literal></expr></init></decl>,


<decl><name>OMX_ErrorUndefined</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001001</literal></expr></init></decl>,


<decl><name>OMX_ErrorInvalidComponentName</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001002</literal></expr></init></decl>,


<decl><name>OMX_ErrorComponentNotFound</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001003</literal></expr></init></decl>,



<decl><name>OMX_ErrorInvalidComponent</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001004</literal></expr></init></decl>,


<decl><name>OMX_ErrorBadParameter</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001005</literal></expr></init></decl>,


<decl><name>OMX_ErrorNotImplemented</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001006</literal></expr></init></decl>,


<decl><name>OMX_ErrorUnderflow</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001007</literal></expr></init></decl>,


<decl><name>OMX_ErrorOverflow</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001008</literal></expr></init></decl>,


<decl><name>OMX_ErrorHardware</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001009</literal></expr></init></decl>,


<decl><name>OMX_ErrorInvalidState</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x8000100A</literal></expr></init></decl>,


<decl><name>OMX_ErrorStreamCorrupt</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x8000100B</literal></expr></init></decl>,


<decl><name>OMX_ErrorPortsNotCompatible</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x8000100C</literal></expr></init></decl>,



<decl><name>OMX_ErrorResourcesLost</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x8000100D</literal></expr></init></decl>,


<decl><name>OMX_ErrorNoMore</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x8000100E</literal></expr></init></decl>,


<decl><name>OMX_ErrorVersionMismatch</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x8000100F</literal></expr></init></decl>,


<decl><name>OMX_ErrorNotReady</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001010</literal></expr></init></decl>,


<decl><name>OMX_ErrorTimeout</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001011</literal></expr></init></decl>,


<decl><name>OMX_ErrorSameState</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001012</literal></expr></init></decl>,



<decl><name>OMX_ErrorResourcesPreempted</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001013</literal></expr></init></decl>, 





<decl><name>OMX_ErrorPortUnresponsiveDuringAllocation</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001014</literal></expr></init></decl>,





<decl><name>OMX_ErrorPortUnresponsiveDuringDeallocation</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001015</literal></expr></init></decl>,





<decl><name>OMX_ErrorPortUnresponsiveDuringStop</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001016</literal></expr></init></decl>,


<decl><name>OMX_ErrorIncorrectStateTransition</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001017</literal></expr></init></decl>,


<decl><name>OMX_ErrorIncorrectStateOperation</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001018</literal></expr></init></decl>, 


<decl><name>OMX_ErrorUnsupportedSetting</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001019</literal></expr></init></decl>,


<decl><name>OMX_ErrorUnsupportedIndex</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x8000101A</literal></expr></init></decl>,


<decl><name>OMX_ErrorBadPortIndex</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x8000101B</literal></expr></init></decl>,


<decl><name>OMX_ErrorPortUnpopulated</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x8000101C</literal></expr></init></decl>,


<decl><name>OMX_ErrorComponentSuspended</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x8000101D</literal></expr></init></decl>,


<decl><name>OMX_ErrorDynamicResourcesUnavailable</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x8000101E</literal></expr></init></decl>,



<decl><name>OMX_ErrorMbErrorsInFrame</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x8000101F</literal></expr></init></decl>,


<decl><name>OMX_ErrorFormatNotDetected</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001020</literal></expr></init></decl>, 


<decl><name>OMX_ErrorContentPipeOpenFailed</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001021</literal></expr></init></decl>,


<decl><name>OMX_ErrorContentPipeCreationFailed</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001022</literal></expr></init></decl>,


<decl><name>OMX_ErrorSeperateTablesUsed</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001023</literal></expr></init></decl>,


<decl><name>OMX_ErrorTunnelingUnsupported</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator> <literal type="number">0x80001024</literal></expr></init></decl>,

<decl><name>OMX_ErrorKhronosExtensions</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator><literal type="number">0x8F000000</literal></expr></init></decl>, 
<decl><name>OMX_ErrorVendorStartUnused</name> <init>= <expr><operator>(</operator><name>OMX_S32</name><operator>)</operator><literal type="number">0x90000000</literal></expr></init></decl>, 
<decl><name>OMX_ErrorMax</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>
}</block></enum></type> <name>OMX_ERRORTYPE</name>;</typedef>


<typedef>typedef <function_decl><type><name>OMX_ERRORTYPE</name></type> (<modifier>*</modifier> <name>OMX_COMPONENTINITTYPE</name>)<parameter_list>(<parameter><decl><type><name>OMX_IN</name> <name>OMX_HANDLETYPE</name></type> <name>hComponent</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<typedef>typedef <type><struct>struct <name>OMX_COMPONENTREGISTERTYPE</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>pName</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_COMPONENTINITTYPE</name></type> <name>pInitialize</name></decl>;</decl_stmt> 
}</block></struct></type> <name>OMX_COMPONENTREGISTERTYPE</name>;</typedef>


<decl_stmt><decl><type><specifier>extern</specifier> <name>OMX_COMPONENTREGISTERTYPE</name></type> <name><name>OMX_ComponentRegistered</name><index>[]</index></name></decl>;</decl_stmt>


<typedef>typedef <type><struct>struct <name>OMX_PRIORITYMGMTTYPE</name> <block>{
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nSize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_VERSIONTYPE</name></type> <name>nVersion</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nGroupPriority</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nGroupID</name></decl>;</decl_stmt> 
}</block></struct></type> <name>OMX_PRIORITYMGMTTYPE</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_MAX_STRINGNAME_SIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>OMX_PARAM_COMPONENTROLETYPE</name> <block>{
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nSize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_VERSIONTYPE</name></type> <name>nVersion</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_U8</name></type> <name><name>cRole</name><index>[<expr><name>OMX_MAX_STRINGNAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>OMX_PARAM_COMPONENTROLETYPE</name>;</typedef>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_BUFFERFLAG_EOS</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define> 


























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_BUFFERFLAG_STARTTIME</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>






















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_BUFFERFLAG_DECODEONLY</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_BUFFERFLAG_DATACORRUPT</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_BUFFERFLAG_ENDOFFRAME</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_BUFFERFLAG_SYNCFRAME</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_BUFFERFLAG_EXTRADATA</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_BUFFERFLAG_CODECCONFIG</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <name>OMX_BUFFERHEADERTYPE</name>
<block>{
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nSize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_VERSIONTYPE</name></type> <name>nVersion</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_U8</name><modifier>*</modifier></type> <name>pBuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nAllocLen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nFilledLen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nOffset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_PTR</name></type> <name>pAppPrivate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_PTR</name></type> <name>pPlatformPrivate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_PTR</name></type> <name>pInputPortPrivate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_PTR</name></type> <name>pOutputPortPrivate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_HANDLETYPE</name></type> <name>hMarkTargetComponent</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_PTR</name></type> <name>pMarkData</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nTickCount</name></decl>;</decl_stmt> 








<decl_stmt><decl><type><name>OMX_TICKS</name></type> <name>nTimeStamp</name></decl>;</decl_stmt> 






<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nFlags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nOutputPortIndex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nInputPortIndex</name></decl>;</decl_stmt> 

}</block></struct></type> <name>OMX_BUFFERHEADERTYPE</name>;</typedef>







<typedef>typedef <type><enum>enum <name>OMX_EXTRADATATYPE</name>
<block>{
<decl><name>OMX_ExtraDataNone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>OMX_ExtraDataQuantization</name></decl>, 
<decl><name>OMX_ExtraDataKhronosExtensions</name> <init>= <expr><literal type="number">0x6F000000</literal></expr></init></decl>, 
<decl><name>OMX_ExtraDataVendorStartUnused</name> <init>= <expr><literal type="number">0x7F000000</literal></expr></init></decl>, 
<decl><name>OMX_ExtraDataMax</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>
}</block></enum></type> <name>OMX_EXTRADATATYPE</name>;</typedef>


<typedef>typedef <type><struct>struct <name>OMX_OTHER_EXTRADATATYPE</name> <block>{
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_VERSIONTYPE</name></type> <name>nVersion</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nPortIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_EXTRADATATYPE</name></type> <name>eType</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nDataSize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_U8</name></type> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>OMX_OTHER_EXTRADATATYPE</name>;</typedef>


<typedef>typedef <type><struct>struct <name>OMX_PORT_PARAM_TYPE</name> <block>{
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nSize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_VERSIONTYPE</name></type> <name>nVersion</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nPorts</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nStartPortNumber</name></decl>;</decl_stmt> 
}</block></struct></type> <name>OMX_PORT_PARAM_TYPE</name>;</typedef> 


<typedef>typedef <type><enum>enum <name>OMX_EVENTTYPE</name>
<block>{
<decl><name>OMX_EventCmdComplete</name></decl>, 
<decl><name>OMX_EventError</name></decl>, 
<decl><name>OMX_EventMark</name></decl>, 
<decl><name>OMX_EventPortSettingsChanged</name></decl>, 
<decl><name>OMX_EventBufferFlag</name></decl>, 
<decl><name>OMX_EventResourcesAcquired</name></decl>, 


<decl><name>OMX_EventComponentResumed</name></decl>, 
<decl><name>OMX_EventDynamicResourcesAvailable</name></decl>, 
<decl><name>OMX_EventPortFormatDetected</name></decl>, 
<decl><name>OMX_EventKhronosExtensions</name> <init>= <expr><literal type="number">0x6F000000</literal></expr></init></decl>, 
<decl><name>OMX_EventVendorStartUnused</name> <init>= <expr><literal type="number">0x7F000000</literal></expr></init></decl>, 
<decl><name>OMX_EventMax</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>
}</block></enum></type> <name>OMX_EVENTTYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OMX_CALLBACKTYPE</name>
<block>{































<function_decl><type><name>OMX_ERRORTYPE</name></type> (<modifier>*</modifier><name>EventHandler</name>)<parameter_list>(
<parameter><decl><type><name>OMX_IN</name> <name>OMX_HANDLETYPE</name></type> <name>hComponent</name></decl></parameter>,
<parameter><decl><type><name>OMX_IN</name> <name>OMX_PTR</name></type> <name>pAppData</name></decl></parameter>,
<parameter><decl><type><name>OMX_IN</name> <name>OMX_EVENTTYPE</name></type> <name>eEvent</name></decl></parameter>,
<parameter><decl><type><name>OMX_IN</name> <name>OMX_U32</name></type> <name>nData1</name></decl></parameter>,
<parameter><decl><type><name>OMX_IN</name> <name>OMX_U32</name></type> <name>nData2</name></decl></parameter>,
<parameter><decl><type><name>OMX_IN</name> <name>OMX_PTR</name></type> <name>pEventData</name></decl></parameter>)</parameter_list>;</function_decl>























<function_decl><type><name>OMX_ERRORTYPE</name></type> (<modifier>*</modifier><name>EmptyBufferDone</name>)<parameter_list>(
<parameter><decl><type><name>OMX_IN</name> <name>OMX_HANDLETYPE</name></type> <name>hComponent</name></decl></parameter>,
<parameter><decl><type><name>OMX_IN</name> <name>OMX_PTR</name></type> <name>pAppData</name></decl></parameter>,
<parameter><decl><type><name>OMX_IN</name> <name>OMX_BUFFERHEADERTYPE</name><modifier>*</modifier></type> <name>pBuffer</name></decl></parameter>)</parameter_list>;</function_decl>

























<function_decl><type><name>OMX_ERRORTYPE</name></type> (<modifier>*</modifier><name>FillBufferDone</name>)<parameter_list>(
<parameter><decl><type><name>OMX_OUT</name> <name>OMX_HANDLETYPE</name></type> <name>hComponent</name></decl></parameter>,
<parameter><decl><type><name>OMX_OUT</name> <name>OMX_PTR</name></type> <name>pAppData</name></decl></parameter>,
<parameter><decl><type><name>OMX_OUT</name> <name>OMX_BUFFERHEADERTYPE</name><modifier>*</modifier></type> <name>pBuffer</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>OMX_CALLBACKTYPE</name>;</typedef>





<typedef>typedef <type><enum>enum <name>OMX_BUFFERSUPPLIERTYPE</name>
<block>{
<decl><name>OMX_BufferSupplyUnspecified</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>, 

<decl><name>OMX_BufferSupplyInput</name></decl>, 
<decl><name>OMX_BufferSupplyOutput</name></decl>, 
<decl><name>OMX_BufferSupplyKhronosExtensions</name> <init>= <expr><literal type="number">0x6F000000</literal></expr></init></decl>, 
<decl><name>OMX_BufferSupplyVendorStartUnused</name> <init>= <expr><literal type="number">0x7F000000</literal></expr></init></decl>, 
<decl><name>OMX_BufferSupplyMax</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>
}</block></enum></type> <name>OMX_BUFFERSUPPLIERTYPE</name>;</typedef>





<typedef>typedef <type><struct>struct <name>OMX_PARAM_BUFFERSUPPLIERTYPE</name> <block>{
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nSize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_VERSIONTYPE</name></type> <name>nVersion</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nPortIndex</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_BUFFERSUPPLIERTYPE</name></type> <name>eBufferSupplier</name></decl>;</decl_stmt> 
}</block></struct></type> <name>OMX_PARAM_BUFFERSUPPLIERTYPE</name>;</typedef>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_PORTTUNNELFLAG_READONLY</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define> 







<typedef>typedef <type><struct>struct <name>OMX_TUNNELSETUPTYPE</name>
<block>{
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nTunnelFlags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_BUFFERSUPPLIERTYPE</name></type> <name>eSupplier</name></decl>;</decl_stmt> 
}</block></struct></type> <name>OMX_TUNNELSETUPTYPE</name>;</typedef> 












































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_GetComponentVersion</name><parameter_list>( <parameter><type><name>hComponent</name></type></parameter>, <parameter><type><name>pComponentName</name></type></parameter>, <parameter><type><name>pComponentVersion</name></type></parameter>, <parameter><type><name>pSpecVersion</name></type></parameter>, <parameter><type><name>pComponentUUID</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((OMX_COMPONENTTYPE*)hComponent)-&gt;GetComponentVersion( hComponent, pComponentName, pComponentVersion, pSpecVersion, pComponentUUID)</cpp:value></cpp:define> 




























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_SendCommand</name><parameter_list>( <parameter><type><name>hComponent</name></type></parameter>, <parameter><type><name>Cmd</name></type></parameter>, <parameter><type><name>nParam</name></type></parameter>, <parameter><type><name>pCmdData</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((OMX_COMPONENTTYPE*)hComponent)-&gt;SendCommand( hComponent, Cmd, nParam, pCmdData)</cpp:value></cpp:define> 








































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_GetParameter</name><parameter_list>( <parameter><type><name>hComponent</name></type></parameter>, <parameter><type><name>nParamIndex</name></type></parameter>, <parameter><type><name>pComponentParameterStructure</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((OMX_COMPONENTTYPE*)hComponent)-&gt;GetParameter( hComponent, nParamIndex, pComponentParameterStructure)</cpp:value></cpp:define> 






































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_SetParameter</name><parameter_list>( <parameter><type><name>hComponent</name></type></parameter>, <parameter><type><name>nParamIndex</name></type></parameter>, <parameter><type><name>pComponentParameterStructure</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((OMX_COMPONENTTYPE*)hComponent)-&gt;SetParameter( hComponent, nParamIndex, pComponentParameterStructure)</cpp:value></cpp:define> 



































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_GetConfig</name><parameter_list>( <parameter><type><name>hComponent</name></type></parameter>, <parameter><type><name>nConfigIndex</name></type></parameter>, <parameter><type><name>pComponentConfigStructure</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((OMX_COMPONENTTYPE*)hComponent)-&gt;GetConfig( hComponent, nConfigIndex, pComponentConfigStructure)</cpp:value></cpp:define> 



































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_SetConfig</name><parameter_list>( <parameter><type><name>hComponent</name></type></parameter>, <parameter><type><name>nConfigIndex</name></type></parameter>, <parameter><type><name>pComponentConfigStructure</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((OMX_COMPONENTTYPE*)hComponent)-&gt;SetConfig( hComponent, nConfigIndex, pComponentConfigStructure)</cpp:value></cpp:define> 

































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_GetExtensionIndex</name><parameter_list>( <parameter><type><name>hComponent</name></type></parameter>, <parameter><type><name>cParameterName</name></type></parameter>, <parameter><type><name>pIndexType</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((OMX_COMPONENTTYPE*)hComponent)-&gt;GetExtensionIndex( hComponent, cParameterName, pIndexType)</cpp:value></cpp:define> 


























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_GetState</name><parameter_list>( <parameter><type><name>hComponent</name></type></parameter>, <parameter><type><name>pState</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((OMX_COMPONENTTYPE*)hComponent)-&gt;GetState( hComponent, pState)</cpp:value></cpp:define> 


























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_UseBuffer</name><parameter_list>( <parameter><type><name>hComponent</name></type></parameter>, <parameter><type><name>ppBufferHdr</name></type></parameter>, <parameter><type><name>nPortIndex</name></type></parameter>, <parameter><type><name>pAppPrivate</name></type></parameter>, <parameter><type><name>nSizeBytes</name></type></parameter>, <parameter><type><name>pBuffer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((OMX_COMPONENTTYPE*)hComponent)-&gt;UseBuffer( hComponent, ppBufferHdr, nPortIndex, pAppPrivate, nSizeBytes, pBuffer)</cpp:value></cpp:define>










































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_AllocateBuffer</name><parameter_list>( <parameter><type><name>hComponent</name></type></parameter>, <parameter><type><name>ppBuffer</name></type></parameter>, <parameter><type><name>nPortIndex</name></type></parameter>, <parameter><type><name>pAppPrivate</name></type></parameter>, <parameter><type><name>nSizeBytes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((OMX_COMPONENTTYPE*)hComponent)-&gt;AllocateBuffer( hComponent, ppBuffer, nPortIndex, pAppPrivate, nSizeBytes)</cpp:value></cpp:define> 



































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_FreeBuffer</name><parameter_list>( <parameter><type><name>hComponent</name></type></parameter>, <parameter><type><name>nPortIndex</name></type></parameter>, <parameter><type><name>pBuffer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((OMX_COMPONENTTYPE*)hComponent)-&gt;FreeBuffer( hComponent, nPortIndex, pBuffer)</cpp:value></cpp:define> 































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_EmptyThisBuffer</name><parameter_list>( <parameter><type><name>hComponent</name></type></parameter>, <parameter><type><name>pBuffer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((OMX_COMPONENTTYPE*)hComponent)-&gt;EmptyThisBuffer( hComponent, pBuffer)</cpp:value></cpp:define> 





























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_FillThisBuffer</name><parameter_list>( <parameter><type><name>hComponent</name></type></parameter>, <parameter><type><name>pBuffer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((OMX_COMPONENTTYPE*)hComponent)-&gt;FillThisBuffer( hComponent, pBuffer)</cpp:value></cpp:define> 






































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_UseEGLImage</name><parameter_list>( <parameter><type><name>hComponent</name></type></parameter>, <parameter><type><name>ppBufferHdr</name></type></parameter>, <parameter><type><name>nPortIndex</name></type></parameter>, <parameter><type><name>pAppPrivate</name></type></parameter>, <parameter><type><name>eglImage</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((OMX_COMPONENTTYPE*)hComponent)-&gt;UseEGLImage( hComponent, ppBufferHdr, nPortIndex, pAppPrivate, eglImage)</cpp:value></cpp:define>























<function_decl><type><name>OMX_API</name> <name>OMX_ERRORTYPE</name> <name>OMX_APIENTRY</name></type> <name>OMX_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>OMX_API</name> <name>OMX_ERRORTYPE</name> <name>OMX_APIENTRY</name></type> <name>OMX_Deinit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







































<function_decl><type><name>OMX_API</name> <name>OMX_ERRORTYPE</name> <name>OMX_APIENTRY</name></type> <name>OMX_ComponentNameEnum</name><parameter_list>(
<parameter><decl><type><name>OMX_OUT</name> <name>OMX_STRING</name></type> <name>cComponentName</name></decl></parameter>,
<parameter><decl><type><name>OMX_IN</name> <name>OMX_U32</name></type> <name>nNameLength</name></decl></parameter>,
<parameter><decl><type><name>OMX_IN</name> <name>OMX_U32</name></type> <name>nIndex</name></decl></parameter>)</parameter_list>;</function_decl>





























<function_decl><type><name>OMX_API</name> <name>OMX_ERRORTYPE</name> <name>OMX_APIENTRY</name></type> <name>OMX_GetHandle</name><parameter_list>(
<parameter><decl><type><name>OMX_OUT</name> <name>OMX_HANDLETYPE</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, 
<parameter><decl><type><name>OMX_IN</name> <name>OMX_STRING</name></type> <name>cComponentName</name></decl></parameter>,
<parameter><decl><type><name>OMX_IN</name> <name>OMX_PTR</name></type> <name>pAppData</name></decl></parameter>,
<parameter><decl><type><name>OMX_IN</name> <name>OMX_CALLBACKTYPE</name><modifier>*</modifier></type> <name>pCallBacks</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>OMX_API</name> <name>OMX_ERRORTYPE</name> <name>OMX_APIENTRY</name></type> <name>OMX_FreeHandle</name><parameter_list>(
<parameter><decl><type><name>OMX_IN</name> <name>OMX_HANDLETYPE</name></type> <name>hComponent</name></decl></parameter>)</parameter_list>;</function_decl>



















































<function_decl><type><name>OMX_API</name> <name>OMX_ERRORTYPE</name> <name>OMX_APIENTRY</name></type> <name>OMX_SetupTunnel</name><parameter_list>(
<parameter><decl><type><name>OMX_IN</name> <name>OMX_HANDLETYPE</name></type> <name>hOutput</name></decl></parameter>,
<parameter><decl><type><name>OMX_IN</name> <name>OMX_U32</name></type> <name>nPortOutput</name></decl></parameter>,
<parameter><decl><type><name>OMX_IN</name> <name>OMX_HANDLETYPE</name></type> <name>hInput</name></decl></parameter>,
<parameter><decl><type><name>OMX_IN</name> <name>OMX_U32</name></type> <name>nPortInput</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>OMX_API</name> <name>OMX_ERRORTYPE</name></type> <name>OMX_GetContentPipe</name><parameter_list>(
<parameter><decl><type><name>OMX_OUT</name> <name>OMX_HANDLETYPE</name> <modifier>*</modifier></type><name>hPipe</name></decl></parameter>,
<parameter><decl><type><name>OMX_IN</name> <name>OMX_STRING</name></type> <name>szURI</name></decl></parameter>)</parameter_list>;</function_decl>




























<function_decl><type><name>OMX_API</name> <name>OMX_ERRORTYPE</name></type> <name>OMX_GetComponentsOfRole</name> <parameter_list>( 
<parameter><decl><type><name>OMX_IN</name> <name>OMX_STRING</name></type> <name>role</name></decl></parameter>,
<parameter><decl><type><name>OMX_INOUT</name> <name>OMX_U32</name> <modifier>*</modifier></type><name>pNumComps</name></decl></parameter>,
<parameter><decl><type><name>OMX_INOUT</name> <name>OMX_U8</name> <modifier>*</modifier><modifier>*</modifier></type><name>compNames</name></decl></parameter>)</parameter_list>;</function_decl>


























<function_decl><type><name>OMX_API</name> <name>OMX_ERRORTYPE</name></type> <name>OMX_GetRolesOfComponent</name> <parameter_list>( 
<parameter><decl><type><name>OMX_IN</name> <name>OMX_STRING</name></type> <name>compName</name></decl></parameter>, 
<parameter><decl><type><name>OMX_INOUT</name> <name>OMX_U32</name> <modifier>*</modifier></type><name>pNumRoles</name></decl></parameter>,
<parameter><decl><type><name>OMX_OUT</name> <name>OMX_U8</name> <modifier>*</modifier><modifier>*</modifier></type><name>roles</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


</unit>
