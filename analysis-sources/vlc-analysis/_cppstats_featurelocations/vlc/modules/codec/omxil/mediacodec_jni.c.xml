<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\omxil\mediacodec_jni.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OMX_Core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OMX_Component.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"omxil_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/hevc_nal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mediacodec.h"</cpp:file></cpp:include>

<function_decl><type><name>char</name><modifier>*</modifier></type> <name>MediaCodec_GetName</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mime</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>profile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_quirks</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_NAME</name></cpp:macro> <cpp:value>"mediacodec_jni"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_FLAG_CODEC_CONFIG</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_FLAG_END_OF_STREAM</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_OUTPUT_BUFFERS_CHANGED</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_OUTPUT_FORMAT_CHANGED</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_TRY_AGAIN_LATER</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>





<struct>struct <name>jfields</name>
<block>{
<decl_stmt><decl><type><name>jclass</name></type> <name>media_codec_list_class</name></decl>, <decl><type ref="prev"/><name>media_codec_class</name></decl>, <decl><type ref="prev"/><name>media_format_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jclass</name></type> <name>buffer_info_class</name></decl>, <decl><type ref="prev"/><name>byte_buffer_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>tostring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_codec_count</name></decl>, <decl><type ref="prev"/><name>get_codec_info_at</name></decl>, <decl><type ref="prev"/><name>is_encoder</name></decl>, <decl><type ref="prev"/><name>get_capabilities_for_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>is_feature_supported</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>profile_levels_field</name></decl>, <decl><type ref="prev"/><name>profile_field</name></decl>, <decl><type ref="prev"/><name>level_field</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_supported_types</name></decl>, <decl><type ref="prev"/><name>get_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>create_by_codec_name</name></decl>, <decl><type ref="prev"/><name>configure</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>stop</name></decl>, <decl><type ref="prev"/><name>flush</name></decl>, <decl><type ref="prev"/><name>release</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_output_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_input_buffers</name></decl>, <decl><type ref="prev"/><name>get_input_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_output_buffers</name></decl>, <decl><type ref="prev"/><name>get_output_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>dequeue_input_buffer</name></decl>, <decl><type ref="prev"/><name>dequeue_output_buffer</name></decl>, <decl><type ref="prev"/><name>queue_input_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>release_output_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>create_video_format</name></decl>, <decl><type ref="prev"/><name>create_audio_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>set_integer</name></decl>, <decl><type ref="prev"/><name>set_bytebuffer</name></decl>, <decl><type ref="prev"/><name>get_integer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>buffer_info_ctor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>size_field</name></decl>, <decl><type ref="prev"/><name>offset_field</name></decl>, <decl><type ref="prev"/><name>pts_field</name></decl>, <decl><type ref="prev"/><name>flags_field</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>jfields</name></name></type> <name>jfields</name></decl>;</decl_stmt>

<enum>enum <name>Types</name>
<block>{
<decl><name>METHOD</name></decl>, <decl><name>STATIC_METHOD</name></decl>, <decl><name>FIELD</name></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(struct jfields, x)</cpp:value></cpp:define>
<struct>struct <name>classname</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>classname</name></name></type> <name><name>classes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecList"</literal></expr>, <macro><name>OFF</name><argument_list>(<argument>media_codec_list_class</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <macro><name>OFF</name><argument_list>(<argument>media_codec_class</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <macro><name>OFF</name><argument_list>(<argument>media_format_class</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <macro><name>OFF</name><argument_list>(<argument>media_format_class</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec$BufferInfo"</literal></expr>, <macro><name>OFF</name><argument_list>(<argument>buffer_info_class</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"java/nio/ByteBuffer"</literal></expr>, <macro><name>OFF</name><argument_list>(<argument>byte_buffer_class</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>member</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>critical</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>member</name></name></type> <name><name>members</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"toString"</literal></expr>, <expr><literal type="string">"()Ljava/lang/String;"</literal></expr>, <expr><literal type="string">"java/lang/Object"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>tostring</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"getCodecCount"</literal></expr>, <expr><literal type="string">"()I"</literal></expr>, <expr><literal type="string">"android/media/MediaCodecList"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>get_codec_count</name></expr></argument>)</argument_list></call></expr>, <expr><name>STATIC_METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"getCodecInfoAt"</literal></expr>, <expr><literal type="string">"(I)Landroid/media/MediaCodecInfo;"</literal></expr>, <expr><literal type="string">"android/media/MediaCodecList"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>get_codec_info_at</name></expr></argument>)</argument_list></call></expr>, <expr><name>STATIC_METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"isEncoder"</literal></expr>, <expr><literal type="string">"()Z"</literal></expr>, <expr><literal type="string">"android/media/MediaCodecInfo"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>is_encoder</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"getSupportedTypes"</literal></expr>, <expr><literal type="string">"()[Ljava/lang/String;"</literal></expr>, <expr><literal type="string">"android/media/MediaCodecInfo"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>get_supported_types</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"getName"</literal></expr>, <expr><literal type="string">"()Ljava/lang/String;"</literal></expr>, <expr><literal type="string">"android/media/MediaCodecInfo"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>get_name</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"getCapabilitiesForType"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;)Landroid/media/MediaCodecInfo$CodecCapabilities;"</literal></expr>, <expr><literal type="string">"android/media/MediaCodecInfo"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>get_capabilities_for_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"isFeatureSupported"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;)Z"</literal></expr>, <expr><literal type="string">"android/media/MediaCodecInfo$CodecCapabilities"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>is_feature_supported</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"profileLevels"</literal></expr>, <expr><literal type="string">"[Landroid/media/MediaCodecInfo$CodecProfileLevel;"</literal></expr>, <expr><literal type="string">"android/media/MediaCodecInfo$CodecCapabilities"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>profile_levels_field</name></expr></argument>)</argument_list></call></expr>, <expr><name>FIELD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"profile"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><literal type="string">"android/media/MediaCodecInfo$CodecProfileLevel"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>profile_field</name></expr></argument>)</argument_list></call></expr>, <expr><name>FIELD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"level"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><literal type="string">"android/media/MediaCodecInfo$CodecProfileLevel"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>level_field</name></expr></argument>)</argument_list></call></expr>, <expr><name>FIELD</name></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"createByCodecName"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;)Landroid/media/MediaCodec;"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>create_by_codec_name</name></expr></argument>)</argument_list></call></expr>, <expr><name>STATIC_METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"configure"</literal></expr>, <expr><literal type="string">"(Landroid/media/MediaFormat;Landroid/view/Surface;Landroid/media/MediaCrypto;I)V"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>configure</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"start"</literal></expr>, <expr><literal type="string">"()V"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stop"</literal></expr>, <expr><literal type="string">"()V"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>stop</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"flush"</literal></expr>, <expr><literal type="string">"()V"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"release"</literal></expr>, <expr><literal type="string">"()V"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>release</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"getOutputFormat"</literal></expr>, <expr><literal type="string">"()Landroid/media/MediaFormat;"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>get_output_format</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"getInputBuffers"</literal></expr>, <expr><literal type="string">"()[Ljava/nio/ByteBuffer;"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>get_input_buffers</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"getInputBuffer"</literal></expr>, <expr><literal type="string">"(I)Ljava/nio/ByteBuffer;"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>get_input_buffer</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"getOutputBuffers"</literal></expr>, <expr><literal type="string">"()[Ljava/nio/ByteBuffer;"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>get_output_buffers</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"getOutputBuffer"</literal></expr>, <expr><literal type="string">"(I)Ljava/nio/ByteBuffer;"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>get_output_buffer</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dequeueInputBuffer"</literal></expr>, <expr><literal type="string">"(J)I"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>dequeue_input_buffer</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dequeueOutputBuffer"</literal></expr>, <expr><literal type="string">"(Landroid/media/MediaCodec$BufferInfo;J)I"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>dequeue_output_buffer</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"queueInputBuffer"</literal></expr>, <expr><literal type="string">"(IIIJI)V"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>queue_input_buffer</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"releaseOutputBuffer"</literal></expr>, <expr><literal type="string">"(IZ)V"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>release_output_buffer</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"createVideoFormat"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;II)Landroid/media/MediaFormat;"</literal></expr>, <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>create_video_format</name></expr></argument>)</argument_list></call></expr>, <expr><name>STATIC_METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"createAudioFormat"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;II)Landroid/media/MediaFormat;"</literal></expr>, <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>create_audio_format</name></expr></argument>)</argument_list></call></expr>, <expr><name>STATIC_METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"setInteger"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;I)V"</literal></expr>, <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>set_integer</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"getInteger"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;)I"</literal></expr>, <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>get_integer</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"setByteBuffer"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;Ljava/nio/ByteBuffer;)V"</literal></expr>, <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>set_bytebuffer</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"&lt;init&gt;"</literal></expr>, <expr><literal type="string">"()V"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec$BufferInfo"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>buffer_info_ctor</name></expr></argument>)</argument_list></call></expr>, <expr><name>METHOD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"size"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec$BufferInfo"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>size_field</name></expr></argument>)</argument_list></call></expr>, <expr><name>FIELD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"offset"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec$BufferInfo"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>offset_field</name></expr></argument>)</argument_list></call></expr>, <expr><name>FIELD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"presentationTimeUs"</literal></expr>, <expr><literal type="string">"J"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec$BufferInfo"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>pts_field</name></expr></argument>)</argument_list></call></expr>, <expr><name>FIELD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"flags"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><literal type="string">"android/media/MediaCodec$BufferInfo"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>flags_field</name></expr></argument>)</argument_list></call></expr>, <expr><name>FIELD</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>jstrcmp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>jsize</name></type> <name>len</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFLength</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <operator>(</operator><name>jsize</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>check_exception</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_EXCEPTION</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>check_exception(env)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_ENV</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>if (!(env = android_getEnv(api-&gt;p_obj, THREAD_NAME))) return MC_API_ERROR;</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>jstring</name></type> <name>jni_new_string</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>jstring</name></type> <name>jstring</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>psz_string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>!</operator><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>jstring</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_NEW_STRING</name><parameter_list>(<parameter><type><name>psz_string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>jni_new_string(env, psz_string)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_integer</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>jstring</name></type> <name>jname</name> <init>= <expr><call><name>JNI_NEW_STRING</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>jname</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallIntMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>get_integer</name></name></expr></argument>, <argument><expr><name>jname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_INTEGER</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>get_integer(env, obj, name)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_integer</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>jstring</name></type> <name>jname</name> <init>= <expr><call><name>JNI_NEW_STRING</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>jname</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>set_integer</name></name></expr></argument>, <argument><expr><name>jname</name></expr></argument>, <argument><expr><name>i_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_INTEGER</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>set_integer(env, obj, name, value)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>bool</name></type>
<name>InitJNIFields</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_mutex_t</name></type> <name>lock</name> <init>= <expr><name>VLC_STATIC_MUTEX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>i_init_state</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_init_state</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_init_state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>classes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>classes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"Unable to find class %s"</literal></expr></argument>, <argument><expr><name><name>classes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>jclass</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>jfields</name> <operator>+</operator> <name><name>classes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator>
<operator>(</operator><name>jclass</name><operator>)</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>jclass</name></type> <name>last_class</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>class</name></expr></argument>, <argument><expr><name><name>members</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>class</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>last_class</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>last_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last_class</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"Unable to find class %s"</literal></expr></argument>, <argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>METHOD</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>jmethodID</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>jfields</name> <operator>+</operator> <name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator>
<call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>last_class</name></expr></argument>, <argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>STATIC_METHOD</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>jmethodID</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>jfields</name> <operator>+</operator> <name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator>
<call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>last_class</name></expr></argument>, <argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FIELD</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>jfieldID</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>jfields</name> <operator>+</operator> <name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator>
<call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetFieldID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>last_class</name></expr></argument>, <argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"Unable to find the member %s in %s"</literal></expr></argument>,
<argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>critical</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>last_class</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>last_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>jfields</name><operator>.</operator><name>get_input_buffer</name></name> <operator>&amp;&amp;</operator> <name><name>jfields</name><operator>.</operator><name>get_output_buffer</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>get_output_buffers</name></name> <operator>=</operator>
<name><name>jfields</name><operator>.</operator><name>get_input_buffers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>jfields</name><operator>.</operator><name>get_output_buffers</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>jfields</name><operator>.</operator><name>get_input_buffers</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"Unable to find get Output/Input Buffer/Buffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_init_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>i_init_state</name> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"MediaCodec jni init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<struct>struct <name>mc_api_sys</name>
<block>{
<decl_stmt><decl><type><name>jobject</name></type> <name>codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>buffer_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>input_buffers</name></decl>, <decl><type ref="prev"/><name>output_buffers</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>GetManufacturer</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>manufacturer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"android/os/Build"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>jfieldID</name></type> <name>id</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticFieldID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><literal type="string">"MANUFACTURER"</literal></expr></argument>,
<argument><expr><literal type="string">"Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>jstring</name></type> <name>jstr</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticObjectField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>manufacturer</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jstr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>manufacturer</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>char</name><modifier>*</modifier></type> <name>MediaCodec_GetName</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mime</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>profile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_quirks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_codecs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>jmime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>env</name> <operator>=</operator> <call><name>android_getEnv</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>THREAD_NAME</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>InitJNIFields</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>jmime</name> <operator>=</operator> <call><name>JNI_NEW_STRING</name><argument_list>(<argument><expr><name>psz_mime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jmime</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_codecs</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallStaticIntMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>media_codec_list_class</name></name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>get_codec_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_codecs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>jobject</name></type> <name>codec_capabilities</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>profile_levels</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>types</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jsize</name></type> <name>name_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>profile_levels_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>num_types</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_adaptive</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallStaticObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>media_codec_list_class</name></name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>get_codec_info_at</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>get_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name_len</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFLength</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name_ptr</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OMXCodec_IsBlacklisted</name><argument_list>(<argument><expr><name>name_ptr</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>loopclean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallBooleanMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>is_encoder</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>loopclean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>codec_capabilities</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>get_capabilities_for_type</name></name></expr></argument>,
<argument><expr><name>jmime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"Exception occurred in MediaCodecInfo.getCapabilitiesForType"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>loopclean</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>codec_capabilities</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>profile_levels</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec_capabilities</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>profile_levels_field</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>profile_levels</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>profile_levels_len</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetArrayLength</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>profile_levels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>jfields</name><operator>.</operator><name>is_feature_supported</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>jstring</name></type> <name>jfeature</name> <init>= <expr><call><name>JNI_NEW_STRING</name><argument_list>(<argument><expr><literal type="string">"adaptive-playback"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>b_adaptive</name> <operator>=</operator>
<call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallBooleanMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec_capabilities</name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>is_feature_supported</name></name></expr></argument>,
<argument><expr><name>jfeature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jfeature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"Number of profile levels: %d"</literal></expr></argument>, <argument><expr><name>profile_levels_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>get_supported_types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num_types</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetArrayLength</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_types</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>jobject</name></type> <name>type</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectArrayElement</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jstrcmp</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>psz_mime</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>profile</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>name_ptr</name></expr></argument>, <argument><expr><literal type="string">"OMX.LUMEVideoDecoder"</literal></expr></argument>, <argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>profile_levels_len</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>jobject</name></type> <name>profile_level</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectArrayElement</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>profile_levels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>omx_profile</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>profile_level</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>profile_field</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>profile_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>codec_profile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_mime</name></expr></argument>, <argument><expr><literal type="string">"video/avc"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>codec_profile</name> <operator>=</operator> <call><name>convert_omx_to_profile_idc</name><argument_list>(<argument><expr><name>omx_profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_mime</name></expr></argument>, <argument><expr><literal type="string">"video/hevc"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name>omx_profile</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x1</literal></expr>:</case> 
<expr_stmt><expr><name>codec_profile</name> <operator>=</operator> <name>VLC_HEVC_PROFILE_MAIN</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x2</literal></expr>:</case> 
<case>case <expr><literal type="number">0x1000</literal></expr>:</case> 
<expr_stmt><expr><name>codec_profile</name> <operator>=</operator> <name>VLC_HEVC_PROFILE_MAIN_10</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>codec_profile</name> <operator>!=</operator> <name>profile</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"using %.*s"</literal></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>name_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_name</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>name_ptr</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_name</name><index>[<expr><name>name_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ignore_size</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>








<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>mtk_dec</name><index>[]</index></name> <init>= <expr><literal type="string">"OMX.MTK.VIDEO.DECODER."</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>mtk_dec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mtk_dec</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>manufacturer</name> <init>= <expr><call><name>GetManufacturer</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>manufacturer</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>manufacturer</name></expr></argument>, <argument><expr><literal type="string">"Amazon"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ignore_size</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>manufacturer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ignore_size</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_quirks</name> <operator>|=</operator> <name>MC_API_VIDEO_QUIRKS_IGNORE_SIZE</name></expr>;</expr_stmt>




</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>b_adaptive</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_quirks</name> <operator>|=</operator> <name>MC_API_VIDEO_QUIRKS_ADAPTIVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<label><name>loopclean</name>:</label>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>profile_levels</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>profile_levels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>types</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>codec_capabilities</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec_capabilities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jmime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_name</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ConfigureDecoder</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>mc_api_args</name></name><modifier>*</modifier></type> <name>p_args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name><modifier>*</modifier></type> <name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>MC_API_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_direct_rendering</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>jmime</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>jcodec_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>jcodec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>jformat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>jsurface</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>psz_mime</name></name> <operator>&amp;&amp;</operator> <name><name>api</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ENV</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>jmime</name> <operator>=</operator> <call><name>JNI_NEW_STRING</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>psz_mime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jcodec_name</name> <operator>=</operator> <call><name>JNI_NEW_STRING</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jmime</name> <operator>||</operator> <operator>!</operator><name>jcodec_name</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>




<expr_stmt><expr><name>jcodec</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallStaticObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>media_codec_class</name></name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>create_by_codec_name</name></name></expr></argument>,
<argument><expr><name>jcodec_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Exception occurred in MediaCodec.createByCodecName"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jcodec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>api</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_args</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_angle</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>api</name><operator>-&gt;</operator><name>b_support_rotation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jformat</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallStaticObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>media_format_class</name></name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>create_video_format</name></name></expr></argument>,
<argument><expr><name>jmime</name></expr></argument>,
<argument><expr><name><name>p_args</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>,
<argument><expr><name><name>p_args</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jsurface</name> <operator>=</operator> <name><name>p_args</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>p_jsurface</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_direct_rendering</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>jsurface</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_args</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_angle</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET_INTEGER</name><argument_list>(<argument><expr><name>jformat</name></expr></argument>, <argument><expr><literal type="string">"rotation-degrees"</literal></expr></argument>, <argument><expr><name><name>p_args</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_angle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b_direct_rendering</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>jfields</name><operator>.</operator><name>get_input_buffer</name></name> <operator>&amp;&amp;</operator> <name><name>p_args</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>b_tunneled_playback</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET_INTEGER</name><argument_list>(<argument><expr><name>jformat</name></expr></argument>, <argument><expr><literal type="string">"feature-tunneled-playback"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_args</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>b_adaptive_playback</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET_INTEGER</name><argument_list>(<argument><expr><name>jformat</name></expr></argument>, <argument><expr><literal type="string">"feature-adaptive-playback"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>jformat</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallStaticObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>media_format_class</name></name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>create_audio_format</name></name></expr></argument>,
<argument><expr><name>jmime</name></expr></argument>,
<argument><expr><name><name>p_args</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_sample_rate</name></name></expr></argument>,
<argument><expr><name><name>p_args</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channel_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>SET_INTEGER</name><argument_list>(<argument><expr><name>jformat</name></expr></argument>, <argument><expr><literal type="string">"max-input-size"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b_direct_rendering</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>configure</name></name></expr></argument>,
<argument><expr><name>jformat</name></expr></argument>, <argument><expr><name>jsurface</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Exception occurred in MediaCodec.configure "</literal>
<literal type="string">"with an output surface."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>b_direct_rendering</name></name> <operator>=</operator> <name>b_direct_rendering</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>configure</name></name></expr></argument>,
<argument><expr><name>jformat</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Exception occurred in MediaCodec.configure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>b_direct_rendering</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>jmime</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jmime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jcodec_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jcodec_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jcodec</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jcodec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jformat</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Stop</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>b_direct_rendering</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ENV</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>input_buffers</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>input_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>input_buffers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_buffers</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_buffers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>api</name><operator>-&gt;</operator><name>b_started</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Exception in MediaCodec.stop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>b_started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>release</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Exception in MediaCodec.release"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_info</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"MediaCodec via JNI closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Start</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name><modifier>*</modifier></type> <name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>jinput_buffers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>joutput_buffers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>jbuffer_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_ENV</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>MC_API_ERROR</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Exception occurred in MediaCodec.start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>b_started</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>jfields</name><operator>.</operator><name>get_input_buffers</name></name> <operator>&amp;&amp;</operator> <name><name>jfields</name><operator>.</operator><name>get_output_buffers</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>jinput_buffers</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>get_input_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Exception in MediaCodec.getInputBuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>input_buffers</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jinput_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>joutput_buffers</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>get_output_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Exception in MediaCodec.getOutputBuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_buffers</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>joutput_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>jbuffer_info</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewObject</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>buffer_info_class</name></name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>buffer_info_ctor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_info</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jbuffer_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"MediaCodec via JNI opened"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>jinput_buffers</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jinput_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>joutput_buffers</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>joutput_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jbuffer_info</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jbuffer_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Stop</name><argument_list>(<argument><expr><name>api</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Flush</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_ENV</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>flush</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Exception occurred in MediaCodec.flush"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>DequeueInput</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_ENV</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_index</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallIntMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>dequeue_input_buffer</name></name></expr></argument>, <argument><expr><name>i_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Exception occurred in MediaCodec.dequeueInputBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_index</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>MC_API_INFO_TRYAGAIN</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>QueueInput</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_size</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_ts</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_mc_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>j_mc_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jsize</name></type> <name>j_mc_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jint</name></type> <name>jflags</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>b_config</name></expr> ?</condition><then> <expr><name>BUFFER_FLAG_CODEC_CONFIG</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name>p_buf</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>BUFFER_FLAG_END_OF_STREAM</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ENV</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>jfields</name><operator>.</operator><name>get_input_buffers</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j_mc_buf</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectArrayElement</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>input_buffers</name></name></expr></argument>,
<argument><expr><name>i_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>j_mc_buf</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>get_input_buffer</name></name></expr></argument>, <argument><expr><name>i_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Exception in MediaCodec.getInputBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>j_mc_size</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetDirectBufferCapacity</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>j_mc_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_mc_buf</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetDirectBufferAddress</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>j_mc_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j_mc_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Java buffer has invalid size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>j_mc_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>j_mc_size</name> <operator>&gt;</operator> <name>i_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j_mc_size</name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p_mc_buf</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>j_mc_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>queue_input_buffer</name></name></expr></argument>,
<argument><expr><name>i_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>j_mc_size</name></expr></argument>, <argument><expr><name>i_ts</name></expr></argument>, <argument><expr><name>jflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>j_mc_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Exception in MediaCodec.queueInputBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>DequeueOutput</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_ENV</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallIntMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>dequeue_output_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_info</name></name></expr></argument>, <argument><expr><name>i_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Exception in MediaCodec.dequeueOutputBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_index</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i_index</name> <operator>==</operator> <name>INFO_OUTPUT_FORMAT_CHANGED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MC_API_INFO_OUTPUT_FORMAT_CHANGED</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i_index</name> <operator>==</operator> <name>INFO_OUTPUT_BUFFERS_CHANGED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MC_API_INFO_OUTPUT_BUFFERS_CHANGED</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>MC_API_INFO_TRYAGAIN</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>GetOutput</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_index</name></decl></parameter>, <parameter><decl><type><name>mc_api_out</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_ENV</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MC_OUT_TYPE_BUF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>i_index</name></name> <operator>=</operator> <name>i_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>i_ts</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetLongField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_info</name></name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>pts_field</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_info</name></name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>flags_field</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>b_eos</name></name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <name>BUFFER_FLAG_END_OF_STREAM</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>api</name><operator>-&gt;</operator><name>b_direct_rendering</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>p_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>i_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>jobject</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>jfields</name><operator>.</operator><name>get_output_buffers</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectArrayElement</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_buffers</name></name></expr></argument>,
<argument><expr><name>i_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>get_output_buffer</name></name></expr></argument>,
<argument><expr><name>i_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Exception in MediaCodec.getOutputBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetDirectBufferAddress</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_info</name></name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>offset_field</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>p_ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>i_size</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_info</name></name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>size_field</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i_index</name> <operator>==</operator> <name>MC_API_INFO_OUTPUT_FORMAT_CHANGED</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>jobject</name></type> <name>format</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>format_string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jsize</name></type> <name>format_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format_ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>get_output_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Exception in MediaCodec.getOutputFormat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>format_string</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>tostring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>format_len</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFLength</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>format_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>format_ptr</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>format_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"output format changed: %.*s"</literal></expr></argument>, <argument><expr><name>format_len</name></expr></argument>,
<argument><expr><name>format_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>format_string</name></expr></argument>, <argument><expr><name>format_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MC_OUT_TYPE_CONF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>b_eos</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>api</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>video</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>GET_INTEGER</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>video</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>GET_INTEGER</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"height"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>video</name><operator>.</operator><name>stride</name></name> <operator>=</operator> <call><name>GET_INTEGER</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"stride"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>video</name><operator>.</operator><name>slice_height</name></name> <operator>=</operator> <call><name>GET_INTEGER</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"slice-height"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>video</name><operator>.</operator><name>pixel_format</name></name> <operator>=</operator> <call><name>GET_INTEGER</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"color-format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>video</name><operator>.</operator><name>crop_left</name></name> <operator>=</operator> <call><name>GET_INTEGER</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"crop-left"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>video</name><operator>.</operator><name>crop_top</name></name> <operator>=</operator> <call><name>GET_INTEGER</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"crop-top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>video</name><operator>.</operator><name>crop_right</name></name> <operator>=</operator> <call><name>GET_INTEGER</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"crop-right"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>video</name><operator>.</operator><name>crop_bottom</name></name> <operator>=</operator> <call><name>GET_INTEGER</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"crop-bottom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>audio</name><operator>.</operator><name>channel_count</name></name> <operator>=</operator> <call><name>GET_INTEGER</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"channel-count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>audio</name><operator>.</operator><name>channel_mask</name></name> <operator>=</operator> <call><name>GET_INTEGER</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"channel-mask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>audio</name><operator>.</operator><name>sample_rate</name></name> <operator>=</operator> <call><name>GET_INTEGER</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"sample-rate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i_index</name> <operator>==</operator> <name>MC_API_INFO_OUTPUT_BUFFERS_CHANGED</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>jobject</name></type> <name>joutput_buffers</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"output buffers changed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jfields</name><operator>.</operator><name>get_output_buffers</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>joutput_buffers</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>,
<argument><expr><name><name>jfields</name><operator>.</operator><name>get_output_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Exception in MediaCodec.getOutputBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_buffers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_buffers</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>joutput_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>joutput_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ReleaseOutput</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_index</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_render</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ENV</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>release_output_buffer</name></name></expr></argument>,
<argument><expr><name>i_index</name></expr></argument>, <argument><expr><name>b_render</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK_EXCEPTION</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Exception in MediaCodec.releaseOutputBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>SetOutputSurface</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_surface</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_jsurface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>api</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_surface</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_jsurface</name></expr>;</expr_stmt>

<return>return <expr><name>MC_API_ERROR</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Clean</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Prepare</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_profile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>i_quirks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>MediaCodec_GetName</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><name><name>api</name><operator>-&gt;</operator><name>psz_mime</name></name></expr></argument>,
<argument><expr><name>i_profile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>api</name><operator>-&gt;</operator><name>i_quirks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>api</name><operator>-&gt;</operator><name>psz_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>i_quirks</name></name> <operator>|=</operator> <call><name>OMXCodec_GetQuirks</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name><name>api</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name><name>api</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>jfields</name><operator>.</operator><name>get_input_buffer</name></name> <operator>&amp;&amp;</operator> <name><name>jfields</name><operator>.</operator><name>get_output_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>i_quirks</name></name> <operator>|=</operator> <name>MC_API_VIDEO_QUIRKS_SUPPORT_INTERLACED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>MediaCodecJni_Init</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_ENV</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>InitJNIFields</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mc_api_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>clean</name></name> <operator>=</operator> <name>Clean</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>prepare</name></name> <operator>=</operator> <name>Prepare</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>configure_decoder</name></name> <operator>=</operator> <name>ConfigureDecoder</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>Start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>Stop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>dequeue_in</name></name> <operator>=</operator> <name>DequeueInput</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>queue_in</name></name> <operator>=</operator> <name>QueueInput</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>dequeue_out</name></name> <operator>=</operator> <name>DequeueOutput</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>get_out</name></name> <operator>=</operator> <name>GetOutput</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>release_out</name></name> <operator>=</operator> <name>ReleaseOutput</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>release_out_ts</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>set_output_surface</name></name> <operator>=</operator> <name>SetOutputSurface</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>jfields</name><operator>.</operator><name>get_input_buffer</name></name> <operator>&amp;&amp;</operator> <name><name>jfields</name><operator>.</operator><name>get_output_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>b_support_rotation</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
