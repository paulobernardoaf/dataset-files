<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\omxil\OMX_Types.h">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OMX_Types_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_Types_h</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SYMBIAN32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OMX_EXPORTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_API</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_API</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_API</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OMX_EXPORTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_API</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_API</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OMX_EXPORTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_API</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_API</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OMX_APIENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_APIENTRY</name></cpp:macro></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OMX_IN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_IN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OMX_OUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_OUT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OMX_INOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_INOUT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_ALL</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

































<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>OMX_U8</name>;</typedef>


<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>OMX_S8</name>;</typedef>


<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>OMX_U16</name>;</typedef>


<typedef>typedef <type><name>signed</name> <name>short</name></type> <name>OMX_S16</name>;</typedef>


<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>OMX_U32</name>;</typedef>


<typedef>typedef <type><name>signed</name> <name>long</name></type> <name>OMX_S32</name>;</typedef>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OMX_SKIP64BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SYMBIAN32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>OMX_U64</name>;</typedef>


<typedef>typedef <type><name>signed</name> <name>long</name> <name>long</name></type> <name>OMX_S64</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>OMX_U64</name>;</typedef>


<typedef>typedef <type><name>signed</name> <name>__int64</name></type> <name>OMX_S64</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 


<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>OMX_U64</name>;</typedef>


<typedef>typedef <type><name>signed</name> <name>long</name> <name>long</name></type> <name>OMX_S64</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<typedef>typedef <type><enum>enum <name>OMX_BOOL</name> <block>{
<decl><name>OMX_FALSE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>OMX_TRUE</name> <init>= <expr><operator>!</operator><name>OMX_FALSE</name></expr></init></decl>,
<decl><name>OMX_BOOL_MAX</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>
}</block></enum></type> <name>OMX_BOOL</name>;</typedef> 





<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>OMX_PTR</name>;</typedef>






<typedef>typedef <type><name>char</name><modifier>*</modifier></type> <name>OMX_STRING</name>;</typedef>






<typedef>typedef <type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>OMX_BYTE</name>;</typedef>





<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name><name>OMX_UUIDTYPE</name><index>[<expr><literal type="number">128</literal></expr>]</index></name>;</typedef>




<typedef>typedef <type><enum>enum <name>OMX_DIRTYPE</name>
<block>{
<decl><name>OMX_DirInput</name></decl>, 
<decl><name>OMX_DirOutput</name></decl>, 
<decl><name>OMX_DirMax</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>
}</block></enum></type> <name>OMX_DIRTYPE</name>;</typedef>




<typedef>typedef <type><enum>enum <name>OMX_ENDIANTYPE</name>
<block>{
<decl><name>OMX_EndianBig</name></decl>, 
<decl><name>OMX_EndianLittle</name></decl>, 
<decl><name>OMX_EndianMax</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>
}</block></enum></type> <name>OMX_ENDIANTYPE</name>;</typedef>





<typedef>typedef <type><enum>enum <name>OMX_NUMERICALDATATYPE</name>
<block>{
<decl><name>OMX_NumericalDataSigned</name></decl>, 
<decl><name>OMX_NumericalDataUnsigned</name></decl>, 
<decl><name>OMX_NumercialDataMax</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>
}</block></enum></type> <name>OMX_NUMERICALDATATYPE</name>;</typedef>



<typedef>typedef <type><struct>struct <name>OMX_BU32</name> <block>{
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nValue</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nMin</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nMax</name></decl>;</decl_stmt> 
}</block></struct></type> <name>OMX_BU32</name>;</typedef>



<typedef>typedef <type><struct>struct <name>OMX_BS32</name> <block>{
<decl_stmt><decl><type><name>OMX_S32</name></type> <name>nValue</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_S32</name></type> <name>nMin</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_S32</name></type> <name>nMax</name></decl>;</decl_stmt> 
}</block></struct></type> <name>OMX_BS32</name>;</typedef>














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OMX_SKIP64BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>OMX_S64</name></type> <name>OMX_TICKS</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><struct>struct <name>OMX_TICKS</name>
<block>{
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nLowPart</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nHighPart</name></decl>;</decl_stmt> 
}</block></struct></type> <name>OMX_TICKS</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_TICKS_PER_SECOND</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>




<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>OMX_HANDLETYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OMX_MARKTYPE</name>
<block>{
<decl_stmt><decl><type><name>OMX_HANDLETYPE</name></type> <name>hMarkTargetComponent</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>OMX_PTR</name></type> <name>pMarkData</name></decl>;</decl_stmt> 


}</block></struct></type> <name>OMX_MARKTYPE</name>;</typedef>





<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>OMX_NATIVE_DEVICETYPE</name>;</typedef>



<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>OMX_NATIVE_WINDOWTYPE</name>;</typedef>












<typedef>typedef <type><union>union <name>OMX_VERSIONTYPE</name>
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>OMX_U8</name></type> <name>nVersionMajor</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_U8</name></type> <name>nVersionMinor</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_U8</name></type> <name>nRevision</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OMX_U8</name></type> <name>nStep</name></decl>;</decl_stmt> 
}</block> <decl><name>s</name></decl>;</struct>
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nVersion</name></decl>;</decl_stmt> 


}</block></union></type> <name>OMX_VERSIONTYPE</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
