<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\omxil\omxil.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block_helper.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/h264_nal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/hevc_nal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"omxil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"omxil_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OMX_Broadcom.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_DBG</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>msg_Dbg( p_dec, __VA_ARGS__ )</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_DBG</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_FLAG</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_IndexConfigRequestCallback</name></cpp:macro> <cpp:value>0x7f000063</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_IndexParamBrcmPixelAspectRatio</name></cpp:macro> <cpp:value>0x7f00004d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_IndexParamBrcmVideoDecodeErrorConcealment</name></cpp:macro> <cpp:value>0x7f000080</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_EventParamOrConfigChanged</name></cpp:macro> <cpp:value>0x7F000001</cpp:value></cpp:define>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenGeneric</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_encode</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseGeneric</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeVideo</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeAudio</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>EncodeVideo</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>OMX_ERRORTYPE</name></type> <name>OmxEventHandler</name><parameter_list>( <parameter><decl><type><name>OMX_HANDLETYPE</name></type></decl></parameter>, <parameter><decl><type><name>OMX_PTR</name></type></decl></parameter>, <parameter><decl><type><name>OMX_EVENTTYPE</name></type></decl></parameter>,
<parameter><decl><type><name>OMX_U32</name></type></decl></parameter>, <parameter><decl><type><name>OMX_U32</name></type></decl></parameter>, <parameter><decl><type><name>OMX_PTR</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OMX_ERRORTYPE</name></type> <name>OmxEmptyBufferDone</name><parameter_list>( <parameter><decl><type><name>OMX_HANDLETYPE</name></type></decl></parameter>, <parameter><decl><type><name>OMX_PTR</name></type></decl></parameter>,
<parameter><decl><type><name>OMX_BUFFERHEADERTYPE</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OMX_ERRORTYPE</name></type> <name>OmxFillBufferDone</name><parameter_list>( <parameter><decl><type><name>OMX_HANDLETYPE</name></type></decl></parameter>, <parameter><decl><type><name>OMX_PTR</name></type></decl></parameter>,
<parameter><decl><type><name>OMX_BUFFERHEADERTYPE</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRECTRENDERING_TEXT</name></cpp:macro> <cpp:value>N_("OMX direct rendering")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRECTRENDERING_LONGTEXT</name></cpp:macro> <cpp:value>N_("Enable OMX direct rendering.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"omxil-"</cpp:value></cpp:define>
<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Audio/Video decoder (using OpenMAX IL)"</literal>)</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_VCODEC</argument> )</argument_list></macro>
<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Decoding"</literal>)</argument> , <argument>NULL</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video decoder"</literal></argument>, <argument><literal type="number">80</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenDecoder</argument>, <argument>CloseGeneric</argument> )</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_submodule</name><argument_list>()</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"audio decoder"</literal></argument>, <argument><literal type="number">80</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>OpenDecoder</argument>, <argument>CloseGeneric</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Encoding"</literal>)</argument> , <argument>NULL</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Video encoder (using OpenMAX IL)"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenEncoder</argument>, <argument>CloseGeneric</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>





<function><type><specifier>static</specifier> <name>OMX_ERRORTYPE</name></type> <name>ImplementationSpecificWorkarounds</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,
<parameter><decl><type><name>OmxPort</name> <modifier>*</modifier></type><name>p_port</name></decl></parameter>, <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_PARAM_PORTDEFINITIONTYPE</name> <modifier>*</modifier></type><name>def</name> <init>= <expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>definition</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_profile</name> <init>= <expr><literal type="number">0xFF</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_level</name> <init>= <expr><literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name><name>def</name><operator>-&gt;</operator><name>eDir</name></name> <operator>==</operator> <name>OMX_DirInput</name> <operator>&amp;&amp;</operator>
<name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_H264</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>h264_get_profile_level</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_profile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_nal_size_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_component</name></name></expr></argument>, <argument><expr><literal type="string">"OMX.TI.Video.Decoder"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name><name>def</name><operator>-&gt;</operator><name>eDir</name></name> <operator>==</operator> <name>OMX_DirInput</name> <operator>&amp;&amp;</operator>
<name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_H264</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>i_profile</name> <operator>!=</operator> <name>PROFILE_H264_BASELINE</name> <operator>||</operator> <name>i_level</name> <operator>&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"h264 profile/level not supported (0x%"</literal> <name>PRIx8</name> <literal type="string">", 0x%"</literal> <name>PRIx8</name> <literal type="string">")"</literal></expr></argument>,
<argument><expr><name>i_profile</name></expr></argument>, <argument><expr><name>i_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OMX_ErrorNotImplemented</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name><name>def</name><operator>-&gt;</operator><name>eDir</name></name> <operator>==</operator> <name>OMX_DirOutput</name> <operator>&amp;&amp;</operator>
<name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_I420</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eColorFormat</name></name> <operator>=</operator> <name>OMX_COLOR_FormatCbYCrY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetVlcChromaFormat</name><argument_list>( <argument><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eColorFormat</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetVlcChromaSizes</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameWidth</name></name></expr></argument>,
<argument><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameHeight</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_stride</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_stride_chroma_div</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nStride</name></name> <operator>=</operator> <name><name>p_port</name><operator>-&gt;</operator><name>i_frame_stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>nBufferSize</name></name> <operator>=</operator> <name><name>p_port</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_component</name></name></expr></argument>, <argument><expr><literal type="string">"OMX.st.video_encoder"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>xFramerate</name></name> <operator>&gt;&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
else if (!strncmp(p_sys-&gt;psz_component, "OMX.qcom.video.decoder.",
strlen("OMX.qcom.video.decoder")))
{

if (def-&gt;nBufferSize &gt; 450 * 1024)
{
def-&gt;nBufferSize = 450 * 1024;
p_port-&gt;i_frame_size = def-&gt;nBufferSize;
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RPI_OMX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_component</name></name></expr></argument>, <argument><expr><literal type="string">"OMX.broadcom.video_decode"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nStride</name></name> <operator>=</operator> <name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nSliceHeight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>OMX_ErrorNone</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>OMX_ERRORTYPE</name></type> <name>SetPortDefinition</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>OmxPort</name> <modifier>*</modifier></type><name>p_port</name></decl></parameter>,
<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_PARAM_PORTDEFINITIONTYPE</name> <modifier>*</modifier></type><name>def</name> <init>= <expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>definition</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_ERRORTYPE</name></type> <name>omx_error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_GetParameter</name><argument_list>(<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>,
<argument><expr><name>OMX_IndexParamPortDefinition</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX_GetParameter failed (%x : %s)"</literal></expr></argument>,
<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><call><name>ErrorToString</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameWidth</name></name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameHeight</name></name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eCompressionFormat</name></name> <operator>==</operator> <name>OMX_VIDEO_CodingUnused</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nStride</name></name> <operator>=</operator> <name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameWidth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>xFramerate</name></name> <operator>=</operator> <operator>(</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>/</operator>
<name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>eDir</name></name> <operator>==</operator> <name>OMX_DirInput</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_enc</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>eDir</name></name> <operator>==</operator> <name>OMX_DirInput</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_enc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>nBufferSize</name></name> <operator>=</operator> <name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameWidth</name></name> <operator>*</operator>
<name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameHeight</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>=</operator> <name><name>def</name><operator>-&gt;</operator><name>nBufferSize</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>GetOmxVideoFormat</name><argument_list>(<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eCompressionFormat</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>GetOmxChromaFormat</name><argument_list>(<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eColorFormat</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <name>OMX_ErrorNotImplemented</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"codec %4.4s doesn't match any OMX format"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GetVlcChromaSizes</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameWidth</name></name></expr></argument>,
<argument><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameHeight</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_stride</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_stride_chroma_div</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nStride</name></name> <operator>=</operator> <name><name>p_port</name><operator>-&gt;</operator><name>i_frame_stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>nBufferSize</name></name> <operator>=</operator> <name><name>p_port</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>GetVlcChromaFormat</name><argument_list>( <argument><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eColorFormat</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <name>OMX_ErrorNotImplemented</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX color format %i not supported"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eColorFormat</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GetVlcChromaSizes</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameWidth</name></name></expr></argument>,
<argument><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameHeight</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_stride</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_stride_chroma_div</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nStride</name></name> <operator>=</operator> <name><name>p_port</name><operator>-&gt;</operator><name>i_frame_stride</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>&gt;</operator> <name><name>def</name><operator>-&gt;</operator><name>nBufferSize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>nBufferSize</name></name> <operator>=</operator> <name><name>p_port</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>=</operator> <name><name>def</name><operator>-&gt;</operator><name>nBufferSize</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>eDir</name></name> <operator>==</operator> <name>OMX_DirInput</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>GetOmxAudioFormat</name><argument_list>(<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>audio</name><operator>.</operator><name>eEncoding</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <name>OMX_ErrorNotImplemented</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"codec %4.4s doesn't match any OMX format"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>OmxToVlcAudioFormat</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>audio</name><operator>.</operator><name>eEncoding</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <name>OMX_ErrorNotImplemented</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX audio encoding %i not supported"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>audio</name><operator>.</operator><name>eEncoding</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<default>default:</default> <return>return <expr><name>OMX_ErrorNotImplemented</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>ImplementationSpecificWorkarounds</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_port</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"ImplementationSpecificWorkarounds failed (%x : %s)"</literal></expr></argument>,
<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><call><name>ErrorToString</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_SetParameter</name><argument_list>(<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>,
<argument><expr><name>OMX_IndexParamPortDefinition</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX_SetParameter failed (%x : %s)"</literal></expr></argument>,
<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><call><name>ErrorToString</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_GetParameter</name><argument_list>(<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>,
<argument><expr><name>OMX_IndexParamPortDefinition</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX_GetParameter failed (%x : %s)"</literal></expr></argument>,
<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><call><name>ErrorToString</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>&gt;</operator> <name><name>def</name><operator>-&gt;</operator><name>nBufferSize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>nBufferSize</name></name> <operator>=</operator> <name><name>p_port</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>=</operator> <name><name>def</name><operator>-&gt;</operator><name>nBufferSize</name></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>SetAudioParameters</name><argument_list>(<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>format_param</name></name></expr></argument>, <argument><expr><name><name>def</name><operator>-&gt;</operator><name>nPortIndex</name></name></expr></argument>,
<argument><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>audio</name><operator>.</operator><name>eEncoding</name></name></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>eDir</name></name> <operator>==</operator> <name>OMX_DirInput</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"SetAudioParameters failed (%x : %s)"</literal></expr></argument>,
<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><call><name>ErrorToString</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"SetAudioParameters failed (%x : %s) on output port"</literal></expr></argument>,
<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><call><name>ErrorToString</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <name>OMX_ErrorNone</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_component</name></name></expr></argument>, <argument><expr><literal type="string">"OMX.TI.DUCATI1.VIDEO.DECODER"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>def</name><operator>-&gt;</operator><name>eDir</name></name> <operator>==</operator> <name>OMX_DirOutput</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>nBufferSize</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>error</name>:</label>
<return>return <expr><name>omx_error</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>OMX_ERRORTYPE</name></type> <name>UpdatePixelAspect</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_CONFIG_POINTTYPE</name></type> <name>pixel_aspect</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name>pixel_aspect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>OMX_ERRORTYPE</name></type> <name>omx_err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_component</name></name></expr></argument>, <argument><expr><literal type="string">"OMX.broadcom."</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OMX_ErrorNotImplemented</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pixel_aspect</name><operator>.</operator><name>nPortIndex</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>i_port_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>omx_err</name> <operator>=</operator> <call><name>OMX_GetParameter</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>,
<argument><expr><name>OMX_IndexParamBrcmPixelAspectRatio</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pixel_aspect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>omx_err</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Failed to retrieve aspect ratio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>pixel_aspect</name><operator>.</operator><name>nX</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>pixel_aspect</name><operator>.</operator><name>nY</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>omx_err</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>OMX_ERRORTYPE</name></type> <name>AllocateBuffers</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>OmxPort</name> <modifier>*</modifier></type><name>p_port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_ERRORTYPE</name></type> <name>omx_error</name> <init>= <expr><name>OMX_ErrorUndefined</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_PARAM_PORTDEFINITIONTYPE</name> <modifier>*</modifier></type><name>def</name> <init>= <expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>definition</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OMX_DBG</name><argument_list>( <argument><expr><literal type="string">"AllocateBuffers(%d)"</literal></expr></argument>, <argument><expr><name><name>def</name><operator>-&gt;</operator><name>eDir</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_buffers</name></name> <operator>=</operator> <name><name>p_port</name><operator>-&gt;</operator><name>definition</name><operator>.</operator><name>nBufferCountActual</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>pp_buffers</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_buffers</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OMX_BUFFERHEADERTYPE</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_port</name><operator>-&gt;</operator><name>pp_buffers</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_buffers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>OMX_ErrorInsufficientResources</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_port</name><operator>-&gt;</operator><name>i_buffers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>BLOCKLIGN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + BLOCKLIGN - 1) &amp; ~(BLOCKLIGN - 1))</cpp:value></cpp:define>
char *p_buf = malloc(p_port-&gt;definition.nBufferSize +
p_port-&gt;definition.nBufferAlignment);
p_port-&gt;pp_buffers[i] = (void *)ALIGN((uintptr_t)p_buf, p_port-&gt;definition.nBufferAlignment);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name><name>p_port</name><operator>-&gt;</operator><name>b_direct</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator>
<call><name>OMX_UseBuffer</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>pp_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_port_index</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>definition</name><operator>.</operator><name>nBufferSize</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_DBG</name><argument_list>( <argument><expr><literal type="string">"OMX_UseBuffer(%d) %p, %p"</literal></expr></argument>, <argument><expr><name><name>def</name><operator>-&gt;</operator><name>eDir</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p_port</name><operator>-&gt;</operator><name>pp_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_port</name><operator>-&gt;</operator><name>pp_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then>
<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p_port</name><operator>-&gt;</operator><name>pp_buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pBuffer</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator>
<call><name>OMX_AllocateBuffer</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>pp_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_port_index</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>definition</name><operator>.</operator><name>nBufferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_DBG</name><argument_list>( <argument><expr><literal type="string">"OMX_AllocateBuffer(%d) %p, %p"</literal></expr></argument>, <argument><expr><name><name>def</name><operator>-&gt;</operator><name>eDir</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p_port</name><operator>-&gt;</operator><name>pp_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_port</name><operator>-&gt;</operator><name>pp_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then>
<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p_port</name><operator>-&gt;</operator><name>pp_buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pBuffer</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_buffers</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>OMX_FIFO_PUT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>pp_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"AllocateBuffers failed (%x, %i)"</literal></expr></argument>,
<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_port_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>OMX_DBG</name><argument_list>( <argument><expr><literal type="string">"AllocateBuffers(%d)::done"</literal></expr></argument>, <argument><expr><name><name>def</name><operator>-&gt;</operator><name>eDir</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<label><name>error</name>:</label>
<return>return <expr><name>omx_error</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>OMX_ERRORTYPE</name></type> <name>FreeBuffers</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>OmxPort</name> <modifier>*</modifier></type><name>p_port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OMX_PARAM_PORTDEFINITIONTYPE</name> <modifier>*</modifier></type><name>def</name> <init>= <expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>definition</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_ERRORTYPE</name></type> <name>omx_error</name> <init>= <expr><name>OMX_ErrorNone</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_BUFFERHEADERTYPE</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>i_wait_buffers</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_wait_buffers</name> <operator>=</operator> <name><name>p_port</name><operator>-&gt;</operator><name>i_buffers</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OMX_DBG</name><argument_list>( <argument><expr><literal type="string">"FreeBuffers(%d), waiting for %u buffers"</literal></expr></argument>, <argument><expr><name><name>def</name><operator>-&gt;</operator><name>eDir</name></name></expr></argument>,
<argument><expr><name>i_wait_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_wait_buffers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>OMX_FIFO_GET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_buffer</name><operator>-&gt;</operator><name>nFlags</name></name> <operator>&amp;</operator> <name>SENTINEL_FLAG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_port</name><operator>-&gt;</operator><name>i_buffers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p_buffer</name> <operator>=</operator> <name><name>p_port</name><operator>-&gt;</operator><name>pp_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_buffer</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_buffer</name><operator>-&gt;</operator><name>pAppPrivate</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>pAppPrivate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_FreeBuffer</name><argument_list>( <argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>,
<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_port_index</name></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_DBG</name><argument_list>( <argument><expr><literal type="string">"OMX_FreeBuffer(%d) %p, %p"</literal></expr></argument>, <argument><expr><name><name>def</name><operator>-&gt;</operator><name>eDir</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"OMX_FreeBuffer failed (%x, %i, %i)"</literal></expr></argument>,
<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_port_index</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_buffers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>pp_buffers</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>pp_buffers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OMX_DBG</name><argument_list>( <argument><expr><literal type="string">"FreeBuffers(%d)::done"</literal></expr></argument>, <argument><expr><name><name>def</name><operator>-&gt;</operator><name>eDir</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>omx_error</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>OMX_ERRORTYPE</name></type> <name>GetPortDefinition</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>OmxPort</name> <modifier>*</modifier></type><name>p_port</name></decl></parameter>,
<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_PARAM_PORTDEFINITIONTYPE</name> <modifier>*</modifier></type><name>def</name> <init>= <expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>definition</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_ERRORTYPE</name></type> <name>omx_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_CONFIG_RECTTYPE</name></type> <name>crop_rect</name></decl>;</decl_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_GetParameter</name><argument_list>(<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>,
<argument><expr><name>OMX_IndexParamPortDefinition</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX_GetParameter failed (%x : %s)"</literal></expr></argument>,
<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><call><name>ErrorToString</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameWidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameWidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameHeight</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameHeight</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name>crop_rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crop_rect</name><operator>.</operator><name>nPortIndex</name></name> <operator>=</operator> <name><name>def</name><operator>-&gt;</operator><name>nPortIndex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_GetConfig</name><argument_list>(<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name>OMX_IndexConfigCommonOutputCrop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crop_rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>omx_error</name> <operator>==</operator> <name>OMX_ErrorNone</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nSliceHeight</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nSliceHeight</name></name> <operator>=</operator> <name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameHeight</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nStride</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nStride</name></name> <operator>=</operator> <name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameWidth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>crop_rect</name><operator>.</operator><name>nWidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>crop_rect</name><operator>.</operator><name>nWidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>crop_rect</name><operator>.</operator><name>nHeight</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>crop_rect</name><operator>.</operator><name>nHeight</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eColorFormat</name></name> <operator>==</operator> <name>OMX_TI_COLOR_FormatYUV420PackedSemiPlanar</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nSliceHeight</name></name> <operator>-=</operator> <name><name>crop_rect</name><operator>.</operator><name>nTop</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <name>OMX_ErrorNone</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if<condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eColorFormat</name></name> <operator>==</operator> <name>OMX_COLOR_FormatYUV420Planar</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_component</name></name></expr></argument>, <argument><expr><literal type="string">"OMX.qcom.video.decoder"</literal></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"OMX.qcom.video.decoder"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eColorFormat</name></name> <operator>=</operator> <name>OMX_QCOM_COLOR_FormatYVU420SemiPlanar</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_quirks</name></name> <operator>&amp;</operator> <name>OMXCODEC_VIDEO_QUIRKS_IGNORE_PADDING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nSliceHeight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nStride</name></name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>GetVlcVideoFormat</name><argument_list>( <argument><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eCompressionFormat</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>GetVlcChromaFormat</name><argument_list>( <argument><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eColorFormat</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <name>OMX_ErrorNotImplemented</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX color format %i not supported"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eColorFormat</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GetVlcChromaSizes</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameWidth</name></name></expr></argument>,
<argument><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameHeight</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_stride</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_stride_chroma_div</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>&gt;</operator> <name><name>def</name><operator>-&gt;</operator><name>nBufferSize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>nBufferSize</name></name> <operator>=</operator> <name><name>p_port</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>=</operator> <name><name>def</name><operator>-&gt;</operator><name>nBufferSize</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if((int)p_port-&gt;i_frame_stride &gt; def-&gt;format.video.nStride)
def-&gt;format.video.nStride = p_port-&gt;i_frame_stride;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_stride</name></name> <operator>=</operator> <name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nStride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UpdatePixelAspect</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>OmxToVlcAudioFormat</name><argument_list>( <argument><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>audio</name><operator>.</operator><name>eEncoding</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <name>OMX_ErrorNotImplemented</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX audio format %i not supported"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>audio</name><operator>.</operator><name>eEncoding</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>GetAudioParameters</name><argument_list>(<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>format_param</name></name></expr></argument>, <argument><expr><name><name>def</name><operator>-&gt;</operator><name>nPortIndex</name></name></expr></argument>,
<argument><expr><name><name>def</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>audio</name><operator>.</operator><name>eEncoding</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"GetAudioParameters failed (%x : %s)"</literal></expr></argument>,
<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><call><name>ErrorToString</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator>
<name><name>vlc_chan_maps</name><index>[<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> <return>return <expr><name>OMX_ErrorNotImplemented</name></expr>;</return>
</block_content>}</block></switch>

<label><name>error</name>:</label>
<return>return <expr><name>omx_error</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>OMX_ERRORTYPE</name></type> <name>DeinitialiseComponent</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,
<parameter><decl><type><name>OMX_HANDLETYPE</name></type> <name>omx_handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_BUFFERHEADERTYPE</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_ERRORTYPE</name></type> <name>omx_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_STATETYPE</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>omx_handle</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>OMX_ErrorNone</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_GetState</name><argument_list>(<argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX_GetState failed (%x)"</literal></expr></argument>, <argument><expr><name>omx_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>state</name> <operator>==</operator> <name>OMX_StateExecuting</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_SendCommand</name><argument_list>( <argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><name>OMX_CommandStateSet</name></expr></argument>,
<argument><expr><name>OMX_StateIdle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX_CommandStateSet Idle failed (%x)"</literal></expr></argument>, <argument><expr><name>omx_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>OMX_U32</name></type> <name>cmd</name></decl>, <decl><type ref="prev"/><name>state</name></decl>;</decl_stmt>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>WaitForSpecificOmxEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>event_queue</name></name></expr></argument>, <argument><expr><name>OMX_EventCmdComplete</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"Wait for Idle failed (%x)"</literal></expr></argument>, <argument><expr><name>omx_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>OMX_CommandStateSet</name> <operator>&amp;&amp;</operator> <name>state</name> <operator>==</operator> <name>OMX_StateIdle</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_GetState</name><argument_list>(<argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX_GetState failed (%x)"</literal></expr></argument>, <argument><expr><name>omx_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>state</name> <operator>==</operator> <name>OMX_StateIdle</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_SendCommand</name><argument_list>( <argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><name>OMX_CommandStateSet</name></expr></argument>,
<argument><expr><name>OMX_StateLoaded</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX_CommandStateSet Loaded failed (%x)"</literal></expr></argument>, <argument><expr><name>omx_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ports</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>OmxPort</name> <modifier>*</modifier></type><name>p_port</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_ports</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>FreeBuffers</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_port</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"FreeBuffers failed (%x, %i)"</literal></expr></argument>,
<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_port_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>WaitForSpecificOmxEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>event_queue</name></name></expr></argument>, <argument><expr><name>OMX_EventCmdComplete</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"Wait for Loaded failed (%x)"</literal></expr></argument>, <argument><expr><name>omx_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>error</name>:</label>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ports</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>OmxPort</name> <modifier>*</modifier></type><name>p_port</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_ports</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>pp_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>pp_buffers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>OMX_FIFO_PEEK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_buffer</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>OMX_FIFO_GET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_buffer</name><operator>-&gt;</operator><name>nFlags</name></name> <operator>&amp;</operator> <name>SENTINEL_FLAG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Stray buffer left in fifo, %p"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>pf_free_handle</name><argument_list>( <argument><expr><name>omx_handle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>omx_error</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>OMX_ERRORTYPE</name></type> <name>InitialiseComponent</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,
<parameter><decl><type><name>OMX_STRING</name></type> <name>psz_component</name></decl></parameter>, <parameter><decl><type><name>OMX_HANDLETYPE</name> <modifier>*</modifier></type><name>p_handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>OMX_CALLBACKTYPE</name></type> <name>callbacks</name> <init>=
<expr><block>{ <expr><name>OmxEventHandler</name></expr>, <expr><name>OmxEmptyBufferDone</name></expr>, <expr><name>OmxFillBufferDone</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_HANDLETYPE</name></type> <name>omx_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_ERRORTYPE</name></type> <name>omx_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_quirks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_U8</name></type> <name><name>psz_role</name><index>[<expr><name>OMX_MAX_STRINGNAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_PARAM_COMPONENTROLETYPE</name></type> <name>role</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_PARAM_PORTDEFINITIONTYPE</name></type> <name>definition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_PORT_PARAM_TYPE</name></type> <name>param</name></decl>;</decl_stmt>


<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>pf_get_handle</name><argument_list>( <argument><expr><operator>&amp;</operator><name>omx_handle</name></expr></argument>, <argument><expr><name>psz_component</name></expr></argument>, <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callbacks</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"OMX_GetHandle(%s) failed (%x: %s)"</literal></expr></argument>, <argument><expr><name>psz_component</name></expr></argument>,
<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><call><name>ErrorToString</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>omx_error</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_component</name></name></expr></argument>, <argument><expr><name>psz_component</name></expr></argument>, <argument><expr><name>OMX_MAX_STRINGNAME_SIZE</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_quirks</name> <operator>=</operator> <call><name>OMXCodec_GetQuirks</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_enc</name></name></expr> ?</condition><then> <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr> </then><else>: <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_component</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_component</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i_quirks</name> <operator>&amp;</operator> <name>OMXCODEC_QUIRKS_NEED_CSD</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"codec need CSD"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OMX_ErrorUndefined</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_ComponentRoleEnum</name><argument_list>(<argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><name>psz_role</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>==</operator> <name>OMX_ErrorNone</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"loaded component %s of role %s"</literal></expr></argument>, <argument><expr><name>psz_component</name></expr></argument>, <argument><expr><name>psz_role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"loaded component %s"</literal></expr></argument>, <argument><expr><name>psz_component</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>PrintOmx</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><name>OMX_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>role</name><operator>.</operator><name>cRole</name></name></expr></argument>,
<argument><expr><call><name>GetOmxRole</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_enc</name></name></expr> ?</condition><then> <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr> </then><else>: <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_enc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_SetParameter</name><argument_list>(<argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><name>OMX_IndexParamStandardComponentRole</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_GetParameter</name><argument_list>(<argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><name>OMX_IndexParamStandardComponentRole</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>==</operator> <name>OMX_ErrorNone</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"component standard role set to %s"</literal></expr></argument>, <argument><expr><name><name>role</name><operator>.</operator><name>cRole</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name>definition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_GetParameter</name><argument_list>(<argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> ?</condition><then>
<expr><name>OMX_IndexParamVideoInit</name></expr> </then><else>: <expr><name>OMX_IndexParamAudioInit</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>nPorts</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>nStartPortNumber</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>nPorts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>param</name><operator>.</operator><name>nPorts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>OmxPort</name> <modifier>*</modifier></type><name>p_port</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>definition</name><operator>.</operator><name>nPortIndex</name></name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>nStartPortNumber</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_GetParameter</name><argument_list>(<argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><name>OMX_IndexParamPortDefinition</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>definition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>definition</name><operator>.</operator><name>eDir</name></name> <operator>==</operator> <name>OMX_DirInput</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p_port</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>in</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>p_port</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>b_valid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_port_index</name></name> <operator>=</operator> <name><name>definition</name><operator>.</operator><name>nPortIndex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>definition</name></name> <operator>=</operator> <name>definition</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>omx_handle</name></name> <operator>=</operator> <name>omx_handle</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>b_valid</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>b_valid</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <name>OMX_ErrorInvalidComponent</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"couldn't find an input and output port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_component</name></name></expr></argument>, <argument><expr><literal type="string">"OMX.SEC."</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>OMX_INDEXTYPE</name></type> <name>index</name></decl>;</decl_stmt>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_GetExtensionIndex</name><argument_list>(<argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><operator>(</operator><name>OMX_STRING</name><operator>)</operator> <literal type="string">"OMX.SEC.index.ThumbnailMode"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>==</operator> <name>OMX_ErrorNone</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>OMX_BOOL</name></type> <name>enable</name> <init>= <expr><name>OMX_TRUE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_SetConfig</name><argument_list>(<argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"Unable to set ThumbnailMode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>OMX_BOOL</name></type> <name>enable</name> <init>= <expr><name>OMX_TRUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_SetConfig</name><argument_list>(<argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><name>OMX_IndexVendorSetYUV420pMode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>omx_error</name> <operator>==</operator> <name>OMX_ErrorNone</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Set OMX_IndexVendorSetYUV420pMode successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Unable to set OMX_IndexVendorSetYUV420pMode: %x"</literal></expr></argument>, <argument><expr><name>omx_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_component</name></name></expr></argument>, <argument><expr><literal type="string">"OMX.broadcom."</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>OMX_CONFIG_REQUESTCALLBACKTYPE</name></type> <name>notifications</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name>notifications</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>notifications</name><operator>.</operator><name>nPortIndex</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>i_port_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notifications</name><operator>.</operator><name>nIndex</name></name> <operator>=</operator> <name>OMX_IndexParamBrcmPixelAspectRatio</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notifications</name><operator>.</operator><name>bEnable</name></name> <operator>=</operator> <name>OMX_TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_SetParameter</name><argument_list>(<argument><expr><name>omx_handle</name></expr></argument>,
<argument><expr><name>OMX_IndexConfigRequestCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>notifications</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>omx_error</name> <operator>==</operator> <name>OMX_ErrorNone</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Enabled aspect ratio notifications"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_aspect_ratio_handled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Could not enable aspect ratio notifications"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ports</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>SetPortDefinition</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_ports</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_component</name></name></expr></argument>, <argument><expr><literal type="string">"OMX.broadcom."</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_H264</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>OMX_PARAM_BRCMVIDEODECODEERRORCONCEALMENTTYPE</name></type> <name>concanParam</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name>concanParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>concanParam</name><operator>.</operator><name>bStartWithValidFrame</name></name> <operator>=</operator> <name>OMX_FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_SetParameter</name><argument_list>(<argument><expr><name>omx_handle</name></expr></argument>,
<argument><expr><name>OMX_IndexParamBrcmVideoDecodeErrorConcealment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>concanParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>omx_error</name> <operator>==</operator> <name>OMX_ErrorNone</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"StartWithValidFrame disabled."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Could not disable StartWithValidFrame."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ports</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>OmxPort</name> <modifier>*</modifier></type><name>p_port</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_ports</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_port</name><operator>-&gt;</operator><name>definition</name><operator>.</operator><name>bEnabled</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_SendCommand</name><argument_list>( <argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><name>OMX_CommandPortEnable</name></expr></argument>,
<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_port_index</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX_CommandPortEnable on %i failed (%x)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_port_index</name></name></expr></argument>, <argument><expr><name>omx_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>WaitForSpecificOmxEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>event_queue</name></name></expr></argument>, <argument><expr><name>OMX_EventCmdComplete</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"Wait for PortEnable on %i failed (%x)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_port_index</name></name></expr></argument>, <argument><expr><name>omx_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_quirks</name></name> <operator>=</operator> <name>i_quirks</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_handle</name> <operator>=</operator> <name>omx_handle</name></expr>;</expr_stmt>
<return>return <expr><name>OMX_ErrorNone</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>DeinitialiseComponent</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>omx_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_handle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>omx_error</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>GetOmxRole</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>OpenGeneric</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AUDIO_ES</name></expr>:</case> <expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeAudio</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VIDEO_ES</name></expr>:</case> <expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeVideo</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>GetOmxRole</name><argument_list>(<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>OpenGeneric</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_video</name></name> <operator>=</operator> <name>EncodeVideo</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenGeneric</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_encode</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_ERRORTYPE</name></type> <name>omx_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_BUFFERHEADERTYPE</name> <modifier>*</modifier></type><name>p_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>InitOmxCore</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DeinitOmxCore</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b_encode</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_enc</name></name> <operator>=</operator> <name>b_encode</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitOmxEventQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>event_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_FIFO_INIT</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>pOutputPortPrivate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>b_direct</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>b_flushed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>p_fmt</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_FIFO_INIT</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>pInputPortPrivate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>b_direct</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>b_flushed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>p_fmt</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ports</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ports</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_use_pts</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"fmt in:%4.4s, out: %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>components</name></name> <operator>=</operator>
<call><name>CreateComponentsList</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>,
<argument><expr><call><name>GetOmxRole</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_enc</name></name></expr> ?</condition><then> <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr> </then><else>:
<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></else></ternary></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_enc</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_components</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>components</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"couldn't find an omx component for codec %4.4s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseGeneric</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <name>OMX_ErrorUndefined</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>components</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>OMXCodec_IsBlacklisted</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_components</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_components</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>InitialiseComponent</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_components</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>==</operator> <name>OMX_ErrorNone</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"no component could be initialised"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>OMX_SendCommand</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name>OMX_CommandStateSet</name></expr></argument>, <argument><expr><name>OMX_StateIdle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX_CommandStateSet Idle failed (%x)"</literal></expr></argument>, <argument><expr><name>omx_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ports</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>OmxPort</name> <modifier>*</modifier></type><name>p_port</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_ports</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>AllocateBuffers</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_port</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"AllocateBuffers failed (%x, %i)"</literal></expr></argument>,
<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_port_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>WaitForSpecificOmxEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>event_queue</name></name></expr></argument>, <argument><expr><name>OMX_EventCmdComplete</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"Wait for Idle failed (%x)"</literal></expr></argument>, <argument><expr><name>omx_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_SendCommand</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name>OMX_CommandStateSet</name></expr></argument>,
<argument><expr><name>OMX_StateExecuting</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX_CommandStateSet Executing failed (%x)"</literal></expr></argument>, <argument><expr><name>omx_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>WaitForSpecificOmxEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>event_queue</name></name></expr></argument>, <argument><expr><name>OMX_EventCmdComplete</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"Wait for Executing failed (%x)"</literal></expr></argument>, <argument><expr><name>omx_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>OMX_FIFO_GET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nal_size_length</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>b_direct</name></name> <operator>&amp;&amp;</operator>
<call><name>h264_isavcC</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_filled_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name> <operator>=</operator> <call><name>h264_avcC_to_AnnexB_NAL</name><argument_list>(
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_filled_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name> <operator>=</operator> <name>i_filled_len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_HEVC</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>b_direct</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_filled_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name> <operator>=</operator> <call><name>hevc_hvcC_to_AnnexB_NAL</name><argument_list>(
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_filled_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_nal_size_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name> <operator>=</operator> <name>i_filled_len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>b_direct</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>pOutputPortPrivate</name></name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_WMV3</name> <operator>&amp;&amp;</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
<name><name>p_header</name><operator>-&gt;</operator><name>nAllocLen</name></name> <operator>&gt;=</operator> <literal type="number">36</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>wmv3seq</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, 
<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr>, 
<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wmv3seq</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>, <argument><expr><name>wmv3seq</name></expr></argument>, <argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>profile</name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>profile</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name> <operator>&gt;</operator> <name><name>p_header</name><operator>-&gt;</operator><name>nAllocLen</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"buffer too small (%i,%i)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_header</name><operator>-&gt;</operator><name>nAllocLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>nAllocLen</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFlags</name></name> <operator>=</operator> <name>OMX_BUFFERFLAG_CODECCONFIG</name> <operator>|</operator> <name>OMX_BUFFERFLAG_ENDOFFRAME</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"sending codec config data %p, %p, %u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_header</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_EmptyThisBuffer</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>GetPortDefinition</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>p_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PrintOmx</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>i_port_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PrintOmx</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>i_port_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_use_pts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"using dts timestamp mode for %s"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_component</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>CloseGeneric</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>OMX_ERRORTYPE</name></type> <name>PortReconfigure</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>OmxPort</name> <modifier>*</modifier></type><name>p_port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_PARAM_PORTDEFINITIONTYPE</name></type> <name>definition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_ERRORTYPE</name></type> <name>omx_error</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OMX_DBG</name><argument_list>( <argument><expr><literal type="string">"PortReconfigure(%d)"</literal></expr></argument>, <argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>definition</name><operator>.</operator><name>eDir</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name>definition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>definition</name><operator>.</operator><name>nPortIndex</name></name> <operator>=</operator> <name><name>p_port</name><operator>-&gt;</operator><name>i_port_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_GetParameter</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name>OMX_IndexParamPortDefinition</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>definition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name> <operator>||</operator> <operator>(</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameWidth</name></name> <operator>||</operator>
<operator>!</operator><name><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameHeight</name></name><operator>)</operator><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>OMX_ErrorUndefined</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_SendCommand</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name>OMX_CommandPortDisable</name></expr></argument>,
<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_port_index</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX_CommandPortDisable on %i failed (%x)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_port_index</name></name></expr></argument>, <argument><expr><name>omx_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>FreeBuffers</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_port</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"FreeBuffers failed (%x, %i)"</literal></expr></argument>,
<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_port_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>WaitForSpecificOmxEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>event_queue</name></name></expr></argument>, <argument><expr><name>OMX_EventCmdComplete</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"Wait for PortDisable failed (%x)"</literal></expr></argument>, <argument><expr><name>omx_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>GetPortDefinition</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>p_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>AUDIO_ES</name></expr> )</condition>
<block>{<block_content>











<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_SetParameter</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name>OMX_IndexParamPortDefinition</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>definition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX_SetParameter failed (%x : %s)"</literal></expr></argument>,
<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><call><name>ErrorToString</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_SendCommand</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name>OMX_CommandPortEnable</name></expr></argument>,
<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_port_index</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX_CommandPortEnable on %i failed (%x)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_port_index</name></name></expr></argument>, <argument><expr><name>omx_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>AllocateBuffers</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_port</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"OMX_AllocateBuffers failed (%x, %i)"</literal></expr></argument>,
<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_port</name><operator>-&gt;</operator><name>i_port_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>WaitForSpecificOmxEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>event_queue</name></name></expr></argument>, <argument><expr><name>OMX_EventCmdComplete</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"Wait for PortEnable failed (%x)"</literal></expr></argument>, <argument><expr><name>omx_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PrintOmx</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>i_port_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PrintOmx</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>i_port_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OMX_DBG</name><argument_list>( <argument><expr><literal type="string">"PortReconfigure(%d)::done"</literal></expr></argument>, <argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>definition</name><operator>.</operator><name>eDir</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<label><name>error</name>:</label>
<return>return <expr><name>omx_error</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeVideoOutput</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>OmxPort</name> <modifier>*</modifier></type><name>p_port</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>OMX_BUFFERHEADERTYPE</name> <modifier>*</modifier></type><name>p_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_next_pic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_ERRORTYPE</name></type> <name>omx_error</name></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>!</operator><name>p_pic</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>OMX_FIFO_PEEK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_header</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>p_port</name><operator>-&gt;</operator><name>b_update_def</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>GetPortDefinition</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_port</name></expr></argument>, <argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>p_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>b_update_def</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"GetPortDefinition failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>decoder_UpdateVideoFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>pAppPrivate</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_pic</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>decoder_NewPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_pic</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CopyOmxPicture</name><argument_list>(<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eColorFormat</name></name></expr></argument>,
<argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nSliceHeight</name></name></expr></argument>,
<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_stride</name></name></expr></argument>,
<argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name> <operator>+</operator> <name><name>p_header</name><operator>-&gt;</operator><name>nOffset</name></name></expr></argument>,
<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>i_frame_stride_chroma_div</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_pic</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <call><name>FromOmxTicks</name><argument_list>(<argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>nTimeStamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>pAppPrivate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>p_port</name><operator>-&gt;</operator><name>b_direct</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_header</name><operator>-&gt;</operator><name>pAppPrivate</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_next_pic</name> <operator>=</operator> <call><name>decoder_NewPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_next_pic</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>OMX_FIFO_GET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>pAppPrivate</name></name> <operator>=</operator> <name>p_next_pic</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>pInputPortPrivate</name></name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name> <operator>=</operator> <name><name>p_next_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>OMX_FIFO_GET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>OMX_DBG</name><argument_list>( <argument><expr><literal type="string">"FillThisBuffer %p, %p"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_header</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_FillThisBuffer</name><argument_list>(<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>pp_pic</name> <operator>=</operator> <name>p_pic</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>error</name>:</label>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeVideoInput</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>OmxPort</name> <modifier>*</modifier></type><name>p_port</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_input_used</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_reconfig</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_BUFFERHEADERTYPE</name> <modifier>*</modifier></type><name>p_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><operator>*</operator><name>pp_block</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>OMX_FIFO_GET_TIMEOUT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_port</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_header</name> <operator>&amp;&amp;</operator> <name><name>p_header</name><operator>-&gt;</operator><name>nFlags</name></name> <operator>&amp;</operator> <name>SENTINEL_FLAG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_reconfig</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p_reconfig</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>p_header</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>decode_more</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>i_input_used</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFlags</name></name> <operator>=</operator> <name>OMX_BUFFERFLAG_ENDOFFRAME</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_use_pts</name></name> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nTimeStamp</name></name> <operator>=</operator> <call><name>ToOmxTicks</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nTimeStamp</name></name> <operator>=</operator> <call><name>ToOmxTicks</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if<condition>(<expr><name><name>p_port</name><operator>-&gt;</operator><name>b_direct</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>pOutputPortPrivate</name></name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>pAppPrivate</name></name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_input_used</name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name> <operator>&gt;</operator> <name><name>p_header</name><operator>-&gt;</operator><name>nAllocLen</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>nAllocLen</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i_input_used</name></expr></argument>, <argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_input_used</name> <operator>+=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_input_used</name> <operator>==</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>decode_more</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFlags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>OMX_BUFFERFLAG_ENDOFFRAME</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><call><name>h264_AVC_to_AnnexB</name><argument_list>( <argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>, <argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nal_size_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_DBG</name><argument_list>( <argument><expr><literal type="string">"EmptyThisBuffer %p, %p, %u, %"</literal><name>PRId64</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_header</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr></argument>,
<argument><expr><call><name>FromOmxTicks</name><argument_list>(<argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>nTimeStamp</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_EmptyThisBuffer</name><argument_list>(<argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>b_flushed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>decode_more</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>DecodeVideoInput</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_port</name></expr></argument>, <argument><expr><name>pp_block</name></expr></argument>, <argument><expr><name>i_input_used</name></expr></argument>,
<argument><expr><name>p_reconfig</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>b_flushed</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"flushing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_SendCommand</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name>OMX_CommandFlush</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>definition</name><operator>.</operator><name>nPortIndex</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>b_flushed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeVideo</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_ERRORTYPE</name></type> <name>omx_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"error during decoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Flush</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_aspect_ratio_handled</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>max_polling_attempts</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attempts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>p_block</name></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_reconfig</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>DecodeVideoInput</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_reconfig</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_reconfig</name> <operator>&amp;&amp;</operator>
<call><name>DecodeVideoOutput</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_pic</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ports</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>OmxPort</name> <modifier>*</modifier></type><name>p_port</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_ports</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_port</name><operator>-&gt;</operator><name>b_reconfigure</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>PortReconfigure</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>b_reconfigure</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"PortReconfigure failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_port</name><operator>-&gt;</operator><name>b_update_def</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>GetPortDefinition</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_port</name></expr></argument>, <argument><expr><name><name>p_port</name><operator>-&gt;</operator><name>p_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>b_update_def</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"GetPortDefinition failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p_pic</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>decoder_QueueVideo</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>attempts</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>DecodeAudio</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_BUFFERHEADERTYPE</name> <modifier>*</modifier></type><name>p_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_ERRORTYPE</name></type> <name>omx_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"error during decoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>b_flushed</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"flushing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_SendCommand</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name>OMX_CommandFlush</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>definition</name><operator>.</operator><name>nPortIndex</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>b_flushed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name>p_block</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OMX_FIFO_PEEK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_header</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_samples</name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>i_samples</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>decoder_UpdateAudioFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name> <init>= <expr><call><name>decoder_NewAudioBuffer</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>i_samples</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_buffer</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>, <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>timestamp</name> <init>= <expr><call><name>FromOmxTicks</name><argument_list>(<argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>nTimeStamp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>timestamp</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>timestamp</name> <operator>!=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>i_samples</name></expr></argument> )</argument_list></call> <operator>-</operator>
<name><name>p_buffer</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decoder_QueueAudio</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>OMX_DBG</name><argument_list>( <argument><expr><literal type="string">"FillThisBuffer %p, %p"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_header</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_FIFO_GET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_FillThisBuffer</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>OMX_FIFO_GET_TIMEOUT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>, <argument><expr><literal type="number">200000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_header</name> <operator>&amp;&amp;</operator> <name><name>p_header</name><operator>-&gt;</operator><name>nFlags</name></name> <operator>&amp;</operator> <name>SENTINEL_FLAG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>reconfig</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_header</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFlags</name></name> <operator>=</operator> <name>OMX_BUFFERFLAG_ENDOFFRAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nTimeStamp</name></name> <operator>=</operator> <call><name>ToOmxTicks</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>b_direct</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>pOutputPortPrivate</name></name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>pAppPrivate</name></name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name> <operator>&gt;</operator> <name><name>p_header</name><operator>-&gt;</operator><name>nAllocLen</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"buffer too small (%u,%u)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>p_header</name><operator>-&gt;</operator><name>nAllocLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>nAllocLen</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>OMX_DBG</name><argument_list>( <argument><expr><literal type="string">"EmptyThisBuffer %p, %p, %u"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_header</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_EmptyThisBuffer</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>b_flushed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></while>

<label><name>reconfig</name>:</label>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ports</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>OmxPort</name> <modifier>*</modifier></type><name>p_port</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_ports</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_port</name><operator>-&gt;</operator><name>b_reconfigure</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>b_reconfigure</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>PortReconfigure</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"PortReconfigure failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>EncodeVideo</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator> <name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_enc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OMX_ERRORTYPE</name></type> <name>omx_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_BUFFERHEADERTYPE</name> <modifier>*</modifier></type><name>p_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"error during encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>OMX_FIFO_GET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>p_header</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>b_direct</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>pOutputPortPrivate</name></name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>CopyVlcPicture</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>i_frame_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFlags</name></name> <operator>=</operator> <name>OMX_BUFFERFLAG_ENDOFFRAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nTimeStamp</name></name> <operator>=</operator> <call><name>ToOmxTicks</name><argument_list>(<argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_DBG</name><argument_list>( <argument><expr><literal type="string">"EmptyThisBuffer %p, %p, %u"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_header</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_EmptyThisBuffer</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>b_flushed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ports</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>OmxPort</name> <modifier>*</modifier></type><name>p_port</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_ports</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_port</name><operator>-&gt;</operator><name>b_reconfigure</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_port</name><operator>-&gt;</operator><name>b_reconfigure</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>PortReconfigure</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>, <argument><expr><literal type="string">"PortReconfigure failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<while>while<condition>(<expr><operator>!</operator><name>p_block</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>OMX_FIFO_GET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_header</name><operator>-&gt;</operator><name>nFlags</name></name> <operator>&amp;</operator> <name>OMX_BUFFERFLAG_CODECCONFIG</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"received codec config %i"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>pAppPrivate</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_block</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>, <argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>FromOmxTicks</name><argument_list>(<argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>nTimeStamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>nFilledLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>pAppPrivate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>OMX_DBG</name><argument_list>( <argument><expr><literal type="string">"FillThisBuffer %p, %p"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_header</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_FillThisBuffer</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_block</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseGeneric</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DeinitialiseComponent</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>omx_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DeinitOmxCore</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeinitOmxEventQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>event_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OMX_FIFO_DESTROY</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_FIFO_DESTROY</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>OMX_ERRORTYPE</name></type> <name>OmxEventHandler</name><parameter_list>( <parameter><decl><type><name>OMX_HANDLETYPE</name></type> <name>omx_handle</name></decl></parameter>,
<parameter><decl><type><name>OMX_PTR</name></type> <name>app_data</name></decl></parameter>, <parameter><decl><type><name>OMX_EVENTTYPE</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>OMX_U32</name></type> <name>data_1</name></decl></parameter>,
<parameter><decl><type><name>OMX_U32</name></type> <name>data_2</name></decl></parameter>, <parameter><decl><type><name>OMX_PTR</name></type> <name>event_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>app_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>omx_handle</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PrintOmxEvent</name><argument_list>(<argument><expr><operator>(</operator><name>vlc_object_t</name> <operator>*</operator><operator>)</operator> <name>p_dec</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>data_1</name></expr></argument>, <argument><expr><name>data_2</name></expr></argument>, <argument><expr><name>event_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>event</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>OMX_EventError</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>OMX_EventPortSettingsChanged</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name>data_2</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>data_2</name> <operator>==</operator> <name>OMX_IndexParamPortDefinition</name> <operator>||</operator>
<name>data_2</name> <operator>==</operator> <name>OMX_IndexParamAudioPcm</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>OMX_BUFFERHEADERTYPE</name> <modifier>*</modifier></type><name>sentinel</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ports</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>definition</name><operator>.</operator><name>eDir</name></name> <operator>==</operator> <name>OMX_DirOutput</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_reconfigure</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>sentinel</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sentinel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sentinel</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sentinel</name><operator>-&gt;</operator><name>nFlags</name></name> <operator>=</operator> <name>SENTINEL_FLAG</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OMX_FIFO_PUT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>sentinel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>data_2</name> <operator>==</operator> <name>OMX_IndexConfigCommonOutputCrop</name></expr> )</condition>
<block>{<block_content>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ports</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>definition</name><operator>.</operator><name>nPortIndex</name></name> <operator>==</operator> <name>data_1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ports</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_update_def</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Unhandled setting change %x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>data_2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>OMX_EventParamOrConfigChanged</name></expr>:</case>
<expr_stmt><expr><call><name>UpdatePixelAspect</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>PostOmxEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>event_queue</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>data_1</name></expr></argument>, <argument><expr><name>data_2</name></expr></argument>, <argument><expr><name>event_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OMX_ErrorNone</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OMX_ERRORTYPE</name></type> <name>OmxEmptyBufferDone</name><parameter_list>( <parameter><decl><type><name>OMX_HANDLETYPE</name></type> <name>omx_handle</name></decl></parameter>,
<parameter><decl><type><name>OMX_PTR</name></type> <name>app_data</name></decl></parameter>, <parameter><decl><type><name>OMX_BUFFERHEADERTYPE</name> <modifier>*</modifier></type><name>omx_header</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>app_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>omx_handle</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OMX_DBG</name><argument_list>( <argument><expr><literal type="string">"OmxEmptyBufferDone %p, %p"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>omx_header</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>omx_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>omx_header</name><operator>-&gt;</operator><name>pAppPrivate</name></name> <operator>||</operator> <name><name>omx_header</name><operator>-&gt;</operator><name>pOutputPortPrivate</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><operator>(</operator><name>block_t</name> <operator>*</operator><operator>)</operator><name><name>omx_header</name><operator>-&gt;</operator><name>pAppPrivate</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>omx_header</name><operator>-&gt;</operator><name>pBuffer</name></name> <operator>=</operator> <name><name>omx_header</name><operator>-&gt;</operator><name>pOutputPortPrivate</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>p_block</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>omx_header</name><operator>-&gt;</operator><name>pAppPrivate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>OMX_FIFO_PUT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>omx_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OMX_ErrorNone</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OMX_ERRORTYPE</name></type> <name>OmxFillBufferDone</name><parameter_list>( <parameter><decl><type><name>OMX_HANDLETYPE</name></type> <name>omx_handle</name></decl></parameter>,
<parameter><decl><type><name>OMX_PTR</name></type> <name>app_data</name></decl></parameter>, <parameter><decl><type><name>OMX_BUFFERHEADERTYPE</name> <modifier>*</modifier></type><name>omx_header</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>app_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>omx_handle</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OMX_DBG</name><argument_list>( <argument><expr><literal type="string">"OmxFillBufferDone %p, %p, %u, %"</literal><name>PRId64</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>omx_header</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>omx_header</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>omx_header</name><operator>-&gt;</operator><name>nFilledLen</name></name></expr></argument>,
<argument><expr><call><name>FromOmxTicks</name><argument_list>(<argument><expr><name><name>omx_header</name><operator>-&gt;</operator><name>nTimeStamp</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>omx_header</name><operator>-&gt;</operator><name>pInputPortPrivate</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>omx_header</name><operator>-&gt;</operator><name>pBuffer</name></name> <operator>=</operator> <name><name>omx_header</name><operator>-&gt;</operator><name>pInputPortPrivate</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>OMX_FIFO_PUT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>omx_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OMX_ErrorNone</name></expr>;</return>
</block_content>}</block></function>
</unit>
