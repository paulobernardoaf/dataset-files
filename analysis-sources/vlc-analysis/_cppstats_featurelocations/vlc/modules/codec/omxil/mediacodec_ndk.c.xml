<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\omxil\mediacodec_ndk.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OMX_Core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OMX_Component.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"omxil_utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mediacodec.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>MC_API_NO_QUIRKS</name> <operator>==</operator> <name>OMXCODEC_NO_QUIRKS</name>
<operator>&amp;&amp;</operator> <name>MC_API_QUIRKS_NEED_CSD</name> <operator>==</operator> <name>OMXCODEC_QUIRKS_NEED_CSD</name>
<operator>&amp;&amp;</operator> <name>MC_API_VIDEO_QUIRKS_IGNORE_PADDING</name> <operator>==</operator> <name>OMXCODEC_VIDEO_QUIRKS_IGNORE_PADDING</name>
<operator>&amp;&amp;</operator> <name>MC_API_VIDEO_QUIRKS_SUPPORT_INTERLACED</name> <operator>==</operator> <name>OMXCODEC_VIDEO_QUIRKS_SUPPORT_INTERLACED</name>
<operator>&amp;&amp;</operator> <name>MC_API_AUDIO_QUIRKS_NEED_CHANNELS</name> <operator>==</operator> <name>OMXCODEC_AUDIO_QUIRKS_NEED_CHANNELS</name></expr></argument>,
<argument><expr><literal type="string">"mediacodec.h/omx_utils.h mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>char</name><modifier>*</modifier></type> <name>MediaCodec_GetName</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mime</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>hxxx_profile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_quirks</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_NAME</name></cpp:macro> <cpp:value>"mediacodec_ndk"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMEDIACODEC_FLAG_CODEC_CONFIG</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>





<typedef>typedef <type><enum>enum <block>{
<decl><name>AMEDIA_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>AMEDIA_ERROR_BASE</name> <init>= <expr><operator>-</operator><literal type="number">10000</literal></expr></init></decl>,
<decl><name>AMEDIA_ERROR_UNKNOWN</name> <init>= <expr><name>AMEDIA_ERROR_BASE</name></expr></init></decl>,
<decl><name>AMEDIA_ERROR_MALFORMED</name> <init>= <expr><name>AMEDIA_ERROR_BASE</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>AMEDIA_ERROR_UNSUPPORTED</name> <init>= <expr><name>AMEDIA_ERROR_BASE</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>AMEDIA_ERROR_INVALID_OBJECT</name> <init>= <expr><name>AMEDIA_ERROR_BASE</name> <operator>-</operator> <literal type="number">3</literal></expr></init></decl>,
<decl><name>AMEDIA_ERROR_INVALID_PARAMETER</name> <init>= <expr><name>AMEDIA_ERROR_BASE</name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>,

<decl><name>AMEDIA_DRM_ERROR_BASE</name> <init>= <expr><operator>-</operator><literal type="number">20000</literal></expr></init></decl>,
<decl><name>AMEDIA_DRM_NOT_PROVISIONED</name> <init>= <expr><name>AMEDIA_DRM_ERROR_BASE</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>AMEDIA_DRM_RESOURCE_BUSY</name> <init>= <expr><name>AMEDIA_DRM_ERROR_BASE</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>AMEDIA_DRM_DEVICE_REVOKED</name> <init>= <expr><name>AMEDIA_DRM_ERROR_BASE</name> <operator>-</operator> <literal type="number">3</literal></expr></init></decl>,
<decl><name>AMEDIA_DRM_SHORT_BUFFER</name> <init>= <expr><name>AMEDIA_DRM_ERROR_BASE</name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>,
<decl><name>AMEDIA_DRM_SESSION_NOT_OPENED</name> <init>= <expr><name>AMEDIA_DRM_ERROR_BASE</name> <operator>-</operator> <literal type="number">5</literal></expr></init></decl>,
<decl><name>AMEDIA_DRM_TAMPER_DETECTED</name> <init>= <expr><name>AMEDIA_DRM_ERROR_BASE</name> <operator>-</operator> <literal type="number">6</literal></expr></init></decl>,
<decl><name>AMEDIA_DRM_VERIFY_FAILED</name> <init>= <expr><name>AMEDIA_DRM_ERROR_BASE</name> <operator>-</operator> <literal type="number">7</literal></expr></init></decl>,
<decl><name>AMEDIA_DRM_NEED_KEY</name> <init>= <expr><name>AMEDIA_DRM_ERROR_BASE</name> <operator>-</operator> <literal type="number">8</literal></expr></init></decl>,
<decl><name>AMEDIA_DRM_LICENSE_EXPIRED</name> <init>= <expr><name>AMEDIA_DRM_ERROR_BASE</name> <operator>-</operator> <literal type="number">9</literal></expr></init></decl>,

}</block></enum></type> <name>media_status_t</name>;</typedef>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__USE_FILE_OFFSET64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>off_t_compat</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>off_t_compat</name></cpp:macro> <cpp:value>off_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>AMediaCodec</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>AMediaCodec</name></name></type> <name>AMediaCodec</name>;</typedef>

<struct>struct <name>AMediaCodecBufferInfo</name> <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>presentationTimeUs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>AMediaCodecBufferInfo</name></name></type> <name>AMediaCodecBufferInfo</name>;</typedef>

<enum>enum <block>{
<decl><name>AMEDIACODEC_BUFFER_FLAG_END_OF_STREAM</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>AMEDIACODEC_CONFIGURE_FLAG_ENCODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>AMEDIACODEC_INFO_OUTPUT_BUFFERS_CHANGED</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>,
<decl><name>AMEDIACODEC_INFO_OUTPUT_FORMAT_CHANGED</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,
<decl><name>AMEDIACODEC_INFO_TRY_AGAIN_LATER</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>

<struct_decl>struct <name>AMediaFormat</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>AMediaFormat</name></name></type> <name>AMediaFormat</name>;</typedef>

<struct_decl>struct <name>AMediaCrypto</name>;</struct_decl>
<typedef>typedef <type><name><name>struct</name> <name>AMediaCrypto</name></name></type> <name>AMediaCrypto</name>;</typedef>





<typedef>typedef <function_decl><type><name>AMediaCodec</name><modifier>*</modifier></type> (<modifier>*</modifier><name>pf_AMediaCodec_createCodecByName</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>media_status_t</name></type> (<modifier>*</modifier><name>pf_AMediaCodec_configure</name>)<parameter_list>(<parameter><decl><type><name>AMediaCodec</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AMediaFormat</name><modifier>*</modifier></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>ANativeWindow</name><modifier>*</modifier></type> <name>surface</name></decl></parameter>,
<parameter><decl><type><name>AMediaCrypto</name> <modifier>*</modifier></type><name>crypto</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>media_status_t</name></type> (<modifier>*</modifier><name>pf_AMediaCodec_start</name>)<parameter_list>(<parameter><decl><type><name>AMediaCodec</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>media_status_t</name></type> (<modifier>*</modifier><name>pf_AMediaCodec_stop</name>)<parameter_list>(<parameter><decl><type><name>AMediaCodec</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>media_status_t</name></type> (<modifier>*</modifier><name>pf_AMediaCodec_flush</name>)<parameter_list>(<parameter><decl><type><name>AMediaCodec</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>media_status_t</name></type> (<modifier>*</modifier><name>pf_AMediaCodec_delete</name>)<parameter_list>(<parameter><decl><type><name>AMediaCodec</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>AMediaFormat</name><modifier>*</modifier></type> (<modifier>*</modifier><name>pf_AMediaCodec_getOutputFormat</name>)<parameter_list>(<parameter><decl><type><name>AMediaCodec</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>pf_AMediaCodec_dequeueInputBuffer</name>)<parameter_list>(<parameter><decl><type><name>AMediaCodec</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>timeoutUs</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>uint8_t</name><modifier>*</modifier></type> (<modifier>*</modifier><name>pf_AMediaCodec_getInputBuffer</name>)<parameter_list>(<parameter><decl><type><name>AMediaCodec</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>media_status_t</name></type> (<modifier>*</modifier><name>pf_AMediaCodec_queueInputBuffer</name>)<parameter_list>(<parameter><decl><type><name>AMediaCodec</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>off_t_compat</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>pf_AMediaCodec_dequeueOutputBuffer</name>)<parameter_list>(<parameter><decl><type><name>AMediaCodec</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>AMediaCodecBufferInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timeoutUs</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>uint8_t</name><modifier>*</modifier></type> (<modifier>*</modifier><name>pf_AMediaCodec_getOutputBuffer</name>)<parameter_list>(<parameter><decl><type><name>AMediaCodec</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>media_status_t</name></type> (<modifier>*</modifier><name>pf_AMediaCodec_releaseOutputBuffer</name>)<parameter_list>(<parameter><decl><type><name>AMediaCodec</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>render</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>media_status_t</name></type> (<modifier>*</modifier><name>pf_AMediaCodec_releaseOutputBufferAtTime</name>)<parameter_list>(<parameter><decl><type><name>AMediaCodec</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timestampNs</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>media_status_t</name></type> (<modifier>*</modifier><name>pf_AMediaCodec_setOutputSurface</name>)<parameter_list>(<parameter><decl><type><name>AMediaCodec</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>ANativeWindow</name> <modifier>*</modifier></type><name>surface</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>AMediaFormat</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>pf_AMediaFormat_new</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>media_status_t</name></type> (<modifier>*</modifier><name>pf_AMediaFormat_delete</name>)<parameter_list>(<parameter><decl><type><name>AMediaFormat</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_AMediaFormat_setString</name>)<parameter_list>(<parameter><decl><type><name>AMediaFormat</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_AMediaFormat_setInt32</name>)<parameter_list>(<parameter><decl><type><name>AMediaFormat</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>pf_AMediaFormat_getInt32</name>)<parameter_list>(<parameter><decl><type><name>AMediaFormat</name><modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>syms</name>
<block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>pf_AMediaCodec_createCodecByName</name></type> <name>createCodecByName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pf_AMediaCodec_configure</name></type> <name>configure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pf_AMediaCodec_start</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pf_AMediaCodec_stop</name></type> <name>stop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pf_AMediaCodec_flush</name></type> <name>flush</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pf_AMediaCodec_delete</name></type> <name>delete</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pf_AMediaCodec_getOutputFormat</name></type> <name>getOutputFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pf_AMediaCodec_dequeueInputBuffer</name></type> <name>dequeueInputBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pf_AMediaCodec_getInputBuffer</name></type> <name>getInputBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pf_AMediaCodec_queueInputBuffer</name></type> <name>queueInputBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pf_AMediaCodec_dequeueOutputBuffer</name></type> <name>dequeueOutputBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pf_AMediaCodec_getOutputBuffer</name></type> <name>getOutputBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pf_AMediaCodec_releaseOutputBuffer</name></type> <name>releaseOutputBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pf_AMediaCodec_releaseOutputBufferAtTime</name></type> <name>releaseOutputBufferAtTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pf_AMediaCodec_setOutputSurface</name></type> <name>setOutputSurface</name></decl>;</decl_stmt>
}</block> <decl><name>AMediaCodec</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>pf_AMediaFormat_new</name></type> <name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pf_AMediaFormat_delete</name></type> <name>delete</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pf_AMediaFormat_setString</name></type> <name>setString</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pf_AMediaFormat_setInt32</name></type> <name>setInt32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pf_AMediaFormat_getInt32</name></type> <name>getInt32</name></decl>;</decl_stmt>
}</block> <decl><name>AMediaFormat</name></decl>;</struct>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>syms</name></name></type> <name>syms</name></decl>;</decl_stmt>

<struct>struct <name>members</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>critical</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>members</name></name></type> <name><name>members</name><index>[]</index></name> <init>=
<expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(struct syms, AMediaCodec.x)</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"AMediaCodec_createCodecByName"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>createCodecByName</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AMediaCodec_configure"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>configure</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AMediaCodec_start"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AMediaCodec_stop"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>stop</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AMediaCodec_flush"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AMediaCodec_delete"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>delete</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AMediaCodec_getOutputFormat"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>getOutputFormat</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AMediaCodec_dequeueInputBuffer"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>dequeueInputBuffer</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AMediaCodec_getInputBuffer"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>getInputBuffer</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AMediaCodec_queueInputBuffer"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>queueInputBuffer</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AMediaCodec_dequeueOutputBuffer"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>dequeueOutputBuffer</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AMediaCodec_getOutputBuffer"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>getOutputBuffer</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AMediaCodec_releaseOutputBuffer"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>releaseOutputBuffer</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AMediaCodec_releaseOutputBufferAtTime"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>releaseOutputBufferAtTime</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AMediaCodec_setOutputSurface"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>setOutputSurface</name></expr></argument>)</argument_list></call></expr>, <expr><name>false</name></expr> }</block></expr>,
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OFF</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(struct syms, AMediaFormat.x)</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"AMediaFormat_new"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AMediaFormat_delete"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>delete</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AMediaFormat_setString"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>setString</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AMediaFormat_setInt32"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>setInt32</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AMediaFormat_getInt32"</literal></expr>, <expr><call><name>OFF</name><argument_list>(<argument><expr><name>getInt32</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr> }</block></expr>,
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OFF</name></cpp:undef>
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OFF</name></cpp:undef>



<function><type><specifier>static</specifier> <name>bool</name></type>
<name>InitSymbols</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_mutex_t</name></type> <name>lock</name> <init>= <expr><name>VLC_STATIC_MUTEX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>i_init_state</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_init_state</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_init_state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ndk_handle</name> <init>= <expr><call><name>dlopen</name><argument_list>(<argument><expr><literal type="string">"libmediandk.so"</literal></expr></argument>, <argument><expr><name>RTLD_NOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ndk_handle</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sym</name> <init>= <expr><call><name>dlsym</name><argument_list>(<argument><expr><name>ndk_handle</name></expr></argument>, <argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sym</name> <operator>&amp;&amp;</operator> <name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>critical</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name>ndk_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>syms</name> <operator>+</operator> <name><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator> <name>sym</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>i_init_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>i_init_state</name> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"MediaCodec NDK init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<struct>struct <name>mc_api_sys</name>
<block>{
<decl_stmt><decl><type><name>AMediaCodec</name><modifier>*</modifier></type> <name>p_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AMediaFormat</name><modifier>*</modifier></type> <name>p_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AMediaCodecBufferInfo</name></type> <name>info</name></decl>;</decl_stmt>
}</block>;</struct>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ConfigureDecoder</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>mc_api_args</name></name> <modifier>*</modifier></type><name>p_args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ANativeWindow</name> <modifier>*</modifier></type><name>p_anw</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>psz_mime</name></name> <operator>&amp;&amp;</operator> <name><name>api</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name> <operator>=</operator> <call><name><name>syms</name><operator>.</operator><name>AMediaCodec</name><operator>.</operator><name>createCodecByName</name></name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"AMediaCodec.createCodecByName for %s failed"</literal></expr></argument>,
<argument><expr><name><name>api</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name> <operator>=</operator> <call><name><name>syms</name><operator>.</operator><name>AMediaFormat</name><operator>.</operator><name>new</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"AMediaFormat.new failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>syms</name><operator>.</operator><name>AMediaFormat</name><operator>.</operator><name>setInt32</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name></expr></argument>, <argument><expr><literal type="string">"encoder"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>syms</name><operator>.</operator><name>AMediaFormat</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name></expr></argument>, <argument><expr><literal type="string">"mime"</literal></expr></argument>, <argument><expr><name><name>api</name><operator>-&gt;</operator><name>psz_mime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>syms</name><operator>.</operator><name>AMediaFormat</name><operator>.</operator><name>setInt32</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name></expr></argument>, <argument><expr><literal type="string">"max-input-size"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>api</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>syms</name><operator>.</operator><name>AMediaFormat</name><operator>.</operator><name>setInt32</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>, <argument><expr><name><name>p_args</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>syms</name><operator>.</operator><name>AMediaFormat</name><operator>.</operator><name>setInt32</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name></expr></argument>, <argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name><name>p_args</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>syms</name><operator>.</operator><name>AMediaFormat</name><operator>.</operator><name>setInt32</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name></expr></argument>, <argument><expr><literal type="string">"rotation-degrees"</literal></expr></argument>, <argument><expr><name><name>p_args</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_angle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_args</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>p_surface</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_anw</name> <operator>=</operator> <name><name>p_args</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>p_surface</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_args</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>b_tunneled_playback</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>syms</name><operator>.</operator><name>AMediaFormat</name><operator>.</operator><name>setInt32</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name></expr></argument>,
<argument><expr><literal type="string">"feature-tunneled-playback"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_args</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>b_adaptive_playback</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>syms</name><operator>.</operator><name>AMediaFormat</name><operator>.</operator><name>setInt32</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name></expr></argument>,
<argument><expr><literal type="string">"feature-adaptive-playback"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name><name>syms</name><operator>.</operator><name>AMediaFormat</name><operator>.</operator><name>setInt32</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name></expr></argument>, <argument><expr><literal type="string">"sample-rate"</literal></expr></argument>, <argument><expr><name><name>p_args</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>syms</name><operator>.</operator><name>AMediaFormat</name><operator>.</operator><name>setInt32</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name></expr></argument>, <argument><expr><literal type="string">"channel-count"</literal></expr></argument>, <argument><expr><name><name>p_args</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channel_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>syms</name><operator>.</operator><name>AMediaCodec</name><operator>.</operator><name>configure</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name></expr></argument>,
<argument><expr><name>p_anw</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AMEDIA_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"AMediaCodec.configure failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>b_direct_rendering</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>p_anw</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Stop</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>b_direct_rendering</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>api</name><operator>-&gt;</operator><name>b_started</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>syms</name><operator>.</operator><name>AMediaCodec</name><operator>.</operator><name>stop</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>b_started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>syms</name><operator>.</operator><name>AMediaCodec</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>syms</name><operator>.</operator><name>AMediaFormat</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"MediaCodec via NDK closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Start</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>MC_API_ERROR</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>syms</name><operator>.</operator><name>AMediaCodec</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AMEDIA_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"AMediaCodec.start failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>b_started</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"MediaCodec via NDK opened"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Stop</name><argument_list>(<argument><expr><name>api</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Flush</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>syms</name><operator>.</operator><name>AMediaCodec</name><operator>.</operator><name>flush</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AMEDIA_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>DequeueInput</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_index</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_index</name> <operator>=</operator> <call><name><name>syms</name><operator>.</operator><name>AMediaCodec</name><operator>.</operator><name>dequeueInputBuffer</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name></expr></argument>, <argument><expr><name>i_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_index</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i_index</name> <operator>==</operator> <name>AMEDIACODEC_INFO_TRY_AGAIN_LATER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MC_API_INFO_TRYAGAIN</name></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"AMediaCodec.dequeueInputBuffer failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>QueueInput</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_size</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_ts</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_mc_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_mc_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_flags</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>b_config</name></expr> ?</condition><then> <expr><name>AMEDIACODEC_FLAG_CODEC_CONFIG</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name>p_buf</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>AMEDIACODEC_BUFFER_FLAG_END_OF_STREAM</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_mc_buf</name> <operator>=</operator> <call><name><name>syms</name><operator>.</operator><name>AMediaCodec</name><operator>.</operator><name>getInputBuffer</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name></expr></argument>,
<argument><expr><name>i_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_mc_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_mc_buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_mc_size</name> <operator>&gt;</operator> <name>i_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_mc_size</name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p_mc_buf</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_mc_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>syms</name><operator>.</operator><name>AMediaCodec</name><operator>.</operator><name>queueInputBuffer</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name></expr></argument>, <argument><expr><name>i_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_mc_size</name></expr></argument>,
<argument><expr><name>i_ts</name></expr></argument>, <argument><expr><name>i_flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AMEDIA_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"AMediaCodec.queueInputBuffer failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>GetFormatInteger</name><parameter_list>(<parameter><decl><type><name>AMediaFormat</name> <modifier>*</modifier></type><name>p_format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>syms</name><operator>.</operator><name>AMediaFormat</name><operator>.</operator><name>getInt32</name></name><argument_list>(<argument><expr><name>p_format</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_out</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>DequeueOutput</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_index</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_index</name> <operator>=</operator> <call><name><name>syms</name><operator>.</operator><name>AMediaCodec</name><operator>.</operator><name>dequeueOutputBuffer</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,
<argument><expr><name>i_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_index</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i_index</name> <operator>==</operator> <name>AMEDIACODEC_INFO_TRY_AGAIN_LATER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MC_API_INFO_TRYAGAIN</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i_index</name> <operator>==</operator> <name>AMEDIACODEC_INFO_OUTPUT_BUFFERS_CHANGED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MC_API_INFO_OUTPUT_BUFFERS_CHANGED</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i_index</name> <operator>==</operator> <name>AMEDIACODEC_INFO_OUTPUT_FORMAT_CHANGED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MC_API_INFO_OUTPUT_FORMAT_CHANGED</name></expr>;</return></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"AMediaCodec.dequeueOutputBuffer failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>GetOutput</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_index</name></decl></parameter>, <parameter><decl><type><name>mc_api_out</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MC_OUT_TYPE_BUF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>i_index</name></name> <operator>=</operator> <name>i_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>i_ts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>presentationTimeUs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>b_eos</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>AMEDIACODEC_BUFFER_FLAG_END_OF_STREAM</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>api</name><operator>-&gt;</operator><name>b_direct_rendering</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>p_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>i_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_mc_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_mc_buf</name> <init>= <expr><call><name><name>syms</name><operator>.</operator><name>AMediaCodec</name><operator>.</operator><name>getOutputBuffer</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name></expr></argument>,
<argument><expr><name>i_index</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_mc_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_mc_buf</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_out</name><operator>-&gt;</operator><name>b_eos</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"AMediaCodec.getOutputBuffer failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>p_ptr</name></name> <operator>=</operator> <name>p_mc_buf</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>i_size</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i_index</name> <operator>==</operator> <name>MC_API_INFO_OUTPUT_FORMAT_CHANGED</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>AMediaFormat</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><call><name><name>syms</name><operator>.</operator><name>AMediaCodec</name><operator>.</operator><name>getOutputFormat</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MC_OUT_TYPE_CONF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>b_eos</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>api</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>video</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>GetFormatInteger</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>video</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>GetFormatInteger</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"height"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>video</name><operator>.</operator><name>stride</name></name> <operator>=</operator> <call><name>GetFormatInteger</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"stride"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>video</name><operator>.</operator><name>slice_height</name></name> <operator>=</operator> <call><name>GetFormatInteger</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"slice-height"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>video</name><operator>.</operator><name>pixel_format</name></name> <operator>=</operator> <call><name>GetFormatInteger</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"color-format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>video</name><operator>.</operator><name>crop_left</name></name> <operator>=</operator> <call><name>GetFormatInteger</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"crop-left"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>video</name><operator>.</operator><name>crop_top</name></name> <operator>=</operator> <call><name>GetFormatInteger</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"crop-top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>video</name><operator>.</operator><name>crop_right</name></name> <operator>=</operator> <call><name>GetFormatInteger</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"crop-right"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>video</name><operator>.</operator><name>crop_bottom</name></name> <operator>=</operator> <call><name>GetFormatInteger</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"crop-bottom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>audio</name><operator>.</operator><name>channel_count</name></name> <operator>=</operator> <call><name>GetFormatInteger</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"channel-count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>audio</name><operator>.</operator><name>channel_mask</name></name> <operator>=</operator> <call><name>GetFormatInteger</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"channel-mask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>audio</name><operator>.</operator><name>sample_rate</name></name> <operator>=</operator> <call><name>GetFormatInteger</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"sample-rate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ReleaseOutput</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_index</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_render</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>syms</name><operator>.</operator><name>AMediaCodec</name><operator>.</operator><name>releaseOutputBuffer</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name></expr></argument>, <argument><expr><name>i_index</name></expr></argument>, <argument><expr><name>b_render</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>AMEDIA_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ReleaseOutputAtTime</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_index</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_ts_ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>syms</name><operator>.</operator><name>AMediaCodec</name><operator>.</operator><name>releaseOutputBufferAtTime</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name></expr></argument>, <argument><expr><name>i_index</name></expr></argument>, <argument><expr><name>i_ts_ns</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>AMEDIA_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>SetOutputSurface</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_surface</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_jsurface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_jsurface</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_surface</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>mc_api_sys</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>syms</name><operator>.</operator><name>AMediaCodec</name><operator>.</operator><name>setOutputSurface</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name><name>syms</name><operator>.</operator><name>AMediaCodec</name><operator>.</operator><name>setOutputSurface</name></name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name></expr></argument>, <argument><expr><name>p_surface</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>AMEDIA_OK</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>MC_API_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Clean</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Prepare</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type> <name>api</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_profile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>i_quirks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>MediaCodec_GetName</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><name><name>api</name><operator>-&gt;</operator><name>psz_mime</name></name></expr></argument>,
<argument><expr><name>i_profile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>api</name><operator>-&gt;</operator><name>i_quirks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>api</name><operator>-&gt;</operator><name>psz_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>i_quirks</name></name> <operator>|=</operator> <call><name>OMXCodec_GetQuirks</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name><name>api</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name><name>api</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>i_quirks</name></name> <operator>|=</operator> <name>MC_API_VIDEO_QUIRKS_SUPPORT_INTERLACED</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>MediaCodecNdk_Init</name><parameter_list>(<parameter><decl><type><name>mc_api</name> <modifier>*</modifier></type><name>api</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>InitSymbols</name><argument_list>(<argument><expr><name>api</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mc_api_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>api</name><operator>-&gt;</operator><name>p_sys</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MC_API_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>clean</name></name> <operator>=</operator> <name>Clean</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>prepare</name></name> <operator>=</operator> <name>Prepare</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>configure_decoder</name></name> <operator>=</operator> <name>ConfigureDecoder</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>Start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>Stop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>dequeue_in</name></name> <operator>=</operator> <name>DequeueInput</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>queue_in</name></name> <operator>=</operator> <name>QueueInput</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>dequeue_out</name></name> <operator>=</operator> <name>DequeueOutput</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>get_out</name></name> <operator>=</operator> <name>GetOutput</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>release_out</name></name> <operator>=</operator> <name>ReleaseOutput</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>release_out_ts</name></name> <operator>=</operator> <name>ReleaseOutputAtTime</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>set_output_surface</name></name> <operator>=</operator> <name>SetOutputSurface</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>b_support_rotation</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
