<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\oggspots.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_image.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>




<typedef>typedef <type><struct>struct
<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_packetizer</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>b_has_headers</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>image_handler_t</name><modifier>*</modifier></type> <name>p_image</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl>;</decl_stmt>
}</block></struct></type> <name>decoder_sys_t</name>;</typedef>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenPacketizer</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeVideo</name> <parameter_list>(<parameter><decl><type><name>decoder_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name><modifier>*</modifier></type> <name>Packetize</name> <parameter_list>(<parameter><decl><type><name>decoder_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ProcessHeader</name><parameter_list>(<parameter><decl><type><name>decoder_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ProcessPacket</name><parameter_list>(<parameter><decl><type><name>decoder_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name> <parameter_list>(<parameter><decl><type><name>decoder_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>picture_t</name><modifier>*</modifier></type> <name>DecodePacket</name> <parameter_list>(<parameter><decl><type><name>decoder_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_VCODEC</argument>)</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"OggSpots"</literal></argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"OggSpots video decoder"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"video decoder"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>OpenDecoder</argument>, <argument>CloseDecoder</argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"oggspots"</literal></argument>)</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"OggSpots video packetizer"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"packetizer"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>OpenPacketizer</argument>, <argument>CloseDecoder</argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"oggspots"</literal></argument>)</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenCommon</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_packetizer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name><modifier>*</modifier></type> <name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name><modifier>*</modifier></type> <name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_OGGSPOTS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_packetizer</name></name> <operator>=</operator> <name>b_packetizer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_has_headers</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name> <operator>=</operator> <call><name>image_HandlerCreate</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_packetizer</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_OGGSPOTS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>Packetize</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_RGBA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeVideo</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>OpenCommon</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenPacketizer</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>OpenCommon</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>DecodeBlock</name><parameter_list>(<parameter><decl><type><name>decoder_t</name><modifier>*</modifier></type> <name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name><modifier>*</modifier></type> <name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_has_headers</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ProcessHeader</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_has_headers</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ProcessPacket</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeVideo</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><call><name>DecodeBlock</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_pic</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decoder_QueueVideo</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Packetize</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>pp_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><operator>*</operator><name>pp_block</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>DecodeBlock</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ProcessHeader</name><parameter_list>(<parameter><decl><type><name>decoder_t</name><modifier>*</modifier></type> <name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p_extra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_granulerate_numerator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_granulerate_denominator</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>!=</operator> <literal type="number">52</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>( <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><literal type="string">"SPOTS\0\0"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_major</name> <operator>=</operator> <call><name>GetWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>i_minor</name> <operator>=</operator> <call><name>GetWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>i_major</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_minor</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_granulerate_numerator</name> <operator>=</operator> <call><name>GetQWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_granulerate_denominator</name> <operator>=</operator> <call><name>GetQWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_granulerate_numerator</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_granulerate_denominator</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>i_granulerate_numerator</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_granulerate_denominator</name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i_granulerate_numerator</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_granulerate_denominator</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>,
<argument><expr><name>i_granulerate_numerator</name></expr></argument>, <argument><expr><name>i_granulerate_denominator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_packetizer</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"PNG"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"JPEG"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>psz_image_type</name><index>[<expr><literal type="number">8</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>psz_image_type</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_image_type</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_image_type</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Unsupported image format: %s"</literal></expr></argument>, <argument><expr><name>psz_image_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator>
<call><name>GetWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator>
<call><name>GetWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">42</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_packetizer</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p_new_extra</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_new_extra</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <name>p_new_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>(<parameter><decl><type><name>decoder_t</name><modifier>*</modifier></type> <name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ProcessPacket</name><parameter_list>(<parameter><decl><type><name>decoder_t</name><modifier>*</modifier></type> <name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name><modifier>*</modifier></type> <name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p_buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_packetizer</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buf</name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>p_buf</name> <operator>=</operator> <call><name>DecodePacket</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>p_buf</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>picture_t</name><modifier>*</modifier></type> <name>DecodePacket</name><parameter_list>(<parameter><decl><type><name>decoder_t</name><modifier>*</modifier></type> <name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name><modifier>*</modifier></type> <name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_img_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name><modifier>*</modifier></type> <name>p_pic</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Packet too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_img_offset</name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_img_offset</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Invalid byte offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"PNG"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_PNG</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"JPEG"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_JPEG</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>psz_image_type</name><index>[<expr><literal type="number">8</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>psz_image_type</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_image_type</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_image_type</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Unsupported image format: %s"</literal></expr></argument>, <argument><expr><name>psz_image_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_img_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_img_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>image_Read</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_pic</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_force</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decoder_UpdateVideoFormat</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_pic</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name><modifier>*</modifier></type> <name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>image_HandlerDelete</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
