<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\x264.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_STATIC_LIB</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTHREAD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODULE_NAME_IS_x262</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;x262.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;x264.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODULE_NAME_IS_x26410b</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-x26410b-"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODULE_NAME_IS_x262</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-x262-"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODULE_NAME_IS_x264</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-x264-"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>x264_log</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYINT_TEXT</name></cpp:macro> <cpp:value>N_("Maximum GOP size")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYINT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Sets maximum interval between IDR-frames. " "Larger values save bits, thus improving quality for a given bitrate at " "the cost of seeking precision. Use -1 for infinite." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_KEYINT_TEXT</name></cpp:macro> <cpp:value>N_("Minimum GOP size")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_KEYINT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Sets minimum interval between IDR-frames. " "In H.264, I-frames do not necessarily bound a closed GOP because it is " "allowable for a P-frame to be predicted from more frames than just the " "one frame before it (also see reference frame option). Therefore, " "I-frames are not necessarily seekable. IDR-frames restrict subsequent " "P-frames from referring to any frame prior to the IDR-frame. \n" "If scenecuts appear within this interval, they are still encoded as " "I-frames, but do not start a new GOP." )</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENGOP_TEXT</name></cpp:macro> <cpp:value>N_("Use recovery points to close GOPs")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENGOP_LONGTEXT</name></cpp:macro> <cpp:value>N_("use open GOP, for bluray compatibility use also bluray-compat option")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLURAY_TEXT</name></cpp:macro> <cpp:value>N_("Enable compatibility hacks for Blu-ray support")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLURAY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Enable hacks for Blu-ray support, this doesn't enforce every aspect of Blu-ray compatibility\n" "e.g. resolution, framerate, level" )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCENE_TEXT</name></cpp:macro> <cpp:value>N_("Extra I-frames aggressivity" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCENE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Scene-cut detection. Controls how " "aggressively to insert extra I-frames. With small values of " "scenecut, the codec often has " "to force an I-frame when it would exceed keyint. " "Good values of scenecut may find a better location for the " "I-frame. Large values use more I-frames " "than necessary, thus wasting bits. -1 disables scene-cut detection, so " "I-frames are inserted only every other keyint frames, which probably " "leads to ugly encoding artifacts. Range 1 to 100." )</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BFRAMES_TEXT</name></cpp:macro> <cpp:value>N_("B-frames between I and P")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BFRAMES_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Number of consecutive B-frames between I and " "P-frames. Range 1 to 16." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_ADAPT_TEXT</name></cpp:macro> <cpp:value>N_("Adaptive B-frame decision")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_ADAPT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Force the specified number of " "consecutive B-frames to be used, except possibly before an I-frame. " "Range 0 to 2." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_BIAS_TEXT</name></cpp:macro> <cpp:value>N_("Influence (bias) B-frames usage")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_BIAS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Bias the choice to use B-frames. Positive values " "cause more B-frames, negative values cause less B-frames." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BPYRAMID_TEXT</name></cpp:macro> <cpp:value>N_("Keep some B-frames as references")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BPYRAMID_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Allows B-frames to be used as references for " "predicting other frames. Keeps the middle of 2+ consecutive B-frames " "as a reference, and reorders frame appropriately.\n" " - none: Disabled\n" " - strict: Strictly hierarchical pyramid\n" " - normal: Non-strict (not Blu-ray compatible)\n")</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FULLRANGE_TEXT</name></cpp:macro> <cpp:value>N_("Use fullrange instead of TV colorrange")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FULLRANGE_LONGTEXT</name></cpp:macro> <cpp:value>N_("TV-range is usually used colorrange, defining this to true " "will enable libx264 to use full colorrange on encoding")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CABAC_TEXT</name></cpp:macro> <cpp:value>N_("CABAC")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CABAC_LONGTEXT</name></cpp:macro> <cpp:value>N_( "CABAC (Context-Adaptive Binary Arithmetic ""Coding). Slightly slows down encoding and decoding, but should save " "10 to 15% bitrate." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_TEXT</name></cpp:macro> <cpp:value>N_("Number of reference frames")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Number of previous frames used as predictors. " "This is effective in Anime, but seems to make little difference in " "live-action source material. Some decoders are unable to deal with " "large frameref values. Range 1 to 16." )</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NF_TEXT</name></cpp:macro> <cpp:value>N_("Skip loop filter")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NF_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Deactivate the deblocking loop filter (decreases quality).")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_TEXT</name></cpp:macro> <cpp:value>N_("Loop filter AlphaC0 and Beta parameters alpha:beta")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Loop filter AlphaC0 and Beta parameters. " "Range -6 to 6 for both alpha and beta parameters. -6 means light " "filter, 6 means strong.")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_TEXT</name></cpp:macro> <cpp:value>N_("H.264 level")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Specify H.264 level (as defined by Annex A " "of the standard). Levels are not enforced; it's up to the user to select " "a level compatible with the rest of the encoding options. Range 1 to 5.1 " "(10 to 51 is also allowed). Set to 0 for letting x264 set level.")</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_TEXT</name></cpp:macro> <cpp:value>N_("H.264 profile")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Specify H.264 profile which limits are enforced over " "other settings" )</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERLACED_TEXT</name></cpp:macro> <cpp:value>N_("Interlaced mode")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERLACED_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Pure-interlaced mode.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAMEPACKING_TEXT</name></cpp:macro> <cpp:value>N_("Frame packing")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAMEPACKING_LONGTEXT</name></cpp:macro> <cpp:value>N_( "For stereoscopic videos define frame arrangement:\n" " 0: checkerboard - pixels are alternatively from L and R\n" " 1: column alternation - L and R are interlaced by column\n" " 2: row alternation - L and R are interlaced by row\n" " 3: side by side - L is on the left, R on the right\n" " 4: top bottom - L is on top, R on bottom\n" " 5: frame alternation - one view per frame" )</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTRAREFRESH_TEXT</name></cpp:macro> <cpp:value>N_("Use Periodic Intra Refresh")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTRAREFRESH_LONGTEXT</name></cpp:macro> <cpp:value>N_("Use Periodic Intra Refresh instead of IDR frames")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBTREE_TEXT</name></cpp:macro> <cpp:value>N_("Use mb-tree ratecontrol")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBTREE_LONGTEXT</name></cpp:macro> <cpp:value>N_("You can disable use of Macroblock-tree on ratecontrol")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_COUNT</name></cpp:macro> <cpp:value>N_("Force number of slices per frame")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_COUNT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Force rectangular slices and is overridden by other slicing options")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_MAX_SIZE</name></cpp:macro> <cpp:value>N_("Limit the size of each slice in bytes")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_MAX_SIZE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Sets a maximum slice size in bytes, Includes NAL overhead in size")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_MAX_MBS</name></cpp:macro> <cpp:value>N_("Limit the size of each slice in macroblocks")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_MAX_MBS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Sets a maximum number of macroblocks per slice")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QP_TEXT</name></cpp:macro> <cpp:value>N_("Set QP")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QP_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This selects the quantizer to use. " "Lower values result in better fidelity, but higher bitrates. 26 is a " "good default value. Range 0 (lossless) to 51." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRF_TEXT</name></cpp:macro> <cpp:value>N_("Quality-based VBR")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRF_LONGTEXT</name></cpp:macro> <cpp:value>N_( "1-pass Quality-based VBR. Range 0 to 51." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPMIN_TEXT</name></cpp:macro> <cpp:value>N_("Min QP")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPMIN_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Minimum quantizer parameter. 15 to 35 seems to " "be a useful range." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPMAX_TEXT</name></cpp:macro> <cpp:value>N_("Max QP")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPMAX_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Maximum quantizer parameter." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPSTEP_TEXT</name></cpp:macro> <cpp:value>N_("Max QP step")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPSTEP_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Max QP step between frames.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATETOL_TEXT</name></cpp:macro> <cpp:value>N_("Average bitrate tolerance")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATETOL_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Allowed variance in average " "bitrate (in kbits/s).")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBV_MAXRATE_TEXT</name></cpp:macro> <cpp:value>N_("Max local bitrate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBV_MAXRATE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Sets a maximum local bitrate (in kbits/s).")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBV_BUFSIZE_TEXT</name></cpp:macro> <cpp:value>N_("VBV buffer")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBV_BUFSIZE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Averaging period for the maximum " "local bitrate (in kbits).")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBV_INIT_TEXT</name></cpp:macro> <cpp:value>N_("Initial VBV buffer occupancy")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBV_INIT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Sets the initial buffer occupancy as a " "fraction of the buffer size. Range 0.0 to 1.0.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AQ_MODE_TEXT</name></cpp:macro> <cpp:value>N_("How AQ distributes bits")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AQ_MODE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Defines bitdistribution mode for AQ, default 1\n" " - 0: Disabled\n"" - 1: Current x264 default mode\n"" - 2: uses log(var)^2 instead of log(var) and attempts to adapt strength per frame")</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AQ_STRENGTH_TEXT</name></cpp:macro> <cpp:value>N_("Strength of AQ")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AQ_STRENGTH_LONGTEXT</name></cpp:macro> <cpp:value>N_("Strength to reduce blocking and blurring in flat\n""and textured areas, default 1.0 recommended to be between 0..2\n"" - 0.5: weak AQ\n"" - 1.5: strong AQ")</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPRATIO_TEXT</name></cpp:macro> <cpp:value>N_("QP factor between I and P")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPRATIO_LONGTEXT</name></cpp:macro> <cpp:value>N_( "QP factor between I and P. Range 1.0 to 2.0.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PBRATIO_TEXT</name></cpp:macro> <cpp:value>N_("QP factor between P and B")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PBRATIO_LONGTEXT</name></cpp:macro> <cpp:value>N_( "QP factor between P and B. Range 1.0 to 2.0.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_QP_OFFSET_TEXT</name></cpp:macro> <cpp:value>N_("QP difference between chroma and luma")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_QP_OFFSET_LONGTEXT</name></cpp:macro> <cpp:value>N_( "QP difference between chroma and luma.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASS_TEXT</name></cpp:macro> <cpp:value>N_("Multipass ratecontrol")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Multipass ratecontrol:\n" " - 1: First pass, creates stats file\n" " - 2: Last pass, does not overwrite stats file\n" " - 3: Nth pass, overwrites stats file\n" )</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QCOMP_TEXT</name></cpp:macro> <cpp:value>N_("QP curve compression")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QCOMP_LONGTEXT</name></cpp:macro> <cpp:value>N_( "QP curve compression. Range 0.0 (CBR) to 1.0 (QCP).")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPLXBLUR_TEXT</name></cpp:macro> <cpp:value>N_("Reduce fluctuations in QP")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPLXBLUR_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This reduces the fluctuations in QP " "before curve compression. Temporally blurs complexity.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QBLUR_TEXT</name></cpp:macro> <cpp:value>N_("Reduce fluctuations in QP")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QBLUR_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This reduces the fluctuations in QP " "after curve compression. Temporally blurs quants.")</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANALYSE_TEXT</name></cpp:macro> <cpp:value>N_("Partitions to consider")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANALYSE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Partitions to consider in analyse mode:\n" " - none : \n" " - fast : i4x4\n" " - normal: i4x4,p8x8,(i8x8)\n" " - slow : i4x4,p8x8,(i8x8),b8x8\n" " - all : i4x4,p8x8,(i8x8),b8x8,p4x4\n" "(p4x4 requires p8x8. i8x8 requires 8x8dct).")</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRECT_PRED_TEXT</name></cpp:macro> <cpp:value>N_("Direct MV prediction mode")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRECT_PRED_LONGTEXT</name></cpp:macro> <cpp:value>DIRECT_PRED_TEXT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRECT_PRED_SIZE_TEXT</name></cpp:macro> <cpp:value>N_("Direct prediction size")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRECT_PRED_SIZE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Direct prediction size:\n" " - 0: 4x4\n" " - 1: 8x8\n" " - -1: smallest possible according to level\n" )</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WEIGHTB_TEXT</name></cpp:macro> <cpp:value>N_("Weighted prediction for B-frames")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WEIGHTB_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Weighted prediction for B-frames.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WEIGHTP_TEXT</name></cpp:macro> <cpp:value>N_("Weighted prediction for P-frames")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WEIGHTP_LONGTEXT</name></cpp:macro> <cpp:value>N_("Weighted prediction for P-frames:\n" " - 0: Disabled\n"" - 1: Blind offset\n"" - 2: Smart analysis\n" )</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ME_TEXT</name></cpp:macro> <cpp:value>N_("Integer pixel motion estimation method")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ME_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Selects the motion estimation algorithm:\n"" - dia: diamond search, radius 1 (fast)\n" " - hex: hexagonal search, radius 2\n" " - umh: uneven multi-hexagon search (better but slower)\n" " - esa: exhaustive search (extremely slow, primarily for testing)\n" " - tesa: hadamard exhaustive search (extremely slow, primarily for testing)\n" )</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MERANGE_TEXT</name></cpp:macro> <cpp:value>N_("Maximum motion vector search range")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MERANGE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Maximum distance to search for " "motion estimation, measured from predicted position(s). " "Default of 16 is good for most footage, high motion sequences may " "benefit from settings between 24 and 32. Range 0 to 64." )</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MVRANGE_TEXT</name></cpp:macro> <cpp:value>N_("Maximum motion vector length")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MVRANGE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Maximum motion vector length in pixels. " "-1 is automatic, based on level." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MVRANGE_THREAD_TEXT</name></cpp:macro> <cpp:value>N_("Minimum buffer space between threads")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MVRANGE_THREAD_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Minimum buffer space between threads. " "-1 is automatic, based on number of threads." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_RD_TEXT</name></cpp:macro> <cpp:value>N_( "Strength of psychovisual optimization, default is \"1.0:0.0\"")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_RD_LONGTEXT</name></cpp:macro> <cpp:value>N_( "First parameter controls if RD is on (subme&gt;=6) or off.\n""Second parameter controls if Trellis is used on psychovisual optimization, " "default off")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBME_TEXT</name></cpp:macro> <cpp:value>N_("Subpixel motion estimation and partition decision " "quality")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBME_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This parameter controls quality versus speed " "tradeoffs involved in the motion estimation decision process " "(lower = quicker and higher = better quality). Range 1 to 9." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_RDO_LONGTEXT</name></cpp:macro> <cpp:value>N_( "RD based mode decision for B-frames. This " "requires subme 6 (or higher).")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIXED_REFS_TEXT</name></cpp:macro> <cpp:value>N_("Decide references on a per partition basis")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIXED_REFS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Allows each 8x8 or 16x8 partition to " "independently select a reference frame, as opposed to only one ref " "per macroblock." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_ME_TEXT</name></cpp:macro> <cpp:value>N_("Chroma in motion estimation")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_ME_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Chroma ME for subpel and mode decision in " "P-frames.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIME_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Joint bidirectional motion refinement.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFORM_8X8DCT_TEXT</name></cpp:macro> <cpp:value>N_("Adaptive spatial transform size")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFORM_8X8DCT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "SATD-based decision for 8x8 transform in inter-MBs.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRELLIS_TEXT</name></cpp:macro> <cpp:value>N_("Trellis RD quantization" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRELLIS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Trellis RD quantization:\n" " - 0: disabled\n" " - 1: enabled only on the final encode of a MB\n" " - 2: enabled on all mode decisions\n" "This requires CABAC." )</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_PSKIP_TEXT</name></cpp:macro> <cpp:value>N_("Early SKIP detection on P-frames")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_PSKIP_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Early SKIP detection on P-frames.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCT_DECIMATE_TEXT</name></cpp:macro> <cpp:value>N_("Coefficient thresholding on P-frames")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCT_DECIMATE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Coefficient thresholding on P-frames. " "Eliminate dct blocks containing only a small single coefficient.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_TEXT</name></cpp:macro> <cpp:value>N_("Use Psy-optimizations")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Use all visual optimizations that can worsen both PSNR and SSIM")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NR_TEXT</name></cpp:macro> <cpp:value>N_("Noise reduction")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NR_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Dct-domain noise reduction. Adaptive pseudo-deadzone. " "10 to 1000 seems to be a useful range." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEADZONE_INTER_TEXT</name></cpp:macro> <cpp:value>N_("Inter luma quantization deadzone")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEADZONE_INTER_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Set the size of the inter luma quantization deadzone. " "Range 0 to 32." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEADZONE_INTRA_TEXT</name></cpp:macro> <cpp:value>N_("Intra luma quantization deadzone")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEADZONE_INTRA_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Set the size of the intra luma quantization deadzone. " "Range 0 to 32." )</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NON_DETERMINISTIC_TEXT</name></cpp:macro> <cpp:value>N_("Non-deterministic optimizations when threaded")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NON_DETERMINISTIC_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Slightly improve quality of SMP, " "at the cost of repeatability.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_TEXT</name></cpp:macro> <cpp:value>N_("CPU optimizations")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Use assembler CPU optimizations.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATS_TEXT</name></cpp:macro> <cpp:value>N_("Filename for 2 pass stats file")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Filename for 2 pass stats file for multi-pass encoding.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSNR_TEXT</name></cpp:macro> <cpp:value>N_("PSNR computation")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSNR_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Compute and print PSNR stats. This has no effect on " "the actual encoding quality." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSIM_TEXT</name></cpp:macro> <cpp:value>N_("SSIM computation")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSIM_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Compute and print SSIM stats. This has no effect on " "the actual encoding quality." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUIET_TEXT</name></cpp:macro> <cpp:value>N_("Quiet mode")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERBOSE_TEXT</name></cpp:macro> <cpp:value>N_("Statistics")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERBOSE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Print stats for each frame.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPS_ID_TEXT</name></cpp:macro> <cpp:value>N_("SPS and PPS id numbers")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPS_ID_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Set SPS and PPS id numbers to allow concatenating " "streams with different settings.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUD_TEXT</name></cpp:macro> <cpp:value>N_("Access unit delimiters")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUD_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Generate access unit delimiter NAL units.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOKAHEAD_TEXT</name></cpp:macro> <cpp:value>N_("Framecount to use on frametype lookahead")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOKAHEAD_LONGTEXT</name></cpp:macro> <cpp:value>N_("Framecount to use on frametype lookahead. " "Currently default can cause sync-issues on unmuxable output, like rtsp-output without ts-mux" )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HRD_TEXT</name></cpp:macro> <cpp:value>N_("HRD-timing information")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TUNE_TEXT</name></cpp:macro> <cpp:value>N_("Default tune setting used" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRESET_TEXT</name></cpp:macro> <cpp:value>N_("Default preset setting used" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X264_OPTIONS_TEXT</name></cpp:macro> <cpp:value>N_("x264 advanced options")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X264_OPTIONS_LONGTEXT</name></cpp:macro> <cpp:value>N_("x264 advanced options, in the form {opt=val,op2=val2}.")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>enc_me_list</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="string">"dia"</literal></expr>, <expr><literal type="string">"hex"</literal></expr>, <expr><literal type="string">"umh"</literal></expr>, <expr><literal type="string">"esa"</literal></expr>, <expr><literal type="string">"tesa"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>enc_me_list_text</name><index>[]</index></name> <init>=
<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"dia"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"hex"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"umh"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"esa"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"tesa"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>bpyramid_list</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="string">"strict"</literal></expr>, <expr><literal type="string">"normal"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>enc_analyse_list</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="string">"fast"</literal></expr>, <expr><literal type="string">"normal"</literal></expr>, <expr><literal type="string">"slow"</literal></expr>, <expr><literal type="string">"all"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>enc_analyse_list_text</name><index>[]</index></name> <init>=
<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"None"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Fast"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Normal"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Slow"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"All"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>direct_pred_list</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="string">"spatial"</literal></expr>, <expr><literal type="string">"temporal"</literal></expr>, <expr><literal type="string">"auto"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>direct_pred_list_text</name><index>[]</index></name> <init>=
<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"None"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Spatial"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Temporal"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Auto"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>framepacking_list</name><index>[]</index></name> <init>=
<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>framepacking_list_text</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"checkerboard"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"column alternation"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"row alternation"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"side by side"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"top bottom"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"frame alternation"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"2D"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODULE_NAME_IS_x26410b</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"H.264/MPEG-4 Part 10/AVC encoder (x264 10-bit)"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODULE_NAME_IS_x262</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"H.262/MPEG-2 encoder (x262)"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODULE_NAME_IS_x264</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"H.264/MPEG-4 Part 10/AVC encoder (x264)"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="number">200</literal></argument> )</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_VCODEC</argument> )</argument_list></macro>



<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"keyint"</literal></argument>, <argument><literal type="number">250</literal></argument>, <argument>KEYINT_TEXT</argument>,
<argument>KEYINT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"min-keyint"</literal></argument>, <argument><literal type="number">25</literal></argument>, <argument>MIN_KEYINT_TEXT</argument>,
<argument>MIN_KEYINT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"opengop"</literal></argument>, <argument>false</argument>, <argument>OPENGOP_TEXT</argument>,
<argument>OPENGOP_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"bluray-compat"</literal></argument>, <argument>false</argument>, <argument>BLURAY_TEXT</argument>,
<argument>BLURAY_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"scenecut"</literal></argument>, <argument><literal type="number">40</literal></argument>, <argument>SCENE_TEXT</argument>,
<argument>SCENE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"pre-scenecut"</literal></argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"bframes"</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument>BFRAMES_TEXT</argument>,
<argument>BFRAMES_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">16</literal></argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"b-adapt"</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>B_ADAPT_TEXT</argument>,
<argument>B_ADAPT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">2</literal></argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"b-bias"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>B_BIAS_TEXT</argument>,
<argument>B_BIAS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument>-<literal type="number">100</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"bpyramid"</literal></argument>, <argument><literal type="string">"normal"</literal></argument>, <argument>BPYRAMID_TEXT</argument>,
<argument>BPYRAMID_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_string_list</name><argument_list>( <argument>bpyramid_list</argument>, <argument>bpyramid_list</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"cabac"</literal></argument>, <argument>true</argument>, <argument>CABAC_TEXT</argument>, <argument>CABAC_LONGTEXT</argument>,
<argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"fullrange"</literal></argument>, <argument>false</argument>, <argument>FULLRANGE_TEXT</argument>, <argument>FULLRANGE_LONGTEXT</argument>,
<argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"ref"</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument>REF_TEXT</argument>,
<argument>REF_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">1</literal></argument>, <argument><literal type="number">16</literal></argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"nf"</literal></argument>, <argument>false</argument>, <argument>NF_TEXT</argument>,
<argument>NF_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"deblock"</literal></argument>, <argument><literal type="string">"0:0"</literal></argument>, <argument>FILTER_TEXT</argument>,
<argument>FILTER_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"psy-rd"</literal></argument>, <argument><literal type="string">"1.0:0.0"</literal></argument>, <argument>PSY_RD_TEXT</argument>,
<argument>PSY_RD_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"psy"</literal></argument>, <argument>true</argument>, <argument>PSY_TEXT</argument>, <argument>PSY_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"level"</literal></argument>, <argument><literal type="string">"0"</literal></argument>, <argument>LEVEL_TEXT</argument>,
<argument>LEVEL_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"profile"</literal></argument>, <argument><literal type="string">"high"</literal></argument>, <argument>PROFILE_TEXT</argument>,
<argument>PROFILE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<expr_stmt><expr><call><name>vlc_config_set</name> <argument_list>(<argument><expr><name>VLC_CONFIG_LIST</name></expr></argument>,
<argument><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>x264_profile_names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>x264_profile_names</name></expr></argument>, <argument><expr><name>x264_profile_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"interlaced"</literal></argument>, <argument>false</argument>, <argument>INTERLACED_TEXT</argument>, <argument>INTERLACED_LONGTEXT</argument>,
<argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"frame-packing"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>FRAMEPACKING_TEXT</argument>, <argument>FRAMEPACKING_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>framepacking_list</argument>, <argument>framepacking_list_text</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"slices"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>SLICE_COUNT</argument>, <argument>SLICE_COUNT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"slice-max-size"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>SLICE_MAX_SIZE</argument>, <argument>SLICE_MAX_SIZE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"slice-max-mbs"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>SLICE_MAX_MBS</argument>, <argument>SLICE_MAX_MBS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"hrd"</literal></argument>, <argument><literal type="string">"none"</literal></argument>, <argument>HRD_TEXT</argument>, <argument>HRD_TEXT</argument>, <argument>true</argument> )</argument_list></macro>
<expr_stmt><expr><call><name>vlc_config_set</name> <argument_list>(<argument><expr><name>VLC_CONFIG_LIST</name></expr></argument>,
<argument><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>x264_nal_hrd_names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>x264_nal_hrd_names</name></expr></argument>, <argument><expr><name>x264_nal_hrd_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"qp"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>QP_TEXT</argument>, <argument>QP_LONGTEXT</argument>,
<argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">51</literal></argument> )</argument_list></macro> 

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"crf"</literal></argument>, <argument><literal type="number">23</literal></argument>, <argument>CRF_TEXT</argument>,
<argument>CRF_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">51</literal></argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"qpmin"</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>QPMIN_TEXT</argument>,
<argument>QPMIN_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">51</literal></argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"qpmax"</literal></argument>, <argument><literal type="number">51</literal></argument>, <argument>QPMAX_TEXT</argument>,
<argument>QPMAX_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">51</literal></argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"qpstep"</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument>QPSTEP_TEXT</argument>,
<argument>QPSTEP_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">51</literal></argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"ratetol"</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument>RATETOL_TEXT</argument>,
<argument>RATETOL_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_float_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"vbv-maxrate"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>VBV_MAXRATE_TEXT</argument>,
<argument>VBV_MAXRATE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"vbv-bufsize"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>VBV_BUFSIZE_TEXT</argument>,
<argument>VBV_BUFSIZE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"vbv-init"</literal></argument>, <argument><literal type="number">0.9</literal></argument>, <argument>VBV_INIT_TEXT</argument>,
<argument>VBV_INIT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_float_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"ipratio"</literal></argument>, <argument><literal type="number">1.40</literal></argument>, <argument>IPRATIO_TEXT</argument>,
<argument>IPRATIO_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_float_range</name><argument_list>( <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"pbratio"</literal></argument>, <argument><literal type="number">1.30</literal></argument>, <argument>PBRATIO_TEXT</argument>,
<argument>PBRATIO_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_float_range</name><argument_list>( <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"chroma-qp-offset"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>CHROMA_QP_OFFSET_TEXT</argument>,
<argument>CHROMA_QP_OFFSET_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"pass"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>PASS_TEXT</argument>,
<argument>PASS_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">3</literal></argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"qcomp"</literal></argument>, <argument><literal type="number">0.60</literal></argument>, <argument>QCOMP_TEXT</argument>,
<argument>QCOMP_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_float_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"cplxblur"</literal></argument>, <argument><literal type="number">20.0</literal></argument>, <argument>CPLXBLUR_TEXT</argument>,
<argument>CPLXBLUR_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"qblur"</literal></argument>, <argument><literal type="number">0.5</literal></argument>, <argument>QBLUR_TEXT</argument>,
<argument>QBLUR_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"aq-mode"</literal></argument>, <argument>X264_AQ_VARIANCE</argument>, <argument>AQ_MODE_TEXT</argument>,
<argument>AQ_MODE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">2</literal></argument> )</argument_list></macro>
<macro><name>add_float</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"aq-strength"</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument>AQ_STRENGTH_TEXT</argument>,
<argument>AQ_STRENGTH_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>




<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"partitions"</literal></argument>, <argument><literal type="string">"normal"</literal></argument>, <argument>ANALYSE_TEXT</argument>,
<argument>ANALYSE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_string_list</name><argument_list>( <argument>enc_analyse_list</argument>, <argument>enc_analyse_list_text</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"direct"</literal></argument>, <argument><literal type="string">"spatial"</literal></argument>, <argument>DIRECT_PRED_TEXT</argument>,
<argument>DIRECT_PRED_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_string_list</name><argument_list>( <argument>direct_pred_list</argument>, <argument>direct_pred_list_text</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"direct-8x8"</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>DIRECT_PRED_SIZE_TEXT</argument>,
<argument>DIRECT_PRED_SIZE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"weightb"</literal></argument>, <argument>true</argument>, <argument>WEIGHTB_TEXT</argument>,
<argument>WEIGHTB_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"weightp"</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument>WEIGHTP_TEXT</argument>,
<argument>WEIGHTP_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">2</literal></argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"me"</literal></argument>, <argument><literal type="string">"hex"</literal></argument>, <argument>ME_TEXT</argument>,
<argument>ME_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_string_list</name><argument_list>( <argument>enc_me_list</argument>, <argument>enc_me_list_text</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"merange"</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument>MERANGE_TEXT</argument>,
<argument>MERANGE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">1</literal></argument>, <argument><literal type="number">64</literal></argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"mvrange"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>MVRANGE_TEXT</argument>,
<argument>MVRANGE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"mvrange-thread"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>MVRANGE_THREAD_TEXT</argument>,
<argument>MVRANGE_THREAD_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"subme"</literal></argument>, <argument><literal type="number">7</literal></argument>, <argument>SUBME_TEXT</argument>,
<argument>SUBME_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_obsolete_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"b-rdo"</literal></argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"mixed-refs"</literal></argument>, <argument>true</argument>, <argument>MIXED_REFS_TEXT</argument>,
<argument>MIXED_REFS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"chroma-me"</literal></argument>, <argument>true</argument>, <argument>CHROMA_ME_TEXT</argument>,
<argument>CHROMA_ME_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_obsolete_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"bime"</literal></argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"8x8dct"</literal></argument>, <argument>true</argument>, <argument>TRANSFORM_8X8DCT_TEXT</argument>,
<argument>TRANSFORM_8X8DCT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"trellis"</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>TRELLIS_TEXT</argument>,
<argument>TRELLIS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">2</literal></argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"lookahead"</literal></argument>, <argument><literal type="number">40</literal></argument>, <argument>LOOKAHEAD_TEXT</argument>,
<argument>LOOKAHEAD_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">60</literal></argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"intra-refresh"</literal></argument>, <argument>false</argument>, <argument>INTRAREFRESH_TEXT</argument>,
<argument>INTRAREFRESH_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"mbtree"</literal></argument>, <argument>true</argument>, <argument>MBTREE_TEXT</argument>, <argument>MBTREE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"fast-pskip"</literal></argument>, <argument>true</argument>, <argument>FAST_PSKIP_TEXT</argument>,
<argument>FAST_PSKIP_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"dct-decimate"</literal></argument>, <argument>true</argument>, <argument>DCT_DECIMATE_TEXT</argument>,
<argument>DCT_DECIMATE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"nr"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>NR_TEXT</argument>,
<argument>NR_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1000</literal></argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"deadzone-inter"</literal></argument>, <argument><literal type="number">21</literal></argument>, <argument>DEADZONE_INTER_TEXT</argument>,
<argument>DEADZONE_INTRA_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">32</literal></argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"deadzone-intra"</literal></argument>, <argument><literal type="number">11</literal></argument>, <argument>DEADZONE_INTRA_TEXT</argument>,
<argument>DEADZONE_INTRA_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">32</literal></argument> )</argument_list></macro>



<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"non-deterministic"</literal></argument>, <argument>false</argument>, <argument>NON_DETERMINISTIC_TEXT</argument>,
<argument>NON_DETERMINISTIC_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"asm"</literal></argument>, <argument>true</argument>, <argument>ASM_TEXT</argument>,
<argument>ASM_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>


<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"psnr"</literal></argument>, <argument>false</argument>, <argument>PSNR_TEXT</argument>,
<argument>PSNR_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>


<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"ssim"</literal></argument>, <argument>false</argument>, <argument>SSIM_TEXT</argument>,
<argument>SSIM_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"quiet"</literal></argument>, <argument>false</argument>, <argument>QUIET_TEXT</argument>,
<argument>QUIET_TEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"sps-id"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>SPS_ID_TEXT</argument>,
<argument>SPS_ID_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"aud"</literal></argument>, <argument>false</argument>, <argument>AUD_TEXT</argument>,
<argument>AUD_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"verbose"</literal></argument>, <argument>false</argument>, <argument>VERBOSE_TEXT</argument>,
<argument>VERBOSE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"stats"</literal></argument>, <argument><literal type="string">"x264_2pass.log"</literal></argument>, <argument>STATS_TEXT</argument>,
<argument>STATS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"preset"</literal></argument>, <argument>NULL</argument> , <argument>PRESET_TEXT</argument> , <argument>PRESET_TEXT</argument>, <argument>false</argument> )</argument_list></macro>
<expr_stmt><expr><call><name>vlc_config_set</name> <argument_list>(<argument><expr><name>VLC_CONFIG_LIST</name></expr></argument>,
<argument><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>x264_preset_names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>x264_preset_names</name></expr></argument>, <argument><expr><name>x264_preset_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"tune"</literal></argument>, <argument>NULL</argument> , <argument>TUNE_TEXT</argument>, <argument>TUNE_TEXT</argument>, <argument>false</argument> )</argument_list></macro>
<expr_stmt><expr><call><name>vlc_config_set</name> <argument_list>(<argument><expr><name>VLC_CONFIG_LIST</name></expr></argument>,
<argument><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>x264_tune_names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>x264_tune_names</name></expr></argument>, <argument><expr><name>x264_tune_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"options"</literal></argument>, <argument>NULL</argument>, <argument>X264_OPTIONS_TEXT</argument>,
<argument>X264_OPTIONS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sout_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"8x8dct"</literal></expr>, <expr><literal type="string">"asm"</literal></expr>, <expr><literal type="string">"aud"</literal></expr>, <expr><literal type="string">"bframes"</literal></expr>, <expr><literal type="string">"bime"</literal></expr>, <expr><literal type="string">"bpyramid"</literal></expr>,
<expr><literal type="string">"b-adapt"</literal></expr>, <expr><literal type="string">"b-bias"</literal></expr>, <expr><literal type="string">"b-rdo"</literal></expr>, <expr><literal type="string">"cabac"</literal></expr>, <expr><literal type="string">"chroma-me"</literal></expr>, <expr><literal type="string">"chroma-qp-offset"</literal></expr>,
<expr><literal type="string">"cplxblur"</literal></expr>, <expr><literal type="string">"crf"</literal></expr>, <expr><literal type="string">"dct-decimate"</literal></expr>, <expr><literal type="string">"deadzone-inter"</literal></expr>, <expr><literal type="string">"deadzone-intra"</literal></expr>,
<expr><literal type="string">"deblock"</literal></expr>, <expr><literal type="string">"direct"</literal></expr>, <expr><literal type="string">"direct-8x8"</literal></expr>, <expr><literal type="string">"fast-pskip"</literal></expr>,
<expr><literal type="string">"interlaced"</literal></expr>, <expr><literal type="string">"ipratio"</literal></expr>, <expr><literal type="string">"keyint"</literal></expr>, <expr><literal type="string">"level"</literal></expr>,
<expr><literal type="string">"me"</literal></expr>, <expr><literal type="string">"merange"</literal></expr>, <expr><literal type="string">"min-keyint"</literal></expr>, <expr><literal type="string">"mixed-refs"</literal></expr>, <expr><literal type="string">"mvrange"</literal></expr>, <expr><literal type="string">"mvrange-thread"</literal></expr>,
<expr><literal type="string">"nf"</literal></expr>, <expr><literal type="string">"non-deterministic"</literal></expr>, <expr><literal type="string">"nr"</literal></expr>, <expr><literal type="string">"partitions"</literal></expr>, <expr><literal type="string">"pass"</literal></expr>, <expr><literal type="string">"pbratio"</literal></expr>,
<expr><literal type="string">"pre-scenecut"</literal></expr>, <expr><literal type="string">"psnr"</literal></expr>, <expr><literal type="string">"qblur"</literal></expr>, <expr><literal type="string">"qp"</literal></expr>, <expr><literal type="string">"qcomp"</literal></expr>, <expr><literal type="string">"qpstep"</literal></expr>, <expr><literal type="string">"qpmax"</literal></expr>,
<expr><literal type="string">"qpmin"</literal></expr>, <expr><literal type="string">"quiet"</literal></expr>, <expr><literal type="string">"ratetol"</literal></expr>, <expr><literal type="string">"ref"</literal></expr>, <expr><literal type="string">"scenecut"</literal></expr>,
<expr><literal type="string">"sps-id"</literal></expr>, <expr><literal type="string">"ssim"</literal></expr>, <expr><literal type="string">"stats"</literal></expr>, <expr><literal type="string">"subme"</literal></expr>, <expr><literal type="string">"trellis"</literal></expr>,
<expr><literal type="string">"verbose"</literal></expr>, <expr><literal type="string">"vbv-bufsize"</literal></expr>, <expr><literal type="string">"vbv-init"</literal></expr>, <expr><literal type="string">"vbv-maxrate"</literal></expr>, <expr><literal type="string">"weightb"</literal></expr>, <expr><literal type="string">"weightp"</literal></expr>,
<expr><literal type="string">"aq-mode"</literal></expr>, <expr><literal type="string">"aq-strength"</literal></expr>, <expr><literal type="string">"psy-rd"</literal></expr>, <expr><literal type="string">"psy"</literal></expr>, <expr><literal type="string">"profile"</literal></expr>, <expr><literal type="string">"lookahead"</literal></expr>, <expr><literal type="string">"slices"</literal></expr>,
<expr><literal type="string">"slice-max-size"</literal></expr>, <expr><literal type="string">"slice-max-mbs"</literal></expr>, <expr><literal type="string">"intra-refresh"</literal></expr>, <expr><literal type="string">"mbtree"</literal></expr>, <expr><literal type="string">"hrd"</literal></expr>,
<expr><literal type="string">"tune"</literal></expr>,<expr><literal type="string">"preset"</literal></expr>, <expr><literal type="string">"opengop"</literal></expr>, <expr><literal type="string">"bluray-compat"</literal></expr>, <expr><literal type="string">"frame-packing"</literal></expr>, <expr><literal type="string">"options"</literal></expr>,
<expr><literal type="string">"fullrange"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encode</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>x264_t</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x264_param_t</name></type> <name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_stat_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_sei_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_colorspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_sei</name></decl>;</decl_stmt>
}</block></struct></type> <name>encoder_sys_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_STATIC_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_mutex_t</name></type> <name>pthread_win32_mutex</name> <init>= <expr><name>VLC_STATIC_MUTEX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pthread_win32_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_qmin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_qmax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x264_nal_t</name> <modifier>*</modifier></type><name>nal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>i_nal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>fullrange</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODULE_NAME_IS_x262</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <decl_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_MP2V</name> <operator>&amp;&amp;</operator></expr></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_H264</name> <operator>&amp;&amp;</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr> )</condition></if></if_stmt></condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODULE_NAME_IS_x262</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"version x262 0.%d.X"</literal></expr></argument>, <argument><expr><name>X264_BUILD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"version x264 0.%d.X"</literal></expr></argument>, <argument><expr><name>X264_BUILD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_sout_options</name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name>VIDEO_ES</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODULE_NAME_IS_x262</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_MP2V</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_H264</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>vlc_obj_malloc</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>encoder_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fullrange</name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"fullrange"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fullrange</name> <operator>|=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>color_range</name></name> <operator>==</operator> <name>COLOR_RANGE_FULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <ternary><condition><expr><name>fullrange</name></expr> ?</condition><then> <expr><name>VLC_CODEC_J420</name></expr> </then><else>: <expr><name>VLC_CODEC_I420</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_colorspace</name></name> <operator>=</operator> <name>X264_CSP_I420</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_profile</name> <init>= <expr><call><name>var_GetString</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"profile"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODULE_NAME_IS_x26410b</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mask</name> <init>= <expr><name>X264_CSP_HIGH_DEPTH</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>( <expr><name>psz_profile</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_profile</name></expr></argument>, <argument><expr><literal type="string">"high10"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <ternary><condition><expr><name>mask</name></expr> ?</condition><then> <expr><name>VLC_CODEC_I420_10L</name></expr> </then><else>: <expr><ternary><condition><expr><name>fullrange</name></expr> ?</condition><then> <expr><name>VLC_CODEC_J420</name></expr> </then><else>: <expr><name>VLC_CODEC_I420</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_colorspace</name></name> <operator>=</operator> <name>X264_CSP_I420</name> <operator>|</operator> <name>mask</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_profile</name></expr></argument>, <argument><expr><literal type="string">"high422"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <ternary><condition><expr><name>mask</name></expr> ?</condition><then> <expr><name>VLC_CODEC_I422_10L</name></expr> </then><else>: <expr><ternary><condition><expr><name>fullrange</name></expr> ?</condition><then> <expr><name>VLC_CODEC_J422</name></expr> </then><else>: <expr><name>VLC_CODEC_I422</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_colorspace</name></name> <operator>=</operator> <name>X264_CSP_I422</name> <operator>|</operator> <name>mask</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_profile</name></expr></argument>, <argument><expr><literal type="string">"high444"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <ternary><condition><expr><name>mask</name></expr> ?</condition><then> <expr><name>VLC_CODEC_I444_10L</name></expr> </then><else>: <expr><ternary><condition><expr><name>fullrange</name></expr> ?</condition><then> <expr><name>VLC_CODEC_J444</name></expr> </then><else>: <expr><name>VLC_CODEC_I444</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_colorspace</name></name> <operator>=</operator> <name>X264_CSP_I444</name> <operator>|</operator> <name>mask</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODULE_NAME_IS_x26410b</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Only high-profiles and 10-bit are supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_profile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODULE_NAME_IS_x26410b</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Only high-profiles and 10-bit are supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_profile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_video</name></name> <operator>=</operator> <name>Encode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_audio</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_stat_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sei_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sei</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_preset</name> <init>= <expr><call><name>var_GetString</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"preset"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tune</name> <init>= <expr><call><name>var_GetString</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"tune"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_preset</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_preset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_preset</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODULE_NAME_IS_x262</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>b_mpeg2</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>x264_param_default_mpeg2</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>param</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>x264_param_default_preset_mpeg2</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name>psz_preset</name></expr></argument>, <argument><expr><name>psz_tune</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>x264_param_default</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>param</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>x264_param_default_preset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name>psz_preset</name></expr></argument>, <argument><expr><name>psz_tune</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>X264_BUILD</name> <operator>&gt;</operator> <literal type="number">152</literal></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name>mask</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_bitdepth</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_preset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tune</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_csp</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_colorspace</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>vui</name><operator>.</operator><name>b_fullrange</name></name> <operator>=</operator> <name>fullrange</name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>COLOR_SPACE_BT601</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_colmatrix</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>COLOR_SPACE_BT709</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_colmatrix</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>COLOR_SPACE_BT2020</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_colmatrix</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> 
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>TRANSFER_FUNC_LINEAR</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_transfer</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>TRANSFER_FUNC_SRGB</name></expr>:</case>
<case>case <expr><name>TRANSFER_FUNC_BT709</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_transfer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>COLOR_PRIMARIES_BT601_625</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_colorprim</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>COLOR_PRIMARIES_BT601_525</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_colorprim</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>COLOR_PRIMARIES_BT709</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_colorprim</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>COLOR_PRIMARIES_BT2020</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_colorprim</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt> 
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if<condition>( <expr><call><name>fabs</name><argument_list>(<argument><expr><call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"qcomp"</literal></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">0.60</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.005</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_qcompress</name></name> <operator>=</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"qcomp"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_rc_method</name></name> <operator>=</operator> <name>X264_RC_ABR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"crf"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>&lt;=</operator> <literal type="number">51</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_rf_constant</name></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_rc_method</name></name> <operator>=</operator> <name>X264_RC_CRF</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"qpstep"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>&lt;=</operator> <literal type="number">51</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_qp_step</name></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"qpmin"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>&lt;=</operator> <literal type="number">51</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_qmin</name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_qp_min</name></name> <operator>=</operator> <name>i_qmin</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"qpmax"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>&lt;=</operator> <literal type="number">51</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_qmax</name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_qp_max</name></name> <operator>=</operator> <name>i_qmax</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"qp"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>&lt;=</operator> <literal type="number">51</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_qmin</name> <operator>&gt;</operator> <name>i_val</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_qmin</name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_qmax</name> <operator>&lt;</operator> <name>i_val</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_qmax</name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_rc_method</name></name> <operator>=</operator> <name>X264_RC_CQP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_qp_constant</name></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_qp_min</name></name> <operator>=</operator> <name>i_qmin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_qp_max</name></name> <operator>=</operator> <name>i_qmax</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_rate_tolerance</name></name> <operator>=</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>,
<argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"ratetol"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_vbv_buffer_init</name></name> <operator>=</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>,
<argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"vbv-init"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_vbv_buffer_size</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>,
<argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"vbv-bufsize"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_vbv_max_bitrate</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"vbv-maxrate"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"mbtree"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>b_mb_tree</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"mbtree"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"cabac"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>b_cabac</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"cabac"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"nf"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>b_deblocking_filter</name></name> <operator>=</operator> <operator>!</operator><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"nf"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_val</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"deblock"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_val</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>atoi</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_deblocking_filter_alphac0</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_deblocking_filter_beta</name></name> <operator>=</operator> <ternary><condition><expr><name>p</name></expr> ?</condition><then>
<expr><call><name>atoi</name><argument_list>( <argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_deblocking_filter_alphac0</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_val</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"psy-rd"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_val</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>us_atof</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">1.0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>f_psy_rd</name></name> <operator>=</operator> <call><name>us_atof</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>f_psy_trellis</name></name> <operator>=</operator> <ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><call><name>us_atof</name><argument_list>( <argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"psy"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_psy</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"psy"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_val</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"level"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_val</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>us_atof</name> <argument_list>(<argument><expr><name>psz_val</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <call><name>us_atof</name> <argument_list>(<argument><expr><name>psz_val</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_level_idc</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><literal type="number">10</literal> <operator>*</operator> <call><name>us_atof</name> <argument_list>(<argument><expr><name>psz_val</name></expr></argument>)</argument_list></call>
<operator>+</operator> <literal type="number">.5</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><call><name>atoi</name><argument_list>(<argument><expr><name>psz_val</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>psz_val</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">51</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_level_idc</name></name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>psz_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>b_interlaced</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"interlaced"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>fabs</name><argument_list>(<argument><expr><call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"ipratio"</literal></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1.4</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.005</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_ip_factor</name></name> <operator>=</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"ipratio"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>fabs</name><argument_list>(<argument><expr><call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"pbratio"</literal></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1.3</literal></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0.005</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_pb_factor</name></name> <operator>=</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"pbratio"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_complexity_blur</name></name> <operator>=</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"cplxblur"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_qblur</name></name> <operator>=</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"qblur"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"aq-mode"</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>X264_AQ_VARIANCE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_aq_mode</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"aq-mode"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>fabs</name><argument_list>( <argument><expr><call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"aq-strength"</literal></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1.0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.005</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_aq_strength</name></name> <operator>=</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"aq-strength"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"frame-packing"</literal></expr></argument> )</argument_list></call> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_frame_packing</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"frame-packing"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"verbose"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_log_level</name></name> <operator>=</operator> <name>X264_LOG_DEBUG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"quiet"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_log_level</name></name> <operator>=</operator> <name>X264_LOG_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"sps-id"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_sps_id</name></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"aud"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>b_aud</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"keyint"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>!=</operator> <literal type="number">250</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_keyint_max</name></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_keyint_max</name></name> <operator>=</operator> <name>X264_KEYINT_MAX_INFINITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"min-keyint"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>!=</operator> <literal type="number">25</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_keyint_min</name></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>b_open_gop</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"opengop"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>b_bluray_compat</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"bluray-compat"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"bframes"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>&lt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>!=</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_bframe</name></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>b_intra_refresh</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"intra-refresh"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_val</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"bpyramid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"normal"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_bframe_pyramid</name></name> <operator>=</operator> <name>X264_B_PYRAMID_NORMAL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"strict"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_bframe_pyramid</name></name> <operator>=</operator> <name>X264_B_PYRAMID_STRICT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_bframe_pyramid</name></name> <operator>=</operator> <name>X264_B_PYRAMID_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"ref"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>&lt;=</operator> <literal type="number">15</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>!=</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_frame_reference</name></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"scenecut"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>&lt;=</operator> <literal type="number">100</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>!=</operator> <literal type="number">40</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_scenecut_threshold</name></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>b_deterministic</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>,
<argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"non-deterministic"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"subme"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>!=</operator> <literal type="number">7</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_subpel_refine</name></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_val</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"hrd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"vbr"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_nal_hrd</name></name> <operator>=</operator> <name>X264_NAL_HRD_VBR</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"cbr"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_nal_hrd</name></name> <operator>=</operator> <name>X264_NAL_HRD_CBR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>psz_val</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"me"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_val</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"hex"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"dia"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_me_method</name></name> <operator>=</operator> <name>X264_ME_DIA</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"umh"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_me_method</name></name> <operator>=</operator> <name>X264_ME_UMH</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"esa"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_me_method</name></name> <operator>=</operator> <name>X264_ME_ESA</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"tesa"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_me_method</name></name> <operator>=</operator> <name>X264_ME_TESA</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"merange"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>&lt;=</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>!=</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_me_range</name></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_mv_range</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>,
<argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"mvrange"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_mv_range_thread</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>,
<argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"mvrange-thread"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_val</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"direct"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_direct_mv_pred</name></name> <operator>=</operator> <name>X264_DIRECT_PRED_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"spatial"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_direct_mv_pred</name></name> <operator>=</operator> <name>X264_DIRECT_PRED_SPATIAL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"temporal"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_direct_mv_pred</name></name> <operator>=</operator> <name>X264_DIRECT_PRED_TEMPORAL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_direct_mv_pred</name></name> <operator>=</operator> <name>X264_DIRECT_PRED_AUTO</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_psnr</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"psnr"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_ssim</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"ssim"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"weightb"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_weighted_bipred</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>,
<argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"weightb"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"weightp"</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_weighted_pred</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"weightp"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"b-adapt"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_bframe_adaptive</name></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"b-bias"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">100</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>&lt;=</operator> <literal type="number">100</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_bframe_bias</name></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_chroma_me</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>,
<argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"chroma-me"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_chroma_qp_offset</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>,
<argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"chroma-qp-offset"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"mixed-refs"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_mixed_references</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>,
<argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"mixed-refs"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"trellis"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_trellis</name></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"fast-pskip"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_fast_pskip</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>,
<argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"fast-pskip"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"nr"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>&lt;=</operator> <literal type="number">1000</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_noise_reduction</name></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"dct-decimate"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_dct_decimate</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>,
<argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"dct-decimate"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"deadzone-inter"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>&lt;=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>!=</operator> <literal type="number">21</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_luma_deadzone</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"deadzone-intra"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>&lt;=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>!=</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_luma_deadzone</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"asm"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>cpu</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>X264_ANALYSE_BSUB16x16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X264_ANALYSE_BSUB16x16</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>psz_val</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"partitions"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>inter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"fast"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>inter</name></name> <operator>=</operator> <name>X264_ANALYSE_I4x4</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"normal"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>inter</name></name> <operator>=</operator>
<name>X264_ANALYSE_I4x4</name> <operator>|</operator>
<name>X264_ANALYSE_PSUB16x16</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X264_ANALYSE_I8x8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>inter</name></name> <operator>|=</operator> <name>X264_ANALYSE_I8x8</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"slow"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>inter</name></name> <operator>=</operator>
<name>X264_ANALYSE_I4x4</name> <operator>|</operator>
<name>X264_ANALYSE_PSUB16x16</name> <operator>|</operator>
<name>X264_ANALYSE_BSUB16x16</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X264_ANALYSE_I8x8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>inter</name></name> <operator>|=</operator> <name>X264_ANALYSE_I8x8</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>inter</name></name> <operator>=</operator> <operator>~</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"8x8dct"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_transform_8x8</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>,
<argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"8x8dct"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_dst_num</name></decl>, <decl><type ref="prev"/><name>i_dst_den</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_dst_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dst_den</name></expr></argument>,
<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr></argument>,
<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_sar_width</name></name> <operator>=</operator> <name>i_dst_num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_sar_height</name></name> <operator>=</operator> <name>i_dst_den</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_timebase_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_timebase_den</name></name> <operator>=</operator> <name>CLOCK_FREQ</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_fps_num</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_fps_den</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>b_vfr_input</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"slices"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_slice_count</name></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"slice-max-size"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_slice_max_size</name></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"slice-max-mbs"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_slice_max_mbs</name></name> <operator>=</operator> <name>i_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>psz_val</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"profile"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_val</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_val</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>x264_param_apply_profile</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_CPU_MMX</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>cpu</name></name> <operator>&amp;=</operator> <operator>~</operator><name>X264_CPU_MMX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_CPU_MMXEXT</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>cpu</name></name> <operator>&amp;=</operator> <operator>~</operator><name>X264_CPU_MMXEXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_CPU_SSE</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>cpu</name></name> <operator>&amp;=</operator> <operator>~</operator><name>X264_CPU_SSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_CPU_SSE2</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>cpu</name></name> <operator>&amp;=</operator> <operator>~</operator><name>X264_CPU_SSE2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>i_threads</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>i_threads</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_val</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"stats"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_val</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>psz_stat_in</name></name> <operator>=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>psz_stat_out</name></name> <operator>=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>psz_stat_name</name></name> <operator>=</operator> <name>psz_val</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"pass"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_val</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>b_stat_write</name></name> <operator>=</operator> <name>i_val</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>b_stat_read</name></name> <operator>=</operator> <name>i_val</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>pf_log</name></name> <operator>=</operator> <name>x264_log</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>p_log_private</name></name> <operator>=</operator> <name>p_enc</name></expr>;</expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_STATIC_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pthread_win32_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pthread_win32_count</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"initializing pthread-win32"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>pthread_win32_process_attach_np</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>pthread_win32_thread_attach_np</name><argument_list>()</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"pthread Win32 Initialization failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pthread_win32_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pthread_win32_count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pthread_win32_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"lookahead"</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">40</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_lookahead</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"lookahead"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>b_repeat_headers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_opts</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"options"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_opts</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_opts</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>config_ChainParseOptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><name>psz_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cfg</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>cfg</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_value</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>x264_param_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>X264_PARAM_BAD_NAME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Unknown option \"%s\""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>X264_PARAM_BAD_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Bad value \"%s\" for option \"%s\""</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cfg</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>x264_encoder_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>param</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"cannot open x264 encoder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>i_extra</name> <init>= <expr><call><name>x264_encoder_headers</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nal</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_extra</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_extra</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nal</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_type</name> <operator>!=</operator> <name>NAL_SEI</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_payload</name></expr></argument>, <argument><expr><name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_extra</name> <operator>+=</operator> <name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_payload</name></expr>;</expr_stmt>
<continue>continue;</continue> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_extra</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_extra</name> <operator>-=</operator> <name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_payload</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sei_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sei_size</name></name> <operator>=</operator> <name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_payload</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sei</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sei_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_sei</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sei</name></name></expr></argument>, <argument><expr><name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_payload</name></expr></argument>, <argument><expr><name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name>i_extra</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>x264_log</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_level</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>X264_LOG_ERROR</name></expr>:</case>
<expr_stmt><expr><name>i_level</name> <operator>=</operator> <name>VLC_MSG_ERR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>X264_LOG_WARNING</name></expr>:</case>
<expr_stmt><expr><name>i_level</name> <operator>=</operator> <name>VLC_MSG_WARN</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>X264_LOG_INFO</name></expr>:</case>
<expr_stmt><expr><name>i_level</name> <operator>=</operator> <name>VLC_MSG_INFO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>X264_LOG_DEBUG</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>i_level</name> <operator>=</operator> <name>VLC_MSG_DBG</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>msg_GenericVa</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>i_level</name></expr></argument>, <argument><expr><name>psz</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encode</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pict</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x264_picture_t</name></type> <name>pic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x264_nal_t</name> <modifier>*</modifier></type><name>nal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_nal</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_out</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>x264_picture_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_pict</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pic</name><operator>.</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_pict</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>.</operator><name>img</name><operator>.</operator><name>i_csp</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_colorspace</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>.</operator><name>img</name><operator>.</operator><name>i_plane</name></name> <operator>=</operator> <name><name>p_pict</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_pict</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>pic</name><operator>.</operator><name>img</name><operator>.</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_pict</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>.</operator><name>img</name><operator>.</operator><name>i_stride</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_pict</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>x264_encoder_encode</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while<condition>( <expr><call><name>x264_encoder_delayed_frames</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>h</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>i_nal</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>x264_encoder_encode</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nal</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_nal</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>



<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nal</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_out</name> <operator>+=</operator> <name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_payload</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_out</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sei_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sei_size</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sei</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sei_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sei_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sei_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sei</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sei</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i_offset</name></expr></argument>, <argument><expr><name><name>nal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_payload</name></expr></argument>, <argument><expr><name>i_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pic</name><operator>.</operator><name>b_keyframe</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>pic</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>X264_TYPE_P</name> <operator>||</operator> <name><name>pic</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>X264_TYPE_I</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_P</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><call><name>IS_X264_TYPE_B</name><argument_list>( <argument><expr><name><name>pic</name><operator>.</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_B</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_PB</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>b_vfr_input</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(
<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>,
<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>pic</name><operator>.</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>pic</name><operator>.</operator><name>i_dts</name></name></expr>;</expr_stmt>

<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_stat_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sei</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>h</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"framecount still in libx264 buffer: %d"</literal></expr></argument>, <argument><expr><call><name>x264_encoder_delayed_frames</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>h</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>x264_encoder_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>h</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTW32_STATIC_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pthread_win32_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pthread_win32_count</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pthread_win32_count</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_win32_thread_detach_np</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_win32_process_detach_np</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"pthread-win32 deinitialized"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pthread_win32_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
