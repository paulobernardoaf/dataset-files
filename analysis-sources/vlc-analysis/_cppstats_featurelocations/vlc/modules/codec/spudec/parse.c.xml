<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\spudec\parse.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"spudec.h"</cpp:file></cpp:include>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_stop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_ephemer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_subtitle</name></decl>;</decl_stmt>
}</block></struct></type> <name>spu_properties_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name><name>pi_offset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>bool</name></type> <name>b_palette</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pi_alpha</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pi_yuv</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_pxctli</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_pxclti</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_auto_crop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_y_top_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_y_bottom_offset</name></decl>;</decl_stmt>

}</block></struct></type> <name>subpicture_data_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseControlSeq</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><name>pf_queue</name>)<parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseRLE</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_data_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>spu_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Render</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>subpicture_data_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>spu_properties_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>AddNibble</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_code</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pi_index</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_index</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr> )</condition>
<block>{<block_content>
<return>return<expr><operator>(</operator> <name>i_code</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <operator>(</operator> <name><name>p_src</name><index>[<expr><operator>(</operator><operator>*</operator><name>pi_index</name><operator>)</operator><operator>++</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal> <operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<return>return<expr><operator>(</operator> <name>i_code</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <name><name>p_src</name><index>[<expr><operator>(</operator><operator>*</operator><name>pi_index</name><operator>)</operator><operator>++</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CLUTIdxToYUV</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>subs_format_t</name></name> <modifier>*</modifier></type><name>subs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>idx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>yuv</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_ayvu</name> <init>= <expr><name><name>subs</name><operator>-&gt;</operator><name>spu</name><operator>.</operator><name>palette</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>yuv</name><index>[<expr><literal type="number">3</literal><operator>-</operator><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i_ayvu</name><operator>&gt;&gt;</operator><literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yuv</name><index>[<expr><literal type="number">3</literal><operator>-</operator><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i_ayvu</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yuv</name><index>[<expr><literal type="number">3</literal><operator>-</operator><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>i_ayvu</name><operator>&gt;&gt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParsePXCTLI</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>subpicture_data_t</name> <modifier>*</modifier></type><name>p_spu_data</name></decl></parameter>,
<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p_plane</name> <init>= <expr><operator>&amp;</operator><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_palette_t</name> <modifier>*</modifier></type><name>p_palette</name> <init>= <expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>p_spu_data</name><operator>-&gt;</operator><name>i_pxclti</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_col</name> <init>= <expr><call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_spu_data</name><operator>-&gt;</operator><name>p_pxctli</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_color</name> <init>= <expr><call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_spu_data</name><operator>-&gt;</operator><name>p_pxctli</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_contrast</name> <init>= <expr><call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_spu_data</name><operator>-&gt;</operator><name>p_pxctli</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>+</operator><literal type="number">4</literal> <operator>&gt;=</operator> <name>VIDEO_PALETTE_COLORS_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>palette</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>SPU_PALETTE_DEFINED</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>idx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>yuv</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>alpha</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_color</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_color</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_color</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>i_color</name><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLUTIdxToYUV</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>yuv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>alpha</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_contrast</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_contrast</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_contrast</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i_contrast</name><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name><name>index_map</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>yuvaentry</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>yuvaentry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>yuv</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yuvaentry</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>yuv</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yuvaentry</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>yuv</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yuvaentry</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>alpha</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <literal type="number">0x11</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_index</name> <init>= <expr><name>VIDEO_PALETTE_COLORS_MAX</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>yuvaentry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>uint8_t</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_index</name> <operator>=</operator> <name>VIDEO_PALETTE_COLORS_MAX</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if<condition>( <expr><name>i_index</name> <operator>==</operator> <name>VIDEO_PALETTE_COLORS_MAX</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>==</operator> <name>VIDEO_PALETTE_COLORS_MAX</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Cannot create new color, skipping PXCTLI"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_index</name> <operator>=</operator> <name><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[ <expr><name>i_index</name></expr> ]</index></name></expr></argument>, <argument><expr><name>yuvaentry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>uint8_t</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>index_map</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i_index</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&gt;=</operator> <name>i_col</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_col</name> <operator>-=</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>p_plane</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_line</name> <init>= <expr><operator>&amp;</operator><name><name>p_plane</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>j</name> <operator>*</operator> <name><name>p_plane</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>k</name><init>=<expr><name>i_col</name></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name><name>p_plane</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_line</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>p_line</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>index_map</name><index>[ <expr><name><name>p_line</name><index>[<expr><name>k</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>OutputPicture</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>subpicture_data_t</name> <modifier>*</modifier></type><name>p_spu_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>spu_properties_t</name> <modifier>*</modifier></type><name>p_spu_properties</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><name>pf_queue</name>)<parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_pixeldata</name></decl>;</decl_stmt>


<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>decoder_NewSubpicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>i_original_frame_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>i_original_frame_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>p_spu_properties</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>p_spu_properties</name><operator>-&gt;</operator><name>i_stop</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name><name>p_spu_properties</name><operator>-&gt;</operator><name>b_ephemer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_subtitle</name></name> <operator>=</operator> <name><name>p_spu_properties</name><operator>-&gt;</operator><name>b_subtitle</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&lt;=</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">500</literal> <operator>*</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>









<expr_stmt><expr><name>p_pixeldata</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rle_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_pixeldata</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>subpicture_data_t</name></type> <name>render_spu_data</name> <init>= <expr><operator>*</operator><name>p_spu_data</name></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if<condition>( <expr><call><name>ParseRLE</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>render_spu_data</name></expr></argument>, <argument><expr><name>p_spu_properties</name></expr></argument>, <argument><expr><name>p_pixeldata</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_pixeldata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_SPUDEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"total size: 0x%x, RLE offsets: 0x%x 0x%x"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name></expr></argument>,
<argument><expr><name><name>render_spu_data</name><operator>.</operator><name>pi_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>render_spu_data</name><operator>.</operator><name>pi_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><call><name>Render</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument>, <argument><expr><name>p_pixeldata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>render_spu_data</name></expr></argument>, <argument><expr><name>p_spu_properties</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_pixeldata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_pixeldata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_spu_data</name><operator>-&gt;</operator><name>p_pxctli</name></name> <operator>&amp;&amp;</operator> <name>p_spu</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ParsePXCTLI</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu_data</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pf_queue</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Validate</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_index</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>i_cur_seq</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_next_seq</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>subpicture_data_t</name> <modifier>*</modifier></type><name>p_spu_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>spu_properties_t</name> <modifier>*</modifier></type><name>p_spu_properties</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>i_next_seq</name> <operator>&lt;</operator> <name>i_cur_seq</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"index mismatch (0x%.4x &lt; 0x%.4x)"</literal></expr></argument>,
<argument><expr><name>i_next_seq</name></expr></argument>, <argument><expr><name>i_cur_seq</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_index</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"uh-oh, we went too far (0x%.4x &gt; 0x%.4x)"</literal></expr></argument>,
<argument><expr><name>i_index</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_spu_size</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu</name></name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name>i_spu_size</name> <operator>||</operator>
<name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name>i_spu_size</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"invalid offset values"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_spu_properties</name><operator>-&gt;</operator><name>i_start</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"no `start display' command"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>i_index</name> <operator>&gt;</operator> <name>i_next_seq</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name> <operator>&gt;</operator> <name>i_index</name> <operator>+</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"%i padding bytes, we usually get 0 or 1 of them"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name> <operator>-</operator> <name>i_index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>ParsePacket</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><name>pf_queue</name>)<parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><call><name>ParseControlSeq</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>, <argument><expr><name>pf_queue</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseControlSeq</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><name>pf_queue</name>)<parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_index</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_next_seq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_cur_seq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_command</name> <init>= <expr><name>SPU_CMD_END</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>date</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_cmd_offset</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_cmd_alpha</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>subpicture_data_t</name></type> <name>spu_data_cmd</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>spu_data_cmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>spu_data_cmd</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_data_cmd</name><operator>.</operator><name>pi_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_data_cmd</name><operator>.</operator><name>pi_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_data_cmd</name><operator>.</operator><name>b_palette</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_data_cmd</name><operator>.</operator><name>b_auto_crop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_data_cmd</name><operator>.</operator><name>i_y_top_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_data_cmd</name><operator>.</operator><name>i_y_bottom_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_data_cmd</name><operator>.</operator><name>pi_alpha</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_data_cmd</name><operator>.</operator><name>pi_alpha</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_data_cmd</name><operator>.</operator><name>pi_alpha</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_data_cmd</name><operator>.</operator><name>pi_alpha</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_data_t</name></type> <name>spu_data</name> <init>= <expr><name>spu_data_cmd</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>spu_properties_t</name></type> <name>spu_properties</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>spu_properties</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>spu_properties</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_properties</name><operator>.</operator><name>i_start</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_properties</name><operator>.</operator><name>i_stop</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_properties</name><operator>.</operator><name>b_subtitle</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_index</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_rle_size</name></name></expr>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name></expr> ;</condition> <incr/>)</control>
<block>{<block_content>


<if_stmt><if>if<condition>( <expr><name>i_command</name> <operator>==</operator> <name>SPU_CMD_END</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_index</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"overflow in SPU command sequence"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>b_cmd_offset</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_cmd_alpha</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>date</name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>i_cur_seq</name> <operator>=</operator> <name>i_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_next_seq</name> <operator>=</operator> <call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_next_seq</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"overflow in SPU next command sequence"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_command</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name>i_command</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>SPU_CMD_FORCE_DISPLAY</name></expr>:</case> 
<expr_stmt><expr><name><name>spu_properties</name><operator>.</operator><name>i_start</name></name> <operator>=</operator> <name>i_pts</name> <operator>+</operator> <name>date</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_properties</name><operator>.</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>spu_properties</name><operator>.</operator><name>b_subtitle</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>SPU_CMD_START_DISPLAY</name></expr>:</case> 
<expr_stmt><expr><name><name>spu_properties</name><operator>.</operator><name>i_start</name></name> <operator>=</operator> <name>i_pts</name> <operator>+</operator> <name>date</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SPU_CMD_STOP_DISPLAY</name></expr>:</case> 
<expr_stmt><expr><name><name>spu_properties</name><operator>.</operator><name>i_stop</name></name> <operator>=</operator> <name>i_pts</name> <operator>+</operator> <name>date</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SPU_CMD_SET_PALETTE</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name>i_index</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"overflow in SPU command"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>palette</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>SPU_PALETTE_DEFINED</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>idx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>spu_data_cmd</name><operator>.</operator><name>b_palette</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLUTIdxToYUV</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>spu_data_cmd</name><operator>.</operator><name>pi_yuv</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_index</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SPU_CMD_SET_ALPHACHANNEL</name></expr>:</case> 
<if_stmt><if>if<condition>( <expr><name>i_index</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"overflow in SPU command"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_disabletrans</name></name></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><name>b_cmd_alpha</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_data_cmd</name><operator>.</operator><name>pi_alpha</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_data_cmd</name><operator>.</operator><name>pi_alpha</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_data_cmd</name><operator>.</operator><name>pi_alpha</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_data_cmd</name><operator>.</operator><name>pi_alpha</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_index</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SPU_CMD_SET_COORDINATES</name></expr>:</case> 
<if_stmt><if>if<condition>( <expr><name>i_index</name> <operator>+</operator> <literal type="number">7</literal> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"overflow in SPU command"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>spu_properties</name><operator>.</operator><name>i_x</name></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_properties</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x0f</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <name><name>spu_properties</name><operator>.</operator><name>i_x</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spu_properties</name><operator>.</operator><name>i_y</name></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator><operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_properties</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x0f</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <name><name>spu_properties</name><operator>.</operator><name>i_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spu_properties</name><operator>.</operator><name>i_width</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>spu_properties</name><operator>.</operator><name>i_height</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"integer overflow in SPU command"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>spu_properties</name><operator>.</operator><name>i_height</name></name> <operator>&gt;</operator> <literal type="number">250</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>spu_data</name><operator>.</operator><name>b_auto_crop</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_index</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SPU_CMD_SET_OFFSETS</name></expr>:</case> 
<if_stmt><if>if<condition>( <expr><name>i_index</name> <operator>+</operator> <literal type="number">5</literal> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"overflow in SPU command"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b_cmd_offset</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_data</name><operator>.</operator><name>pi_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_data</name><operator>.</operator><name>pi_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SPU_CMD_SET_COLCON</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name>i_index</name> <operator>+</operator> <literal type="number">7</literal> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"overflow in SPU command"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>spu_properties</name><operator>.</operator><name>i_start</name></name> <operator>=</operator> <name>i_pts</name> <operator>+</operator> <name>date</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name> <operator>&gt;</operator>
<name>i_index</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>spu_data</name><operator>.</operator><name>p_pxctli</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spu_data</name><operator>.</operator><name>i_pxclti</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_index</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_index</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SPU_CMD_END</name></expr>:</case> 

<if_stmt><if>if<condition>( <expr><name>b_cmd_offset</name></expr> )</condition>
<block>{<block_content>



<expr_stmt><expr><name><name>spu_data</name><operator>.</operator><name>b_palette</name></name> <operator>=</operator> <name><name>spu_data_cmd</name><operator>.</operator><name>b_palette</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>spu_data_cmd</name><operator>.</operator><name>b_palette</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>spu_data</name><operator>.</operator><name>pi_yuv</name></name></expr></argument>, <argument><expr><name><name>spu_data_cmd</name><operator>.</operator><name>pi_yuv</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>spu_data_cmd</name><operator>.</operator><name>pi_yuv</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>b_cmd_alpha</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>spu_data</name><operator>.</operator><name>pi_alpha</name></name></expr></argument>, <argument><expr><name><name>spu_data_cmd</name><operator>.</operator><name>pi_alpha</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>spu_data_cmd</name><operator>.</operator><name>pi_alpha</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_index</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>Validate</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>i_index</name></expr></argument>, <argument><expr><name>i_cur_seq</name></expr></argument>, <argument><expr><name>i_next_seq</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>spu_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spu_properties</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>OutputPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spu_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spu_properties</name></expr></argument>, <argument><expr><name>pf_queue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default> 
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"unknown SPU command 0x%.2x"</literal></expr></argument>, <argument><expr><name>i_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_index</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>i_next_seq</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i_next_seq</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>SPU_CMD_END</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>i_index</name> <operator>=</operator> <name>i_next_seq</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"cannot recover, dropping subtitle"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name>i_command</name> <operator>=</operator> <name>SPU_CMD_END</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></switch>


<if_stmt><if>if<condition>( <expr><name>i_command</name> <operator>==</operator> <name>SPU_CMD_END</name> <operator>&amp;&amp;</operator> <name>i_index</name> <operator>!=</operator> <name>i_next_seq</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>



<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseRLE</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,
<parameter><decl><type><name>subpicture_data_t</name> <modifier>*</modifier></type><name>p_spu_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>spu_properties_t</name> <modifier>*</modifier></type><name>p_spu_properties</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_pixeldata</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>i_width</name> <init>= <expr><name><name>p_spu_properties</name><operator>-&gt;</operator><name>i_width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>i_height</name> <init>= <expr><name><name>p_spu_properties</name><operator>-&gt;</operator><name>i_height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_x</name></decl>, <decl><type ref="prev"/><name>i_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><name>p_pixeldata</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>pi_table</name><index>[ <expr><literal type="number">2</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pi_offset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_empty_top</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_skipped_top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_skipped_bottom</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_transparent_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_border</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>stats</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> <expr_stmt><expr><name><name>stats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>stats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>stats</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>stats</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pi_table</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name> <operator>=</operator> <name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_offset</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_table</name><index>[ <expr><literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_offset</name><index>[ <expr><literal type="number">1</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i_y</name> <operator>&lt;</operator> <name>i_height</name></expr> ;</condition> <incr><expr><name>i_y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_code</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pi_offset</name> <operator>=</operator> <name>pi_table</name> <operator>+</operator> <name>i_id</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i_x</name> <operator>&lt;</operator> <name>i_width</name></expr> ;</condition> <incr><expr><name>i_x</name> <operator>+=</operator> <name>i_code</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>i_code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i_min</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i_min</name> <operator>&lt;=</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator> <name>i_code</name> <operator>&lt;</operator> <name>i_min</name></expr>;</condition> <incr><expr><name>i_min</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><name>pi_offset</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"out of bounds while reading rle"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_code</name> <operator>=</operator> <call><name>AddNibble</name><argument_list>( <argument><expr><name>i_code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pi_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>i_code</name> <operator>&lt;</operator> <literal type="number">0x0004</literal></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name>i_code</name> <operator>|=</operator> <operator>(</operator> <name>i_width</name> <operator>-</operator> <name>i_x</name> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>(</operator><name>i_code</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>i_x</name> <operator>+</operator> <name>i_y</name> <operator>*</operator> <name>i_width</name> <operator>)</operator> <operator>&gt;</operator> <name>i_height</name> <operator>*</operator> <name>i_width</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"out of bounds, %i at (%i,%i) is out of %ix%i"</literal></expr></argument>,
<argument><expr><name>i_code</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>i_height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_alpha</name><index>[ <expr><name>i_code</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr> ]</index></name> <operator>!=</operator> <literal type="number">0x00</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_border</name> <operator>=</operator> <name>i_code</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><index>[<expr><name>i_border</name></expr>]</index></name> <operator>+=</operator> <name>i_code</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_spu_data</name><operator>-&gt;</operator><name>b_auto_crop</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_y</name></expr> )</condition>
<block>{<block_content>



<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_code</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <name>i_width</name> <operator>&amp;&amp;</operator>
<name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_alpha</name><index>[ <expr><name>i_code</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr> ]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_transparent_code</name> <operator>=</operator> <name>i_code</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_spu_data</name><operator>-&gt;</operator><name>b_auto_crop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_code</name> <operator>==</operator> <name>i_transparent_code</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_empty_top</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>i_skipped_top</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name>i_code</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_skipped_bottom</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name>i_code</name></expr>;</expr_stmt>


<expr_stmt><expr><name>b_empty_top</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_skipped_bottom</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name>i_code</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if<condition>( <expr><name>i_x</name> <operator>&gt;</operator> <name>i_width</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"i_x overflowed, %i &gt; %i"</literal></expr></argument>, <argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_offset</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_offset</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_id</name> <operator>=</operator> <operator>~</operator><name>i_id</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if<condition>( <expr><name>i_y</name> <operator>&lt;</operator> <name>i_height</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"padding bytes found in RLE sequence"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"send mail to &lt;sam@zoy.org&gt; if you "</literal>
<literal type="string">"want to help debugging this"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<while>while<condition>( <expr><name>i_y</name> <operator>&lt;</operator> <name>i_height</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <name>i_width</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_y</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_SPUDEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"valid subtitle, size: %ix%i, position: %i,%i"</literal></expr></argument>,
<argument><expr><name><name>p_spu_properties</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_spu_properties</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>,
<argument><expr><name><name>p_spu_properties</name><operator>-&gt;</operator><name>i_x</name></name></expr></argument>, <argument><expr><name><name>p_spu_properties</name><operator>-&gt;</operator><name>i_y</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if<condition>( <expr><name>i_skipped_top</name> <operator>||</operator> <name>i_skipped_bottom</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_spu_data</name><operator>-&gt;</operator><name>i_y_top_offset</name></name> <operator>=</operator> <name>i_skipped_top</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_data</name><operator>-&gt;</operator><name>i_y_bottom_offset</name></name> <operator>=</operator> <name>i_skipped_bottom</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_SPUDEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"cropped to: %ix%i, position: %i,%i"</literal></expr></argument>,
<argument><expr><name><name>p_spu_properties</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>,
<argument><expr><name><name>p_spu_properties</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <operator>(</operator><name>i_skipped_top</name> <operator>+</operator> <name>i_skipped_bottom</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>p_spu_properties</name><operator>-&gt;</operator><name>i_x</name></name></expr></argument>, <argument><expr><name><name>p_spu_properties</name><operator>-&gt;</operator><name>i_y</name></name> <operator>+</operator> <name>i_skipped_top</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_spu_data</name><operator>-&gt;</operator><name>b_palette</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>i_inner</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_shade</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>i_border</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_yuv</name><index>[<expr><name>i_border</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_yuv</name><index>[<expr><name>i_border</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_yuv</name><index>[<expr><name>i_border</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><index>[<expr><name>i_border</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>i_inner</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_inner</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>i_shade</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>stats</name><index>[<expr><name>i_inner</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_shade</name> <operator>=</operator> <name>i_inner</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_inner</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_shade</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if<condition>( <expr><name>i_inner</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_yuv</name><index>[<expr><name>i_inner</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_yuv</name><index>[<expr><name>i_inner</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_yuv</name><index>[<expr><name>i_inner</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>i_shade</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_yuv</name><index>[<expr><name>i_shade</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_yuv</name><index>[<expr><name>i_shade</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_yuv</name><index>[<expr><name>i_shade</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_SPUDEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"using custom palette (border %i, inner %i, shade %i)"</literal></expr></argument>,
<argument><expr><name>i_border</name></expr></argument>, <argument><expr><name>i_inner</name></expr></argument>, <argument><expr><name>i_shade</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Render</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>p_pixeldata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>subpicture_data_t</name> <modifier>*</modifier></type><name>p_spu_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>spu_properties_t</name> <modifier>*</modifier></type><name>p_spu_properties</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>, <decl><type ref="prev"/><name>i_y</name></decl>, <decl><type ref="prev"/><name>i_len</name></decl>, <decl><type ref="prev"/><name>i_color</name></decl>, <decl><type ref="prev"/><name>i_pitch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>p_source</name> <init>= <expr><name>p_pixeldata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_palette_t</name></type> <name>palette</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VLC_CODEC_YUVP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_spu_properties</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_spu_properties</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator>
<name><name>p_spu_data</name><operator>-&gt;</operator><name>i_y_top_offset</name></name> <operator>-</operator> <name><name>p_spu_data</name><operator>-&gt;</operator><name>i_y_bottom_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <operator>&amp;</operator><name>palette</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_x</name> <operator>&lt;</operator> <name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name></expr>;</condition> <incr><expr><name>i_x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i_x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_yuv</name><index>[<expr><name>i_x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i_x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_yuv</name><index>[<expr><name>i_x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i_x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_yuv</name><index>[<expr><name>i_x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i_x</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>p_spu_data</name><operator>-&gt;</operator><name>pi_alpha</name><index>[<expr><name>i_x</name></expr>]</index></name> <operator>*</operator> <literal type="number">0x11</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <call><name>subpicture_region_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate SPU region"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name><name>p_spu_properties</name><operator>-&gt;</operator><name>i_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name><name>p_spu_properties</name><operator>-&gt;</operator><name>i_y</name></name> <operator>+</operator> <name><name>p_spu_data</name><operator>-&gt;</operator><name>i_y_top_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_p</name> <operator>=</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_pitch</name> <operator>=</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>i_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_y</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>*</operator> <name>i_pitch</name></expr>;</condition> <incr><expr><name>i_y</name> <operator>+=</operator> <name>i_pitch</name></expr></incr> )</control>
<block>{<block_content>

<for>for<control>( <init><expr><name>i_x</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i_x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>fmt</name><operator>.</operator><name>i_width</name></name></expr>;</condition> <incr><expr><name>i_x</name> <operator>+=</operator> <name>i_len</name></expr></incr> )</control>
<block>{<block_content>

<expr_stmt><expr><name>i_color</name> <operator>=</operator> <operator>*</operator><name>p_source</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_len</name> <operator>=</operator> <operator>*</operator><name>p_source</name><operator>++</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_p</name> <operator>+</operator> <name>i_x</name> <operator>+</operator> <name>i_y</name></expr></argument>, <argument><expr><name>i_color</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
