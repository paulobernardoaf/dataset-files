<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\spudec\spudec.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"spudec.h"</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecoderOpen</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>PacketizerOpen</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVDSUBTRANS_DISABLE_TEXT</name></cpp:macro> <cpp:value>N_("Disable DVD subtitle transparency")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVDSUBTRANS_DISABLE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Removes all transparency effects " "used in DVD subtitles.")</cpp:value></cpp:define>


<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"DVD subtitles decoder"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"DVD subtitles"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"spu decoder"</literal></argument>, <argument><literal type="number">75</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_SCODEC</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>DecoderOpen</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"dvdsub-transparency"</literal></argument>, <argument>false</argument>,
<argument>DVDSUBTRANS_DISABLE_TEXT</argument>, <argument>DVDSUBTRANS_DISABLE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"DVD subtitles packetizer"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"packetizer"</literal></argument>, <argument><literal type="number">50</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>PacketizerOpen</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>Reassemble</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>Packetize</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenCommon</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_packetizer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_SPU</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>decoder_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_packetizer</name></name> <operator>=</operator> <name>b_packetizer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_disabletrans</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"dvdsub-transparency"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_packetizer</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>Packetize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_SPU</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_SPU</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>Decode</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecoderOpen</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>OpenCommon</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>PacketizerOpen</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>OpenCommon</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_spu_block</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_spu_block</name> <operator>=</operator> <call><name>Reassemble</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>p_spu_block</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu</name></name> <operator>=</operator> <call><name>block_ChainExtract</name><argument_list>( <argument><expr><name>p_spu_block</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">65536</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_spu_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_spu_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ParsePacket</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>decoder_QueueSub</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rle_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Packetize</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>pp_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><operator>*</operator><name>pp_block</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><call><name>Reassemble</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>p_spu</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rle_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><call><name>block_ChainGather</name><argument_list>( <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Reassemble</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name> <operator>||</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"invalid starting packet (size &lt; 4 or pts &lt;=0)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"spu size: %d, i_pts: %"</literal><name>PRId64</name><literal type="string">" i_buffer: %zu"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu</name></name> <operator>+=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name> <operator>=</operator> <operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator><operator>|</operator>
<name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rle_size</name></name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator><operator>|</operator>
<name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>




<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_rle_size</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rle_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"SPU packets size=%d should be %d"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_block</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
