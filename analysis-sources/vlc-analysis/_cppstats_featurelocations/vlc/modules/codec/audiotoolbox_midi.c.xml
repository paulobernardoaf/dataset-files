<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\audiotoolbox_midi.c">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreFoundation/CoreFoundation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;AudioUnit/AudioUnit.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;AudioToolbox/AudioToolbox.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;TargetConditionals.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>on_err_goto</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>on_err_goto</name><parameter_list>(<parameter><type><name>errorCode</name></type></parameter>, <parameter><type><name>exceptionLabel</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((errorCode) != noErr) goto exceptionLabel; } while ( 0 )</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUNDFONT_TEXT</name></cpp:macro> <cpp:value>N_("SoundFont file")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUNDFONT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "SoundFont file to use for software synthesis." )</cpp:value></cpp:define>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"aumidi-"</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"AudioToolbox MIDI synthesizer"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"audio decoder"</literal></argument>, <argument><literal type="number">100</literal></argument>)</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"AUMIDI"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_ACODEC</argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>add_loadfile</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"soundfont"</literal></argument>, <argument><literal type="string">""</literal></argument>,
<argument>SOUNDFONT_TEXT</argument>, <argument>SOUNDFONT_LONGTEXT</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>AUGraph</name></type> <name>graph</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioUnit</name></type> <name>synthUnit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioUnit</name></type> <name>outputUnit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>date_t</name></type> <name>end_date</name></decl>;</decl_stmt>
}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name> <parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name> <parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<enum>enum
<block>{
<decl><name>kMidiMessage_NoteOff</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>,
<decl><name>kMidiMessage_NoteOn</name> <init>= <expr><literal type="number">0x90</literal></expr></init></decl>,
<decl><name>kMidiMessage_PolyPressure</name> <init>= <expr><literal type="number">0xA0</literal></expr></init></decl>,
<decl><name>kMidiMessage_ControlChange</name> <init>= <expr><literal type="number">0xB0</literal></expr></init></decl>,
<decl><name>kMidiMessage_ProgramChange</name> <init>= <expr><literal type="number">0xC0</literal></expr></init></decl>,
<decl><name>kMidiMessage_ChannelPressure</name> <init>= <expr><literal type="number">0xD0</literal></expr></init></decl>,
<decl><name>kMidiMessage_PitchWheel</name> <init>= <expr><literal type="number">0xE0</literal></expr></init></decl>,
<decl><name>kMidiMessage_SysEx</name> <init>= <expr><literal type="number">0xF0</literal></expr></init></decl>,

<decl><name>kMidiMessage_BankMSBControl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>kMidiMessage_BankLSBControl</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,


<decl><name>kMidiController_AllSoundOff</name> <init>= <expr><literal type="number">0x78</literal></expr></init></decl>,
<decl><name>kMidiController_ResetAllControllers</name> <init>= <expr><literal type="number">0x79</literal></expr></init></decl>,
<decl><name>kMidiController_AllNotesOff</name> <init>= <expr><literal type="number">0x7B</literal></expr></init></decl>
}</block>;</enum>


<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>AddAppleAUNode</name><parameter_list>(<parameter><decl><type><name>AUGraph</name></type> <name>graph</name></decl></parameter>, <parameter><decl><type><name>OSType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>OSType</name></type> <name>subtype</name></decl></parameter>, <parameter><decl><type><name>AUNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioComponentDescription</name></type> <name>cDesc</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cDesc</name><operator>.</operator><name>componentType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cDesc</name><operator>.</operator><name>componentSubType</name></name> <operator>=</operator> <name>subtype</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cDesc</name><operator>.</operator><name>componentManufacturer</name></name> <operator>=</operator> <name>kAudioUnitManufacturer_Apple</name></expr>;</expr_stmt>

<return>return <expr><call><name>AUGraphAddNode</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cDesc</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>CreateAUGraph</name><parameter_list>(<parameter><decl><type><name>AUGraph</name> <modifier>*</modifier></type><name>outGraph</name></decl></parameter>, <parameter><decl><type><name>AudioUnit</name> <modifier>*</modifier></type><name>outSynth</name></decl></parameter>, <parameter><decl><type><name>AudioUnit</name> <modifier>*</modifier></type><name>outOut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>res</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AUNode</name></type> <name>synthNode</name></decl>, <decl><type ref="prev"/><name>limiterNode</name></decl>, <decl><type ref="prev"/><name>outNode</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>on_err_goto</name><argument_list>(<argument><expr><name>res</name> <operator>=</operator> <call><name>NewAUGraph</name><argument_list>(<argument><expr><name>outGraph</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bailout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_IPHONE</name></expr></cpp:if>

<expr_stmt><expr><call><name>on_err_goto</name><argument_list>(<argument><expr><name>res</name> <operator>=</operator> <call><name>AddAppleAUNode</name><argument_list>(<argument><expr><operator>*</operator><name>outGraph</name></expr></argument>,
<argument><expr><name>kAudioUnitType_MusicDevice</name></expr></argument>,
<argument><expr><name>kAudioUnitSubType_MIDISynth</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>synthNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bailout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>on_err_goto</name><argument_list>(<argument><expr><name>res</name> <operator>=</operator> <call><name>AddAppleAUNode</name><argument_list>(<argument><expr><operator>*</operator><name>outGraph</name></expr></argument>,
<argument><expr><name>kAudioUnitType_MusicDevice</name></expr></argument>,
<argument><expr><name>kAudioUnitSubType_DLSSynth</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>synthNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bailout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>on_err_goto</name><argument_list>(<argument><expr><name>res</name> <operator>=</operator> <call><name>AddAppleAUNode</name><argument_list>(<argument><expr><operator>*</operator><name>outGraph</name></expr></argument>,
<argument><expr><name>kAudioUnitType_Effect</name></expr></argument>,
<argument><expr><name>kAudioUnitSubType_PeakLimiter</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>limiterNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bailout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>on_err_goto</name><argument_list>(<argument><expr><name>res</name> <operator>=</operator> <call><name>AddAppleAUNode</name><argument_list>(<argument><expr><operator>*</operator><name>outGraph</name></expr></argument>,
<argument><expr><name>kAudioUnitType_Output</name></expr></argument>,
<argument><expr><name>kAudioUnitSubType_GenericOutput</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>outNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bailout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>on_err_goto</name><argument_list>(<argument><expr><name>res</name> <operator>=</operator> <call><name>AUGraphOpen</name><argument_list>(<argument><expr><operator>*</operator><name>outGraph</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bailout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>on_err_goto</name><argument_list>(<argument><expr><name>res</name> <operator>=</operator> <call><name>AUGraphConnectNodeInput</name><argument_list>(<argument><expr><operator>*</operator><name>outGraph</name></expr></argument>, <argument><expr><name>synthNode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>limiterNode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bailout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>on_err_goto</name><argument_list>(<argument><expr><name>res</name> <operator>=</operator> <call><name>AUGraphConnectNodeInput</name><argument_list>(<argument><expr><operator>*</operator><name>outGraph</name></expr></argument>, <argument><expr><name>limiterNode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>outNode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bailout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>on_err_goto</name><argument_list>(<argument><expr><name>res</name> <operator>=</operator> <call><name>AUGraphNodeInfo</name><argument_list>(<argument><expr><operator>*</operator><name>outGraph</name></expr></argument>, <argument><expr><name>synthNode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>outSynth</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bailout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>on_err_goto</name><argument_list>(<argument><expr><name>res</name> <operator>=</operator> <call><name>AUGraphNodeInfo</name><argument_list>(<argument><expr><operator>*</operator><name>outGraph</name></expr></argument>, <argument><expr><name>outNode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>outOut</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bailout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>bailout</name>:</label>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SetSoundfont</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>AudioUnit</name></type> <name>synthUnit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sfPath</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sfPath</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"using default soundfont"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"using custom soundfont: '%s'"</literal></expr></argument>, <argument><expr><name>sfPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CFURLRef</name></type> <name>url</name> <init>= <expr><call><name>CFURLCreateFromFileSystemRepresentation</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>UInt8</name> <operator>*</operator><operator>)</operator><name>sfPath</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>sfPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>url</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name> <init>= <expr><call><name>AudioUnitSetProperty</name><argument_list>(<argument><expr><name>synthUnit</name></expr></argument>,
<argument><expr><name>kMusicDeviceProperty_SoundBankURL</name></expr></argument>,
<argument><expr><name>kAudioUnitScope_Global</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed setting custom SoundFont for MIDI synthesis (%i)"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_MIDI</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>graph</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CreateAUGraph</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>synthUnit</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>outputUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>status</name> <operator>!=</operator> <name>noErr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed to create audiograph (%i)"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<goto>goto <name>bailout</name>;</goto>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sfPath</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"soundfont"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SetSoundfont</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synthUnit</name></name></expr></argument>, <argument><expr><name>sfPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sfPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bailout</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">44100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decoder_UpdateAudioFormat</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<goto>goto <name>bailout</name>;</goto>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>AudioStreamBasicDescription</name></type> <name>ASBD</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bytesPerSample</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Float32</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ASBD</name><operator>.</operator><name>mFormatID</name></name> <operator>=</operator> <name>kAudioFormatLinearPCM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ASBD</name><operator>.</operator><name>mFormatFlags</name></name> <operator>=</operator> <name>kAudioFormatFlagIsFloat</name> <operator>|</operator> <name>kAudioFormatFlagIsPacked</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ASBD</name><operator>.</operator><name>mSampleRate</name></name> <operator>=</operator> <literal type="number">44100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ASBD</name><operator>.</operator><name>mFramesPerPacket</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ASBD</name><operator>.</operator><name>mChannelsPerFrame</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ASBD</name><operator>.</operator><name>mBytesPerFrame</name></name> <operator>=</operator> <name>bytesPerSample</name> <operator>*</operator> <name><name>ASBD</name><operator>.</operator><name>mChannelsPerFrame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ASBD</name><operator>.</operator><name>mBytesPerPacket</name></name> <operator>=</operator> <name><name>ASBD</name><operator>.</operator><name>mBytesPerFrame</name></name> <operator>*</operator> <name><name>ASBD</name><operator>.</operator><name>mFramesPerPacket</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ASBD</name><operator>.</operator><name>mBitsPerChannel</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>bytesPerSample</name></expr>;</expr_stmt>


<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>AudioUnitSetProperty</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>outputUnit</name></name></expr></argument>,
<argument><expr><name>kAudioUnitProperty_StreamFormat</name></expr></argument>,
<argument><expr><name>kAudioUnitScope_Output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ASBD</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AudioStreamBasicDescription</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>status</name> <operator>!=</operator> <name>noErr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed setting output format for output unit (%i)"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<goto>goto <name>bailout</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>AUGraphInitialize</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>status</name> <operator>!=</operator> <name>noErr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>kAudioUnitErr_InvalidFile</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed initializing audiograph: invalid soundfont file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed initializing audiograph (%i)"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<goto>goto <name>bailout</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>MusicDeviceMIDIEvent</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synthUnit</name></name></expr></argument>,
<argument><expr><name>kMidiMessage_ControlChange</name></expr></argument>,
<argument><expr><name>kMidiMessage_BankMSBControl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>AUGraphStart</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>status</name> <operator>!=</operator> <name>noErr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed starting audiograph (%i)"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<goto>goto <name>bailout</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>date_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeBlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<label><name>bailout</name>:</label>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DisposeAUGraph</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name><operator>)</operator><operator>-&gt;</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AUGraphStop</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DisposeAUGraph</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name> <parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>channel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>MusicDeviceMIDIEvent</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synthUnit</name></name></expr></argument>, <argument><expr><name>kMidiMessage_ControlChange</name> <operator>|</operator> <name>channel</name></expr></argument>, <argument><expr><name>kMidiController_AllSoundOff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name> <parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_DISCONTINUITY</name><operator>|</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Flush</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>
<call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>&lt;</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"MIDI message in the past?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>drop</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>event</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>data1</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>data2</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>event</name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>kMidiMessage_NoteOff</name></expr>:</case>
<case>case <expr><name>kMidiMessage_NoteOn</name></expr>:</case>
<case>case <expr><name>kMidiMessage_PolyPressure</name></expr>:</case>
<case>case <expr><name>kMidiMessage_ControlChange</name></expr>:</case>
<case>case <expr><name>kMidiMessage_ProgramChange</name></expr>:</case>
<case>case <expr><name>kMidiMessage_ChannelPressure</name></expr>:</case>
<case>case <expr><name>kMidiMessage_PitchWheel</name></expr>:</case>
<expr_stmt><expr><call><name>MusicDeviceMIDIEvent</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synthUnit</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>data1</name></expr></argument>, <argument><expr><name>data2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>kMidiMessage_SysEx</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MusicDeviceSysEx</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synthUnit</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><operator>(</operator><name>UInt32</name><operator>)</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"unhandled MIDI event: %x"</literal></expr></argument>, <argument><expr><name>event</name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>




<decl_stmt><decl><type><name>unsigned</name></type> <name>frames</name> <init>=
<expr><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>-</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">441</literal> <operator>/</operator> <literal type="number">10000</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>frames</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <call><name>decoder_NewAudioBuffer</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_out</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>date_Increment</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>frames</name></expr></argument>)</argument_list></call>
<operator>-</operator> <name><name>p_out</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>AudioTimeStamp</name></type> <name>timestamp</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>timestamp</name><operator>.</operator><name>mFlags</name></name> <operator>=</operator> <name>kAudioTimeStampWordClockTimeValid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timestamp</name><operator>.</operator><name>mWordClockTime</name></name> <operator>=</operator> <name><name>p_out</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>AudioBufferList</name></type> <name>bufferList</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bufferList</name><operator>.</operator><name>mNumberBuffers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufferList</name><operator>.</operator><name>mBuffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mNumberChannels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufferList</name><operator>.</operator><name>mBuffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mDataByteSize</name> <operator>=</operator> <name>frames</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Float32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufferList</name><operator>.</operator><name>mBuffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mData</name> <operator>=</operator> <name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>AudioUnitRender</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>outputUnit</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>frames</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"rendering audio unit failed: %i"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>drop</name>:</label>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decoder_QueueAudio</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
