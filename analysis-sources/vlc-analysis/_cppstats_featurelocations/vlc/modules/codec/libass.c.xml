<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\libass.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ass/ass.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBASS_VERSION</name> <operator>&lt;</operator> <literal type="number">0x01300000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASS_FONTPROVIDER_AUTODETECT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Subtitles (advanced)"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Subtitle renderers using libass"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"spu decoder"</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_SCODEC</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Create</argument>, <argument>Destroy</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_max_stop</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_refcount</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ASS_Library</name> <modifier>*</modifier></type><name>p_library</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASS_Renderer</name> <modifier>*</modifier></type><name>p_renderer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ASS_Track</name> <modifier>*</modifier></type><name>p_track</name></decl>;</decl_stmt>
}</block></struct></type> <name>decoder_sys_t</name>;</typedef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DecSysRelease</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DecSysHold</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SubpictureValidate</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SubpictureUpdate</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SubpictureDestroy</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_dec_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_subs_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_subs_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASS_Image</name> <modifier>*</modifier></type><name>p_img</name></decl>;</decl_stmt>
}</block></struct></type> <name>libass_spu_updater_sys_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>x0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y1</name></decl>;</decl_stmt>
}</block></struct></type> <name>rectangle_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>BuildRegions</name><parameter_list>( <parameter><decl><type><name>rectangle_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_max_region</name></decl></parameter>, <parameter><decl><type><name>ASS_Image</name> <modifier>*</modifier></type><name>p_img_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_height</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RegionDraw</name><parameter_list>( <parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>, <parameter><decl><type><name>ASS_Image</name> <modifier>*</modifier></type><name>p_img</name></decl></parameter> )</parameter_list>;</function_decl>






<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_SSA</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeBlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>decoder_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_stop</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_library</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_renderer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_track</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ASS_Library</name> <modifier>*</modifier></type><name>p_library</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_library</name></name> <operator>=</operator> <call><name>ass_library_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_library</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Libass library creation failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DecSysRelease</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_attachments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_attachments</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>decoder_GetInputAttachments</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp_attachments</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_attachments</name></expr></argument> )</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_attachments</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pp_attachments</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>i_attachments</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>p_attach</name> <init>= <expr><name><name>pp_attachments</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>p_attach</name><operator>-&gt;</operator><name>psz_mime</name></name></expr></argument>, <argument><expr><literal type="string">"application/x-truetype-font"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_attach</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><name><name>p_attach</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_attach</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">".ttf"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">".otf"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">".ttc"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>found</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"adding embedded font %s"</literal></expr></argument>, <argument><expr><name><name>p_attach</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ass_add_font</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_library</name></name></expr></argument>, <argument><expr><name><name>p_attach</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>p_attach</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>p_attach</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_input_attachment_Delete</name><argument_list>( <argument><expr><name>p_attach</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_attachments</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ass_set_extract_fonts</name><argument_list>( <argument><expr><name>p_library</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ass_set_style_overrides</name><argument_list>( <argument><expr><name>p_library</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ASS_Renderer</name> <modifier>*</modifier></type><name>p_renderer</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_renderer</name></name> <operator>=</operator> <call><name>ass_renderer_init</name><argument_list>( <argument><expr><name>p_library</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_renderer</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Libass renderer creation failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DecSysRelease</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ass_set_use_margins</name><argument_list>( <argument><expr><name>p_renderer</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ass_set_font_scale</name><argument_list>( <argument><expr><name>p_renderer</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ass_set_line_spacing</name><argument_list>( <argument><expr><name>p_renderer</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__ANDROID__</name></expr></argument> )</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_font</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_family</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_font_droid</name> <init>= <expr><literal type="string">"/system/fonts/DroidSans-Bold.ttf"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family_droid</name> <init>= <expr><literal type="string">"Droid Sans Bold"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_font_noto</name> <init>= <expr><literal type="string">"/system/fonts/NotoSansCJK-Regular.ttc"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family_noto</name> <init>= <expr><literal type="string">"Noto Sans"</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><call><name>access</name><argument_list>( <argument><expr><name>psz_font_noto</name></expr></argument>, <argument><expr><name>R_OK</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_font</name> <operator>=</operator> <name>psz_font_noto</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_family</name> <operator>=</operator> <name>psz_family_noto</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>psz_font</name> <operator>=</operator> <name>psz_font_droid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_family</name> <operator>=</operator> <name>psz_family_droid</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__APPLE__</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_font</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name> <init>= <expr><literal type="string">"Helvetica Neue"</literal></expr></init></decl>;</decl_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_font</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name> <init>= <expr><literal type="string">"Arial"</literal></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FONTCONFIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_dialog_id</name> <init>=
<expr><call><name>vlc_dialog_display_progress</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Building font cache"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>( <argument><expr><literal type="string">"Please wait while your font cache is rebuilt.\n"</literal>
<literal type="string">"This should take less than a minute."</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ass_set_fonts</name><argument_list>( <argument><expr><name>p_renderer</name></expr></argument>, <argument><expr><name>psz_font</name></expr></argument>, <argument><expr><name>psz_family</name></expr></argument>, <argument><expr><name>ASS_FONTPROVIDER_AUTODETECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name>p_dialog_id</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_dialog_release</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_dialog_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ass_set_fonts</name><argument_list>( <argument><expr><name>p_renderer</name></expr></argument>, <argument><expr><name>psz_font</name></expr></argument>, <argument><expr><name>psz_family</name></expr></argument>, <argument><expr><name>ASS_FONTPROVIDER_AUTODETECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><call><name>ass_set_hinting</name><argument_list>( <argument><expr><name>p_renderer</name></expr></argument>, <argument><expr><name>ASS_HINTING_NONE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ASS_Track</name> <modifier>*</modifier></type><name>p_track</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_track</name></name> <operator>=</operator> <call><name>ass_new_track</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_library</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_track</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DecSysRelease</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ass_process_codec_private</name><argument_list>( <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_RGBA</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DecSysRelease</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecSysHold</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_refcount</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DecSysRelease</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_refcount</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_track</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ass_free_track</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_track</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_renderer</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ass_renderer_done</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_renderer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_library</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ass_library_done</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_library</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_stop</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Flush</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>libass_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_spu_sys</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_spu_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu_sys</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>subpicture_updater_t</name></type> <name>updater</name> <init>= <expr><block>{
<expr><operator>.</operator><name>pf_validate</name> <operator>=</operator> <name>SubpictureValidate</name></expr>,
<expr><operator>.</operator><name>pf_update</name> <operator>=</operator> <name>SubpictureUpdate</name></expr>,
<expr><operator>.</operator><name>pf_destroy</name> <operator>=</operator> <name>SubpictureDestroy</name></expr>,
<expr><operator>.</operator><name>p_sys</name> <operator>=</operator> <name>p_spu_sys</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>decoder_NewSubpicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>updater</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"can't get spu buffer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_spu_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>p_img</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>p_dec_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>i_subs_len</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>p_subs_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_spu_sys</name><operator>-&gt;</operator><name>p_subs_data</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>p_subs_data</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_stop</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_stop</name></name> <operator>=</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_track</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ass_process_chunk</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_track</name></name></expr></argument>, <argument><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>p_subs_data</name></name></expr></argument>, <argument><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>i_subs_len</name></name></expr></argument>,
<argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DecSysHold</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_QueueSub</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>SubpictureValidate</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_fmt_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_src</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_fmt_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_dst</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_ts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libass_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_spusys</name> <init>= <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_spusys</name><operator>-&gt;</operator><name>p_dec_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name> <init>= <expr><operator>*</operator><name>p_fmt_dst</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_RGBA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_fmt_src</name> <operator>||</operator> <name>b_fmt_dst</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ass_set_frame_size</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_renderer</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>src_ratio</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>p_fmt_src</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>/</operator> <name><name>p_fmt_src</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>dst_ratio</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>p_fmt_dst</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>/</operator> <name><name>p_fmt_dst</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ass_set_aspect_ratio</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_renderer</name></name></expr></argument>, <argument><expr><name>dst_ratio</name> <operator>/</operator> <name>src_ratio</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_stream_date</name> <init>= <expr><name><name>p_spusys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+</operator> <operator>(</operator><name>i_ts</name> <operator>-</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>i_start</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASS_Image</name> <modifier>*</modifier></type><name>p_img</name> <init>= <expr><call><name>ass_render_frame</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_renderer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_track</name></name></expr></argument>,
<argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>( <argument><expr><name>i_stream_date</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_changed</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_changed</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_fmt_src</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_fmt_dst</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>p_img</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_spusys</name><operator>-&gt;</operator><name>p_img</name></name> <operator>=</operator> <name>p_img</name></expr>;</expr_stmt>


<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SubpictureUpdate</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_dst</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_ts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_fmt_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_fmt_dst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libass_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_spusys</name> <init>= <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_spusys</name><operator>-&gt;</operator><name>p_dec_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASS_Image</name> <modifier>*</modifier></type><name>p_img</name> <init>= <expr><name><name>p_spusys</name><operator>-&gt;</operator><name>p_img</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>







<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_max_region</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rectangle_t</name></type> <name><name>region</name><index>[<expr><name>i_max_region</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_region</name> <init>= <expr><call><name>BuildRegions</name><argument_list>( <argument><expr><name>region</name></expr></argument>, <argument><expr><name>i_max_region</name></expr></argument>, <argument><expr><name>p_img</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_region</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_region_last</name> <init>= <expr><operator>&amp;</operator><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_region</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_region</name></decl>;</decl_stmt>


<expr_stmt><expr><name>fmt_region</name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt_region</name><operator>.</operator><name>i_width</name></name> <operator>=</operator>
<name><name>fmt_region</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>region</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x1</name> <operator>-</operator> <name><name>region</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt_region</name><operator>.</operator><name>i_height</name></name> <operator>=</operator>
<name><name>fmt_region</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>region</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y1</name> <operator>-</operator> <name><name>region</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>subpicture_region_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>r</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name><name>region</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name><name>region</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RegionDraw</name><argument_list>( <argument><expr><name>r</name></expr></argument>, <argument><expr><name>p_img</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>pp_region_last</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pp_region_last</name> <operator>=</operator> <operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SubpictureDestroy</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libass_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_spusys</name> <init>= <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DecSysRelease</name><argument_list>( <argument><expr><name><name>p_spusys</name><operator>-&gt;</operator><name>p_dec_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_spusys</name><operator>-&gt;</operator><name>p_subs_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_spusys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rectangle_t</name></type> <name>r_create</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rectangle_t</name></type> <name>r</name> <init>= <expr><block>{ <expr><name>x0</name></expr>, <expr><name>y0</name></expr>, <expr><name>x1</name></expr>, <expr><name>y1</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>rectangle_t</name></type> <name>r_img</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>ASS_Image</name> <modifier>*</modifier></type><name>p_img</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>r_create</name><argument_list>( <argument><expr><name><name>p_img</name><operator>-&gt;</operator><name>dst_x</name></name></expr></argument>, <argument><expr><name><name>p_img</name><operator>-&gt;</operator><name>dst_y</name></name></expr></argument>, <argument><expr><name><name>p_img</name><operator>-&gt;</operator><name>dst_x</name></name><operator>+</operator><name><name>p_img</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>p_img</name><operator>-&gt;</operator><name>dst_y</name></name><operator>+</operator><name><name>p_img</name><operator>-&gt;</operator><name>h</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>r_add</name><parameter_list>( <parameter><decl><type><name>rectangle_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rectangle_t</name> <modifier>*</modifier></type><name>n</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>x0</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>r</name><operator>-&gt;</operator><name>x0</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>x0</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>y0</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>r</name><operator>-&gt;</operator><name>y0</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>y0</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>r</name><operator>-&gt;</operator><name>x1</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>x1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>r</name><operator>-&gt;</operator><name>y1</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>y1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>r_surface</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>rectangle_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>x1</name></name><operator>-</operator><name><name>r</name><operator>-&gt;</operator><name>x0</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>y1</name></name><operator>-</operator><name><name>r</name><operator>-&gt;</operator><name>y0</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>r_overlap</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>rectangle_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rectangle_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dy</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__MAX</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>x0</name></name><operator>-</operator><name>i_dx</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>x0</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>a</name><operator>-&gt;</operator><name>x1</name></name><operator>+</operator><name>i_dx</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>x1</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>__MAX</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>y0</name></name><operator>-</operator><name>i_dy</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>y0</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>a</name><operator>-&gt;</operator><name>y1</name></name><operator>+</operator><name>i_dy</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>y1</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>BuildRegions</name><parameter_list>( <parameter><decl><type><name>rectangle_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_max_region</name></decl></parameter>, <parameter><decl><type><name>ASS_Image</name> <modifier>*</modifier></type><name>p_img_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_height</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASS_Image</name> <modifier>*</modifier></type><name>p_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_REGION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_ck_start</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for<control>( <init><expr><name>p_tmp</name> <operator>=</operator> <name>p_img_list</name></expr><operator>,</operator> <expr><name>i_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p_tmp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_tmp</name> <operator>=</operator> <name><name>p_tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_tmp</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_tmp</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ASS_Image</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_img</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><name>i_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pp_img</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_img</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>p_tmp</name> <operator>=</operator> <name>p_img_list</name></expr><operator>,</operator> <expr><name>i_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p_tmp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_tmp</name> <operator>=</operator> <name><name>p_tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_tmp</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_tmp</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp_img</name><index>[<expr><name>i_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p_tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_w_inc</name> <init>= <expr><call><name>__MAX</name><argument_list>( <argument><expr><operator>(</operator> <name>i_width</name> <operator>+</operator> <literal type="number">49</literal> <operator>)</operator> <operator>/</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_h_inc</name> <init>= <expr><call><name>__MAX</name><argument_list>( <argument><expr><operator>(</operator> <name>i_height</name> <operator>+</operator> <literal type="number">99</literal> <operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_maxh</name> <init>= <expr><name>i_w_inc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_maxw</name> <init>= <expr><name>i_h_inc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_region</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rectangle_t</name></type> <name><name>region</name><index>[<expr><name>i_max_region</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_region</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i_used</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_used</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>pp_img</name><index>[<expr><name>n</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_region</name> <operator>&lt;</operator> <name>i_max_region</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><index>[<expr><name>i_region</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>r_img</name><argument_list>( <argument><expr><name><name>pp_img</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp_img</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_used</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ok</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>b_ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>ASS_Image</name> <modifier>*</modifier></type><name>p_img</name> <init>= <expr><name><name>pp_img</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_img</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>rectangle_t</name></type> <name>r</name> <init>= <expr><call><name>r_img</name><argument_list>( <argument><expr><name>p_img</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_best</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_best_s</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>i_region</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>r_overlap</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>region</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>i_maxw</name></expr></argument>, <argument><expr><name>i_maxh</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>r_surface</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>s</name> <operator>&lt;</operator> <name>i_best_s</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_best_s</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_best</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>i_best</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>r_add</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>region</name><index>[<expr><name>i_best</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp_img</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_used</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b_ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block> while<condition>( <expr><name>b_ok</name></expr> )</condition>;</do>

<if_stmt><if>if<condition>( <expr><name>i_region</name> <operator>&gt;</operator> <name>i_max_region</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_best_i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_best_j</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_best_ds</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>


<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_region</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_region</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>rectangle_t</name></type> <name>rect</name> <init>= <expr><name><name>region</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r_add</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>region</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ds</name> <init>= <expr><call><name>r_surface</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument> )</argument_list></call> <operator>-</operator> <call><name>r_surface</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>region</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>-</operator> <call><name>r_surface</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>region</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ds</name> <operator>&lt;</operator> <name>i_best_ds</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_best_i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_best_j</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_best_ds</name> <operator>=</operator> <name>ds</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_REGION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_spu</name></expr></argument>, <argument><expr><literal type="string">"Merging %d and %d"</literal></expr></argument>, <argument><expr><name>i_best_i</name></expr></argument>, <argument><expr><name>i_best_j</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>( <expr><name>i_best_j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_best_i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>r_add</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>region</name><index>[<expr><name>i_best_i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>region</name><index>[<expr><name>i_best_j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_best_j</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>i_region</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>region</name><index>[<expr><name>i_best_j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>region</name><index>[<expr><name>i_best_j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>region</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator> <name>i_region</name> <operator>-</operator> <operator>(</operator><name>i_best_j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_region</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for<control>( <init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>i_region</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_region</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>region</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_REGION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_ck_time</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name>i_ck_start</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_spu</name></expr></argument>, <argument><expr><literal type="string">"ASS: %d objects merged into %d region in %d micros"</literal></expr></argument>, <argument><expr><name>i_count</name></expr></argument>, <argument><expr><name>i_region</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>i_ck_time</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_img</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_region</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RegionDraw</name><parameter_list>( <parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>, <parameter><decl><type><name>ASS_Image</name> <modifier>*</modifier></type><name>p_img</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_x</name> <init>= <expr><name><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_y</name> <init>= <expr><name><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_width</name> <init>= <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_height</name> <init>= <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>i_lines</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init>;</init> <condition><expr><name>p_img</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_img</name> <operator>=</operator> <name><name>p_img</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_img</name><operator>-&gt;</operator><name>dst_x</name></name> <operator>&lt;</operator> <name>i_x</name> <operator>||</operator> <name><name>p_img</name><operator>-&gt;</operator><name>dst_x</name></name> <operator>+</operator> <name><name>p_img</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;</operator> <name>i_x</name> <operator>+</operator> <name>i_width</name> <operator>||</operator>
<name><name>p_img</name><operator>-&gt;</operator><name>dst_y</name></name> <operator>&lt;</operator> <name>i_y</name> <operator>||</operator> <name><name>p_img</name><operator>-&gt;</operator><name>dst_y</name></name> <operator>+</operator> <name><name>p_img</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;</operator> <name>i_y</name> <operator>+</operator> <name>i_height</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>p_img</name><operator>-&gt;</operator><name>color</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>g</name> <init>= <expr><operator>(</operator><name><name>p_img</name><operator>-&gt;</operator><name>color</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>b</name> <init>= <expr><operator>(</operator><name><name>p_img</name><operator>-&gt;</operator><name>color</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>a</name> <init>= <expr><operator>(</operator><name><name>p_img</name><operator>-&gt;</operator><name>color</name></name> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_img</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_img</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>alpha</name> <init>= <expr><name><name>p_img</name><operator>-&gt;</operator><name>bitmap</name><index>[<expr><name>y</name><operator>*</operator><name><name>p_img</name><operator>-&gt;</operator><name>stride</name></name><operator>+</operator><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>an</name> <init>= <expr><operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name>a</name><operator>)</operator> <operator>*</operator> <name>alpha</name> <operator>/</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_rgba</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><name><name>p_img</name><operator>-&gt;</operator><name>dst_y</name></name><operator>-</operator><name>i_y</name><operator>)</operator> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>x</name><operator>+</operator><name><name>p_img</name><operator>-&gt;</operator><name>dst_x</name></name><operator>-</operator><name>i_x</name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>ao</name> <init>= <expr><name><name>p_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>ao</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>an</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal> <operator>-</operator> <operator>(</operator> <literal type="number">255</literal> <operator>-</operator> <name><name>p_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>)</operator> <operator>*</operator> <operator>(</operator> <literal type="number">255</literal> <operator>-</operator> <name>an</name> <operator>)</operator> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>p_rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>ao</name> <operator>*</operator> <operator>(</operator><literal type="number">255</literal><operator>-</operator><name>an</name><operator>)</operator> <operator>/</operator> <literal type="number">255</literal> <operator>+</operator> <name>r</name> <operator>*</operator> <name>an</name> <operator>)</operator> <operator>/</operator> <name><name>p_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>p_rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>ao</name> <operator>*</operator> <operator>(</operator><literal type="number">255</literal><operator>-</operator><name>an</name><operator>)</operator> <operator>/</operator> <literal type="number">255</literal> <operator>+</operator> <name>g</name> <operator>*</operator> <name>an</name> <operator>)</operator> <operator>/</operator> <name><name>p_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>p_rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>ao</name> <operator>*</operator> <operator>(</operator><literal type="number">255</literal><operator>-</operator><name>an</name><operator>)</operator> <operator>/</operator> <literal type="number">255</literal> <operator>+</operator> <name>b</name> <operator>*</operator> <name>an</name> <operator>)</operator> <operator>/</operator> <name><name>p_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_REGION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t*)&amp;p-&gt;p_pixels[(y)*p-&gt;i_pitch + 4*(x)])</cpp:value></cpp:define>
<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>i_lines</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><call><name>P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>*</operator><call><name>P</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name><operator>/</operator><literal type="number">4</literal><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0xff000000</literal></expr>;</expr_stmt></block_content></block></for>
<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><call><name>P</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>*</operator><call><name>P</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><literal type="number">4</literal></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0xff000000</literal></expr>;</expr_stmt></block_content></block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>P</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

</unit>
