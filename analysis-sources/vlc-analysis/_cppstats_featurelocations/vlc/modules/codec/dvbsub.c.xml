<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\dvbsub.c">



































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSX_TEXT</name></cpp:macro> <cpp:value>N_("Decoding X coordinate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSX_LONGTEXT</name></cpp:macro> <cpp:value>N_("X coordinate of the rendered subtitle")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSY_TEXT</name></cpp:macro> <cpp:value>N_("Decoding Y coordinate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Y coordinate of the rendered subtitle")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_TEXT</name></cpp:macro> <cpp:value>N_("Subpicture position")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "You can enforce the subpicture position on the video " "(0=center, 1=left, 2=right, 4=top, 8=bottom, you can " "also use combinations of these values, e.g. 6=top-right).")</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_POSX_TEXT</name></cpp:macro> <cpp:value>N_("Encoding X coordinate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_POSX_LONGTEXT</name></cpp:macro> <cpp:value>N_("X coordinate of the encoded subtitle" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_POSY_TEXT</name></cpp:macro> <cpp:value>N_("Encoding Y coordinate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_POSY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Y coordinate of the encoded subtitle" )</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_pos_values</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_pos_descriptions</name><index>[]</index></name> <init>=
<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Center"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Left"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Right"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bottom"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top-Left"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top-Right"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bottom-Left"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Bottom-Right"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encode</name> <parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_CFG_PREFIX</name></cpp:macro> <cpp:value>"dvbsub-"</cpp:value></cpp:define>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"DVB subtitles decoder"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"DVB subtitles"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"spu decoder"</literal></argument>, <argument><literal type="number">80</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_SCODEC</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>DVBSUB_CFG_PREFIX <literal type="string">"position"</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>POS_TEXT</argument>, <argument>POS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>pi_pos_values</argument>, <argument>ppsz_pos_descriptions</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>DVBSUB_CFG_PREFIX <literal type="string">"x"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>POSX_TEXT</argument>, <argument>POSX_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>DVBSUB_CFG_PREFIX <literal type="string">"y"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>POSY_TEXT</argument>, <argument>POSY_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-dvbsub-"</cpp:value></cpp:define>
<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"DVB subtitles encoder"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenEncoder</argument>, <argument>CloseEncoder</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"x"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>ENC_POSX_TEXT</argument>, <argument>ENC_POSX_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"y"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>ENC_POSY_TEXT</argument>, <argument>ENC_POSY_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_enc_options</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"y"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>








<typedef>typedef <type><struct>struct <name>dvbsub_objectdef_s</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_fg_pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_bg_pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt> 

}</block></struct></type> <name>dvbsub_objectdef_t</name>;</typedef>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>Y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>Cr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>Cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>T</name></decl>;</decl_stmt>

}</block></struct></type> <name>dvbsub_color_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>dvbsub_display_s</name>
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_windowed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_max_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_max_y</name></decl>;</decl_stmt>

}</block></struct></type> <name>dvbsub_display_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>dvbsub_clut_s</name>
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbsub_color_t</name></type> <name><name>c_2b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbsub_color_t</name></type> <name><name>c_4b</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbsub_color_t</name></type> <name><name>c_8b</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dvbsub_clut_s</name></name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

}</block></struct></type> <name>dvbsub_clut_t</name>;</typedef>



<typedef>typedef <type><struct>struct <name>dvbsub_region_s</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_level_comp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_clut</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pixbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_object_defs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbsub_objectdef_t</name> <modifier>*</modifier></type><name>p_object_defs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dvbsub_region_s</name></name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

}</block></struct></type> <name>dvbsub_region_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>dvbsub_regiondef_s</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_y</name></decl>;</decl_stmt>

}</block></struct></type> <name>dvbsub_regiondef_t</name>;</typedef>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_timeout</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_region_defs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbsub_regiondef_t</name> <modifier>*</modifier></type><name>p_region_defs</name></decl>;</decl_stmt>

}</block></struct></type> <name>dvbsub_page_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>bs_t</name></type> <name>bs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ancillary_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_absolute</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_spu_position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_spu_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_spu_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_page</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbsub_page_t</name> <modifier>*</modifier></type><name>p_page</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbsub_region_t</name> <modifier>*</modifier></type><name>p_regions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbsub_clut_t</name> <modifier>*</modifier></type><name>p_cluts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dvbsub_display_t</name></type> <name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbsub_clut_t</name></type> <name>default_clut</name></decl>;</decl_stmt>
}</block></struct></type> <name>decoder_sys_t</name>;</typedef>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_ST_PAGE_COMPOSITION</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_ST_REGION_COMPOSITION</name></cpp:macro> <cpp:value>0x11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_ST_CLUT_DEFINITION</name></cpp:macro> <cpp:value>0x12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_ST_OBJECT_DATA</name></cpp:macro> <cpp:value>0x13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_ST_DISPLAY_DEFINITION</name></cpp:macro> <cpp:value>0x14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_ST_ENDOFDISPLAY</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_ST_STUFFING</name></cpp:macro> <cpp:value>0xff</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_OT_BASIC_BITMAP</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_OT_BASIC_CHAR</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_OT_COMPOSITE_STRING</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_DT_2BP_CODE_STRING</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_DT_4BP_CODE_STRING</name></cpp:macro> <cpp:value>0x11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_DT_8BP_CODE_STRING</name></cpp:macro> <cpp:value>0x12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_DT_24_TABLE_DATA</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_DT_28_TABLE_DATA</name></cpp:macro> <cpp:value>0x21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_DT_48_TABLE_DATA</name></cpp:macro> <cpp:value>0x22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_DT_END_LINE</name></cpp:macro> <cpp:value>0xf0</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_PCS_STATE_ACQUISITION</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVBSUB_PCS_STATE_CHANGE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>decode_segment</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>decode_page_composition</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>decode_region_composition</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>decode_object</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>decode_display_definition</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>decode_clut</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_all</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>default_clut_init</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>default_dds_init</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>render</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>







<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_posx</name></decl>, <decl><type ref="prev"/><name>i_posy</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_DVBS</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>Decode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>dvb</name><operator>.</operator><name>i_id</name></name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ancillary_id</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>dvb</name><operator>.</operator><name>i_id</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cluts</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>default_dds_init</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_position</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>,
<argument><expr><name>DVBSUB_CFG_PREFIX</name> <literal type="string">"position"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_posx</name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>DVBSUB_CFG_PREFIX</name> <literal type="string">"x"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_posy</name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>DVBSUB_CFG_PREFIX</name> <literal type="string">"y"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_x</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_posx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_posy</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_x</name></name> <operator>=</operator> <name>i_posx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_y</name></name> <operator>=</operator> <name>i_posy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>default_clut_init</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>DVBSUB_CFG_PREFIX</name> <literal type="string">"x"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>DVBSUB_CFG_PREFIX</name> <literal type="string">"y"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>DVBSUB_CFG_PREFIX</name> <literal type="string">"position"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_all</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_DISCONTINUITY</name> <operator>|</operator> <name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Flush</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>default_dds_init</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"non dated subtitle"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0x20</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"invalid data identifier"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"invalid subtitle stream id"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"subtitle packet received: %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_page</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_sync_byte</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>i_sync_byte</name> <operator>==</operator> <literal type="number">0x0f</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>decode_segment</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_sync_byte</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_sync_byte</name> <operator>&amp;</operator> <literal type="number">0x3f</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0x3f</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"end marker not found (corrupted subtitle ?)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_page</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><call><name>render</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_spu</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decoder_QueueSub</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>default_clut_init</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGB_TO_Y</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int16_t) 77 * r + 150 * g + 29 * b) / 256;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGB_TO_U</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int16_t) -44 * r - 87 * g + 131 * b) / 256;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGB_TO_V</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int16_t) 131 * r - 110 * g - 21 * b) / 256;</cpp:value></cpp:define>


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>R</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>G</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>B</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>T</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>T</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>R</name> <operator>=</operator> <name>G</name> <operator>=</operator> <name>B</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>R</name> <operator>=</operator> <name>G</name> <operator>=</operator> <name>B</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>R</name> <operator>=</operator> <name>G</name> <operator>=</operator> <name>B</name> <operator>=</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>default_clut</name><operator>.</operator><name>c_2b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Y</name> <operator>=</operator> <call><name>RGB_TO_Y</name><argument_list>(<argument><expr><name>R</name></expr></argument>,<argument><expr><name>G</name></expr></argument>,<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>default_clut</name><operator>.</operator><name>c_2b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Cb</name> <operator>=</operator> <call><name>RGB_TO_V</name><argument_list>(<argument><expr><name>R</name></expr></argument>,<argument><expr><name>G</name></expr></argument>,<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>default_clut</name><operator>.</operator><name>c_2b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Cr</name> <operator>=</operator> <call><name>RGB_TO_U</name><argument_list>(<argument><expr><name>R</name></expr></argument>,<argument><expr><name>G</name></expr></argument>,<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>default_clut</name><operator>.</operator><name>c_2b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>T</name> <operator>=</operator> <name>T</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>R</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>G</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>B</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>T</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x8</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>T</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>R</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xFF</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>G</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xFF</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x4</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xFF</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>R</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x7F</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>G</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x7F</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x4</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x7F</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>default_clut</name><operator>.</operator><name>c_4b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Y</name> <operator>=</operator> <call><name>RGB_TO_Y</name><argument_list>(<argument><expr><name>R</name></expr></argument>,<argument><expr><name>G</name></expr></argument>,<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>default_clut</name><operator>.</operator><name>c_4b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Cr</name> <operator>=</operator> <call><name>RGB_TO_V</name><argument_list>(<argument><expr><name>R</name></expr></argument>,<argument><expr><name>G</name></expr></argument>,<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>default_clut</name><operator>.</operator><name>c_4b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Cb</name> <operator>=</operator> <call><name>RGB_TO_U</name><argument_list>(<argument><expr><name>R</name></expr></argument>,<argument><expr><name>G</name></expr></argument>,<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>default_clut</name><operator>.</operator><name>c_4b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>T</name> <operator>=</operator> <name>T</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>default_clut</name><operator>.</operator><name>c_8b</name></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dvbsub_color_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_segment</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_page_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_size</name></decl>;</decl_stmt>





<expr_stmt><expr><name>i_type</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>i_page_id</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>i_size</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_page_id</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name>i_page_id</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ancillary_id</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"subtitle skipped (page id: %i, %i)"</literal></expr></argument>,
<argument><expr><name>i_page_id</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ancillary_id</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name>i_type</name> <operator>==</operator> <name>DVBSUB_ST_PAGE_COMPOSITION</name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name>i_page_id</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ancillary_id</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"skipped invalid ancillary subtitle packet"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name>i_page_id</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"segment (id: %i)"</literal></expr></argument>, <argument><expr><name>i_page_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"ancillary segment (id: %i)"</literal></expr></argument>, <argument><expr><name>i_page_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>DVBSUB_ST_PAGE_COMPOSITION</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"decode_page_composition"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>decode_page_composition</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DVBSUB_ST_REGION_COMPOSITION</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"decode_region_composition"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>decode_region_composition</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DVBSUB_ST_CLUT_DEFINITION</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"decode_clut"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>decode_clut</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DVBSUB_ST_OBJECT_DATA</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"decode_object"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>decode_object</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DVBSUB_ST_DISPLAY_DEFINITION</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"decode_display_definition"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>decode_display_definition</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DVBSUB_ST_ENDOFDISPLAY</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"end of display"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DVBSUB_ST_STUFFING</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"skip stuffing"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"unsupported segment type: (%04x)"</literal></expr></argument>, <argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_clut</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_segment_length</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_processed_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbsub_clut_t</name> <modifier>*</modifier></type><name>p_clut</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>, <decl><type ref="prev"/><name>i_version</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_id</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_version</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>p_clut</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_cluts</name></name></expr>;</init> <condition><expr><name>p_clut</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_clut</name> <operator>=</operator> <name><name>p_clut</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_clut</name><operator>-&gt;</operator><name>i_id</name></name> <operator>==</operator> <name>i_id</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if<condition>( <expr><name>p_clut</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_clut</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <name>i_version</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>i_segment_length</name> <operator>-</operator> <literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_clut</name></expr> )</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"new clut: %i"</literal></expr></argument>, <argument><expr><name>i_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>p_clut</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>dvbsub_clut_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_clut</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_clut</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_cluts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cluts</name></name> <operator>=</operator> <name>p_clut</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name><name>p_clut</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_clut</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>default_clut</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_clut</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_clut</name><operator>-&gt;</operator><name>i_version</name></name> <operator>=</operator> <name>i_version</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_clut</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <name>i_id</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>i_processed_length</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while<condition>( <expr><name>i_processed_length</name> <operator>&lt;</operator> <name>i_segment_length</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>cb</name></decl>, <decl><type ref="prev"/><name>cr</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast8_t</name></type> <name>cid</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast8_t</name></type> <name>type</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_processed_length</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_processed_length</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if<condition>( <expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>cr</name> <operator>=</operator> <name>cb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>type</name> <operator>&amp;</operator> <literal type="number">0x04</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>cid</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_clut</name><operator>-&gt;</operator><name>c_2b</name><index>[<expr><name>cid</name></expr>]</index></name><operator>.</operator><name>Y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_clut</name><operator>-&gt;</operator><name>c_2b</name><index>[<expr><name>cid</name></expr>]</index></name><operator>.</operator><name>Cr</name> <operator>=</operator> <name>cr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_clut</name><operator>-&gt;</operator><name>c_2b</name><index>[<expr><name>cid</name></expr>]</index></name><operator>.</operator><name>Cb</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_clut</name><operator>-&gt;</operator><name>c_2b</name><index>[<expr><name>cid</name></expr>]</index></name><operator>.</operator><name>T</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>type</name> <operator>&amp;</operator> <literal type="number">0x02</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>cid</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_clut</name><operator>-&gt;</operator><name>c_4b</name><index>[<expr><name>cid</name></expr>]</index></name><operator>.</operator><name>Y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_clut</name><operator>-&gt;</operator><name>c_4b</name><index>[<expr><name>cid</name></expr>]</index></name><operator>.</operator><name>Cr</name> <operator>=</operator> <name>cr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_clut</name><operator>-&gt;</operator><name>c_4b</name><index>[<expr><name>cid</name></expr>]</index></name><operator>.</operator><name>Cb</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_clut</name><operator>-&gt;</operator><name>c_4b</name><index>[<expr><name>cid</name></expr>]</index></name><operator>.</operator><name>T</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>type</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_clut</name><operator>-&gt;</operator><name>c_8b</name><index>[<expr><name>cid</name></expr>]</index></name><operator>.</operator><name>Y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_clut</name><operator>-&gt;</operator><name>c_8b</name><index>[<expr><name>cid</name></expr>]</index></name><operator>.</operator><name>Cr</name> <operator>=</operator> <name>cr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_clut</name><operator>-&gt;</operator><name>c_8b</name><index>[<expr><name>cid</name></expr>]</index></name><operator>.</operator><name>Cb</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_clut</name><operator>-&gt;</operator><name>c_8b</name><index>[<expr><name>cid</name></expr>]</index></name><operator>.</operator><name>T</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_page_composition</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_segment_length</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_version</name></decl>, <decl><type ref="prev"/><name>i_state</name></decl>, <decl><type ref="prev"/><name>i_timeout</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><name>i_timeout</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_version</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_state</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name>i_state</name> <operator>==</operator> <name>DVBSUB_PCS_STATE_CHANGE</name></expr> )</condition>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"page composition mode change"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free_all</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name></name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_state</name> <operator>!=</operator> <name>DVBSUB_PCS_STATE_ACQUISITION</name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name>i_state</name> <operator>!=</operator> <name>DVBSUB_PCS_STATE_CHANGE</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"didn't receive an acquisition page yet"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

bs_skip( s, 8 * (i_segment_length - 2) );
return;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name>i_state</name> <operator>==</operator> <name>DVBSUB_PCS_STATE_ACQUISITION</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"acquisition page composition"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name></name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <name>i_version</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>i_segment_length</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>i_region_defs</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>p_region_defs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>p_region_defs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>i_region_defs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name></name></expr> )</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"new page"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dvbsub_page_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>i_version</name></name> <operator>=</operator> <name>i_version</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>i_timeout</name></name> <operator>=</operator> <name>i_timeout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_page</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>i_region_defs</name></name> <operator>=</operator> <operator>(</operator><name>i_segment_length</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>i_region_defs</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>p_region_defs</name></name> <operator>=</operator>
<call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>i_region_defs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dvbsub_regiondef_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>p_region_defs</name></name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>i_region_defs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>p_region_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_id</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>p_region_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_x</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>p_region_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_y</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"page_composition, region %i (%i,%i)"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>p_region_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_x</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>p_region_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_region_composition</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_segment_length</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbsub_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>pp_region</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_processed_length</name></decl>, <decl><type ref="prev"/><name>i_id</name></decl>, <decl><type ref="prev"/><name>i_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_width</name></decl>, <decl><type ref="prev"/><name>i_height</name></decl>, <decl><type ref="prev"/><name>i_level_comp</name></decl>, <decl><type ref="prev"/><name>i_depth</name></decl>, <decl><type ref="prev"/><name>i_clut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_8_bg</name></decl>, <decl><type ref="prev"/><name>i_4_bg</name></decl>, <decl><type ref="prev"/><name>i_2_bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_fill</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_id</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_version</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>p_region</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name></name></expr>;</init> <condition><expr><name>p_region</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>p_region</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>pp_region</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>i_id</name></name> <operator>==</operator> <name>i_id</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if<condition>( <expr><name>p_region</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <name>i_version</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>i_segment_length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_region</name></expr> )</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"new region: %i"</literal></expr></argument>, <argument><expr><name>i_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>p_region</name> <operator>=</operator> <operator>*</operator><name>pp_region</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dvbsub_region_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_region</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_pixbuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <name>i_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_version</name></name> <operator>=</operator> <name>i_version</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_fill</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>i_width</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_height</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">" width=%d height=%d"</literal></expr></argument>, <argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>i_height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>i_level_comp</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_depth</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>i_clut</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_8_bg</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_4_bg</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_2_bg</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 


<while>while<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>i_object_defs</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name><index>[<expr><operator>--</operator><name><name>p_region</name><operator>-&gt;</operator><name>i_object_defs</name></name></expr>]</index></name><operator>.</operator><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_width</name></name> <operator>!=</operator> <name>i_width</name> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_height</name></name> <operator>!=</operator> <name>i_height</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>p_pixbuf</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"region size changed (%dx%d-&gt;%dx%d)"</literal></expr></argument>,
<argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>, <argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>i_height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_pixbuf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_pixbuf</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><name>i_height</name> <operator>*</operator> <name>i_width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b_fill</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>i_depth</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_depth</name></name> <operator>!=</operator> <name>i_depth</name> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_level_comp</name></name> <operator>!=</operator> <name>i_level_comp</name> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_clut</name></name> <operator>!=</operator> <name>i_clut</name><operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"region parameters changed (not allowed)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>b_fill</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_background</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name>i_depth</name> <operator>==</operator> <literal type="number">1</literal> <operator>)</operator></expr> ?</condition><then> <expr><name>i_2_bg</name></expr> </then><else>:
<expr><operator>(</operator> <ternary><condition><expr><operator>(</operator> <name>i_depth</name> <operator>==</operator> <literal type="number">2</literal> <operator>)</operator></expr> ?</condition><then> <expr><name>i_4_bg</name></expr> </then><else>: <expr><name>i_8_bg</name></expr></else></ternary> <operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_pixbuf</name></name></expr></argument>, <argument><expr><name>i_background</name></expr></argument>, <argument><expr><name>i_width</name> <operator>*</operator> <name>i_height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name>i_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name>i_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_level_comp</name></name> <operator>=</operator> <name>i_level_comp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_depth</name></name> <operator>=</operator> <name>i_depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_clut</name></name> <operator>=</operator> <name>i_clut</name></expr>;</expr_stmt>


<expr_stmt><expr><name>i_processed_length</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<while>while<condition>( <expr><name>i_processed_length</name> <operator>&lt;</operator> <name>i_segment_length</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>dvbsub_objectdef_t</name> <modifier>*</modifier></type><name>p_obj</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_object_defs</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dvbsub_objectdef_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_object_defs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p_obj</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name><index>[<expr><name><name>p_region</name><operator>-&gt;</operator><name>i_object_defs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_obj</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_obj</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_obj</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_obj</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_obj</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_processed_length</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_obj</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>DVBSUB_OT_BASIC_CHAR</name> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name><name>p_obj</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>DVBSUB_OT_COMPOSITE_STRING</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_obj</name><operator>-&gt;</operator><name>i_fg_pc</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_obj</name><operator>-&gt;</operator><name>i_bg_pc</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_processed_length</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_display_definition</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_segment_length</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_processed_length</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_version</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_version</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_version</name></name> <operator>==</operator> <name>i_version</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>*</operator><name>i_segment_length</name> <operator>-</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"new display definition: %i"</literal></expr></argument>, <argument><expr><name>i_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_version</name></name> <operator>=</operator> <name>i_version</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>b_windowed</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>b_windowed</name></name></expr> )</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"display definition with offsets (windowed)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_x</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_max_x</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_y</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_max_y</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_processed_length</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_max_x</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_width</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_max_y</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_height</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_processed_length</name> <operator>!=</operator> <name>i_segment_length</name><operator>*</operator><literal type="number">8</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"processed length %d bytes != segment length %d bytes"</literal></expr></argument>,
<argument><expr><name>i_processed_length</name> <operator>/</operator> <literal type="number">8</literal></expr></argument> , <argument><expr><name>i_segment_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"version: %d, width: %d, height: %d"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_version</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>b_windowed</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"xmin: %d, xmax: %d, ymin: %d, ymax: %d"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_x</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_max_x</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_y</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_max_y</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dvbsub_render_pdata</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dvbsub_region_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dvbsub_pdata2bpp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dvbsub_pdata4bpp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dvbsub_pdata8bpp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_object</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_segment_length</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbsub_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_coding_method</name></decl>, <decl><type ref="prev"/><name>i_id</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>




<expr_stmt><expr><name>i_id</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>i_coding_method</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_coding_method</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"unknown DVB subtitling coding %d is not handled!"</literal></expr></argument>, <argument><expr><name>i_coding_method</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>i_segment_length</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<for>for<control>( <init><expr><name>p_region</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name></name></expr>;</init> <condition><expr><name>p_region</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>p_region</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_object_defs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_id</name> <operator>==</operator> <name>i_id</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>!=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_object_defs</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_region</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>i_segment_length</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"new object: %i"</literal></expr></argument>, <argument><expr><name>i_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name>i_coding_method</name> <operator>==</operator> <literal type="number">0x00</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_topfield</name></decl>, <decl><type ref="prev"/><name>i_bottomfield</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_topfield</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_bottomfield</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_topfield</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_bottomfield</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_topfield</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_start</name></name> <operator>+</operator> <call><name>bs_pos</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_bottomfield</name> <operator>=</operator> <name>p_topfield</name> <operator>+</operator> <name>i_topfield</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>i_segment_length</name> <operator>-</operator> <literal type="number">7</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_segment_length</name> <operator>&lt;</operator> <operator>(</operator> <name>i_topfield</name> <operator>+</operator> <name>i_bottomfield</name> <operator>+</operator> <literal type="number">7</literal> <operator>)</operator> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <operator>(</operator> <name>p_topfield</name> <operator>+</operator> <name>i_topfield</name> <operator>+</operator> <name>i_bottomfield</name> <operator>)</operator> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>p_end</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"corrupted object data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>p_region</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name></name></expr>;</init> <condition><expr><name>p_region</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>p_region</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_object_defs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_id</name> <operator>!=</operator> <name>i_id</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dvbsub_render_pdata</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_region</name></expr></argument>,
<argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_x</name></expr></argument>,
<argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_y</name></expr></argument>,
<argument><expr><name>p_topfield</name></expr></argument>, <argument><expr><name>i_topfield</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_bottomfield</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dvbsub_render_pdata</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_region</name></expr></argument>,
<argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_x</name></expr></argument>,
<argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>p_bottomfield</name></expr></argument>, <argument><expr><name>i_bottomfield</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>dvbsub_render_pdata</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_region</name></expr></argument>,
<argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_x</name></expr></argument>,
<argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>p_topfield</name></expr></argument>, <argument><expr><name>i_topfield</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_number_of_codes</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>p_start</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_start</name></name> <operator>+</operator> <call><name>bs_pos</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_segment_length</name> <operator>&lt;</operator> <operator>(</operator> <name>i_number_of_codes</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>)</operator> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <operator>(</operator> <name>p_start</name> <operator>+</operator> <name>i_number_of_codes</name><operator>*</operator><literal type="number">2</literal> <operator>)</operator> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>p_end</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"corrupted object data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>p_region</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name></name></expr>;</init> <condition><expr><name>p_region</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>p_region</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_object_defs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_id</name> <operator>!=</operator> <name>i_id</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_text</name> <operator>=</operator>
<call><name>xrealloc</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_text</name></expr></argument>,
<argument><expr><name>i_number_of_codes</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_number_of_codes</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>psz_text</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>psz_text</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"end object: %i"</literal></expr></argument>, <argument><expr><name>i_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dvbsub_render_pdata</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>dvbsub_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_y</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_field</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_field</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pixbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bs_t</name></type> <name>bs</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_pixbuf</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"region %i has no pixel buffer!"</literal></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_y</name> <operator>&gt;=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_height</name></name> <operator>||</operator>
<name>i_x</name> <operator>&gt;=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_width</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"invalid offset (%i,%i)"</literal></expr></argument>, <argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_pixbuf</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_pixbuf</name></name> <operator>+</operator> <name>i_y</name> <operator>*</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name>p_field</name></expr></argument>, <argument><expr><name>i_field</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>!</operator><call><name>bs_eof</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_y</name> <operator>&gt;=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_height</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x10</literal></expr>:</case>
<expr_stmt><expr><call><name>dvbsub_pdata2bpp</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name>p_pixbuf</name> <operator>+</operator> <name>i_x</name></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_width</name></name> <operator>-</operator> <name>i_x</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x11</literal></expr>:</case>
<expr_stmt><expr><call><name>dvbsub_pdata4bpp</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name>p_pixbuf</name> <operator>+</operator> <name>i_x</name></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_width</name></name> <operator>-</operator> <name>i_x</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x12</literal></expr>:</case>
<expr_stmt><expr><call><name>dvbsub_pdata8bpp</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name>p_pixbuf</name> <operator>+</operator> <name>i_x</name></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_width</name></name> <operator>-</operator> <name>i_x</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x20</literal></expr>:</case>
<case>case <expr><literal type="number">0x21</literal></expr>:</case>
<case>case <expr><literal type="number">0x22</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="number">0xf0</literal></expr>:</case> 
<expr_stmt><expr><name>p_pixbuf</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name><name>p_region</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_y</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dvbsub_pdata2bpp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_off</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_stop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>!</operator><name>b_stop</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>bs_eof</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_color</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_color</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_color</name> <operator>!=</operator> <literal type="number">0x00</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0x01</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_color</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0x00</literal></expr> )</condition> 
<block>{<block_content>
<switch>switch<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition> 
<block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case>
<expr_stmt><expr><name>b_stop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x01</literal></expr>:</case>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x02</literal></expr>:</case>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">12</literal> <operator>+</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_color</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x03</literal></expr>:</case>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">29</literal> <operator>+</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_color</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_count</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_count</name> <operator>+</operator> <operator>*</operator><name>pi_off</name> <operator>)</operator> <operator>&gt;</operator> <name>i_width</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><index>[<expr><operator>*</operator><name>pi_off</name></expr>]</index></name> <operator>=</operator> <name>i_color</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>(</operator> <name>p</name> <operator>+</operator> <operator>*</operator><name>pi_off</name> <operator>)</operator></expr></argument>, <argument><expr><name>i_color</name></expr></argument>, <argument><expr><name>i_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_off</name><operator>)</operator> <operator>+=</operator> <name>i_count</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>bs_align</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dvbsub_pdata4bpp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_off</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_stop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>!</operator><name>b_stop</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>bs_eof</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_color</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_color</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_color</name> <operator>!=</operator> <literal type="number">0x00</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0x00</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>!=</operator> <literal type="number">0x00</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_count</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>b_stop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_color</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<switch>switch <condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition> 
<block>{<block_content>
<case>case <expr><literal type="number">0x0</literal></expr>:</case>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x1</literal></expr>:</case>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x2</literal></expr>:</case>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">9</literal> <operator>+</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_color</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x3</literal></expr>:</case>
<expr_stmt><expr><name>i_count</name><operator>=</operator> <literal type="number">25</literal> <operator>+</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_color</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_count</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_count</name> <operator>+</operator> <operator>*</operator><name>pi_off</name> <operator>)</operator> <operator>&gt;</operator> <name>i_width</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><index>[<expr><operator>*</operator><name>pi_off</name></expr>]</index></name> <operator>=</operator> <name>i_color</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>(</operator> <name>p</name> <operator>+</operator> <operator>*</operator><name>pi_off</name> <operator>)</operator></expr></argument>, <argument><expr><name>i_color</name></expr></argument>, <argument><expr><name>i_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_off</name><operator>)</operator> <operator>+=</operator> <name>i_count</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>bs_align</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dvbsub_pdata8bpp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_off</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_stop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>!</operator><name>b_stop</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>bs_eof</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_color</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_color</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_color</name> <operator>!=</operator> <literal type="number">0x00</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0x00</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>==</operator> <literal type="number">0x00</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_stop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_color</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_count</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_count</name> <operator>+</operator> <operator>*</operator><name>pi_off</name> <operator>)</operator> <operator>&gt;</operator> <name>i_width</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><index>[<expr><operator>*</operator><name>pi_off</name></expr>]</index></name> <operator>=</operator> <name>i_color</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>(</operator> <name>p</name> <operator>+</operator> <operator>*</operator><name>pi_off</name> <operator>)</operator></expr></argument>, <argument><expr><name>i_color</name></expr></argument>, <argument><expr><name>i_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_off</name><operator>)</operator> <operator>+=</operator> <name>i_count</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>bs_align</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_all</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbsub_region_t</name> <modifier>*</modifier></type><name>p_reg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_reg_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbsub_clut_t</name> <modifier>*</modifier></type><name>p_clut</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_clut_next</name></decl>;</decl_stmt>



<for>for<control>( <init><expr><name>p_clut</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_cluts</name></name></expr>;</init> <condition><expr><name>p_clut</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_clut</name> <operator>=</operator> <name>p_clut_next</name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>p_clut_next</name> <operator>=</operator> <name><name>p_clut</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_clut</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cluts</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>p_reg</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name></name></expr>;</init> <condition><expr><name>p_reg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_reg</name> <operator>=</operator> <name>p_reg_next</name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>p_reg_next</name> <operator>=</operator> <name><name>p_reg</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_reg</name><operator>-&gt;</operator><name>i_object_defs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_reg</name><operator>-&gt;</operator><name>p_object_defs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if<condition>( <expr><name><name>p_reg</name><operator>-&gt;</operator><name>i_object_defs</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_reg</name><operator>-&gt;</operator><name>p_object_defs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_reg</name><operator>-&gt;</operator><name>p_pixbuf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>i_region_defs</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>p_region_defs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>render</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_spu_region</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_base_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_base_y</name></decl>;</decl_stmt>


<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>decoder_NewSubpicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_absolute</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_subtitle</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><name>i_base_x</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_base_y</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>b_windowed</name></name></expr> )</condition>
<block>{<block_content>








<expr_stmt><expr><name>i_base_x</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_base_y</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_y</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pp_spu_region</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name></name></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"rendering %i regions"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>i_region_defs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name></name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>i_region_defs</name></name> <operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>dvbsub_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbsub_regiondef_t</name> <modifier>*</modifier></type><name>p_regiondef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbsub_clut_t</name> <modifier>*</modifier></type><name>p_clut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbsub_color_t</name> <modifier>*</modifier></type><name>p_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_spu_region</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_palette_t</name></type> <name>palette</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pitch</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_regiondef</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_page</name><operator>-&gt;</operator><name>p_region_defs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>p_region</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name></name></expr>;</init> <condition><expr><name>p_region</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>p_region</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_regiondef</name><operator>-&gt;</operator><name>i_id</name></name> <operator>==</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_id</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>p_region</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"rendering region %i (%i,%i) to (%i,%i)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name><name>p_regiondef</name><operator>-&gt;</operator><name>i_x</name></name></expr></argument>, <argument><expr><name><name>p_regiondef</name><operator>-&gt;</operator><name>i_y</name></name></expr></argument>,
<argument><expr><name><name>p_regiondef</name><operator>-&gt;</operator><name>i_x</name></name> <operator>+</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>,
<argument><expr><name><name>p_regiondef</name><operator>-&gt;</operator><name>i_y</name></name> <operator>+</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"rendering region %i (%i,%i) (no region matched to render)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name><name>p_regiondef</name><operator>-&gt;</operator><name>i_x</name></name></expr></argument>, <argument><expr><name><name>p_regiondef</name><operator>-&gt;</operator><name>i_y</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_region</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"region %i not found"</literal></expr></argument>, <argument><expr><name><name>p_regiondef</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<for>for<control>( <init><expr><name>p_clut</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_cluts</name></name></expr>;</init> <condition><expr><name>p_clut</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_clut</name> <operator>=</operator> <name><name>p_clut</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>i_clut</name></name> <operator>==</operator> <name><name>p_clut</name><operator>-&gt;</operator><name>i_id</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_clut</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"clut %i not found"</literal></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_clut</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VLC_CODEC_YUVP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <operator>&amp;</operator><name>palette</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_depth</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>:
<expr><operator>(</operator> <ternary><condition><expr><operator>(</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_depth</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">256</literal></expr></else></ternary> <operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>p_color</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_depth</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>)</operator></expr> ?</condition><then> <expr><name><name>p_clut</name><operator>-&gt;</operator><name>c_2b</name></name></expr> </then><else>:
<expr><operator>(</operator> <ternary><condition><expr><operator>(</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_depth</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>)</operator></expr> ?</condition><then> <expr><name><name>p_clut</name><operator>-&gt;</operator><name>c_4b</name></name></expr> </then><else>: <expr><name><name>p_clut</name><operator>-&gt;</operator><name>c_8b</name></name></expr></else></ternary> <operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_color</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>Y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_color</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>Cb</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p_color</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>Cr</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal> <operator>-</operator> <name><name>p_color</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>T</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p_spu_region</name> <operator>=</operator> <call><name>subpicture_region_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu_region</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate SPU region"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_spu_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name>i_base_x</name> <operator>+</operator> <name><name>p_regiondef</name><operator>-&gt;</operator><name>i_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name>i_base_y</name> <operator>+</operator> <name><name>p_regiondef</name><operator>-&gt;</operator><name>i_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_position</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_spu_region</name> <operator>=</operator> <name>p_spu_region</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pp_spu_region</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_spu_region</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_pixbuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_dst</name> <operator>=</operator> <name><name>p_spu_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>Y_PIXELS</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_pitch</name> <operator>=</operator> <name><name>p_spu_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>Y_PITCH</name></name></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <name>i_pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>



<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_object_defs</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>dvbsub_objectdef_t</name> <modifier>*</modifier></type><name>p_object_def</name> <init>= <expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_object_defs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_object_def</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>p_object_def</name><operator>-&gt;</operator><name>psz_text</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VLC_CODEC_TEXT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_spu_region</name> <operator>=</operator> <call><name>subpicture_region_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu_region</name><operator>-&gt;</operator><name>p_text</name></name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>( <argument><expr><name><name>p_object_def</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name>i_base_x</name> <operator>+</operator> <name><name>p_regiondef</name><operator>-&gt;</operator><name>i_x</name></name> <operator>+</operator> <name><name>p_object_def</name><operator>-&gt;</operator><name>i_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name>i_base_y</name> <operator>+</operator> <name><name>p_regiondef</name><operator>-&gt;</operator><name>i_y</name></name> <operator>+</operator> <name><name>p_object_def</name><operator>-&gt;</operator><name>i_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_spu_position</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_spu_region</name> <operator>=</operator> <name>p_spu_region</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pp_spu_region</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_spu_region</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>p_spu</name></expr>;</return>
</block_content>}</block></function>




<typedef>typedef <type><struct>struct <name>encoder_region_t</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_height</name></decl>;</decl_stmt>

}</block></struct></type> <name>encoder_region_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_page_ver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_region_ver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_clut_ver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_regions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>encoder_region_t</name> <modifier>*</modifier></type><name>p_regions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_offset_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_offset_y</name></decl>;</decl_stmt>
}</block></struct></type> <name>encoder_sys_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>encode_page_composition</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>encode_clut</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>encode_region_composition</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>encode_object</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_DVBS</name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_sys</name> <operator>=</operator> <operator>(</operator><name>encoder_sys_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>encoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_sub</name></name> <operator>=</operator> <name>Encode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_DVBS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>subs</name><operator>.</operator><name>dvb</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_enc_options</name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_page_ver</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_region_ver</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_clut_ver</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_regions</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_x</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"x"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_y</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"y"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>YuvaYuvp</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_subpic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>p_region</name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr>;</init> <condition><expr><name>p_region</name></expr>;</condition> <incr><expr><name>p_region</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_max_entries</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RANDOM_DITHERING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i_seed</name> <init>= <expr><literal type="number">0xdeadbeef</literal></expr></init></decl>;</decl_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_delta</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>i_pixels</name> <init>= <expr><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_lines</name>
<operator>*</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_iterator</name> <init>= <expr><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_lines</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal>
<operator>*</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>+</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <literal type="number">1</literal> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_tolerance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB1</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"YuvaYuvp: i_pixels=%d, i_iterator=%d"</literal></expr></argument>, <argument><expr><name>i_pixels</name></expr></argument>, <argument><expr><name>i_iterator</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_YUVP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name></name> <operator>=</operator> <operator>(</operator><name>video_palette_t</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>video_palette_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<for>for<control>( <init>;</init> <condition><expr><name>i_iterator</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i_iterator</name><operator>--</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name>i_pixels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name>i_iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<while>while<condition>( <expr><name>b</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name> <operator>%</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>a</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for<control>( <init><expr><name>i_tolerance</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_tolerance</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i_tolerance</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_pixels</name></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>y</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>i_tolerance</name> <operator>&amp;&amp;</operator>
<call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>u</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>i_tolerance</name> <operator>&amp;&amp;</operator>
<call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>i_tolerance</name> <operator>&amp;&amp;</operator>
<call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>i_tolerance</name> <operator>/</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>j</name> <operator>==</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>&gt;=</operator> <name>i_max_entries</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>i_iterator</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;</operator> <name>i_pixels</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>i_pixels</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>b_success</name></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB1</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"best palette has %d colors"</literal></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RANDOM_DITHERING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>pi_delta</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><operator>(</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator>
<operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>pi_delta</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<for>for<control>( <init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ydelta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_udelta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_vdelta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_adelta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr> ;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_offset</name> <init>= <expr><name>p</name> <operator>*</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_mindist</name></decl>, <decl><type ref="prev"/><name>i_best</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_offset</name></expr>]</index></name></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RANDOM_DITHERING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>i_seed</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>*</operator> <name>i_tolerance</name> <operator>/</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>i_seed</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>*</operator> <name>i_tolerance</name> <operator>/</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>i_seed</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>*</operator> <name>i_tolerance</name> <operator>/</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>i_seed</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>*</operator> <name>i_tolerance</name> <operator>/</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>i_ydelta</name> <operator>+</operator> <name><name>pi_delta</name><index>[ <expr><name>n</name> <operator>*</operator> <literal type="number">4</literal></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>+=</operator> <name>i_udelta</name> <operator>+</operator> <name><name>pi_delta</name><index>[ <expr><name>n</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <name>i_vdelta</name> <operator>+</operator> <name><name>pi_delta</name><index>[ <expr><name>n</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>i_adelta</name> <operator>+</operator> <name><name>pi_delta</name><index>[ <expr><name>n</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr> ]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<for>for<control>( <init><expr><name>i_mindist</name> <operator>=</operator> <literal type="number">99999999</literal></expr><operator>,</operator> <expr><name>i_best</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_dist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_dist</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dist</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dist</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dist</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dist</name> <operator>&lt;</operator> <name>i_mindist</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_mindist</name> <operator>=</operator> <name>i_dist</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_best</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_offset</name></expr>]</index></name> <operator>=</operator> <name>i_best</name></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RANDOM_DITHERING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>i_seed</name> <operator>=</operator> <operator>(</operator><name>i_seed</name> <operator>*</operator> <literal type="number">0x1283837</literal><operator>)</operator> <operator>^</operator> <literal type="number">0x789479</literal> <operator>^</operator> <operator>(</operator><name>i_seed</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>i_ydelta</name> <operator>=</operator> <name>y</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i_best</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_udelta</name> <operator>=</operator> <name>u</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i_best</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_vdelta</name> <operator>=</operator> <name>v</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i_best</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_adelta</name> <operator>=</operator> <name>a</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i_best</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_delta</name><index>[ <expr><name>n</name> <operator>*</operator> <literal type="number">4</literal></expr> ]</index></name> <operator>=</operator> <name>i_ydelta</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_delta</name><index>[ <expr><name>n</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <name>i_udelta</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_delta</name><index>[ <expr><name>n</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>=</operator> <name>i_vdelta</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pi_delta</name><index>[ <expr><name>n</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr> ]</index></name> <operator>=</operator> <name>i_adelta</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ydelta</name> <operator>=</operator> <name>i_ydelta</name> <operator>*</operator> <literal type="number">5</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_udelta</name> <operator>=</operator> <name>i_udelta</name> <operator>*</operator> <literal type="number">5</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_vdelta</name> <operator>=</operator> <name>i_vdelta</name> <operator>*</operator> <literal type="number">5</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_adelta</name> <operator>=</operator> <name>i_adelta</name> <operator>*</operator> <literal type="number">5</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RANDOM_DITHERING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pi_delta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_max_entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>=</operator> <name>i_max_entries</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB1</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"best palette has %d colors"</literal></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<return>return <expr><name>p_subpic</name></expr>;</return>
</block_content>}</block></function> 




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encode</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_temp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bs_t</name></type> <name>bits</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name>bits</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_subpic</name> <operator>||</operator> <operator>!</operator><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>p_region</name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_YUVA</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_temp</name> <operator>=</operator> <call><name>YuvaYuvp</name><argument_list>( <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_temp</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"no picture in subpicture"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_region</name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_region</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_TEXT</name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_YUVP</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"chroma %4.4s not supported"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name></name></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<case>case <expr><literal type="number">256</literal></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"subpicture palette (%d) not handled"</literal></expr></argument>,
<argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"encoding subpicture"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">64000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>encode_page_composition</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encode_region_composition</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encode_clut</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encode_object</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>DVBSUB_ST_ENDOFDISPLAY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <call><name>bs_pos</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_subpic</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&gt;</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>i_start</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_stop</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>-</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>p_block_stop</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">64000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p_block_stop</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block_stop</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>encode_page_composition</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>DVBSUB_ST_ENDOFDISPLAY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block_stop</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <call><name>bs_pos</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block_stop</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block_stop</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>i_stop</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_block</name></expr></argument>, <argument><expr><name>p_block_stop</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block_stop</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DVBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"subpicture encoded properly"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> , <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"x"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> , <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"y"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> , <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"timeout"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_regions</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_page_composition</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_mode_change</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_regions</name></decl>, <decl><type ref="prev"/><name>i_timeout</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>DVBSUB_ST_PAGE_COMPOSITION</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<for>for<control>( <init><expr><name>i_regions</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p_region</name> <operator>=</operator> <ternary><condition><expr><name>p_subpic</name></expr> ?</condition><then> <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</init>
<condition><expr><name>p_region</name></expr>;</condition> <incr><expr><name>p_region</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_next</name></name></expr><operator>,</operator> <expr><name>i_regions</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_regions</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_regions</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>encoder_region_t</name></type> <name>region</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>region</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>region</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>encoder_region_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_regions</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_regions</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>region</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name><index>[<expr><name>i_regions</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>&lt;</operator>
<operator>(</operator><name>int</name><operator>)</operator><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name><index>[<expr><name>i_regions</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>&gt;</operator>
<operator>(</operator><name>int</name><operator>)</operator><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_mode_change</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"region %i width change: %i -&gt; %i"</literal></expr></argument>,
<argument><expr><name>i_regions</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name><index>[<expr><name>i_regions</name></expr>]</index></name><operator>.</operator><name>i_width</name></expr></argument>,
<argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name><index>[<expr><name>i_regions</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>=</operator>
<name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name><index>[<expr><name>i_regions</name></expr>]</index></name><operator>.</operator><name>i_height</name> <operator>&lt;</operator>
<operator>(</operator><name>int</name><operator>)</operator><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_mode_change</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"region %i height change: %i -&gt; %i"</literal></expr></argument>,
<argument><expr><name>i_regions</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name><index>[<expr><name>i_regions</name></expr>]</index></name><operator>.</operator><name>i_height</name></expr></argument>,
<argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name><index>[<expr><name>i_regions</name></expr>]</index></name><operator>.</operator><name>i_height</name> <operator>=</operator>
<name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>i_regions</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>i_timeout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_subpic</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_subpic</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&gt;</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>i_start</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_timeout</name> <operator>=</operator> <call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>-</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>i_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i_timeout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_page_ver</name></name><operator>++</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>b_mode_change</name></expr> ?</condition><then>
<expr><name>DVBSUB_PCS_STATE_CHANGE</name></expr> </then><else>: <expr><name>DVBSUB_PCS_STATE_ACQUISITION</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<for>for<control>( <init><expr><name>i_regions</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p_region</name> <operator>=</operator> <ternary><condition><expr><name>p_subpic</name></expr> ?</condition><then> <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</init>
<condition><expr><name>p_region</name></expr>;</condition> <incr><expr><name>p_region</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_next</name></name></expr><operator>,</operator> <expr><name>i_regions</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i_regions</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_x</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_y</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_x</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_y</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_clut</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name> <init>= <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_palette_t</name> <modifier>*</modifier></type><name>p_pal</name></decl>, <decl><type ref="prev"/><name>pal</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_region</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_YUVP</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_pal</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>pal</name><operator>.</operator><name>i_entries</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>pal</name><operator>.</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pal</name><operator>.</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pal</name><operator>.</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pal</name><operator>.</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p_pal</name> <operator>=</operator> <operator>&amp;</operator><name>pal</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>DVBSUB_ST_CLUT_DEFINITION</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>p_pal</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_clut_ver</name></name><operator>++</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_pal</name><operator>-&gt;</operator><name>i_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_pal</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_pal</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>==</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_pal</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>==</operator> <literal type="number">256</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_pal</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> ?</condition><then> 
<expr><operator>(</operator><ternary><condition><expr><name><name>p_pal</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>p_pal</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p_pal</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p_pal</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal> <operator>-</operator> <name><name>p_pal</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_region_composition</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_region</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i_region</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p_region</name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr>;</init> <condition><expr><name>p_region</name></expr>;</condition>
<incr><expr><name>p_region</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_next</name></name></expr><operator>,</operator> <expr><name>i_region</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_entries</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_depth</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_bg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_text</name> <init>=
<expr><operator>(</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_TEXT</name> <operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_text</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>video_palette_t</name> <modifier>*</modifier></type><name>p_pal</name> <init>= <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pal</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"subpicture has no palette - ignoring it"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_entries</name> <operator>=</operator> <name><name>p_pal</name><operator>-&gt;</operator><name>i_entries</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_depth</name> <operator>=</operator> <ternary><condition><expr><name>i_entries</name> <operator>==</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">0x1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>i_entries</name> <operator>==</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><literal type="number">0x2</literal></expr> </then><else>: <expr><literal type="number">0x3</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_bg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_bg</name> <operator>&lt;</operator> <name><name>p_pal</name><operator>-&gt;</operator><name>i_entries</name></name></expr>;</condition> <incr><expr><name>i_bg</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_pal</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i_bg</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>DVBSUB_ST_REGION_COMPOSITION</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>b_text</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_region_ver</name></name><operator>++</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_bg</name> <operator>&lt;</operator> <name>i_entries</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name><index>[<expr><name>i_region</name></expr>]</index></name><operator>.</operator><name>i_width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_regions</name><index>[<expr><name>i_region</name></expr>]</index></name><operator>.</operator><name>i_height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>i_depth</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>i_depth</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i_bg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>i_bg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i_bg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>i_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>b_text</name></expr> ?</condition><then> <expr><name>DVBSUB_OT_BASIC_CHAR</name></expr></then><else>:<expr><name>DVBSUB_OT_BASIC_BITMAP</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_text</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>encode_pixel_data</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_top</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_object</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_region</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_length_pos</name></decl>, <decl><type ref="prev"/><name>i_update_pos</name></decl>, <decl><type ref="prev"/><name>i_pixel_data_pos</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i_region</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p_region</name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr>;</init> <condition><expr><name>p_region</name></expr>;</condition>
<incr><expr><name>p_region</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_next</name></name></expr><operator>,</operator> <expr><name>i_region</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>DVBSUB_ST_OBJECT_DATA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>i_length_pos</name> <operator>=</operator> <call><name>bs_pos</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>i_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_region_ver</name></name><operator>++</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<switch>switch<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_YUVP</name></expr>:</case>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_TEXT</name></expr>:</case>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"FOURCC %d not supported by encoder."</literal></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_TEXT</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_text</name></name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_text</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_text</name><operator>-&gt;</operator><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>p_start</name><index>[<expr><name>i_length_pos</name><operator>/</operator><literal type="number">8</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><call><name>bs_pos</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i_length_pos</name><operator>)</operator><operator>/</operator><literal type="number">8</literal> <operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_update_pos</name> <operator>=</operator> <call><name>bs_pos</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name>i_pixel_data_pos</name> <operator>=</operator> <call><name>bs_pos</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encode_pixel_data</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_region</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_pixel_data_pos</name> <operator>=</operator> <operator>(</operator> <call><name>bs_pos</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>-</operator> <name>i_pixel_data_pos</name> <operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>p_start</name><index>[<expr><name>i_update_pos</name><operator>/</operator><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_pixel_data_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>i_pixel_data_pos</name> <operator>=</operator> <call><name>bs_pos</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encode_pixel_data</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_region</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_pixel_data_pos</name> <operator>=</operator> <operator>(</operator> <call><name>bs_pos</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>-</operator> <name>i_pixel_data_pos</name> <operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>p_start</name><index>[<expr><name>i_update_pos</name><operator>/</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_pixel_data_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bs_align_0</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>bs_pos</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>%</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>p_start</name><index>[<expr><name>i_length_pos</name><operator>/</operator><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><call><name>bs_pos</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i_length_pos</name><operator>)</operator><operator>/</operator><literal type="number">8</literal> <operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>encode_pixel_line_2bp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_line</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>encode_pixel_line_4bp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_line</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>encode_pixel_line_8bp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_line</name></decl></parameter> )</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_pixel_data</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_top</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_line</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_YUVP</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<for>for<control>( <init><expr><name>i_line</name> <operator>=</operator> <operator>!</operator><name>b_top</name></expr>;</init> <condition><expr><name>i_line</name> <operator>&lt;</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>;</condition>
<incr><expr><name>i_line</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>encode_pixel_line_2bp</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_region</name></expr></argument>, <argument><expr><name>i_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>encode_pixel_line_4bp</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_region</name></expr></argument>, <argument><expr><name>i_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">256</literal></expr>:</case>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>encode_pixel_line_8bp</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_region</name></expr></argument>, <argument><expr><name>i_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"subpicture palette (%i) not handled"</literal></expr></argument>,
<argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xf0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_pixel_line_2bp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_line</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>i_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pitch</name> <init>= <expr><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[ <expr><name>i_pitch</name> <operator>*</operator> <name>i_line</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_last_pixel</name> <init>= <expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i</name> <operator>!=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>i_last_pixel</name> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_length</name> <operator>!=</operator> <literal type="number">284</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_length</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_length</name> <operator>==</operator> <literal type="number">1</literal> <operator>)</operator> <operator>||</operator> <operator>(</operator> <name>i_length</name> <operator>==</operator> <literal type="number">11</literal> <operator>)</operator> <operator>||</operator> <operator>(</operator> <name>i_length</name> <operator>==</operator> <literal type="number">28</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_last_pixel</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i_last_pixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>i_length</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_last_pixel</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i_last_pixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i_last_pixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_length</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>i_length</name> <operator>-</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i_last_pixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>&lt;=</operator> <literal type="number">27</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>i_length</name> <operator>-</operator> <literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i_last_pixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i_length</name> <operator>-</operator> <literal type="number">29</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i_last_pixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_last_pixel</name> <operator>=</operator> <name><name>p_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_length</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bs_align_0</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_pixel_line_4bp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_line</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>i_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pitch</name> <init>= <expr><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[ <expr><name>i_pitch</name> <operator>*</operator> <name>i_line</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_last_pixel</name> <init>= <expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i</name> <operator>!=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>&amp;&amp;</operator>
<name><name>p_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>i_last_pixel</name> <operator>&amp;&amp;</operator> <name>i_length</name> <operator>!=</operator> <literal type="number">280</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_length</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_length</name> <operator>==</operator> <literal type="number">1</literal> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <operator>(</operator> <name>i_length</name> <operator>==</operator> <literal type="number">3</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <name>i_last_pixel</name> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name>i_length</name> <operator>==</operator> <literal type="number">8</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_last_pixel</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>i_last_pixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>i_length</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_last_pixel</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>i_last_pixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>i_last_pixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><name>i_last_pixel</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_length</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_length</name> <operator>&lt;=</operator> <literal type="number">9</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>i_length</name> <operator>-</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_length</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>&lt;=</operator> <literal type="number">7</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i_length</name> <operator>-</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>i_last_pixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>&lt;=</operator> <literal type="number">24</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>i_length</name> <operator>-</operator> <literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>i_last_pixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i_length</name> <operator>-</operator> <literal type="number">25</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>i_last_pixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_last_pixel</name> <operator>=</operator> <name><name>p_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_length</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bs_align_0</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_pixel_line_8bp</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_line</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>i_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pitch</name> <init>= <expr><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[ <expr><name>i_pitch</name> <operator>*</operator> <name>i_line</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_last_pixel</name> <init>= <expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i</name> <operator>!=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>i_last_pixel</name> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_length</name> <operator>!=</operator> <literal type="number">127</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_length</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_length</name> <operator>==</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <name>i_last_pixel</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i_last_pixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator> <name>i_length</name> <operator>==</operator> <literal type="number">2</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <name>i_last_pixel</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i_last_pixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i_last_pixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_length</name> <operator>&lt;=</operator> <literal type="number">127</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_last_pixel</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>i_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>i_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i_last_pixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_last_pixel</name> <operator>=</operator> <name><name>p_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_length</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bs_align_0</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>default_dds_init</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type> <name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_version</name></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <literal type="number">720</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <literal type="number">576</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>b_windowed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
