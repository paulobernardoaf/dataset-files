<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\ttml\ttml.c">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xml.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttml.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_TEXT</name></cpp:macro> <cpp:value>N_("Subtitle justification")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set the justification of subtitles")</cpp:value></cpp:define>





<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"spu decoder"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"TTML decoder"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"TTML subtitles decoder"</literal>)</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>tt_OpenDecoder</argument>, <argument>tt_CloseDecoder</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_SCODEC</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"ttml-align"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ALIGN_TEXT</argument>, <argument>ALIGN_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"TTML"</literal>)</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"TTML demuxer"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">11</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>tt_OpenDemux</argument>, <argument>tt_CloseDemux</argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"ttml"</literal></argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>


<function><type><name>int</name></type> <name>tt_node_NameCompare</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_tagname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_pattern</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><literal type="string">"tt:"</literal></expr></argument>, <argument><expr><name>psz_tagname</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_tagname</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_tagname</name></expr></argument>, <argument><expr><name>psz_pattern</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tt_node_HasChild</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>tt_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_node</name><operator>-&gt;</operator><name>p_child</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>tt_ScanReset</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>e</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <operator>*</operator><name>b</name> <operator>=</operator> <operator>*</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>d</name> <operator>=</operator> <operator>*</operator><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tt_time_t</name></type> <name>tt_ParseTime</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tt_time_t</name></type> <name>t</name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>h1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>m1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>s1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>d1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%u:%2u:%2u%c%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d1</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">5</literal> <operator>||</operator>
<call><name>tt_ScanReset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d1</name></expr></argument> )</argument_list></call> <operator>||</operator>
<call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%u:%2u:%2u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator>
<call><name>tt_ScanReset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d1</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>base</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><name>h1</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m1</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_den</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_den</name> <operator>&lt;</operator> <name>UINT_MAX</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_den</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>base</name></name> <operator>+=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>i_den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>frames</name></name> <operator>=</operator> <name>d1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><call><name>us_strtod</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_end</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_end</name> <operator>!=</operator> <name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_end</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_end</name> <operator>==</operator> <literal type="char">'m'</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><operator>(</operator><name>psz_end</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'s'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>base</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>base</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><literal type="number">60</literal> <operator>*</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>*</operator><name>psz_end</name> <operator>==</operator> <literal type="char">'s'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>base</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>*</operator><name>psz_end</name> <operator>==</operator> <literal type="char">'h'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>base</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><name>v</name> <operator>*</operator> <literal type="number">3600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>*</operator><name>psz_end</name> <operator>==</operator> <literal type="char">'f'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>frames</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tt_timings_Contains</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>tt_timings_t</name> <modifier>*</modifier></type><name>p_range</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tt_time_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_range</name><operator>-&gt;</operator><name>end</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>tt_time_Compare</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_range</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>time</name></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_range</name><operator>-&gt;</operator><name>begin</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>tt_time_Compare</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_range</name><operator>-&gt;</operator><name>begin</name></name></expr></argument>, <argument><expr><name>time</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tt_textnode_Delete</name><parameter_list>( <parameter><decl><type><name>tt_textnode_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tt_node_FreeDictValue</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_value</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tt_node_Delete</name><parameter_list>( <parameter><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_node_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></argument>, <argument><expr><name>tt_node_FreeDictValue</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tt_node_RecursiveDelete</name><parameter_list>( <parameter><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init>;</init> <condition><expr><name><name>p_node</name><operator>-&gt;</operator><name>p_child</name></name></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>tt_basenode_t</name> <modifier>*</modifier></type><name>p_child</name> <init>= <expr><name><name>p_node</name><operator>-&gt;</operator><name>p_child</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>p_child</name></name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_child</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TT_NODE_TYPE_TEXT</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_textnode_Delete</name><argument_list>( <argument><expr><operator>(</operator><name>tt_textnode_t</name> <operator>*</operator><operator>)</operator> <name>p_child</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_node_RecursiveDelete</name><argument_list>( <argument><expr><operator>(</operator><name>tt_node_t</name> <operator>*</operator><operator>)</operator> <name>p_child</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>tt_node_Delete</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tt_node_ParentAddChild</name><parameter_list>( <parameter><decl><type><name>tt_node_t</name><modifier>*</modifier></type> <name>p_parent</name></decl></parameter>, <parameter><decl><type><name>tt_basenode_t</name> <modifier>*</modifier></type><name>p_child</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tt_basenode_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_node</name> <init>= <expr><operator>&amp;</operator><name><name>p_parent</name><operator>-&gt;</operator><name>p_child</name></name></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><operator>*</operator><name>pp_node</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pp_node</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_node</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>pp_node</name> <operator>=</operator> <name>p_child</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tt_textnode_t</name> <modifier>*</modifier></type><name>tt_textnode_New</name><parameter_list>( <parameter><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tt_textnode_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_node</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_node</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>TT_NODE_TYPE_TEXT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>p_parent</name></name> <operator>=</operator> <name>p_parent</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_parent</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_node_ParentAddChild</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument>, <argument><expr><operator>(</operator><name>tt_basenode_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>tt_node_t</name> <modifier>*</modifier></type> <name>tt_node_New</name><parameter_list>( <parameter><decl><type><name>xml_reader_t</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>tt_node_t</name><modifier>*</modifier></type> <name>p_parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_node_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_node</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_node</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>TT_NODE_TYPE_ELEMENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_node_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_node_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_node_name</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_time_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>timings</name><operator>.</operator><name>begin</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_time_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>timings</name><operator>.</operator><name>end</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tt_time_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>timings</name><operator>.</operator><name>dur</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>p_parent</name></name> <operator>=</operator> <name>p_parent</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_parent</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_node_ParentAddChild</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument>, <argument><expr><operator>(</operator><name>tt_basenode_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_key</name> <init>= <expr><call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_value</name></expr></argument> )</argument_list></call></expr></init></decl>;</init>
<condition><expr><name>psz_key</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>psz_key</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_value</name></expr></argument> )</argument_list></call></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_val</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_val</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></argument>, <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><literal type="string">"begin"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>timings</name><operator>.</operator><name>begin</name></name> <operator>=</operator> <call><name>tt_ParseTime</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator> <call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><literal type="string">"end"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>timings</name><operator>.</operator><name>end</name></name> <operator>=</operator> <call><name>tt_ParseTime</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator> <call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><literal type="string">"dur"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>timings</name><operator>.</operator><name>dur</name></name> <operator>=</operator> <call><name>tt_ParseTime</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator> <call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><literal type="string">"timeContainer"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>timings</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <ternary><condition><expr><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"seq"</literal></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><name>TT_TIMINGS_PARALLEL</name></expr>
</then><else>: <expr><name>TT_TIMINGS_SEQUENTIAL</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>p_node</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int tt_node_Skip( xml_reader_t *p_reader, const char *psz_skipped )
{
size_t i_depth = 1;
const char *psz_cur;


char *psz_skip = strdup( psz_skipped );
if(!psz_skip)
return VLC_EGENERIC;

for( ;; )
{
int i_type = xml_ReaderNextNode( p_reader, &amp;psz_cur );
switch( i_type )
{
case XML_READER_STARTELEM:
if( i_depth == SIZE_MAX )
{
free( psz_skip );
return VLC_EGENERIC;
}
if( !xml_ReaderIsEmptyElement( p_reader ) )
i_depth++;
break;

case XML_READER_ENDELEM:
if( !strcmp( psz_cur, psz_skip ) )
{
free( psz_skip );
if( i_depth != 1 )
return VLC_EGENERIC;
return VLC_SUCCESS;
}
else
{
if( i_depth == 1 )
{
free( psz_skip );
return VLC_EGENERIC;
}
i_depth--;
}
break;

default:
if( i_type &lt;= XML_READER_NONE )
{
free( psz_skip );
return VLC_EGENERIC;
}
break;
}
}
vlc_assert_unreachable();
return VLC_EGENERIC;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type> <name>tt_nodes_Read</name><parameter_list>( <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter>, <parameter><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_root_node</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><name>p_root_node</name></expr></init></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_node_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name> <init>= <expr><call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_node_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_empty</name> <init>= <expr><call><name>xml_ReaderIsEmptyElement</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>&lt;=</operator> <name>XML_READER_NONE</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>
<block>{<block_content>
<default>default:</default>
<break>break;</break>

<case>case <expr><name>XML_READER_STARTELEM</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_newnode</name> <init>= <expr><call><name>tt_node_New</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name>psz_node_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_newnode</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_empty</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_node</name> <operator>=</operator> <name>p_newnode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_depth</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>XML_READER_TEXT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>tt_textnode_t</name> <modifier>*</modifier></type><name>p_textnode</name> <init>= <expr><call><name>tt_textnode_New</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name>psz_node_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_textnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>XML_READER_ENDELEM</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_node_name</name></expr></argument>, <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_node_name</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_depth</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_node</name> <operator>!=</operator> <name>p_root_node</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_depth</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p_node</name> <operator>=</operator> <name><name>p_node</name><operator>-&gt;</operator><name>p_parent</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block> while<condition>( <expr><literal type="number">1</literal></expr> )</condition>;</do>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>tt_bsearch_searchkey_Compare</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>other</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tt_searchkey</name></name> <modifier>*</modifier></type><name>p_key</name> <init>= <expr><operator>(</operator>struct <name>tt_searchkey</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tt_time_t</name></type> <name>time</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>tt_time_t</name> <operator>*</operator><operator>)</operator> <name>other</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_key</name><operator>-&gt;</operator><name>p_last</name></name> <operator>=</operator> <operator>(</operator><name>tt_time_t</name> <operator>*</operator><operator>)</operator> <name>other</name></expr>;</expr_stmt>
<return>return <expr><call><name>tt_time_Compare</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_key</name><operator>-&gt;</operator><name>time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>tt_timings_FindLowerIndex</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>tt_time_t</name> <modifier>*</modifier></type><name>p_times</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_times</name></decl></parameter>, <parameter><decl><type><name>tt_time_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_found</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_times</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tt_searchkey</name></name></type> <name>key</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>p_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>tt_time_t</name> <modifier>*</modifier></type><name>lookup</name> <init>= <expr><call><name>bsearch</name><argument_list>( <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>p_times</name></expr></argument>, <argument><expr><name>i_times</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tt_time_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tt_bsearch_searchkey_Compare</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>lookup</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>p_last</name></name> <operator>=</operator> <name>lookup</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_found</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>lookup</name></expr>;</expr_stmt>


<expr_stmt><expr><name>i_index</name> <operator>=</operator> <operator>(</operator><name><name>key</name><operator>.</operator><name>p_last</name></name> <operator>-</operator> <name>p_times</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>tt_time_Compare</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_times</name><index>[<expr><name>i_index</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_index</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pb_found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>i_index</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tt_bsearch_Insert</name><parameter_list>( <parameter><decl><type><name>tt_time_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_times</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_times</name></decl></parameter>, <parameter><decl><type><name>tt_time_t</name></type> <name>time</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_exists</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_index</name> <init>= <expr><call><name>tt_timings_FindLowerIndex</name><argument_list>( <argument><expr><operator>*</operator><name>pp_times</name></expr></argument>, <argument><expr><operator>*</operator><name>pi_times</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_exists</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>b_exists</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tt_time_t</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <operator>(</operator><operator>*</operator><name>pi_times</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>tt_time_t</name> <modifier>*</modifier></type><name>p_array</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><operator>*</operator><name>pp_times</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>pi_times</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tt_time_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_array</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_times</name> <operator>=</operator> <name>p_array</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_times</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_array</name><index>[<expr><name>i_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_array</name><index>[<expr><name>i_index</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><operator>*</operator><name>pi_times</name> <operator>-</operator> <name>i_index</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tt_time_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_array</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_times</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>tt_timings_MergeParallel</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>tt_timings_t</name> <modifier>*</modifier></type><name>p_ref</name></decl></parameter>, <parameter><decl><type><name>tt_timings_t</name> <modifier>*</modifier></type><name>p_local</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_local</name><operator>-&gt;</operator><name>begin</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_local</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <call><name>tt_time_Add</name><argument_list>( <argument><expr><name><name>p_local</name><operator>-&gt;</operator><name>begin</name></name></expr></argument>, <argument><expr><name><name>p_ref</name><operator>-&gt;</operator><name>begin</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_local</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name><name>p_ref</name><operator>-&gt;</operator><name>begin</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_local</name><operator>-&gt;</operator><name>end</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_local</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <call><name>tt_time_Add</name><argument_list>( <argument><expr><name><name>p_local</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>p_ref</name><operator>-&gt;</operator><name>begin</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_local</name><operator>-&gt;</operator><name>dur</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_local</name><operator>-&gt;</operator><name>begin</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_local</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <call><name>tt_time_Add</name><argument_list>( <argument><expr><name><name>p_local</name><operator>-&gt;</operator><name>begin</name></name></expr></argument>, <argument><expr><name><name>p_local</name><operator>-&gt;</operator><name>dur</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_local</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>p_ref</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if<condition>( <expr><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ref</name><operator>-&gt;</operator><name>end</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>tt_time_Compare</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_local</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_ref</name><operator>-&gt;</operator><name>end</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_local</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>p_ref</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_local</name><operator>-&gt;</operator><name>begin</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_local</name><operator>-&gt;</operator><name>end</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_local</name><operator>-&gt;</operator><name>dur</name></name> <operator>=</operator> <call><name>tt_time_Sub</name><argument_list>( <argument><expr><name><name>p_local</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>p_local</name><operator>-&gt;</operator><name>begin</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tt_timings_MergeSequential</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>tt_timings_t</name> <modifier>*</modifier></type><name>p_restrict</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>tt_timings_t</name> <modifier>*</modifier></type><name>p_prevref</name></decl></parameter>, <parameter><decl><type><name>tt_timings_t</name> <modifier>*</modifier></type><name>p_local</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_local</name><operator>-&gt;</operator><name>begin</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_local</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <call><name>tt_time_Add</name><argument_list>( <argument><expr><name><name>p_local</name><operator>-&gt;</operator><name>begin</name></name></expr></argument>, <argument><expr><name><name>p_prevref</name><operator>-&gt;</operator><name>end</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_local</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name><name>p_prevref</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_local</name><operator>-&gt;</operator><name>end</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_local</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <call><name>tt_time_Add</name><argument_list>( <argument><expr><name><name>p_local</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>p_prevref</name><operator>-&gt;</operator><name>end</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_local</name><operator>-&gt;</operator><name>dur</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_local</name><operator>-&gt;</operator><name>begin</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_local</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <call><name>tt_time_Add</name><argument_list>( <argument><expr><name><name>p_local</name><operator>-&gt;</operator><name>begin</name></name></expr></argument>, <argument><expr><name><name>p_local</name><operator>-&gt;</operator><name>dur</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_restrict</name><operator>-&gt;</operator><name>end</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>tt_time_Compare</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_local</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_restrict</name><operator>-&gt;</operator><name>end</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_local</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>p_restrict</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_local</name><operator>-&gt;</operator><name>begin</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_local</name><operator>-&gt;</operator><name>end</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_local</name><operator>-&gt;</operator><name>dur</name></name> <operator>=</operator> <call><name>tt_time_Sub</name><argument_list>( <argument><expr><name><name>p_local</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>p_local</name><operator>-&gt;</operator><name>begin</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tt_timings_Resolve</name><parameter_list>( <parameter><decl><type><name>tt_basenode_t</name> <modifier>*</modifier></type><name>p_child</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tt_timings_t</name> <modifier>*</modifier></type><name>p_container_timings</name></decl></parameter>,
<parameter><decl><type><name>tt_time_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_array</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_count</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>tt_node_t</name> <modifier>*</modifier></type><name>p_prevnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init>;</init> <condition><expr><name>p_child</name></expr>;</condition> <incr><expr><name>p_child</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_child</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>TT_NODE_TYPE_ELEMENT</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_childnode</name> <init>= <expr><operator>(</operator><name>tt_node_t</name> <operator>*</operator><operator>)</operator> <name>p_child</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_container_timings</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TT_TIMINGS_SEQUENTIAL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_prevnode</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>tt_timings_MergeParallel</name><argument_list>( <argument><expr><name>p_container_timings</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_childnode</name><operator>-&gt;</operator><name>timings</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_timings_MergeSequential</name><argument_list>( <argument><expr><name>p_container_timings</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_prevnode</name><operator>-&gt;</operator><name>timings</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_childnode</name><operator>-&gt;</operator><name>timings</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>tt_timings_MergeParallel</name><argument_list>( <argument><expr><name>p_container_timings</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_childnode</name><operator>-&gt;</operator><name>timings</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_childnode</name><operator>-&gt;</operator><name>timings</name><operator>.</operator><name>begin</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_bsearch_Insert</name><argument_list>( <argument><expr><name>pp_array</name></expr></argument>, <argument><expr><name>pi_count</name></expr></argument>, <argument><expr><name><name>p_childnode</name><operator>-&gt;</operator><name>timings</name><operator>.</operator><name>begin</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_childnode</name><operator>-&gt;</operator><name>timings</name><operator>.</operator><name>end</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tt_bsearch_Insert</name><argument_list>( <argument><expr><name>pp_array</name></expr></argument>, <argument><expr><name>pi_count</name></expr></argument>, <argument><expr><name><name>p_childnode</name><operator>-&gt;</operator><name>timings</name><operator>.</operator><name>end</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_prevnode</name> <operator>=</operator> <name>p_childnode</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_timings_Resolve</name><argument_list>( <argument><expr><name><name>p_childnode</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_childnode</name><operator>-&gt;</operator><name>timings</name></name></expr></argument>,
<argument><expr><name>pp_array</name></expr></argument>, <argument><expr><name>pi_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
