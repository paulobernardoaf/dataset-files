<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\ttml\ttml.h">



















<function_decl><type><name>int</name></type> <name>tt_OpenDemux</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tt_CloseDemux</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>tt_OpenDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tt_CloseDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<enum>enum
<block>{
<decl><name>TT_TIMINGS_UNSPEC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>TT_TIMINGS_PARALLEL</name></decl>,
<decl><name>TT_TIMINGS_SEQUENTIAL</name></decl>,
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT_FRAME_RATE</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>frames</name></decl>;</decl_stmt>

}</block></struct></type> <name>tt_time_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tt_time_t</name></type> <name>begin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tt_time_t</name></type> <name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tt_time_t</name></type> <name>dur</name></decl>;</decl_stmt>
}</block></struct></type> <name>tt_timings_t</name>;</typedef>

<struct>struct <name>tt_searchkey</name>
<block>{
<decl_stmt><decl><type><name>tt_time_t</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tt_time_t</name> <modifier>*</modifier></type><name>p_last</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum
<block>{
<decl><name>TT_NODE_TYPE_ELEMENT</name></decl>,
<decl><name>TT_NODE_TYPE_TEXT</name></decl>,
}</block>;</enum>

<typedef>typedef <type><name><name>struct</name> <name>tt_basenode_t</name></name></type> <name>tt_basenode_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>tt_node_t</name></name></type> <name>tt_node_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT_NODE_BASE_MEMBERS</name></cpp:macro> <cpp:value>uint8_t i_type;tt_node_t *p_parent;tt_basenode_t *p_next;</cpp:value></cpp:define>




<struct>struct <name>tt_basenode_t</name>
<block>{
<expr_stmt><expr><name>TT_NODE_BASE_MEMBERS</name></expr></expr_stmt>
}</block>;</struct>

<struct>struct <name>tt_node_t</name>
<block>{
<decl_stmt><decl><type><name>TT_NODE_BASE_MEMBERS</name>
<name>tt_basenode_t</name> <modifier>*</modifier></type><name>p_child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_node_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tt_timings_t</name></type> <name>timings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_dictionary_t</name></type> <name>attr_dict</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>TT_NODE_BASE_MEMBERS</name>
<name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>
}</block></struct></type> <name>tt_textnode_t</name>;</typedef>

<function_decl><type><name>tt_node_t</name> <modifier>*</modifier></type> <name>tt_node_New</name><parameter_list>( <parameter><decl><type><name>xml_reader_t</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>tt_node_t</name><modifier>*</modifier></type> <name>p_parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_node_name</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tt_node_RecursiveDelete</name><parameter_list>( <parameter><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tt_node_NameCompare</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_tagname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_pattern</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>tt_node_HasChild</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>tt_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>tt_nodes_Read</name><parameter_list>( <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter>, <parameter><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_root_node</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tt_timings_Resolve</name><parameter_list>( <parameter><decl><type><name>tt_basenode_t</name> <modifier>*</modifier></type><name>p_child</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tt_timings_t</name> <modifier>*</modifier></type><name>p_container_timings</name></decl></parameter>,
<parameter><decl><type><name>tt_time_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_array</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_count</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>tt_timings_Contains</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>tt_timings_t</name> <modifier>*</modifier></type><name>p_range</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tt_time_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>tt_timings_FindLowerIndex</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>tt_time_t</name> <modifier>*</modifier></type><name>p_times</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_times</name></decl></parameter>, <parameter><decl><type><name>tt_time_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_found</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>tt_time_Init</name><parameter_list>( <parameter><decl><type><name>tt_time_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>tt_time_t</name></type> <name>tt_time_Create</name><parameter_list>( <parameter><decl><type><name>vlc_tick_t</name></type> <name>i</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tt_time_t</name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>tt_time_Valid</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>tt_time_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>t</name><operator>-&gt;</operator><name>base</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type> <name>tt_time_Convert</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>tt_time_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>tt_time_Valid</name><argument_list>( <argument><expr><name>t</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>t</name><operator>-&gt;</operator><name>base</name></name> <operator>+</operator> <call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><name><name>t</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>, <argument><expr><name>TT_FRAME_RATE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>tt_time_Compare</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>tt_time_t</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tt_time_t</name> <modifier>*</modifier></type><name>t2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>ttt1</name> <init>= <expr><call><name>tt_time_Convert</name><argument_list>( <argument><expr><name>t1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>ttt2</name> <init>= <expr><call><name>tt_time_Convert</name><argument_list>( <argument><expr><name>t2</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ttt1</name> <operator>&lt;</operator> <name>ttt2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>ttt1</name> <operator>&gt;</operator> <name>ttt2</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>tt_time_t</name></type> <name>tt_time_Add</name><parameter_list>( <parameter><decl><type><name>tt_time_t</name></type> <name>t1</name></decl></parameter>, <parameter><decl><type><name>tt_time_t</name></type> <name>t2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>base</name></name> <operator>+=</operator> <name><name>t2</name><operator>.</operator><name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>frames</name></name> <operator>+=</operator> <name><name>t2</name><operator>.</operator><name>frames</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>base</name></name> <operator>+=</operator> <call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><name><name>t1</name><operator>.</operator><name>frames</name></name></expr></argument>, <argument><expr><name>TT_FRAME_RATE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>frames</name></name> <operator>=</operator> <name><name>t1</name><operator>.</operator><name>frames</name></name> <operator>%</operator> <name>TT_FRAME_RATE</name></expr>;</expr_stmt>
<return>return <expr><name>t1</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>tt_time_t</name></type> <name>tt_time_Sub</name><parameter_list>( <parameter><decl><type><name>tt_time_t</name></type> <name>t1</name></decl></parameter>, <parameter><decl><type><name>tt_time_t</name></type> <name>t2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>t2</name><operator>.</operator><name>frames</name></name> <operator>&gt;</operator> <name><name>t1</name><operator>.</operator><name>frames</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>diff</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>t2</name><operator>.</operator><name>frames</name></name> <operator>-</operator> <name><name>t1</name><operator>.</operator><name>frames</name></name><operator>)</operator> <operator>/</operator> <name>TT_FRAME_RATE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>base</name></name> <operator>-=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>diff</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>frames</name></name> <operator>+=</operator> <name>diff</name> <operator>*</operator> <name>TT_FRAME_RATE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>frames</name></name> <operator>-=</operator> <name><name>t2</name><operator>.</operator><name>frames</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>base</name></name> <operator>-=</operator> <name><name>t2</name><operator>.</operator><name>base</name></name></expr>;</expr_stmt>
<return>return <expr><name>t1</name></expr>;</return>
</block_content>}</block></function>
</unit>
