<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\vt_utils.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_atomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vt_utils.h"</cpp:file></cpp:include>

<function><type><name>CFMutableDictionaryRef</name></type>
<name>cfdict_create</name><parameter_list>(<parameter><decl><type><name>CFIndex</name></type> <name>capacity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>CFDictionaryCreateMutable</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryKeyCallBacks</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryValueCallBacks</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cfdict_set_int32</name><parameter_list>(<parameter><decl><type><name>CFMutableDictionaryRef</name></type> <name>dict</name></decl></parameter>, <parameter><decl><type><name>CFStringRef</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>number</name> <init>= <expr><call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kCFNumberSInt32Type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>cvpxpic_ctx</name>
<block>{
<decl_stmt><decl><type><name>picture_context_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CVPixelBufferRef</name></type> <name>cvpx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nb_fields</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_atomic_rc_t</name></type> <name>rc</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>on_released_cb</name>)<parameter_list>(<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cvpxpic_destroy_cb</name><parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cvpxpic_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>cvpxpic_ctx</name> <operator>*</operator><operator>)</operator><name>opaque</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_atomic_rc_dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cvpx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>on_released_cb</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>on_released_cb</name></name><argument_list>(<argument><expr><name><name>opaque</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_context_t</name> <modifier>*</modifier></type>
<name>cvpxpic_copy_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>picture_context_t</name></name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cvpxpic_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>cvpxpic_ctx</name> <operator>*</operator><operator>)</operator><name>opaque</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_atomic_rc_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>opaque</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>opaque</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cvpxpic_attach_common</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>, <parameter><decl><type><name>CVPixelBufferRef</name></type> <name>cvpx</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_destroy</name>)<parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>on_released_cb</name>)<parameter_list>(<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cvpxpic_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cvpxpic_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <operator>(</operator><name>picture_context_t</name><operator>)</operator> <block>{
<expr><name>pf_destroy</name></expr>, <expr><name>cvpxpic_copy_cb</name></expr>, <expr><name>vctx</name></expr>,
}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cvpx</name></name> <operator>=</operator> <call><name>CVPixelBufferRetain</name><argument_list>(<argument><expr><name>cvpx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_fields</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_nb_fields</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_atomic_rc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>on_released_cb</name></name> <operator>=</operator> <name>on_released_cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cvpxpic_attach</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>, <parameter><decl><type><name>CVPixelBufferRef</name></type> <name>cvpx</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>on_released_cb</name>)<parameter_list>(<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>cvpxpic_attach_common</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>cvpx</name></expr></argument>, <argument><expr><name>cvpxpic_destroy_cb</name></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>on_released_cb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>CVPixelBufferRef</name></type>
<name>cvpxpic_get_ref</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator>struct <name>cvpxpic_ctx</name> <operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>context</name></name><operator>)</operator><operator>-&gt;</operator><name>cvpx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cvpxpic_destroy_mapped_ro_cb</name><parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cvpxpic_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>cvpxpic_ctx</name> <operator>*</operator><operator>)</operator><name>opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CVPixelBufferUnlockBaseAddress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cvpx</name></name></expr></argument>, <argument><expr><name>kCVPixelBufferLock_ReadOnly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cvpxpic_destroy_cb</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cvpxpic_destroy_mapped_rw_cb</name><parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cvpxpic_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>cvpxpic_ctx</name> <operator>*</operator><operator>)</operator><name>opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CVPixelBufferUnlockBaseAddress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cvpx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cvpxpic_destroy_cb</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>picture_t</name> <modifier>*</modifier></type>
<name>cvpxpic_create_mapped</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>CVPixelBufferRef</name></type> <name>cvpx</name></decl></parameter>,
<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>readonly</name></decl></parameter>)</parameter_list>

<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>planes_count</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_BGRA</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_UYVY</name></expr>:</case> <expr_stmt><expr><name>planes_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_NV12</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_P010</name></expr>:</case> <expr_stmt><expr><name>planes_count</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case> <expr_stmt><expr><name>planes_count</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>CVPixelBufferLockFlags</name></type> <name>lock</name> <init>= <expr><ternary><condition><expr><name>readonly</name></expr> ?</condition><then> <expr><name>kCVPixelBufferLock_ReadOnly</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CVPixelBufferLockBaseAddress</name><argument_list>(<argument><expr><name>cvpx</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>picture_resource_t</name></type> <name>rsc</name> <init>= <expr><block>{ }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>CVPixelBufferGetPlaneCount</name><argument_list>(<argument><expr><name>cvpx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>planes_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>planes_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rsc</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>=</operator> <call><name>CVPixelBufferGetBaseAddress</name><argument_list>(<argument><expr><name>cvpx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsc</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>=</operator> <call><name>CVPixelBufferGetHeight</name><argument_list>(<argument><expr><name>cvpx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsc</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>=</operator> <call><name>CVPixelBufferGetBytesPerRow</name><argument_list>(<argument><expr><name>cvpx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>rsc</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>=</operator> <call><name>CVPixelBufferGetBaseAddressOfPlane</name><argument_list>(<argument><expr><name>cvpx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsc</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>=</operator> <call><name>CVPixelBufferGetHeightOfPlane</name><argument_list>(<argument><expr><name>cvpx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsc</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>=</operator> <call><name>CVPixelBufferGetBytesPerRowOfPlane</name><argument_list>(<argument><expr><name>cvpx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_destroy</name>)<parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>readonly</name></expr> ?</condition><then>
<expr><name>cvpxpic_destroy_mapped_ro_cb</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>cvpxpic_destroy_mapped_rw_cb</name></expr></init>;</function_decl>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><call><name>picture_NewFromResource</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pic</name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <call><name>cvpxpic_attach_common</name><argument_list>(<argument><expr><name>pic</name></expr></argument>, <argument><expr><name>cvpx</name></expr></argument>, <argument><expr><name>pf_destroy</name></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CVPixelBufferUnlockBaseAddress</name><argument_list>(<argument><expr><name>cvpx</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>pic</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>picture_t</name> <modifier>*</modifier></type>
<name>cvpxpic_unmap</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>mapped_pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name> <init>= <expr><name><name>mapped_pic</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_UYVY</name></expr>:</case> <expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_CVPX_UYVY</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_NV12</name></expr>:</case> <expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_CVPX_NV12</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_P010</name></expr>:</case> <expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_CVPX_P010</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case> <expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_CVPX_I420</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VLC_CODEC_BGRA</name></expr>:</case> <expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_CVPX_BGRA</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"invalid mapped_pic fmt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>mapped_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mapped_pic</name><operator>-&gt;</operator><name>context</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>hw_pic</name> <init>= <expr><call><name>picture_NewFromFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hw_pic</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>mapped_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cvpxpic_attach</name><argument_list>(<argument><expr><name>hw_pic</name></expr></argument>, <argument><expr><call><name>cvpxpic_get_ref</name><argument_list>(<argument><expr><name>mapped_pic</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>(<argument><expr><name>hw_pic</name></expr></argument>, <argument><expr><name>mapped_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>mapped_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hw_pic</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CVPixelBufferPoolRef</name></type>
<name>cvpxpool_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cvpx_format</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_CVPX_UYVY</name></expr>:</case>
<expr_stmt><expr><name>cvpx_format</name> <operator>=</operator> <name>kCVPixelFormatType_422YpCbCr8</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_CVPX_NV12</name></expr>:</case>
<expr_stmt><expr><name>cvpx_format</name> <operator>=</operator> <name>kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_CVPX_I420</name></expr>:</case>
<expr_stmt><expr><name>cvpx_format</name> <operator>=</operator> <name>kCVPixelFormatType_420YpCbCr8Planar</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_CVPX_BGRA</name></expr>:</case>
<expr_stmt><expr><name>cvpx_format</name> <operator>=</operator> <name>kCVPixelFormatType_32BGRA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_CVPX_P010</name></expr>:</case>
<expr_stmt><expr><name>cvpx_format</name> <operator>=</operator> <literal type="char">'x420'</literal></expr>;</expr_stmt> 
<break>break;</break>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>


<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>cvpx_attrs_dict</name> <init>= <expr><call><name>cfdict_create</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>cvpx_attrs_dict</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>pool_dict</name> <init>= <expr><call><name>cfdict_create</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pool_dict</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cvpx_attrs_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>io_dict</name> <init>= <expr><call><name>cfdict_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>io_dict</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cvpx_attrs_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>pool_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>cvpx_attrs_dict</name></expr></argument>,
<argument><expr><name>kCVPixelBufferIOSurfacePropertiesKey</name></expr></argument>, <argument><expr><name>io_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>io_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cfdict_set_int32</name><argument_list>(<argument><expr><name>cvpx_attrs_dict</name></expr></argument>, <argument><expr><name>kCVPixelBufferPixelFormatTypeKey</name></expr></argument>,
<argument><expr><name>cvpx_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfdict_set_int32</name><argument_list>(<argument><expr><name>cvpx_attrs_dict</name></expr></argument>, <argument><expr><name>kCVPixelBufferWidthKey</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfdict_set_int32</name><argument_list>(<argument><expr><name>cvpx_attrs_dict</name></expr></argument>, <argument><expr><name>kCVPixelBufferHeightKey</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cfdict_set_int32</name><argument_list>(<argument><expr><name>cvpx_attrs_dict</name></expr></argument>, <argument><expr><name>kCVPixelBufferBytesPerRowAlignmentKey</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cfdict_set_int32</name><argument_list>(<argument><expr><name>pool_dict</name></expr></argument>, <argument><expr><name>kCVPixelBufferPoolMinimumBufferCountKey</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfdict_set_int32</name><argument_list>(<argument><expr><name>pool_dict</name></expr></argument>, <argument><expr><name>kCVPixelBufferPoolMaximumBufferAgeKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CVPixelBufferPoolRef</name></type> <name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CVReturn</name></type> <name>err</name> <init>=
<expr><call><name>CVPixelBufferPoolCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool_dict</name></expr></argument>, <argument><expr><name>cvpx_attrs_dict</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>pool_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cvpx_attrs_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>kCVReturnSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>CVPixelBufferRef</name></type> <name><name>cvpxs</name><index>[<expr><name>count</name></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>CVPixelBufferPoolCreatePixelBuffer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cvpxs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>kCVReturnSuccess</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CVPixelBufferPoolRelease</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pool</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>cvpxs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>pool</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CVPixelBufferRef</name></type>
<name>cvpxpool_new_cvpx</name><parameter_list>(<parameter><decl><type><name>CVPixelBufferPoolRef</name></type> <name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CVPixelBufferRef</name></type> <name>cvpx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CVReturn</name></type> <name>err</name> <init>= <expr><call><name>CVPixelBufferPoolCreatePixelBuffer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cvpx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>kCVReturnSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>cvpx</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>cvpx_video_context</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_video_context_operations</name></name> <modifier>*</modifier></type><name>ops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>cvpx_video_context_type</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>private</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cvpx_video_context_Destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cvpx_video_context</name></name> <modifier>*</modifier></type><name>cvpx_vctx</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cvpx_vctx</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>destroy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>cvpx_vctx</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cvpx_vctx</name><operator>-&gt;</operator><name>private</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>vlc_video_context</name> <modifier>*</modifier></type>
<name>vlc_video_context_CreateCVPX</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>cvpx_video_context_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>type_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_video_context_operations</name></name> <modifier>*</modifier></type><name>ops</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_video_context_operations</name></name></type> <name>vctx_ops</name> <init>=
<expr><block>{
<expr><name>cvpx_video_context_Destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name> <init>=
<expr><call><name>vlc_video_context_Create</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>VLC_VIDEO_CONTEXT_CVPX</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cvpx_video_context</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>type_size</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>vctx_ops</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cvpx_video_context</name></name> <modifier>*</modifier></type><name>cvpx_vctx</name> <init>=
<expr><call><name>vlc_video_context_GetPrivate</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>VLC_VIDEO_CONTEXT_CVPX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cvpx_vctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cvpx_vctx</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cvpx_vctx</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <name>ops</name></expr>;</expr_stmt>

<return>return <expr><name>vctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>vlc_video_context_GetCVPXPrivate</name><parameter_list>(<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>cvpx_video_context_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cvpx_video_context</name></name> <modifier>*</modifier></type><name>cvpx_vctx</name> <init>=
<expr><call><name>vlc_video_context_GetPrivate</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>VLC_VIDEO_CONTEXT_CVPX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cvpx_vctx</name> <operator>&amp;&amp;</operator> <name><name>cvpx_vctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>cvpx_vctx</name><operator>-&gt;</operator><name>private</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
