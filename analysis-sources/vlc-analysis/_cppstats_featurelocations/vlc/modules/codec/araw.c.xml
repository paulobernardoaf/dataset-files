<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\araw.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecoderOpen</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DecoderClose</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>EncoderOpen</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Raw/Log Audio decoder"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio decoder"</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_ACODEC</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>DecoderOpen</argument>, <argument>DecoderClose</argument> )</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Raw audio encoder"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="number">150</literal></argument> )</argument_list></macro>
<macro><name>set_callback</name><argument_list>( <argument>EncoderOpen</argument> )</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct
<block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>decode</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>size_t</name></type> <name>framebits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>date_t</name></type> <name>end_date</name></decl>;</decl_stmt>
}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>S8Decode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>U16BDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>U16LDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>S16IDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>S20BDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>U24BDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>U24LDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>S24BDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>S24LDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>S24B32Decode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>S24L32Decode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>U32BDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>U32LDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>S32IDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>F32NDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>F32IDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>F64NDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>F64IDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DAT12Decode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>




<function><type><specifier>static</specifier> <name>int</name></type> <name>DecoderOpen</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>format</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'f'</literal></expr></argument>,<argument><expr><literal type="char">'l'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'w'</literal></expr></argument>,<argument><expr><literal type="char">'o'</literal></expr></argument>,<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>,<argument><expr><literal type="char">'o'</literal></expr></argument>,<argument><expr><literal type="char">'w'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator>
<call><name>vlc_fourcc_GetCodecAudio</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>format</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"bad parameters(bits/sample)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>decode</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
<decl_stmt><decl><type><name>uint_fast8_t</name></type> <name>bits</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>format</name></expr> )</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>VLC_CODEC_F64L</name></expr>:</case>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><name>VLC_CODEC_F64B</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_FL64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>F64IDecode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_FL64</name></expr>:</case>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>F64NDecode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>VLC_CODEC_F32L</name></expr>:</case>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><name>VLC_CODEC_F32B</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>F32IDecode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_FL32</name></expr>:</case>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>F32NDecode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_U32B</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>U32BDecode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_U32L</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>U32LDecode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S32I</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>S32IDecode</name></expr>;</expr_stmt>

<case>case <expr><name>VLC_CODEC_S32N</name></expr>:</case>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S24B32</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>S24B32Decode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S24L32</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>S24L32Decode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_U24B</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>U24BDecode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_U24L</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>U24LDecode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S24B</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>S24BDecode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S24L</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>S24LDecode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S20B</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>S20BDecode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_U16B</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>U16BDecode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_U16L</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>U16LDecode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S16I</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>S16IDecode</name></expr>;</expr_stmt>

<case>case <expr><name>VLC_CODEC_S16N</name></expr>:</case>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_DAT12</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>DAT12Decode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S8</name></expr>:</case>
<expr_stmt><expr><name>decode</name> <operator>=</operator> <name>S8Decode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>VLC_CODEC_U8</name></expr>;</expr_stmt>

<case>case <expr><name>VLC_CODEC_U8</name></expr>:</case>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>&gt;</operator> <name>INPUT_CHAN_MAX</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"bad channels count (1-%i): %i"</literal></expr></argument>,
<argument><expr><name>AOUT_CHAN_MAX</name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>&gt;</operator> <literal type="number">384000</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"bad samplerate: %d Hz"</literal></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"samplerate:%dHz channels:%d bits/sample:%d"</literal></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>channel_type</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>channel_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>vlc_chan_maps</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator>
<name><name>vlc_chan_maps</name><index>[<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>decode</name></name> <operator>=</operator> <name>decode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>framebits</name></name> <operator>=</operator> <name>bits</name> <operator>*</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>framebits</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeBlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>|</operator><name>BLOCK_FLAG_DISCONTINUITY</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Flush</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>
<name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>samples</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>)</operator> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>framebits</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>samples</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>decode</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>decoder_UpdateAudioFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><call><name>decoder_NewAudioBuffer</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>samples</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_out</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>decode</name></name><argument_list>( <argument><expr><name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name>samples</name> <operator>*</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name>p_out</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>decoder_UpdateAudioFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name>samples</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>samples</name> <operator>*</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>framebits</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>samples</name></expr></argument> )</argument_list></call>
<operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decoder_QueueAudio</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
<label><name>skip</name>:</label>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>S8Decode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>U16BDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>GetWBE</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>U16LDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>S16IDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>swab</name><argument_list>( <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>samples</name> <operator>*</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>S20BDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>samples</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dw</name> <init>= <expr><call><name>U32_AT</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>dw</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>dw</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><name>in</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>samples</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if<condition>( <expr><name>samples</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><call><name>U16_AT</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>U24BDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">0x80000000</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>U24LDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">0x80000000</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>S24BDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>S24LDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>S24B32Decode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>GetDWBE</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>S24L32Decode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>U32BDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>GetDWBE</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>U32LDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>S32IDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>GetDWBE</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>F32NDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>isfinite</name><argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>F32IDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint32_t</name></type> <name>u</name></decl>;</decl_stmt> }</block> <decl><name>s</name></decl>;</union>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>u</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>u</name></name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>isfinite</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>f</name></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>s</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>F64NDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>isfinite</name><argument_list>( <argument><expr><operator>*</operator><name>out</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>F64IDecode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint64_t</name></type> <name>u</name></decl>;</decl_stmt> }</block> <decl><name>s</name></decl>;</union>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>u</name></name> <operator>=</operator> <call><name>GetQWLE</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>u</name></name> <operator>=</operator> <call><name>GetQWBE</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>isfinite</name><argument_list>( <argument><expr><name><name>s</name><operator>.</operator><name>d</name></name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>d</name></name> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>s</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int_fast16_t</name></type> <name>dat12tos16</name><parameter_list>( <parameter><decl><type><name>uint_fast16_t</name></type> <name>y</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>diff</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0100</literal></expr>, <expr><literal type="number">0x0200</literal></expr>, <expr><literal type="number">0x0300</literal></expr>, <expr><literal type="number">0x0400</literal></expr>, <expr><literal type="number">0x0500</literal></expr>, <expr><literal type="number">0x0600</literal></expr>,
<expr><literal type="number">0x0A00</literal></expr>, <expr><literal type="number">0x0B00</literal></expr>, <expr><literal type="number">0x0C00</literal></expr>, <expr><literal type="number">0x0D00</literal></expr>, <expr><literal type="number">0x0E00</literal></expr>, <expr><literal type="number">0x0F00</literal></expr>, <expr><literal type="number">0x1000</literal></expr>, <expr><literal type="number">0x1000</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>shift</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>y</name> <operator>&lt;</operator> <literal type="number">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>y</name> <operator>-</operator> <name><name>diff</name><index>[<expr><name>d</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>shift</name><index>[<expr><name>d</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DAT12Decode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>samples</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>dat12tos16</name><argument_list>(<argument><expr><call><name>U16_AT</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>dat12tos16</name><argument_list>(<argument><expr><call><name>U16_AT</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xF000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>samples</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>samples</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>dat12tos16</name><argument_list>(<argument><expr><call><name>U16_AT</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>DecoderClose</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>void</name></type> <name>U16IEncode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>inp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>vlc_bswap16</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>+</operator> <literal type="number">0x8000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>U16NEncode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>inp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>+</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>U24BEncode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>inp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>s</name> <init>= <expr><operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>U24LEncode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>inp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>s</name> <init>= <expr><operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>S24BEncode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>inp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>s</name> <init>= <expr><operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>S24LEncode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>inp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>s</name> <init>= <expr><operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>U32IEncode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>inp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>vlc_bswap32</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>+</operator> <literal type="number">0x80000000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>U32NEncode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>inp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator> <operator>+</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>S32IEncode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name> <operator>*</operator><operator>)</operator><name>inp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>vlc_bswap32</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>F32IEncode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name>inp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint32_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>s</name></decl>;</union>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>f</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>u</name></name> <operator>=</operator> <call><name>vlc_bswap32</name><argument_list>( <argument><expr><name><name>s</name><operator>.</operator><name>u</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>F64IEncode</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>double</name> <operator>*</operator><operator>)</operator><name>inp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>outp</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint64_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>s</name></decl>;</union>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>d</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>u</name></name> <operator>=</operator> <call><name>vlc_bswap64</name><argument_list>( <argument><expr><name><name>s</name><operator>.</operator><name>u</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encode</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>in</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_nb_samples</name></name>
<operator>*</operator> <name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>out</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>encode</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init>;</function_decl>
<if_stmt><if>if<condition>( <expr><name>encode</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>encode</name><argument_list>( <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_nb_samples</name></name>
<operator>*</operator> <name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>out</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>EncoderOpen</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>encode</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<switch>switch<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_S8</name></expr>:</case>
<expr_stmt><expr><name>encode</name> <operator>=</operator> <name>S8Decode</name></expr>;</expr_stmt>

<case>case <expr><name>VLC_CODEC_U8</name></expr>:</case>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_U8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_U16I</name></expr>:</case>
<expr_stmt><expr><name>encode</name> <operator>=</operator> <name>U16IEncode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_U16N</name></expr>:</case>
<expr_stmt><expr><name>encode</name> <operator>=</operator> <name>U16NEncode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S16I</name></expr>:</case>
<expr_stmt><expr><name>encode</name> <operator>=</operator> <name>S16IDecode</name></expr>;</expr_stmt>

<case>case <expr><name>VLC_CODEC_S16N</name></expr>:</case>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_U24B</name></expr>:</case>
<expr_stmt><expr><name>encode</name> <operator>=</operator> <name>U24BEncode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_U24L</name></expr>:</case>
<expr_stmt><expr><name>encode</name> <operator>=</operator> <name>U24LEncode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S24B</name></expr>:</case>
<expr_stmt><expr><name>encode</name> <operator>=</operator> <name>S24BEncode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S24L</name></expr>:</case>
<expr_stmt><expr><name>encode</name> <operator>=</operator> <name>S24LEncode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_U32I</name></expr>:</case>
<expr_stmt><expr><name>encode</name> <operator>=</operator> <name>U32IEncode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_U32N</name></expr>:</case>
<expr_stmt><expr><name>encode</name> <operator>=</operator> <name>U32NEncode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S32I</name></expr>:</case>
<expr_stmt><expr><name>encode</name> <operator>=</operator> <name>S32IEncode</name></expr>;</expr_stmt>

<case>case <expr><name>VLC_CODEC_S32N</name></expr>:</case>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>VLC_CODEC_F32L</name></expr>:</case>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><name>VLC_CODEC_F32B</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>encode</name> <operator>=</operator> <name>F32IEncode</name></expr>;</expr_stmt>

<case>case <expr><name>VLC_CODEC_FL32</name></expr>:</case>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>VLC_CODEC_F64L</name></expr>:</case>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><name>VLC_CODEC_F64B</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>encode</name> <operator>=</operator> <name>F64IEncode</name></expr>;</expr_stmt>

<case>case <expr><name>VLC_CODEC_FL64</name></expr>:</case>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_FL64</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>encode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_audio</name></name> <operator>=</operator> <name>Encode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator>
<operator>(</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator>
<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator>
<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>*</operator>
<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>*</operator>
<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"samplerate:%dHz channels:%d bits/sample:%d"</literal></expr></argument>,
<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>,
<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
