<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\scte27.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"SCTE-27 decoder"</literal>)</argument>)</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"SCTE-27"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"spu decoder"</literal></argument>, <argument><literal type="number">51</literal></argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_SCODEC</argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>segment_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>segment_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>segment_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>segment_date</name></decl>;</decl_stmt>
}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>y</name></decl>, <name>u</name>, <name>v</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>alpha</name></decl>;</decl_stmt>
}</block></struct></type> <name>scte27_color_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>scte27_color_t</name></type> <name>scte27_color_transparent</name> <init>= <expr><block>{
<expr><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0x00</literal></expr>,
<expr><operator>.</operator><name>u</name> <operator>=</operator> <literal type="number">0x80</literal></expr>,
<expr><operator>.</operator><name>v</name> <operator>=</operator> <literal type="number">0x80</literal></expr>,
<expr><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">0x00</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>scte27_color_t</name></type> <name>bs_read_color</name><parameter_list>(<parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>scte27_color_t</name></type> <name>color</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>color</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <ternary><condition><expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0xff</literal></expr> </then><else>: <expr><literal type="number">0x80</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>v</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>u</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>color</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>SetYUVPPixel</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type><name>DecodeSimpleBitmap</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bs_t</name></type> <name>bs</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_framed</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>outline_style</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scte27_color_t</name></type> <name>character_color</name> <init>= <expr><call><name>bs_read_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_h</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_v</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bottom_h</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bottom_v</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>top_h</name> <operator>&gt;=</operator> <name>bottom_h</name> <operator>||</operator> <name>top_v</name> <operator>&gt;=</operator> <name>bottom_v</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_top_h</name> <init>= <expr><name>top_h</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_top_v</name> <init>= <expr><name>top_v</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_bottom_h</name> <init>= <expr><name>bottom_h</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_bottom_v</name> <init>= <expr><name>bottom_v</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scte27_color_t</name></type> <name>frame_color</name> <init>= <expr><name>scte27_color_transparent</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>is_framed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>frame_top_h</name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_top_v</name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_bottom_h</name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_bottom_v</name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_color</name> <operator>=</operator> <call><name>bs_read_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frame_top_h</name> <operator>&gt;</operator> <name>top_h</name> <operator>||</operator>
<name>frame_top_v</name> <operator>&gt;</operator> <name>top_v</name> <operator>||</operator>
<name>frame_bottom_h</name> <operator>&lt;</operator> <name>bottom_h</name> <operator>||</operator>
<name>frame_bottom_v</name> <operator>&lt;</operator> <name>bottom_v</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>outline_thickness</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scte27_color_t</name></type> <name>outline_color</name> <init>= <expr><name>scte27_color_transparent</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shadow_right</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shadow_bottom</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scte27_color_t</name></type> <name>shadow_color</name> <init>= <expr><name>scte27_color_transparent</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>outline_style</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outline_thickness</name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outline_color</name> <operator>=</operator> <call><name>bs_read_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>outline_style</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shadow_right</name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shadow_bottom</name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shadow_color</name> <operator>=</operator> <call><name>bs_read_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>outline_style</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_h</name> <init>= <expr><name>bottom_h</name> <operator>-</operator> <name>top_h</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_v</name> <init>= <expr><name>bottom_v</name> <operator>-</operator> <name>top_v</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap_size</name> <init>= <expr><name>bitmap_h</name> <operator>*</operator> <name>bitmap_v</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><call><name>vlc_alloc</name><argument_list>(<argument><expr><name>bitmap_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bitmap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitmap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>position</name> <operator>&lt;</operator> <name>bitmap_size</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bs_eof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>position</name> <operator>&lt;</operator> <name>bitmap_size</name></expr>;</condition> <incr><expr><name>position</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bitmap</name><index>[<expr><name>position</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>run_on_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>run_off_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><operator>(</operator><name>position</name> <operator>/</operator> <name>bitmap_h</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>bitmap_h</name></expr></argument>,
<argument><expr><name>bitmap_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>position</name> <operator>&lt;</operator> <name>next</name></expr>;</condition> <incr><expr><name>position</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bitmap</name><index>[<expr><name>position</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>run_on_length</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>run_off_length</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>run_on_length</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>run_off_length</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>run_on_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>run</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name>run_on_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>run</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>run_on_length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name><name>position</name> <argument_list type="generic">&lt; <argument><expr><name>bitmap_size</name> <operator>&amp;&amp;</operator> <name>run</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>position</name><operator>++</operator></expr><operator>,</operator> <expr><name>run</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bitmap</name><index>[<expr><name>position</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>run_off_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>run</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name>run_off_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>run</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>run_off_length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name><name>position</name> <argument_list type="generic">&lt; <argument><expr><name>bitmap_size</name> <operator>&amp;&amp;</operator> <name>run</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>position</name><operator>++</operator></expr><operator>,</operator> <expr><name>run</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bitmap</name><index>[<expr><name>position</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>






<decl_stmt><decl><type><name>int</name></type> <name>margin_h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>margin_v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>outline_style</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>margin_h</name> <operator>=</operator>
<name>margin_v</name> <operator>=</operator> <name>outline_thickness</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>outline_style</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>margin_h</name> <operator>=</operator> <name>shadow_right</name></expr>;</expr_stmt>
<expr_stmt><expr><name>margin_v</name> <operator>=</operator> <name>shadow_bottom</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>frame_top_h</name> <operator>-=</operator> <name>margin_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_top_v</name> <operator>-=</operator> <name>margin_v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_bottom_h</name> <operator>+=</operator> <name>margin_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_bottom_v</name> <operator>+=</operator> <name>margin_v</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>frame_h</name> <init>= <expr><name>frame_bottom_h</name> <operator>-</operator> <name>frame_top_h</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>frame_v</name> <init>= <expr><name>frame_bottom_v</name> <operator>-</operator> <name>frame_top_v</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bitmap_oh</name> <init>= <expr><name>top_h</name> <operator>-</operator> <name>frame_top_h</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bitmap_ov</name> <init>= <expr><name>top_v</name> <operator>-</operator> <name>frame_top_v</name></expr></init></decl>;</decl_stmt>

<enum>enum <block>{
<decl><name>COLOR_FRAME</name></decl>,
<decl><name>COLOR_CHARACTER</name></decl>,
<decl><name>COLOR_OUTLINE</name></decl>,
<decl><name>COLOR_SHADOW</name></decl>,
}</block>;</enum>
<decl_stmt><decl><type><name>video_palette_t</name></type> <name>palette</name> <init>= <expr><block>{
<expr><operator>.</operator><name>i_entries</name> <operator>=</operator> <literal type="number">4</literal></expr>,
<expr><operator>.</operator><name>palette</name> <operator>=</operator> <block>{
<expr><index>[<expr><name>COLOR_FRAME</name></expr>]</index> <operator>=</operator> <block>{
<expr><name><name>frame_color</name><operator>.</operator><name>y</name></name></expr>,
<expr><name><name>frame_color</name><operator>.</operator><name>u</name></name></expr>,
<expr><name><name>frame_color</name><operator>.</operator><name>v</name></name></expr>,
<expr><name><name>frame_color</name><operator>.</operator><name>alpha</name></name></expr>
}</block></expr>,
<expr><index>[<expr><name>COLOR_CHARACTER</name></expr>]</index> <operator>=</operator> <block>{
<expr><name><name>character_color</name><operator>.</operator><name>y</name></name></expr>,
<expr><name><name>character_color</name><operator>.</operator><name>u</name></name></expr>,
<expr><name><name>character_color</name><operator>.</operator><name>v</name></name></expr>,
<expr><name><name>character_color</name><operator>.</operator><name>alpha</name></name></expr>
}</block></expr>,
<expr><index>[<expr><name>COLOR_OUTLINE</name></expr>]</index> <operator>=</operator> <block>{
<expr><name><name>outline_color</name><operator>.</operator><name>y</name></name></expr>,
<expr><name><name>outline_color</name><operator>.</operator><name>u</name></name></expr>,
<expr><name><name>outline_color</name><operator>.</operator><name>v</name></name></expr>,
<expr><name><name>outline_color</name><operator>.</operator><name>alpha</name></name></expr>
}</block></expr>,
<expr><index>[<expr><name>COLOR_SHADOW</name></expr>]</index> <operator>=</operator> <block>{
<expr><name><name>shadow_color</name><operator>.</operator><name>y</name></name></expr>,
<expr><name><name>shadow_color</name><operator>.</operator><name>u</name></name></expr>,
<expr><name><name>shadow_color</name><operator>.</operator><name>v</name></name></expr>,
<expr><name><name>shadow_color</name><operator>.</operator><name>alpha</name></name></expr>
}</block></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name> <init>= <expr><block>{
<expr><operator>.</operator><name>i_chroma</name> <operator>=</operator> <name>VLC_CODEC_YUVP</name></expr>,
<expr><operator>.</operator><name>i_width</name> <operator>=</operator> <name>frame_h</name></expr>,
<expr><operator>.</operator><name>i_visible_width</name> <operator>=</operator> <name>frame_h</name></expr>,
<expr><operator>.</operator><name>i_height</name> <operator>=</operator> <name>frame_v</name></expr>,
<expr><operator>.</operator><name>i_visible_height</name> <operator>=</operator> <name>frame_v</name></expr>,
<expr><operator>.</operator><name>i_sar_num</name> <operator>=</operator> <literal type="number">0</literal></expr>, 
<expr><operator>.</operator><name>i_sar_den</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>p_palette</name> <operator>=</operator> <operator>&amp;</operator><name>palette</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>subpicture_region_New</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name>frame_top_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name>frame_top_v</name></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>frame_v</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>COLOR_FRAME</name></expr></argument>,
<argument><expr><name>frame_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name>outline_style</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>bool</name></type> <name><name>circle</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dy</name> <operator>&lt;=</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>dy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dx</name> <operator>&lt;=</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>dx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>circle</name><index>[<expr><name>dy</name></expr>]</index><index>[<expr><name>dx</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>dx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>dy</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name>dx</name> <operator>*</operator> <name>dx</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dy</name> <operator>&lt;=</operator> <name>outline_thickness</name> <operator>*</operator> <name>outline_thickness</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>by</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>by</name> <operator>&lt;</operator> <name>bitmap_v</name></expr>;</condition> <incr><expr><name>by</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>bx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>bx</name> <operator>&lt;</operator> <name>bitmap_h</name></expr>;</condition> <incr><expr><name>bx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bitmap</name><index>[<expr><name>by</name> <operator>*</operator> <name>bitmap_h</name> <operator>+</operator> <name>bx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dy</name> <operator>&lt;=</operator> <name>outline_thickness</name></expr>;</condition> <incr><expr><name>dy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dx</name> <operator>&lt;=</operator> <name>outline_thickness</name></expr>;</condition> <incr><expr><name>dx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>circle</name><index>[<expr><name>dy</name></expr>]</index><index>[<expr><name>dx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SetYUVPPixel</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument>,
<argument><expr><name>bx</name> <operator>+</operator> <name>bitmap_oh</name> <operator>+</operator> <name>dx</name></expr></argument>, <argument><expr><name>by</name> <operator>+</operator> <name>bitmap_ov</name> <operator>+</operator> <name>dy</name></expr></argument>, <argument><expr><name>COLOR_OUTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetYUVPPixel</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument>,
<argument><expr><name>bx</name> <operator>+</operator> <name>bitmap_oh</name> <operator>-</operator> <name>dx</name></expr></argument>, <argument><expr><name>by</name> <operator>+</operator> <name>bitmap_ov</name> <operator>+</operator> <name>dy</name></expr></argument>, <argument><expr><name>COLOR_OUTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetYUVPPixel</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument>,
<argument><expr><name>bx</name> <operator>+</operator> <name>bitmap_oh</name> <operator>+</operator> <name>dx</name></expr></argument>, <argument><expr><name>by</name> <operator>+</operator> <name>bitmap_ov</name> <operator>-</operator> <name>dy</name></expr></argument>, <argument><expr><name>COLOR_OUTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetYUVPPixel</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument>,
<argument><expr><name>bx</name> <operator>+</operator> <name>bitmap_oh</name> <operator>-</operator> <name>dx</name></expr></argument>, <argument><expr><name>by</name> <operator>+</operator> <name>bitmap_ov</name> <operator>-</operator> <name>dy</name></expr></argument>, <argument><expr><name>COLOR_OUTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>outline_style</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>by</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>by</name> <operator>&lt;</operator> <name>bitmap_v</name></expr>;</condition> <incr><expr><name>by</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>bx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>bx</name> <operator>&lt;</operator> <name>bitmap_h</name></expr>;</condition> <incr><expr><name>bx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><index>[<expr><name>by</name> <operator>*</operator> <name>bitmap_h</name> <operator>+</operator> <name>bx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetYUVPPixel</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument>,
<argument><expr><name>bx</name> <operator>+</operator> <name>bitmap_oh</name> <operator>+</operator> <name>shadow_right</name></expr></argument>,
<argument><expr><name>by</name> <operator>+</operator> <name>bitmap_ov</name> <operator>+</operator> <name>shadow_bottom</name></expr></argument>,
<argument><expr><name>COLOR_SHADOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>by</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>by</name> <operator>&lt;</operator> <name>bitmap_v</name></expr>;</condition> <incr><expr><name>by</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>bx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>bx</name> <operator>&lt;</operator> <name>bitmap_h</name></expr>;</condition> <incr><expr><name>bx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><index>[<expr><name>by</name> <operator>*</operator> <name>bitmap_h</name> <operator>+</operator> <name>bx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetYUVPPixel</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument>,
<argument><expr><name>bx</name> <operator>+</operator> <name>bitmap_oh</name></expr></argument>, <argument><expr><name>by</name> <operator>+</operator> <name>bitmap_ov</name></expr></argument>, <argument><expr><name>COLOR_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>DecodeSubtitleMessage</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>pre_clear_display</name> <init>= <expr><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>display_standard</name> <init>= <expr><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subtitle_type</name> <init>= <expr><name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>display_duration</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>data</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_length</name> <init>= <expr><call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block_length</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>subtitle_type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>region</name> <init>= <expr><call><name>DecodeSimpleBitmap</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>block_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>region</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><call><name>decoder_NewSubpicture</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sub</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>subpicture_region_Delete</name><argument_list>(<argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>frame_duration</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>display_standard</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <literal type="number">720</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <literal type="number">480</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_duration</name> <operator>=</operator> <call><name>VLC_TICK_FROM_US</name><argument_list>(<argument><expr><literal type="number">33367</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <literal type="number">720</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <literal type="number">576</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_duration</name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <literal type="number">1280</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <literal type="number">720</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_duration</name> <operator>=</operator> <call><name>VLC_TICK_FROM_US</name><argument_list>(<argument><expr><literal type="number">16683</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <literal type="number">1920</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <literal type="number">1080</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_duration</name> <operator>=</operator> <call><name>VLC_TICK_FROM_US</name><argument_list>(<argument><expr><literal type="number">16683</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"Unknown display standard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_duration</name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pre_clear_display</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"SCTE-27 subtitles without pre_clear_display flag are not well supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name>date</name> <operator>+</operator> <name>display_duration</name> <operator>*</operator> <name>frame_duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <name>region</name></expr>;</expr_stmt>

<return>return <expr><name>sub</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"corrupted subtitle_message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>table_id</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>table_id</name> <operator>!=</operator> <literal type="number">0xc6</literal></expr>)</condition> <block>{<block_content>


<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>section_length</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>section_length</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>section_length</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"Invalid SCTE-27 section length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>protocol_version</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>protocol_version</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"Unsupported SCTE-27 protocol version (%d)"</literal></expr></argument>, <argument><expr><name>protocol_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>segmentation_overlay</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>segmentation_overlay</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>section_length</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name>last</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>segment_id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>segment_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>segment_date</name></name> <operator>=</operator> <ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>segment_id</name></name> <operator>!=</operator> <name>id</name> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>segment_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>segment_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>segment_size</name> <init>= <expr><name>section_length</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">5</literal> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>segment_buffer</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>segment_buffer</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>segment_size</name></name> <operator>+</operator> <name>segment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>segment_buffer</name><index>[<expr><name><name>sys</name><operator>-&gt;</operator><name>segment_size</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>segment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>segment_size</name></name> <operator>+=</operator> <name>segment_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sub</name> <operator>=</operator> <call><name>DecodeSubtitleMessage</name><argument_list>(<argument><expr><name>dec</name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>segment_buffer</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>segment_size</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>segment_date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>segment_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sub</name> <operator>=</operator> <call><name>DecodeSubtitleMessage</name><argument_list>(<argument><expr><name>dec</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>section_length</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sub</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decoder_QueueSub</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <literal type="number">3</literal> <operator>+</operator> <name>section_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <literal type="number">3</literal> <operator>+</operator> <name>section_length</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></while>

<label><name>exit</name>:</label>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_SCTE_27</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>segment_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>segment_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>segment_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>Decode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_YUVP</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>segment_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
