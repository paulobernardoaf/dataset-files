<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\avcodec\va_surface.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codecs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"va_surface.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_GET_RETRIES</name></cpp:macro> <cpp:value>((VLC_TICK_FROM_SEC(1) + VOUT_OUTMEM_SLEEP) / VOUT_OUTMEM_SLEEP)</cpp:value></cpp:define>

<struct>struct <name>vlc_va_surface_t</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name>refcount</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>va_pool_t</name> <modifier>*</modifier></type><name>va_pool</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>va_pool_t</name>
<block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>surface_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>surface_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>surface_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_va_surface_t</name></type> <name><name>surface</name><index>[<expr><name>MAX_SURFACE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>va_pool_cfg</name></name></type> <name>callbacks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_uintptr_t</name></type> <name>poolrefs</name></decl>;</decl_stmt> 
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>va_pool_AddRef</name><parameter_list>(<parameter><decl><type><name>va_pool_t</name> <modifier>*</modifier></type><name>va_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>va_pool</name><operator>-&gt;</operator><name>poolrefs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>va_pool_Release</name><parameter_list>(<parameter><decl><type><name>va_pool_t</name> <modifier>*</modifier></type><name>va_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>atomic_fetch_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>va_pool</name><operator>-&gt;</operator><name>poolrefs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>va_pool</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>pf_destroy_device</name></name><argument_list>(<argument><expr><name><name>va_pool</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>va_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>va_pool_SetupDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>va</name></decl></parameter>, <parameter><decl><type><name>va_pool_t</name> <modifier>*</modifier></type><name>va_pool</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>va_pool</name><operator>-&gt;</operator><name>surface_count</name></name> <operator>&gt;=</operator> <name>count</name> <operator>&amp;&amp;</operator>
<name><name>va_pool</name><operator>-&gt;</operator><name>surface_width</name></name> <operator>==</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name> <operator>&amp;&amp;</operator>
<name><name>va_pool</name><operator>-&gt;</operator><name>surface_height</name></name> <operator>==</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"reusing surface pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"va_pool_SetupDecoder id %d %dx%d count: %zu"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>MAX_SURFACE_COUNT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"too many surfaces requested %zu (max %d)"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>MAX_SURFACE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name><name>va_pool</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>pf_create_decoder_surfaces</name></name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>va_pool</name><operator>-&gt;</operator><name>surface_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>va_pool</name><operator>-&gt;</operator><name>surface_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>va_pool</name><operator>-&gt;</operator><name>surface_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>va_pool</name><operator>-&gt;</operator><name>surface_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>vlc_va_surface_t</name> <modifier>*</modifier></type><name>surface</name> <init>= <expr><operator>&amp;</operator><name><name>va_pool</name><operator>-&gt;</operator><name>surface</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>surface</name><operator>-&gt;</operator><name>refcount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_pool_AddRef</name><argument_list>(<argument><expr><name>va_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>va_pool</name></name> <operator>=</operator> <name>va_pool</name></expr>;</expr_stmt>
</block_content>}</block></for>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name><name>va_pool</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>pf_setup_avcodec_ctx</name></name><argument_list>(<argument><expr><name><name>va_pool</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_va_surface_t</name> <modifier>*</modifier></type><name>GetSurface</name><parameter_list>(<parameter><decl><type><name>va_pool_t</name> <modifier>*</modifier></type><name>va_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>va_pool</name><operator>-&gt;</operator><name>surface_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>vlc_va_surface_t</name> <modifier>*</modifier></type><name>surface</name> <init>= <expr><operator>&amp;</operator><name><name>va_pool</name><operator>-&gt;</operator><name>surface</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>expected</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_compare_exchange_strong</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>surface</name><operator>-&gt;</operator><name>refcount</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expected</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>atomic_fetch_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>surface</name><operator>-&gt;</operator><name>refcount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_surface_AddRef</name><argument_list>(<argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>surface</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_va_surface_t</name> <modifier>*</modifier></type><name>va_pool_Get</name><parameter_list>(<parameter><decl><type><name>va_pool_t</name> <modifier>*</modifier></type><name>va_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>tries</name> <init>= <expr><name>MAX_GET_RETRIES</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_va_surface_t</name> <modifier>*</modifier></type><name>surface</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>va_pool</name><operator>-&gt;</operator><name>surface_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>surface</name> <operator>=</operator> <call><name>GetSurface</name><argument_list>(<argument><expr><name>va_pool</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>tries</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>(<argument><expr><name>VOUT_OUTMEM_SLEEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>surface</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>va_surface_AddRef</name><parameter_list>(<parameter><decl><type><name>vlc_va_surface_t</name> <modifier>*</modifier></type><name>surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>surface</name><operator>-&gt;</operator><name>refcount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>va_surface_Release</name><parameter_list>(<parameter><decl><type><name>vlc_va_surface_t</name> <modifier>*</modifier></type><name>surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>atomic_fetch_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>surface</name><operator>-&gt;</operator><name>refcount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>va_pool_Release</name><argument_list>(<argument><expr><name><name>surface</name><operator>-&gt;</operator><name>va_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>va_surface_GetIndex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_va_surface_t</name> <modifier>*</modifier></type><name>surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>surface</name><operator>-&gt;</operator><name>index</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>va_pool_Close</name><parameter_list>(<parameter><decl><type><name>va_pool_t</name> <modifier>*</modifier></type><name>va_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>va_pool</name><operator>-&gt;</operator><name>surface_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>va_surface_Release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>va_pool</name><operator>-&gt;</operator><name>surface</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>va_pool</name><operator>-&gt;</operator><name>surface_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_pool_Release</name><argument_list>(<argument><expr><name>va_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>va_pool_t</name> <modifier>*</modifier></type> <name>va_pool_Create</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>va</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>va_pool_cfg</name></name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_pool_t</name> <modifier>*</modifier></type><name>va_pool</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>va_pool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>va_pool</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>va_pool</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>=</operator> <operator>*</operator><name>cbs</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name><name>cbs</name><operator>-&gt;</operator><name>pf_create_device</name></name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"Failed to create device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"CreateDevice succeed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>va_pool</name><operator>-&gt;</operator><name>surface_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>va_pool</name><operator>-&gt;</operator><name>poolrefs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>va_pool</name></expr>;</return>
</block_content>}</block></function>
</unit>
