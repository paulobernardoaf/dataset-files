<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\avcodec\avcommon.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCOMMON_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCOMMON_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_avcodec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_configuration.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_variables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcommon_compat.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBAVUTIL_AVUTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/avutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/dict.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/cpu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/log.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>CLOCK_FREQ</name> <operator>==</operator> <name>AV_TIME_BASE</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_AV_TS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_AV_TS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>CLOCK_FREQ</name> <operator>%</operator> <name>AV_TIME_BASE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_AV_TS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * (CLOCK_FREQ / AV_TIME_BASE))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_AV_TS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) / (CLOCK_FREQ / AV_TIME_BASE))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>AV_TIME_BASE</name> <operator>%</operator> <name>CLOCK_FREQ</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_AV_TS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) / (AV_TIME_BASE / CLOCK_FREQ))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_AV_TS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * (AV_TIME_BASE / CLOCK_FREQ))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_AV_TS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * CLOCK_FREQ / AV_TIME_BASE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_AV_TS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * AV_TIME_BASE / CLOCK_FREQ)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_OPTIONS_TEXT</name></cpp:macro> <cpp:value>N_("Advanced options")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_OPTIONS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Advanced options, in the form {opt=val,opt2=val2}.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RESET_TS_TEXT</name></cpp:macro> <cpp:value>N_("Reset timestamps")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RESET_TS_LONGTEXT</name></cpp:macro> <cpp:value>N_("The muxed content will start near a 0 timestamp.")</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_av_get_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_opts</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_dict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>config_ChainParseOptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><name>psz_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cfg</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>cfg</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><name>pp_dict</name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cfg</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_init_avutil</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name>AV_LOG_QUIET</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"quiet"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>verbose</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"verbose"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <switch>switch<condition>(<expr><name>verbose</name> <operator>+</operator> <name>VLC_MSG_ERR</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VLC_MSG_ERR</name></expr>:</case>
<expr_stmt><expr><name>level</name> <operator>=</operator> <name>AV_LOG_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_MSG_WARN</name></expr>:</case>
<expr_stmt><expr><name>level</name> <operator>=</operator> <name>AV_LOG_WARNING</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_MSG_INFO</name></expr>:</case>
<expr_stmt><expr><name>level</name> <operator>=</operator> <name>AV_LOG_INFO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_MSG_DBG</name></expr>:</case>
<expr_stmt><expr><name>level</name> <operator>=</operator> <name>AV_LOG_VERBOSE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>level</name> <operator>=</operator> <name>AV_LOG_DEBUG</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"CPU flags: 0x%08x"</literal></expr></argument>, <argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBAVFORMAT_AVFORMAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavformat/avformat.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_init_avformat</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_avcodec_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_init_avutil</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avformat_network_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_register_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_avcodec_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBAVCODEC_AVCODEC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavcodec/avcodec.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vlc_init_avcodec</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_avcodec_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_init_avutil</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_register_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_avcodec_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AV_ERROR_MAX_STRING_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_ERROR_MAX_STRING_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_rational_t</name></type> <name>FromAVRational</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVRational</name></type> <name>rat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>vlc_rational_t</name><operator>)</operator><block>{<expr><operator>.</operator><name>num</name> <operator>=</operator> <name><name>rat</name><operator>.</operator><name>num</name></name></expr>, <expr><operator>.</operator><name>den</name> <operator>=</operator> <name><name>rat</name><operator>.</operator><name>den</name></name></expr>}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_video_color_settings</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>p_context</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>color_range</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>COLOR_RANGE_FULL</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>AVCOL_RANGE_JPEG</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLOR_RANGE_LIMITED</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>AVCOL_RANGE_MPEG</name></expr>;</expr_stmt>
<case>case <expr><name>COLOR_RANGE_UNDEF</name></expr>:</case> 
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>AVCOL_RANGE_UNSPECIFIED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>space</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>COLOR_SPACE_BT709</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT709</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLOR_SPACE_BT601</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT470BG</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLOR_SPACE_BT2020</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT2020_CL</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>transfer</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>TRANSFER_FUNC_LINEAR</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name>AVCOL_TRC_LINEAR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRANSFER_FUNC_SRGB</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name>AVCOL_TRC_GAMMA22</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRANSFER_FUNC_BT470_BG</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name>AVCOL_TRC_GAMMA28</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRANSFER_FUNC_BT470_M</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name>AVCOL_TRC_GAMMA22</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRANSFER_FUNC_BT709</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name>AVCOL_TRC_BT709</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRANSFER_FUNC_SMPTE_ST2084</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name>AVCOL_TRC_SMPTEST2084</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRANSFER_FUNC_SMPTE_240</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name>AVCOL_TRC_SMPTE240M</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name>AVCOL_TRC_UNSPECIFIED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<switch>switch<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>primaries</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>COLOR_PRIMARIES_BT601_525</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name>AVCOL_PRI_SMPTE170M</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLOR_PRIMARIES_BT601_625</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name>AVCOL_PRI_BT470BG</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLOR_PRIMARIES_BT709</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name>AVCOL_PRI_BT709</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLOR_PRIMARIES_BT2020</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name>AVCOL_PRI_BT2020</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLOR_PRIMARIES_FCC1953</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name>AVCOL_PRI_BT470M</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name>AVCOL_PRI_UNSPECIFIED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<switch>switch<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>chroma_location</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>CHROMA_LOCATION_LEFT</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>=</operator> <name>AVCHROMA_LOC_LEFT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHROMA_LOCATION_CENTER</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>=</operator> <name>AVCHROMA_LOC_CENTER</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHROMA_LOCATION_TOP_LEFT</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>=</operator> <name>AVCHROMA_LOC_TOPLEFT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHROMA_LOCATION_TOP_CENTER</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>=</operator> <name>AVCHROMA_LOC_TOP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHROMA_LOCATION_BOTTOM_LEFT</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>=</operator> <name>AVCHROMA_LOC_BOTTOMLEFT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHROMA_LOCATION_BOTTOM_CENTER</name></expr>:</case>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>=</operator> <name>AVCHROMA_LOC_BOTTOM</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>=</operator> <name>AVCHROMA_LOC_UNSPECIFIED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
