<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\avcodec\d3d11va.c">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WINAPI_FAMILY</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINAPI_FAMILY</name></cpp:macro> <cpp:value>WINAPI_FAMILY_DESKTOP_APP</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initguid.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d11.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavcodec/d3d11va.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_chroma/d3d11_fmt.h"</cpp:file></cpp:include>

<struct>struct <name>d3d11va_pic_context</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>d3d11_pic_context</name></name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_va_surface_t</name></name> <modifier>*</modifier></type><name>va_surface</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3D11VA_PICCONTEXT_FROM_PICCTX</name><parameter_list>(<parameter><type><name>pic_ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of((pic_ctx), struct d3d11va_pic_context, ctx.s)</cpp:value></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"directx_va.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>PixelFormat</name></name></type> <name>hwfmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Direct3D11 Video Acceleration"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_VCODEC</argument>)</argument_list></macro>
<macro><name>set_va_callback</name><argument_list>(<argument>Open</argument>, <argument><literal type="number">110</literal></argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initguid.h&gt;</cpp:file></cpp:include> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_GUID</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>w1</name></type></parameter>, <parameter><type><name>w2</name></type></parameter>, <parameter><type><name>b1</name></type></parameter>, <parameter><type><name>b2</name></type></parameter>, <parameter><type><name>b3</name></type></parameter>, <parameter><type><name>b4</name></type></parameter>, <parameter><type><name>b5</name></type></parameter>, <parameter><type><name>b6</name></type></parameter>, <parameter><type><name>b7</name></type></parameter>, <parameter><type><name>b8</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;_mingw.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MS_GUID</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS_GUID</name></cpp:macro> <cpp:value>DEFINE_GUID</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA2_E_NEW_VIDEO_DEVICE</name></cpp:macro> <cpp:value>MAKE_HRESULT(1, 4, 4097)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dxva.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>DXVA_Intel_H264_NoFGT_ClearVideo</name></expr></argument>, <argument><expr><literal type="number">0x604F8E68</literal></expr></argument>, <argument><expr><literal type="number">0x4951</literal></expr></argument>, <argument><expr><literal type="number">0x4c54</literal></expr></argument>, <argument><expr><literal type="number">0x88</literal></expr></argument>, <argument><expr><literal type="number">0xFE</literal></expr></argument>, <argument><expr><literal type="number">0xAB</literal></expr></argument>, <argument><expr><literal type="number">0xD2</literal></expr></argument>, <argument><expr><literal type="number">0x5C</literal></expr></argument>, <argument><expr><literal type="number">0x15</literal></expr></argument>, <argument><expr><literal type="number">0xB3</literal></expr></argument>, <argument><expr><literal type="number">0xD6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>DXVA2_NoEncrypt</name></expr></argument>, <argument><expr><literal type="number">0x1b81bed0</literal></expr></argument>, <argument><expr><literal type="number">0xa0c7</literal></expr></argument>, <argument><expr><literal type="number">0x11d3</literal></expr></argument>, <argument><expr><literal type="number">0xb9</literal></expr></argument>, <argument><expr><literal type="number">0x84</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xc0</literal></expr></argument>, <argument><expr><literal type="number">0x4f</literal></expr></argument>, <argument><expr><literal type="number">0x2e</literal></expr></argument>, <argument><expr><literal type="number">0x73</literal></expr></argument>, <argument><expr><literal type="number">0xc5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>vlc_va_sys_t</name>
<block>{
<decl_stmt><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>render_fmt</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_CONFIG</name></type> <name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>directx_va_mode_t</name> <modifier>*</modifier></type><name>selected_decoder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID3D11VideoDevice</name> <modifier>*</modifier></type><name>d3ddec</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>AVD3D11VAContext</name></name></type> <name>hw</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>va_pool_t</name> <modifier>*</modifier></type><name>va_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID3D11VideoDecoderOutputView</name> <modifier>*</modifier></type><name><name>hw_surface</name><index>[<expr><name>MAX_SURFACE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID3D11ShaderResourceView</name> <modifier>*</modifier></type><name><name>renderSrc</name><index>[<expr><name>MAX_SURFACE_COUNT</name> <operator>*</operator> <name>D3D11_MAX_SHADER_VIEW</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>D3dCreateDevice</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DxGetInputList</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_list_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DxSetupOutput</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>directx_va_mode_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DxCreateDecoderSurfaces</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>surface_count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DxDestroySurfaces</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupAVCodecContext</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_va_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hw</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cfg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hw</name><operator>.</operator><name>surface</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>hw_surface</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hw</name><operator>.</operator><name>context_mutex</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>context_mutex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hw</name><operator>.</operator><name>workaround</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>selected_decoder</name><operator>-&gt;</operator><name>workaround</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>hw</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>d3d11va_pic_context_destroy</name><parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d3d11va_pic_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><call><name>D3D11VA_PICCONTEXT_FROM_PICCTX</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_va_surface_t</name></name> <modifier>*</modifier></type><name>va_surface</name> <init>= <expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>va_surface</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>d3d11va_pic_context</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Cast assumption failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>d3d11_pic_context_destroy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_surface_Release</name><argument_list>(<argument><expr><name>va_surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_context_t</name> <modifier>*</modifier></type><name>d3d11va_pic_context_copy</name><parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d3d11va_pic_context</name></name> <modifier>*</modifier></type><name>src_ctx</name> <init>= <expr><call><name>D3D11VA_PICCONTEXT_FROM_PICCTX</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>d3d11va_pic_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pic_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pic_ctx</name><operator>==</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pic_ctx</name> <operator>=</operator> <operator>*</operator><name>src_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>s</name><operator>.</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_surface_AddRef</name><argument_list>(<argument><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>va_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>D3D11_MAX_SHADER_VIEW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>picsys</name><operator>.</operator><name>resource</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src_ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>picsys</name><operator>.</operator><name>resource</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>picsys</name><operator>.</operator><name>renderSrc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src_ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>picsys</name><operator>.</operator><name>renderSrc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>AcquireD3D11PictureSys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>picsys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>s</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>d3d11va_pic_context</name></name> <modifier>*</modifier></type><name>CreatePicContext</name><parameter_list>(
<parameter><decl><type><name>UINT</name></type> <name>slice</name></decl></parameter>,
<parameter><decl><type><name>ID3D11ShaderResourceView</name> <modifier>*</modifier></type><name><name>renderSrc</name><index>[<expr><name>D3D11_MAX_SHADER_VIEW</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>d3d11va_pic_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pic_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pic_ctx</name><operator>==</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>s</name></name> <operator>=</operator> <operator>(</operator><name>picture_context_t</name><operator>)</operator> <block>{
<expr><name>d3d11va_pic_context_destroy</name></expr>, <expr><name>d3d11va_pic_context_copy</name></expr>,
<expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>)</argument_list></call></expr>,
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ID3D11Resource</name> <modifier>*</modifier></type><name>p_resource</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ID3D11ShaderResourceView_GetResource</name><argument_list>(<argument><expr><name><name>renderSrc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>txDesc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ID3D11Texture2D_GetDesc</name><argument_list>(<argument><expr><operator>(</operator><name>ID3D11Texture2D</name><operator>*</operator><operator>)</operator><name>p_resource</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>picsys</name><operator>.</operator><name>slice_index</name></name> <operator>=</operator> <name>slice</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>D3D11_MAX_SHADER_VIEW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>picsys</name><operator>.</operator><name>resource</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p_resource</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>picsys</name><operator>.</operator><name>renderSrc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>renderSrc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>AcquireD3D11PictureSys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>picsys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ID3D11Resource_Release</name><argument_list>(<argument><expr><name>p_resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pic_ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_context_t</name><modifier>*</modifier></type> <name>NewSurfacePicContext</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>va</name></decl></parameter>, <parameter><decl><type><name>vlc_va_surface_t</name> <modifier>*</modifier></type><name>va_surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_va_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>va</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID3D11VideoDecoderOutputView</name> <modifier>*</modifier></type><name>surface</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>hw_surface</name><index>[<expr><call><name>va_surface_GetIndex</name><argument_list>(<argument><expr><name>va_surface</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID3D11ShaderResourceView</name> <modifier>*</modifier></type><name><name>resourceView</name><index>[<expr><name>D3D11_MAX_SHADER_VIEW</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC</name></type> <name>viewDesc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ID3D11VideoDecoderOutputView_GetDesc</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>viewDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>D3D11_MAX_SHADER_VIEW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>resourceView</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>renderSrc</name><index>[<expr><name><name>viewDesc</name><operator>.</operator><name>Texture2D</name><operator>.</operator><name>ArraySlice</name></name><operator>*</operator><name>D3D11_MAX_SHADER_VIEW</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name><name>struct</name> <name>d3d11va_pic_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><call><name>CreatePicContext</name><argument_list>(
<argument><expr><name><name>viewDesc</name><operator>.</operator><name>Texture2D</name><operator>.</operator><name>ArraySlice</name></name></expr></argument>,
<argument><expr><name>resourceView</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pic_ctx</name><operator>==</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>va_surface</name></name> <operator>=</operator> <name>va_surface</name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>s</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Get</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>va</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_va_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>va</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_va_surface_t</name> <modifier>*</modifier></type><name>va_surface</name> <init>= <expr><call><name>va_pool_Get</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>va_pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>va_surface</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOITEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>NewSurfacePicContext</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>va_surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>va_surface_Release</name><argument_list>(<argument><expr><name>va_surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOITEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>sys</name><operator>-&gt;</operator><name>hw_surface</name><index>[<expr><call><name>va_surface_GetIndex</name><argument_list>(<argument><expr><name>va_surface</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>va</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_va_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>va</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>va_pool</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>va_pool_Close</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>va_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_va_operations</name></name></type> <name>ops</name> <init>= <expr><block>{ <expr><name>Get</name></expr>, <expr><name>Close</name></expr>, }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>va</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>PixelFormat</name></name></type> <name>hwfmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt_in</name></decl></parameter>, <parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_device</name></decl></parameter>,
<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmt_out</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier><modifier>*</modifier></type><name>vtcx_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>hwfmt</name> <operator>!=</operator> <name>AV_PIX_FMT_D3D11VA_VLD</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>d3d11_decoder_device_t</name> <modifier>*</modifier></type><name>devsys</name> <init>= <expr><call><name>GetD3D11OpaqueDevice</name><argument_list>( <argument><expr><name>dec_device</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>devsys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_va_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>va</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>render_fmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>devsys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>context_mutex</name></name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"No mutex found to lock the decoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>va_pool_cfg</name></name></type> <name>pool_cfg</name> <init>= <expr><block>{
<expr><name>D3dCreateDevice</name></expr>,
<expr><name>DxDestroySurfaces</name></expr>,
<expr><name>DxCreateDecoderSurfaces</name></expr>,
<expr><name>SetupAVCodecContext</name></expr>,
<expr><name>sys</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>va_pool</name></name> <operator>=</operator> <call><name>va_pool_Create</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pool_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>va_pool</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>final_fmt</name> <init>= <expr><operator>*</operator><name>fmt_out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>directx_sys_t</name></type> <name>dx_sys</name> <init>= <expr><block>{ <expr><name>DxGetInputList</name></expr>, <expr><name>DxSetupOutput</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>selected_decoder</name></name> <operator>=</operator> <call><name>directx_va_Setup</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dx_sys</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>fmt_in</name></expr></argument>, <argument><expr><call><name>isXboxHardware</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>final_fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>hw</name><operator>.</operator><name>surface_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>selected_decoder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>final_fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>render_fmt</name><operator>-&gt;</operator><name>fourcc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>va_pool_SetupDecoder</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>va_pool</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>final_fmt</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hw</name><operator>.</operator><name>surface_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"Using D3D11VA (%ls, vendor %x(%s), device %x, revision %x)"</literal></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>adapterDesc</name><operator>.</operator><name>Description</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>adapterDesc</name><operator>.</operator><name>VendorId</name></name></expr></argument>, <argument><expr><call><name>DxgiVendorStr</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>adapterDesc</name><operator>.</operator><name>VendorId</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>adapterDesc</name><operator>.</operator><name>DeviceId</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>adapterDesc</name><operator>.</operator><name>Revision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vctx</name></name> <operator>=</operator> <call><name>D3D11CreateVideoContext</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>render_fmt</name><operator>-&gt;</operator><name>formatTexture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vctx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"no video context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>va</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>ops</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fmt_out</name> <operator>=</operator> <name>final_fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>vtcx_out</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>vctx</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>D3dCreateDevice</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>va</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_va_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>va</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>d3dvidctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11DeviceContext_QueryInterface</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_ID3D11VideoContext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3dvidctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"Could not Query ID3D11VideoContext Interface. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hw</name><operator>.</operator><name>video_context</name></name> <operator>=</operator> <name>d3dvidctx</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>d3dviddev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_QueryInterface</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_ID3D11VideoDevice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3dviddev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"Could not Query ID3D11VideoDevice Interface. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ID3D11VideoContext_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hw</name><operator>.</operator><name>video_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3ddec</name></name> <operator>=</operator> <name>d3dviddev</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ReleaseInputList</name><parameter_list>(<parameter><decl><type><name>input_list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DxGetInputList</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>va</name></decl></parameter>, <parameter><decl><type><name>input_list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_va_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>va</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>input_count</name> <init>= <expr><call><name>ID3D11VideoDevice_GetVideoDecoderProfileCount</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3ddec</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>input_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>input_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_list</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>list</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>pf_release</name></name> <operator>=</operator> <name>ReleaseInputList</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>input_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_GetVideoDecoderProfile</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3ddec</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_list</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"GetVideoDecoderProfile %d failed. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseInputList</name><argument_list>(<argument><expr><name>p_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>D3D11_FindDXGIFormat</name><parameter_list>(<parameter><decl><type><name>DXGI_FORMAT</name></type> <name>dxgi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>output_format</name> <init>= <expr><call><name>GetRenderFormatList</name><argument_list>()</argument_list></call></expr></init></decl>;</init>
<condition><expr><name><name>output_format</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>output_format</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>output_format</name><operator>-&gt;</operator><name>formatTexture</name></name> <operator>==</operator> <name>dxgi</name> <operator>&amp;&amp;</operator>
<call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name><name>output_format</name><operator>-&gt;</operator><name>fourcc</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>output_format</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DxSetupOutput</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>va</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>directx_va_mode_t</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_va_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>va</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>BOOL</name></type> <name>bSupported</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>format</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>format</name> <operator>&lt;</operator> <literal type="number">188</literal></expr>;</condition> <incr><expr><name>format</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_CheckVideoDecoderFormat</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3ddec</name></name></expr></argument>, <argument><expr><name><name>mode</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bSupported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>bSupported</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"format %s is supported for output"</literal></expr></argument>, <argument><expr><call><name>DxgiFormatToStr</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>directx_va_canUseDecoder</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>adapterDesc</name><operator>.</operator><name>VendorId</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>adapterDesc</name><operator>.</operator><name>DeviceId</name></name></expr></argument>,
<argument><expr><name><name>mode</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>WDDM</name><operator>.</operator><name>build</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"GPU blacklisted for %s codec"</literal></expr></argument>, <argument><expr><name><name>mode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name><name>processorInput</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>decoder_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>supportFlags</name> <init>= <expr><name>D3D11_FORMAT_SUPPORT_DECODER_OUTPUT</name> <operator>|</operator> <name>D3D11_FORMAT_SUPPORT_SHADER_LOAD</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>decoder_format</name> <operator>=</operator> <call><name>FindD3D11Format</name><argument_list>( <argument><expr><name>va</name></expr></argument>, <argument><expr><name><name>va</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_RGB_FORMAT</name><operator>|</operator><name>D3D11_YUV_FORMAT</name></expr></argument>,
<argument><expr><name><name>mode</name><operator>-&gt;</operator><name>bit_depth</name></name></expr></argument>, <argument><expr><name><name>mode</name><operator>-&gt;</operator><name>log2_chroma_h</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>mode</name><operator>-&gt;</operator><name>log2_chroma_w</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>D3D11_CHROMA_GPU</name></expr></argument>, <argument><expr><name>supportFlags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>decoder_format</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>decoder_format</name> <operator>=</operator> <call><name>FindD3D11Format</name><argument_list>( <argument><expr><name>va</name></expr></argument>, <argument><expr><name><name>va</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_RGB_FORMAT</name><operator>|</operator><name>D3D11_YUV_FORMAT</name></expr></argument>,
<argument><expr><name><name>mode</name><operator>-&gt;</operator><name>bit_depth</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_CHROMA_GPU</name></expr></argument>, <argument><expr><name>supportFlags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>decoder_format</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>mode</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>decoder_format</name> <operator>=</operator> <call><name>FindD3D11Format</name><argument_list>( <argument><expr><name>va</name></expr></argument>, <argument><expr><name><name>va</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_RGB_FORMAT</name><operator>|</operator><name>D3D11_YUV_FORMAT</name></expr></argument>,
<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_CHROMA_GPU</name></expr></argument>, <argument><expr><name>supportFlags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>decoder_format</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>decoder_format</name> <operator>=</operator> <call><name>FindD3D11Format</name><argument_list>( <argument><expr><name>va</name></expr></argument>, <argument><expr><name><name>va</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_RGB_FORMAT</name><operator>|</operator><name>D3D11_YUV_FORMAT</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_CHROMA_GPU</name></expr></argument>, <argument><expr><name>supportFlags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>decoder_format</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"favor decoder format %s"</literal></expr></argument>, <argument><expr><name><name>decoder_format</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>processorInput</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>decoder_format</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>decoder_format</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>decoder_format</name><operator>-&gt;</operator><name>formatTexture</name></name> <operator>!=</operator> <name>DXGI_FORMAT_NV12</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>processorInput</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>D3D11_FindDXGIFormat</name><argument_list>(<argument><expr><name>DXGI_FORMAT_NV12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>processorInput</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>D3D11_FindDXGIFormat</name><argument_list>(<argument><expr><name>DXGI_FORMAT_420_OPAQUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>processorInput</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>processorInput</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>BOOL</name></type> <name>is_supported</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_CheckVideoDecoderFormat</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3ddec</name></name></expr></argument>, <argument><expr><name><name>mode</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>, <argument><expr><name><name>processorInput</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>formatTexture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_supported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>is_supported</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"%s output is supported for decoder %s."</literal></expr></argument>, <argument><expr><call><name>DxgiFormatToStr</name><argument_list>(<argument><expr><name><name>processorInput</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>formatTexture</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>mode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"Can't get a decoder output format %s for decoder %s."</literal></expr></argument>, <argument><expr><call><name>DxgiFormatToStr</name><argument_list>(<argument><expr><name><name>processorInput</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>formatTexture</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>mode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>DeviceSupportsFormat</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><name><name>processorInput</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>formatTexture</name></expr></argument>,
<argument><expr><name>D3D11_FORMAT_SUPPORT_SHADER_LOAD</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ID3D11VideoContext_VideoProcessorBlt</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"Format %s needs a processor but is not supported"</literal></expr></argument>,
<argument><expr><call><name>DxgiFormatToStr</name><argument_list>(<argument><expr><name><name>processorInput</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>formatTexture</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>DeviceSupportsFormat</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><name><name>processorInput</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>formatTexture</name></expr></argument>,
<argument><expr><name>D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"Format %s needs a processor but is not available"</literal></expr></argument>,
<argument><expr><call><name>DxgiFormatToStr</name><argument_list>(<argument><expr><name><name>processorInput</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>formatTexture</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_DESC</name></type> <name>decoderDesc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoderDesc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decoderDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>decoderDesc</name><operator>.</operator><name>Guid</name></name> <operator>=</operator> <operator>*</operator><name><name>mode</name><operator>-&gt;</operator><name>guid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>decoderDesc</name><operator>.</operator><name>SampleWidth</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>decoderDesc</name><operator>.</operator><name>SampleHeight</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>decoderDesc</name><operator>.</operator><name>OutputFormat</name></name> <operator>=</operator> <name><name>processorInput</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>formatTexture</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>cfg_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_GetVideoDecoderConfigCount</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3ddec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoderDesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"Failed to get configuration for decoder %s. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name><name>mode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>hr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cfg_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"No decoder configuration possible for %s %dx%d"</literal></expr></argument>,
<argument><expr><call><name>DxgiFormatToStr</name><argument_list>(<argument><expr><name><name>decoderDesc</name><operator>.</operator><name>OutputFormat</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>decoderDesc</name><operator>.</operator><name>SampleWidth</name></name></expr></argument>, <argument><expr><name><name>decoderDesc</name><operator>.</operator><name>SampleHeight</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"Using output format %s for decoder %s"</literal></expr></argument>, <argument><expr><call><name>DxgiFormatToStr</name><argument_list>(<argument><expr><name><name>processorInput</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>formatTexture</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>mode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>render_fmt</name></name> <operator>=</operator> <name><name>processorInput</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"Output format from picture source not supported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CanUseDecoderPadding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_va_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<return>return <expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>adapterDesc</name><operator>.</operator><name>VendorId</name></name> <operator>!=</operator> <name>GPU_MANUFACTURER_QUALCOMM</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>DxCreateDecoderSurfaces</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>va</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>surface_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_va_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>va</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID3D10Multithread</name> <modifier>*</modifier></type><name>pMultithread</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_QueryInterface</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_ID3D10Multithread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pMultithread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ID3D10Multithread_SetMultithreadProtected</name><argument_list>(<argument><expr><name>pMultithread</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ID3D10Multithread_Release</name><argument_list>(<argument><expr><name>pMultithread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VLC_WINSTORE_APP</name></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name> <operator>&gt;</operator> <literal type="number">2304</literal> <operator>||</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name> <operator>&gt;</operator> <literal type="number">2304</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>isXboxHardware</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"%dx%d resolution not supported by your hardware"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC</name></type> <name>viewDesc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>viewDesc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>viewDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>viewDesc</name><operator>.</operator><name>DecodeProfile</name></name> <operator>=</operator> <operator>*</operator><name><name>sys</name><operator>-&gt;</operator><name>selected_decoder</name><operator>-&gt;</operator><name>guid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>viewDesc</name><operator>.</operator><name>ViewDimension</name></name> <operator>=</operator> <name>D3D11_VDOV_DIMENSION_TEXTURE2D</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>texDesc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>texDesc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>texDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Width</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Height</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>MipLevels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Format</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>render_fmt</name><operator>-&gt;</operator><name>formatTexture</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>SampleDesc</name><operator>.</operator><name>Count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>MiscFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>ArraySize</name></name> <operator>=</operator> <name>surface_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>Usage</name></name> <operator>=</operator> <name>D3D11_USAGE_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>BindFlags</name></name> <operator>=</operator> <name>D3D11_BIND_DECODER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>CPUAccessFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DeviceSupportsFormat</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><name><name>texDesc</name><operator>.</operator><name>Format</name></name></expr></argument>, <argument><expr><name>D3D11_FORMAT_SUPPORT_SHADER_LOAD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>texDesc</name><operator>.</operator><name>BindFlags</name></name> <operator>|=</operator> <name>D3D11_BIND_SHADER_RESOURCE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ID3D11Texture2D</name> <modifier>*</modifier></type><name>p_texture</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CreateTexture2D</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texDesc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_texture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"CreateTexture2D %zu failed. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>surface_count</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>surface_idx</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>surface_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>surface_idx</name> <operator>&lt;</operator> <name>surface_count</name></expr>;</condition> <incr><expr><name>surface_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>viewDesc</name><operator>.</operator><name>Texture2D</name><operator>.</operator><name>ArraySlice</name></name> <operator>=</operator> <name>surface_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_CreateVideoDecoderOutputView</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3ddec</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>ID3D11Resource</name><operator>*</operator><operator>)</operator> <name>p_texture</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>viewDesc</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>hw_surface</name><index>[<expr><name>surface_idx</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"CreateVideoDecoderOutputView %d failed. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>surface_idx</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ID3D11Texture2D_Release</name><argument_list>(<argument><expr><name>p_texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>texDesc</name><operator>.</operator><name>BindFlags</name></name> <operator>&amp;</operator> <name>D3D11_BIND_SHADER_RESOURCE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ID3D11Texture2D</name> <modifier>*</modifier></type><name><name>textures</name><index>[<expr><name>D3D11_MAX_SHADER_VIEW</name></expr>]</index></name> <init>= <expr><block>{<expr><name>p_texture</name></expr>, <expr><name>p_texture</name></expr>, <expr><name>p_texture</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>D3D11_AllocateResourceView</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>render_fmt</name></name></expr></argument>, <argument><expr><name>textures</name></expr></argument>, <argument><expr><name>surface_idx</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>renderSrc</name><index>[<expr><name>surface_idx</name> <operator>*</operator> <name>D3D11_MAX_SHADER_VIEW</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ID3D11Texture2D_Release</name><argument_list>(<argument><expr><name>p_texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"ID3D11VideoDecoderOutputView succeed with %zu surfaces (%dx%d)"</literal></expr></argument>,
<argument><expr><name>surface_count</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_DESC</name></type> <name>decoderDesc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoderDesc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decoderDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>decoderDesc</name><operator>.</operator><name>Guid</name></name> <operator>=</operator> <operator>*</operator><name><name>sys</name><operator>-&gt;</operator><name>selected_decoder</name><operator>-&gt;</operator><name>guid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>decoderDesc</name><operator>.</operator><name>SampleWidth</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>decoderDesc</name><operator>.</operator><name>SampleHeight</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>decoderDesc</name><operator>.</operator><name>OutputFormat</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>render_fmt</name><operator>-&gt;</operator><name>formatTexture</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>cfg_count</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_GetVideoDecoderConfigCount</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3ddec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoderDesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"GetVideoDecoderConfigCount failed. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_CONFIG</name></type> <name><name>cfg_list</name><index>[<expr><name>cfg_count</name></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cfg_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_GetVideoDecoderConfig</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3ddec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoderDesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfg_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"GetVideoDecoderConfig failed. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"we got %d decoder configurations"</literal></expr></argument>, <argument><expr><name>cfg_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>cfg_score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cfg_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>D3D11_VIDEO_DECODER_CONFIG</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><operator>&amp;</operator><name><name>cfg_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"configuration[%d] ConfigBitstreamRaw %d"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>ConfigBitstreamRaw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>-&gt;</operator><name>ConfigBitstreamRaw</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>&amp;&amp;</operator> <name><name>cfg</name><operator>-&gt;</operator><name>ConfigBitstreamRaw</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cfg</name><operator>-&gt;</operator><name>guidConfigBitstreamEncryption</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>DXVA2_NoEncrypt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cfg_score</name> <operator>&lt;</operator> <name>score</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cfg</name></name> <operator>=</operator> <operator>*</operator><name>cfg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cfg_score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>cfg_score</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"Failed to find a supported decoder configuration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>ID3D11VideoDecoder</name> <modifier>*</modifier></type><name>decoder</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_CreateVideoDecoder</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3ddec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoderDesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"ID3D11VideoDevice_CreateVideoDecoder failed. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hw</name><operator>.</operator><name>decoder</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hw</name><operator>.</operator><name>decoder</name></name> <operator>=</operator> <name>decoder</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"DxCreateDecoderSurfaces succeed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DxDestroySurfaces</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_va_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>hw</name><operator>.</operator><name>decoder</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11VideoDecoder_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hw</name><operator>.</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>hw_surface</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>hw</name><operator>.</operator><name>surface_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>D3D11_MAX_SHADER_VIEW</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>renderSrc</name><index>[<expr><name>i</name><operator>*</operator><name>D3D11_MAX_SHADER_VIEW</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11ShaderResourceView_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>renderSrc</name><index>[<expr><name>i</name><operator>*</operator><name>D3D11_MAX_SHADER_VIEW</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ID3D11VideoDecoderOutputView_Release</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hw_surface</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>d3ddec</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11VideoDevice_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3ddec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>hw</name><operator>.</operator><name>video_context</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11VideoContext_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hw</name><operator>.</operator><name>video_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
