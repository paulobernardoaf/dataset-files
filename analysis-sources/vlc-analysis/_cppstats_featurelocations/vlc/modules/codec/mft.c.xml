<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\mft.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WINVER</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINVER</name></cpp:macro> <cpp:value>0x0601</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITGUID</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STDCALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDCALL</name></cpp:macro> <cpp:value>__stdcall</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winapifamily.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WINAPI_FAMILY</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINAPI_FAMILY</name></cpp:macro> <cpp:value>WINAPI_FAMILY_DESKTOP_APP</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../packetizer/h264_nal.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_VIDEOINFOHEADER_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codecs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mftransform.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mferror.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfobjects.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Media Foundation Transform decoder"</literal>)</argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"mft"</literal></argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"video decoder"</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_VCODEC</argument>)</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"mft"</literal></argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"audio decoder"</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>mfplat_dll</name></decl>;</decl_stmt>
<function_decl><type><name>HRESULT</name></type> (<name>STDCALL</name> <modifier>*</modifier><name>fptr_MFTEnumEx</name>)<parameter_list>(<parameter><decl><type><name>GUID</name></type> <name>guidCategory</name></decl></parameter>, <parameter><decl><type><name>UINT32</name></type> <name>Flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MFT_REGISTER_TYPE_INFO</name> <modifier>*</modifier></type><name>pInputType</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MFT_REGISTER_TYPE_INFO</name> <modifier>*</modifier></type><name>pOutputType</name></decl></parameter>,
<parameter><decl><type><name>IMFActivate</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>pppMFTActivate</name></decl></parameter>, <parameter><decl><type><name>UINT32</name> <modifier>*</modifier></type><name>pcMFTActivate</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>HRESULT</name></type> (<name>STDCALL</name> <modifier>*</modifier><name>fptr_MFCreateSample</name>)<parameter_list>(<parameter><decl><type><name>IMFSample</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppIMFSample</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>HRESULT</name></type> (<name>STDCALL</name> <modifier>*</modifier><name>fptr_MFCreateMemoryBuffer</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>cbMaxLength</name></decl></parameter>, <parameter><decl><type><name>IMFMediaBuffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppBuffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>HRESULT</name></type> (<name>STDCALL</name> <modifier>*</modifier><name>fptr_MFCreateAlignedMemoryBuffer</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>cbMaxLength</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>fAlignmentFlags</name></decl></parameter>, <parameter><decl><type><name>IMFMediaBuffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppBuffer</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>MFHandle</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>MFHandle</name></type> <name>mf_handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMFTransform</name> <modifier>*</modifier></type><name>mft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name><modifier>*</modifier></type> <name>major_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name><modifier>*</modifier></type> <name>subtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>custom_subtype</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>is_async</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IMFMediaEventGenerator</name> <modifier>*</modifier></type><name>event_generator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pending_input_events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pending_output_events</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>DWORD</name></type> <name>input_stream_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IMFMediaType</name> <modifier>*</modifier></type><name>input_type</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>DWORD</name></type> <name>output_stream_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IMFSample</name> <modifier>*</modifier></type><name>output_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IMFMediaType</name> <modifier>*</modifier></type><name>output_type</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>nal_length_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_channels_maps</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">0</literal></expr>,
<expr><name>AOUT_CHAN_CENTER</name></expr>,
<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>,
<expr><name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>,
<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_REARLEFT</name>
<operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>,
<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>
<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>,
<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>
<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,
<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>
<operator>|</operator> <name>AOUT_CHAN_REARCENTER</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name>
<operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,
<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_REARLEFT</name>
<operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name>
<operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MF_E_TRANSFORM_NEED_MORE_INPUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MF_E_TRANSFORM_NEED_MORE_INPUT</name></cpp:macro> <cpp:value>_HRESULT_TYPEDEF_(0xc00d6d72)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MF_E_TRANSFORM_STREAM_CHANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MF_E_TRANSFORM_STREAM_CHANGE</name></cpp:macro> <cpp:value>_HRESULT_TYPEDEF_(0xc00d6d61)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MF_E_NO_EVENTS_AVAILABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MF_E_NO_EVENTS_AVAILABLE</name></cpp:macro> <cpp:value>_HRESULT_TYPEDEF_(0xC00D3E80L)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MF_EVENT_FLAG_NO_WAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MF_EVENT_FLAG_NO_WAIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<enum>enum
<block>{
<decl><name>VLC_METransformUnknown</name> <init>= <expr><literal type="number">600</literal></expr></init></decl>,
<decl><name>VLC_METransformNeedInput</name></decl>,
<decl><name>VLC_METransformHaveOutput</name></decl>,
<decl><name>VLC_METransformDrainComplete</name></decl>,
<decl><name>VLC_METransformMarker</name></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>guid</name></decl>;</decl_stmt>
}</block></struct></type> <name>pair_format_guid</name>;</typedef>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>pair_format_guid</name></type> <name><name>video_format_table</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><name>VLC_CODEC_H264</name></expr>, <expr><operator>&amp;</operator><name>MFVideoFormat_H264</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_MJPG</name></expr>, <expr><operator>&amp;</operator><name>MFVideoFormat_MJPG</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_WMV1</name></expr>, <expr><operator>&amp;</operator><name>MFVideoFormat_WMV1</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_WMV2</name></expr>, <expr><operator>&amp;</operator><name>MFVideoFormat_WMV2</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_WMV3</name></expr>, <expr><operator>&amp;</operator><name>MFVideoFormat_WMV3</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_VC1</name></expr>, <expr><operator>&amp;</operator><name>MFVideoFormat_WVC1</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>DEFINE_MEDIATYPE_GUID</name> <argument_list>(<argument><expr><name>MFVideoFormat_L8</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>pair_format_guid</name></type> <name><name>d3d_format_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>VLC_CODEC_RGB32</name></expr>, <expr><operator>&amp;</operator><name>MFVideoFormat_RGB32</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_RGB24</name></expr>, <expr><operator>&amp;</operator><name>MFVideoFormat_RGB24</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_RGBA</name></expr>, <expr><operator>&amp;</operator><name>MFVideoFormat_ARGB32</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_GREY</name></expr>, <expr><operator>&amp;</operator><name>MFVideoFormat_L8</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64_VERSION_MAJOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__MINGW64_VERSION_MAJOR</name> <operator>&lt;</operator> <literal type="number">4</literal></expr></cpp:if>
<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>MFAudioFormat_Dolby_AC3</name></expr></argument>, <argument><expr><literal type="number">0xe06d802c</literal></expr></argument>, <argument><expr><literal type="number">0xdb46</literal></expr></argument>, <argument><expr><literal type="number">0x11cf</literal></expr></argument>, <argument><expr><literal type="number">0xb4</literal></expr></argument>, <argument><expr><literal type="number">0xd1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x5f</literal></expr></argument>, <argument><expr><literal type="number">0x6c</literal></expr></argument>, <argument><expr><literal type="number">0xbb</literal></expr></argument>, <argument><expr><literal type="number">0xea</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>pair_format_guid</name></type> <name><name>audio_format_table</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><name>VLC_CODEC_MPGA</name></expr>, <expr><operator>&amp;</operator><name>MFAudioFormat_MPEG</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_MP3</name></expr>, <expr><operator>&amp;</operator><name>MFAudioFormat_MP3</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_DTS</name></expr>, <expr><operator>&amp;</operator><name>MFAudioFormat_DTS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_MP4A</name></expr>, <expr><operator>&amp;</operator><name>MFAudioFormat_AAC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_WMA2</name></expr>, <expr><operator>&amp;</operator><name>MFAudioFormat_WMAudioV8</name></expr> }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_A52</name></expr>, <expr><operator>&amp;</operator><name>MFAudioFormat_Dolby_AC3</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>FormatToGUID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pair_format_guid</name></type> <name><name>table</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fourcc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fourcc</name> <operator>==</operator> <name>fourcc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>guid</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_fourcc_t</name></type> <name>GUIDToFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pair_format_guid</name></type> <name><name>table</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUID</name><modifier>*</modifier></type> <name>guid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fourcc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>guid</name></expr></argument>, <argument><expr><name>guid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fourcc</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>CODECAPI_AVLowLatencyMode</name></expr></argument>, <argument><expr><literal type="number">0x9c27891a</literal></expr></argument>, <argument><expr><literal type="number">0xed7a</literal></expr></argument>, <argument><expr><literal type="number">0x40e1</literal></expr></argument>, <argument><expr><literal type="number">0x88</literal></expr></argument>, <argument><expr><literal type="number">0xe8</literal></expr></argument>, <argument><expr><literal type="number">0xb2</literal></expr></argument>, <argument><expr><literal type="number">0x27</literal></expr></argument>, <argument><expr><literal type="number">0x27</literal></expr></argument>, <argument><expr><literal type="number">0xa0</literal></expr></argument>, <argument><expr><literal type="number">0x24</literal></expr></argument>, <argument><expr><literal type="number">0xee</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SetInputType</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>stream_id</name></decl></parameter>, <parameter><decl><type><name>IMFMediaType</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IMFMediaType</name> <modifier>*</modifier></type><name>input_media_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>input_type_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>!</operator><name>found</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFTransform_GetInputAvailableType</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_media_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>MF_E_NO_MORE_TYPES</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>hr</name> <operator>==</operator> <name>MF_E_TRANSFORM_TYPE_NOT_SET</name></expr>)</condition>
<block>{<block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>subtype</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaType_GetGUID</name><argument_list>(<argument><expr><name>input_media_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_MT_SUBTYPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subtype</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtype</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>input_type_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>IMFMediaType_Release</name><argument_list>(<argument><expr><name>input_media_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>input_media_type</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFTransform_GetInputAvailableType</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>input_type_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_media_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>UINT64</name></type> <name>width</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT64</name></type> <name>height</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT64</name></type> <name>frame_size</name> <init>= <expr><operator>(</operator><name>width</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>height</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaType_SetUINT64</name><argument_list>(<argument><expr><name>input_media_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_MT_FRAME_SIZE</name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>UINT64</name></type> <name>frame_ratio_num</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT64</name></type> <name>frame_ratio_dem</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>frame_ratio_num</name> <operator>&amp;&amp;</operator> <name>frame_ratio_dem</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>UINT64</name></type> <name>frame_rate</name> <init>= <expr><operator>(</operator><name>frame_ratio_num</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>frame_ratio_dem</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaType_SetUINT64</name><argument_list>(<argument><expr><name>input_media_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_MT_FRAME_RATE</name></expr></argument>, <argument><expr><name>frame_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaType_SetUINT32</name><argument_list>(<argument><expr><name>input_media_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_MT_ORIGINAL_WAVE_FORMAT_TAG</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtype</name><operator>-&gt;</operator><name>Data1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaType_SetUINT32</name><argument_list>(<argument><expr><name>input_media_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_MT_AUDIO_SAMPLES_PER_SECOND</name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaType_SetUINT32</name><argument_list>(<argument><expr><name>input_media_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_MT_AUDIO_NUM_CHANNELS</name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaType_SetUINT32</name><argument_list>(<argument><expr><name>input_media_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_MT_AUDIO_BITS_PER_SAMPLE</name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaType_SetUINT32</name><argument_list>(<argument><expr><name>input_media_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_MT_AUDIO_BLOCK_ALIGNMENT</name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_bitrate</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaType_SetUINT32</name><argument_list>(<argument><expr><name>input_media_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_MT_AUDIO_AVG_BYTES_PER_SECOND</name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>UINT32</name></type> <name>blob_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaType_GetBlobSize</name><argument_list>(<argument><expr><name>input_media_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_MT_USER_DATA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blob_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>MF_E_ATTRIBUTENOTFOUND</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaType_SetBlob</name><argument_list>(<argument><expr><name>input_media_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_MT_USER_DATA</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>UINT8</name><operator>*</operator><operator>)</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFTransform_SetInputType</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>input_media_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>input_media_type</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Error in SetInputType()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>input_media_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IMFMediaType_Release</name><argument_list>(<argument><expr><name>input_media_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SetOutputType</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>stream_id</name></decl></parameter>, <parameter><decl><type><name>IMFMediaType</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IMFMediaType</name> <modifier>*</modifier></type><name>output_media_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><name>int</name></type> <name>output_type_index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>!</operator><name>found</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFTransform_GetOutputAvailableType</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_media_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>MF_E_NO_MORE_TYPES</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>hr</name> <operator>==</operator> <name>MF_E_TRANSFORM_TYPE_NOT_SET</name></expr>)</condition>
<block>{<block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>subtype</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaType_GetGUID</name><argument_list>(<argument><expr><name>output_media_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_MT_SUBTYPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subtype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MFVideoFormat_YV12</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subtype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MFVideoFormat_I420</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>


<if type="elseif">else if<condition>(<expr><name><name>output_type_index</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>GUIDToFormat</name><operator>(</operator><name>d3d_format_table</name>, <operator>&amp;</operator><name>subtype</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>output_type_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>UINT32</name></type> <name>bits_per_sample</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaType_GetUINT32</name><argument_list>(<argument><expr><name>output_media_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_MT_AUDIO_BITS_PER_SAMPLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bits_per_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bits_per_sample</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subtype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MFAudioFormat_Float</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>output_type_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>IMFMediaType_Release</name><argument_list>(<argument><expr><name>output_media_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>output_media_type</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>




<if_stmt><if>if<condition>(<expr><name>output_type_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>output_type_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFTransform_GetOutputAvailableType</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>output_type_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_media_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFTransform_SetOutputType</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>output_media_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>subtype</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaType_GetGUID</name><argument_list>(<argument><expr><name>output_media_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_MT_SUBTYPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>fcc</name> <init>= <expr><call><name>GUIDToFormat</name><argument_list>(<argument><expr><name>d3d_format_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subtype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>fcc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_BOTTOM_LEFT</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fcc</name> <operator>=</operator> <call><name>vlc_fourcc_GetCodec</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name><name>subtype</name><operator>.</operator><name>Data1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>fcc</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>UINT32</name></type> <name>bitspersample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaType_GetUINT32</name><argument_list>(<argument><expr><name>output_media_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_MT_AUDIO_BITS_PER_SAMPLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitspersample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>bitspersample</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <name>bitspersample</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>UINT32</name></type> <name>channels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaType_GetUINT32</name><argument_list>(<argument><expr><name>output_media_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_MT_AUDIO_NUM_CHANNELS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>channels</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>UINT32</name></type> <name>rate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaType_GetUINT32</name><argument_list>(<argument><expr><name>output_media_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_MT_AUDIO_SAMPLES_PER_SECOND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>rate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wf_tag_to_fourcc</name><argument_list>(<argument><expr><name><name>subtype</name><operator>.</operator><name>Data1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fourcc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <call><name>vlc_fourcc_GetCodecAudio</name><argument_list>(<argument><expr><name>fourcc</name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name><name>pi_channels_maps</name><index>[<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>output_media_type</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Error in SetOutputType()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>output_media_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IMFMediaType_Release</name><argument_list>(<argument><expr><name>output_media_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AllocateInputSample</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>stream_id</name></decl></parameter>, <parameter><decl><type><name>IMFSample</name><modifier>*</modifier><modifier>*</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MFHandle</name> <modifier>*</modifier></type><name>mf</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>mf_handle</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IMFSample</name> <modifier>*</modifier></type><name>input_sample</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MFT_INPUT_STREAM_INFO</name></type> <name>input_info</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFTransform_GetInputStreamInfo</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>mf</name><operator>-&gt;</operator><name>fptr_MFCreateSample</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>IMFMediaBuffer</name> <modifier>*</modifier></type><name>input_media_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>allocation_size</name> <init>= <expr><call><name>__MAX</name><argument_list>(<argument><expr><name><name>input_info</name><operator>.</operator><name>cbSize</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>mf</name><operator>-&gt;</operator><name>fptr_MFCreateMemoryBuffer</name></name><argument_list>(<argument><expr><name>allocation_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_media_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFSample_AddBuffer</name><argument_list>(<argument><expr><name>input_sample</name></expr></argument>, <argument><expr><name>input_media_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IMFMediaBuffer_Release</name><argument_list>(<argument><expr><name>input_media_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>input_sample</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Error in AllocateInputSample()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>input_sample</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IMFSample_Release</name><argument_list>(<argument><expr><name>input_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>input_media_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IMFMediaBuffer_Release</name><argument_list>(<argument><expr><name>input_media_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AllocateOutputSample</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>stream_id</name></decl></parameter>, <parameter><decl><type><name>IMFSample</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MFHandle</name> <modifier>*</modifier></type><name>mf</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>mf_handle</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IMFSample</name> <modifier>*</modifier></type><name>output_sample</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MFT_OUTPUT_STREAM_INFO</name></type> <name>output_info</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFTransform_GetOutputStreamInfo</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output_info</name><operator>.</operator><name>dwFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>MFT_OUTPUT_STREAM_PROVIDES_SAMPLES</name> <operator>|</operator> <name>MFT_OUTPUT_STREAM_CAN_PROVIDE_SAMPLES</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>expected_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>expected_flags</name> <operator>|=</operator> <name>MFT_OUTPUT_STREAM_WHOLE_SAMPLES</name>
<operator>|</operator> <name>MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER</name>
<operator>|</operator> <name>MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>output_info</name><operator>.</operator><name>dwFlags</name></name> <operator>&amp;</operator> <name>expected_flags</name><operator>)</operator> <operator>!=</operator> <name>expected_flags</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>mf</name><operator>-&gt;</operator><name>fptr_MFCreateSample</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>IMFMediaBuffer</name> <modifier>*</modifier></type><name>output_media_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>allocation_size</name> <init>= <expr><name><name>output_info</name><operator>.</operator><name>cbSize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>alignment</name> <init>= <expr><name><name>output_info</name><operator>.</operator><name>cbAlignment</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>alignment</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>mf</name><operator>-&gt;</operator><name>fptr_MFCreateAlignedMemoryBuffer</name></name><argument_list>(<argument><expr><name>allocation_size</name></expr></argument>, <argument><expr><name>alignment</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_media_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>mf</name><operator>-&gt;</operator><name>fptr_MFCreateMemoryBuffer</name></name><argument_list>(<argument><expr><name>allocation_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_media_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFSample_AddBuffer</name><argument_list>(<argument><expr><name>output_sample</name></expr></argument>, <argument><expr><name>output_media_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>output_sample</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Error in AllocateOutputSample()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>output_sample</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IMFSample_Release</name><argument_list>(<argument><expr><name>output_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProcessInputStream</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>stream_id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IMFSample</name> <modifier>*</modifier></type><name>input_sample</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AllocateInputSample</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_sample</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>IMFMediaBuffer</name> <modifier>*</modifier></type><name>input_media_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFSample_GetBufferByIndex</name><argument_list>(<argument><expr><name>input_sample</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_media_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>buffer_start</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaBuffer_Lock</name><argument_list>(<argument><expr><name>input_media_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer_start</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_H264</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>h264_AVC_to_AnnexB</name><argument_list>(<argument><expr><name>buffer_start</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>nal_length_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaBuffer_Unlock</name><argument_list>(<argument><expr><name>input_media_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaBuffer_SetCurrentLength</name><argument_list>(<argument><expr><name>input_media_buffer</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>ts</name> <init>= <expr><ternary><condition><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr> </then><else>: <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFSample_SetSampleTime</name><argument_list>(<argument><expr><name>input_sample</name></expr></argument>, <argument><expr><call><name>MSFTIME_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFTransform_ProcessInput</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>input_sample</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>IMFMediaBuffer_Release</name><argument_list>(<argument><expr><name>input_media_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IMFSample_Release</name><argument_list>(<argument><expr><name>input_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Error in ProcessInputStream()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>input_sample</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IMFSample_Release</name><argument_list>(<argument><expr><name>input_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>CopyPackedBufferToPicture</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>==</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>plane_size</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <name>plane_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_line</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</condition> <incr><expr><name>i_line</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProcessOutputStream</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>stream_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>aout_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>output_status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MFT_OUTPUT_DATA_BUFFER</name></type> <name>output_buffer</name> <init>= <expr><block>{ <expr><name>stream_id</name></expr>, <expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_sample</name></name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFTransform_ProcessOutput</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>output_buffer</name><operator>.</operator><name>pEvents</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IMFCollection_Release</name><argument_list>(<argument><expr><name><name>output_buffer</name><operator>.</operator><name>pEvents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>IMFSample</name> <modifier>*</modifier></type><name>output_sample</name> <init>= <expr><name><name>output_buffer</name><operator>.</operator><name>pSample</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>S_OK</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output_sample</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>LONGLONG</name></type> <name>sample_time</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFSample_GetSampleTime</name><argument_list>(<argument><expr><name>output_sample</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sample_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>samp_time</name> <init>= <expr><call><name>VLC_TICK_FROM_MSFTIME</name><argument_list>(<argument><expr><name>sample_time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>total_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFSample_GetTotalLength</name><argument_list>(<argument><expr><name>output_sample</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>total_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>decoder_UpdateVideoFormat</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>picture</name> <operator>=</operator> <call><name>decoder_NewPicture</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>picture</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>UINT32</name></type> <name>interlaced</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFSample_GetUINT32</name><argument_list>(<argument><expr><name>output_sample</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MFSampleExtension_Interlaced</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>interlaced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>b_progressive</name></name> <operator>=</operator> <operator>!</operator><name>interlaced</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <name>samp_time</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>decoder_UpdateAudioFormat</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>samples</name> <init>= <expr><name>total_length</name> <operator>/</operator> <operator>(</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>*</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>aout_buffer</name> <operator>=</operator> <call><name>decoder_NewAudioBuffer</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>aout_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>aout_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>total_length</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>aout_buffer</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>samp_time</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>IMFMediaBuffer</name> <modifier>*</modifier></type><name>output_media_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFSample_GetBufferByIndex</name><argument_list>(<argument><expr><name>output_sample</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_media_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>buffer_start</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaBuffer_Lock</name><argument_list>(<argument><expr><name>output_media_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CopyPackedBufferToPicture</name><argument_list>(<argument><expr><name>picture</name></expr></argument>, <argument><expr><name>buffer_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>buffer_start</name></expr></argument>, <argument><expr><name>total_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaBuffer_Unlock</name><argument_list>(<argument><expr><name>output_media_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IMFSample_Release</name><argument_list>(<argument><expr><name>output_media_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_sample</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaBuffer_SetCurrentLength</name><argument_list>(<argument><expr><name>output_media_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>IMFSample_Release</name><argument_list>(<argument><expr><name>output_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>hr</name> <operator>==</operator> <name>MF_E_TRANSFORM_STREAM_CHANGE</name> <operator>||</operator> <name>hr</name> <operator>==</operator> <name>MF_E_TRANSFORM_TYPE_NOT_SET</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_type</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IMFMediaType_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SetOutputType</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_stream_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>output_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_sample</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IMFSample_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_sample</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>AllocateOutputSample</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>output_sample</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>hr</name> <operator>==</operator> <name>MF_E_TRANSFORM_NEED_MORE_INPUT</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Unexpected error in IMFTransform::ProcessOutput: %#lx"</literal></expr></argument>,
<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decoder_QueueVideo</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decoder_QueueAudio</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>aout_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Error in ProcessOutputStream()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>picture</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>aout_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>aout_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeSync</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_block</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ProcessOutputStream</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_stream_id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ProcessInputStream</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>input_stream_id</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Error in DecodeSync()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type> <name>DequeueMediaEvent</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMFMediaEvent</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaEventGenerator_GetEvent</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>event_generator</name></name></expr></argument>, <argument><expr><name>MF_EVENT_FLAG_NO_WAIT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>hr</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>MediaEventType</name></type> <name>event_type</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFMediaEvent_GetType</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IMFMediaEvent_Release</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>hr</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>event_type</name> <operator>==</operator> <name>VLC_METransformNeedInput</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pending_input_events</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>event_type</name> <operator>==</operator> <name>VLC_METransformHaveOutput</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pending_output_events</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Unsupported asynchronous event."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeAsync</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_block</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><operator>(</operator><name>hr</name> <operator>=</operator> <call><name>DequeueMediaEvent</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>MF_E_NO_EVENTS_AVAILABLE</name> <operator>&amp;&amp;</operator> <call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pending_output_events</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pending_output_events</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ProcessOutputStream</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_stream_id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pending_input_events</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>DequeueMediaEvent</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>MF_E_NO_EVENTS_AVAILABLE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pending_output_events</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pending_output_events</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ProcessOutputStream</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_stream_id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pending_input_events</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ProcessInputStream</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>input_stream_id</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Error in DecodeAsync()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DestroyMFT</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>InitializeMFT</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMFAttributes</name> <modifier>*</modifier></type><name>attributes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFTransform_GetAttributes</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>E_NOTIMPL</name> <operator>&amp;&amp;</operator> <call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>UINT32</name></type> <name>is_async</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFAttributes_GetUINT32</name><argument_list>(<argument><expr><name>attributes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_TRANSFORM_ASYNC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>MF_E_ATTRIBUTENOTFOUND</name> <operator>&amp;&amp;</operator> <call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>is_async</name></name> <operator>=</operator> <name>is_async</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>is_async</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFAttributes_SetUINT32</name><argument_list>(<argument><expr><name>attributes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MF_TRANSFORM_ASYNC_UNLOCK</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFTransform_QueryInterface</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IMFMediaEventGenerator</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>event_generator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>input_streams_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>output_streams_count</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFTransform_GetStreamCount</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_streams_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_streams_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>input_streams_count</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>output_streams_count</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"MFT decoder should have 1 input stream and 1 output stream."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFTransform_GetStreamIDs</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>input_stream_id</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>output_stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>E_NOTIMPL</name></expr>)</condition>
<block>{<block_content>






<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>input_stream_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_stream_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SetInputType</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>input_stream_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>input_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SetOutputType</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_stream_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>output_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>input_type</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>SetInputType</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>input_stream_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>input_type</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>input_type</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFTransform_ProcessMessage</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr></argument>, <argument><expr><name>MFT_MESSAGE_NOTIFY_BEGIN_STREAMING</name></expr></argument>, <argument><expr><operator>(</operator><name>ULONG_PTR</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFTransform_ProcessMessage</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr></argument>, <argument><expr><name>MFT_MESSAGE_NOTIFY_START_OF_STREAM</name></expr></argument>, <argument><expr><operator>(</operator><name>ULONG_PTR</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_H264</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>IMFAttributes_SetUINT32</name><argument_list>(<argument><expr><name>attributes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CODECAPI_AVLowLatencyMode</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>h264_isavcC</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>h264_avcC_to_AnnexB_NAL</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>nal_length_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>buf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name>i_buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Error in InitializeMFT()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DestroyMFT</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DestroyMFT</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>event_generator</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IMFMediaEventGenerator_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>event_generator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>input_type</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IMFMediaType_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>input_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_sample</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>IMFMediaBuffer</name> <modifier>*</modifier></type><name>output_media_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>IMFSample_GetBufferByIndex</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_sample</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_media_buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IMFSample_Release</name><argument_list>(<argument><expr><name>output_media_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>IMFSample_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_type</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IMFMediaType_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IMFTransform_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>event_generator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>input_type</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_sample</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output_type</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FindMFT</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MFHandle</name> <modifier>*</modifier></type><name>mf</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>mf_handle</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>GUID</name></type> <name>category</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>category</name> <operator>=</operator> <name>MFT_CATEGORY_VIDEO_DECODER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>major_type</name></name> <operator>=</operator> <operator>&amp;</operator><name>MFMediaType_Video</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtype</name></name> <operator>=</operator> <call><name>FormatToGUID</name><argument_list>(<argument><expr><name>video_format_table</name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>subtype</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>custom_subtype</name></name> <operator>=</operator> <name>MFVideoFormat_Base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>custom_subtype</name><operator>.</operator><name>Data1</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtype</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>custom_subtype</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>category</name> <operator>=</operator> <name>MFT_CATEGORY_AUDIO_DECODER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>major_type</name></name> <operator>=</operator> <operator>&amp;</operator><name>MFMediaType_Audio</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtype</name></name> <operator>=</operator> <call><name>FormatToGUID</name><argument_list>(<argument><expr><name>audio_format_table</name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>subtype</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>UINT32</name></type> <name>flags</name> <init>= <expr><name>MFT_ENUM_FLAG_SORTANDFILTER</name> <operator>|</operator> <name>MFT_ENUM_FLAG_LOCALMFT</name>
<operator>|</operator> <name>MFT_ENUM_FLAG_SYNCMFT</name> <operator>|</operator> <name>MFT_ENUM_FLAG_ASYNCMFT</name>
<operator>|</operator> <name>MFT_ENUM_FLAG_HARDWARE</name> <operator>|</operator> <name>MFT_ENUM_FLAG_TRANSCODE_ONLY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MFT_REGISTER_TYPE_INFO</name></type> <name>input_type</name> <init>= <expr><block>{ <expr><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>major_type</name></name></expr>, <expr><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>subtype</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IMFActivate</name> <modifier>*</modifier><modifier>*</modifier></type><name>activate_objects</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT32</name></type> <name>activate_objects_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>mf</name><operator>-&gt;</operator><name>fptr_MFTEnumEx</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>activate_objects</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>activate_objects_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Found %d available MFT module(s)"</literal></expr></argument>, <argument><expr><name>activate_objects_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>activate_objects_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>UINT32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>activate_objects_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IMFActivate_ActivateObject</name><argument_list>(<argument><expr><name><name>activate_objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IMFTransform</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>mft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IMFActivate_Release</name><argument_list>(<argument><expr><name><name>activate_objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>InitializeMFT</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>activate_objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>activate_objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>LoadMFTLibrary</name><parameter_list>(<parameter><decl><type><name>MFHandle</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_WIN32_WINNT</name> <operator>&lt;</operator> <name>_WIN32_WINNT_WIN7</name> <operator>||</operator> <name>VLC_WINSTORE_APP</name> <operator>||</operator> <name>__MINGW64_VERSION_MAJOR</name> <operator>&lt;</operator> <literal type="number">6</literal></expr></cpp:if>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>mfplat_dll</name></name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"mfplat.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mf</name><operator>-&gt;</operator><name>mfplat_dll</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>fptr_MFTEnumEx</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>mfplat_dll</name></name></expr></argument>, <argument><expr><literal type="string">"MFTEnumEx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>fptr_MFCreateSample</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>mfplat_dll</name></name></expr></argument>, <argument><expr><literal type="string">"MFCreateSample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>fptr_MFCreateMemoryBuffer</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>mfplat_dll</name></name></expr></argument>, <argument><expr><literal type="string">"MFCreateMemoryBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>fptr_MFCreateAlignedMemoryBuffer</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>mfplat_dll</name></name></expr></argument>, <argument><expr><literal type="string">"MFCreateAlignedMemoryBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mf</name><operator>-&gt;</operator><name>fptr_MFTEnumEx</name></name> <operator>||</operator> <operator>!</operator><name><name>mf</name><operator>-&gt;</operator><name>fptr_MFCreateSample</name></name> <operator>||</operator> <operator>!</operator><name><name>mf</name><operator>-&gt;</operator><name>fptr_MFCreateMemoryBuffer</name></name> <operator>||</operator> <operator>!</operator><name><name>mf</name><operator>-&gt;</operator><name>fptr_MFCreateAlignedMemoryBuffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>fptr_MFTEnumEx</name></name> <operator>=</operator> <operator>&amp;</operator><name>MFTEnumEx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>fptr_MFCreateSample</name></name> <operator>=</operator> <operator>&amp;</operator><name>MFCreateSample</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>fptr_MFCreateMemoryBuffer</name></name> <operator>=</operator> <operator>&amp;</operator><name>MFCreateMemoryBuffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>fptr_MFCreateAlignedMemoryBuffer</name></name> <operator>=</operator> <operator>&amp;</operator><name>MFCreateAlignedMemoryBuffer</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>CoInitializeEx</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COINIT_MULTITHREADED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LoadMFTLibrary</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>mf_handle</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Failed to load MFT library."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FindMFT</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Could not find suitable MFT decoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>AllocateOutputSample</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>output_sample</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>is_async</name></name></expr> ?</condition><then> <expr><name>DecodeAsync</name></expr> </then><else>: <expr><name>DecodeSync</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MFHandle</name> <modifier>*</modifier></type><name>mf</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>mf_handle</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DestroyMFT</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>mfplat_dll</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>mf</name><operator>-&gt;</operator><name>mfplat_dll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
