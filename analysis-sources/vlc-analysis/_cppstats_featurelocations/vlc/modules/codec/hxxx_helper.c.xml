<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\hxxx_helper.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../packetizer/hxxx_nal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../packetizer/h264_slice.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>hxxx_helper_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,
<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_need_xvcC</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_codec</name> <operator>==</operator> <name>VLC_CODEC_H264</name> <operator>||</operator> <name>i_codec</name> <operator>==</operator> <name>VLC_CODEC_HEVC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hxxx_helper</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>p_obj</name></name> <operator>=</operator> <name>p_obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <name>i_codec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>b_need_xvcC</name></name> <operator>=</operator> <name>b_need_xvcC</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELEASE_NALS</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>max</name></type></parameter>, <parameter><type><name>release</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (size_t i = 0; i &lt;= max; ++i) { hnal = &amp;list[i]; if (hnal-&gt;b) { block_Release(hnal-&gt;b); release; } }</cpp:value></cpp:define>










<function><type><specifier>static</specifier> <name>void</name></type>
<name>helper_clear_sei</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_HEVC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_sei_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>sei_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>sei_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>sei_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_sei_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hxxx_helper_clean</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>hnal</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>i_codec</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case>
<expr_stmt><expr><call><name>RELEASE_NALS</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>sps_list</name></name></expr></argument>, <argument><expr><name>H264_SPS_ID_MAX</name></expr></argument>,
<argument><expr><call><name>h264_release_sps</name><argument_list>(<argument><expr><name><name>hnal</name><operator>-&gt;</operator><name>h264_sps</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RELEASE_NALS</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>pps_list</name></name></expr></argument>, <argument><expr><name>H264_PPS_ID_MAX</name></expr></argument>,
<argument><expr><call><name>h264_release_pps</name><argument_list>(<argument><expr><name><name>hnal</name><operator>-&gt;</operator><name>h264_pps</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>h264</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_HEVC</name></expr>:</case>
<expr_stmt><expr><call><name>RELEASE_NALS</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>vps_list</name></name></expr></argument>, <argument><expr><name>HEVC_VPS_ID_MAX</name></expr></argument>,
<argument><expr><call><name>hevc_rbsp_release_vps</name><argument_list>(<argument><expr><name><name>hnal</name><operator>-&gt;</operator><name>hevc_vps</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RELEASE_NALS</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>sps_list</name></name></expr></argument>, <argument><expr><name>HEVC_SPS_ID_MAX</name></expr></argument>,
<argument><expr><call><name>hevc_rbsp_release_sps</name><argument_list>(<argument><expr><name><name>hnal</name><operator>-&gt;</operator><name>hevc_sps</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RELEASE_NALS</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>pps_list</name></name></expr></argument>, <argument><expr><name>HEVC_PPS_ID_MAX</name></expr></argument>,
<argument><expr><call><name>hevc_rbsp_release_pps</name><argument_list>(<argument><expr><name><name>hnal</name><operator>-&gt;</operator><name>hevc_pps</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>helper_clear_sei</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>hevc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HELPER_FOREACH_NAL</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>p_nal_list</name></type></parameter>, <parameter><type><name>i_nal_count</name></type></parameter>, <parameter><type><name>i_nal_max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (size_t ii = 0, i_nal_found = 0; ii &lt; i_nal_max &amp;&amp; i_nal_count &gt; i_nal_found; ++ii) if (p_nal_list[ii].b != NULL &amp;&amp; (it = &amp;p_nal_list[ii]) &amp;&amp; ++i_nal_found)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>helper_dup_buf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>p_nal</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_nal_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_nal_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_nal</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_nal</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>(<argument><expr><name>i_nal_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_nal</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>p_nal</name><operator>-&gt;</operator><name>b</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i_nal_buf</name> <operator>&gt;</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>block_TryRealloc</name><argument_list>(<argument><expr><name><name>p_nal</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_nal_buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_nal</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>p_nal_buf</name></expr></argument>, <argument><expr><name>i_nal_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>i_nal_buf</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type>
<name>helper_search_nal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>p_nal_list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_nal_count</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_nal_max</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_nal_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_nal_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nal_nb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name>i_nal_max</name> <operator>&amp;&amp;</operator> <name>i_nal_count</name></expr></argument> &gt;</argument_list></name> <name>i_nal_nb</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>p_nal</name> <init>= <expr><operator>&amp;</operator><name><name>p_nal_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_nal</name><operator>-&gt;</operator><name>b</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_nal_nb</name><operator>++</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_diff</name> <init>= <expr><name>i_nal_buf</name> <operator>-</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_diff</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>p_nal_buf</name></expr></argument>, <argument><expr><name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_nal_buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_nal</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>helper_nal_length_valid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>hh</name><operator>-&gt;</operator><name>i_nal_length_size</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>hh</name><operator>-&gt;</operator><name>i_nal_length_size</name></name> <operator>==</operator> <literal type="number">2</literal>
<operator>||</operator> <name><name>hh</name><operator>-&gt;</operator><name>i_nal_length_size</name></name> <operator>==</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>helper_load_sei</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_nal</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_nal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_HEVC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_sei_count</name></name> <operator>==</operator> <name>HXXX_HELPER_SEI_COUNT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>hnal</name> <init>= <expr><operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>sei_list</name><index>[<expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_sei_count</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>helper_dup_buf</name><argument_list>(<argument><expr><name>hnal</name></expr></argument>, <argument><expr><name>p_nal</name></expr></argument>, <argument><expr><name>i_nal</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_sei_count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_xPS</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>count</name></type></parameter>, <parameter><type><name>id</name></type></parameter>, <parameter><type><name>max</name></type></parameter>, <parameter><type><name>xpstype</name></type></parameter>, <parameter><type><name>xpsdecode</name></type></parameter>, <parameter><type><name>xpsrelease</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (helper_search_nal(list, count, max+1, p_nal, i_nal) != NULL)continue;xpstype *p_xps = xpsdecode(p_nal, i_nal, true);if (!p_xps)return VLC_EGENERIC;struct hxxx_helper_nal *hnal = &amp;list[id];if (helper_dup_buf(hnal, p_nal, i_nal)){xpsrelease(p_xps);return VLC_EGENERIC;}if (hnal-&gt;xps)xpsrelease(hnal-&gt;xps);elsecount++;hnal-&gt;xps = p_xps;*p_config_changed = true</cpp:value></cpp:define>




















<function><type><specifier>static</specifier> <name>int</name></type>
<name>h264_helper_parse_nal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>i_nal_length_size</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_config_changed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_nal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hxxx_iterator_ctx_t</name></type> <name>it</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hxxx_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument>, <argument><expr><name>i_nal_length_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_config_changed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<while>while <condition>(<expr><ternary><condition><expr><operator>(</operator><name>i_nal_length_size</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>hxxx_iterate_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nal</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>hxxx_annexb_iterate_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nal</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i_nal</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>h264_nal_unit_type_e</name></name></type> <name>i_nal_type</name> <init>= <expr><name><name>p_nal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_nal_type</name> <operator>==</operator> <name>H264_NAL_SPS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>LOAD_xPS</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>sps_list</name></name></expr></argument>, <argument><expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_sps_count</name></name></expr></argument>,
<argument><expr><name><name>p_xps</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>, <argument><expr><name>H264_SPS_ID_MAX</name></expr></argument>,
<argument><expr><name>h264_sequence_parameter_set_t</name></expr></argument>,
<argument><expr><name>h264_decode_sps</name></expr></argument>,
<argument><expr><name>h264_release_sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_current_sps</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>h264_sequence_parameter_set_t</name><operator>*</operator><operator>)</operator><name>p_xps</name><operator>)</operator><operator>-&gt;</operator><name>i_id</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"new SPS parsed: %u"</literal></expr></argument>, <argument><expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_current_sps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i_nal_type</name> <operator>==</operator> <name>H264_NAL_PPS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>LOAD_xPS</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>pps_list</name></name></expr></argument>, <argument><expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_pps_count</name></name></expr></argument>,
<argument><expr><name><name>p_xps</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>, <argument><expr><name>H264_PPS_ID_MAX</name></expr></argument>,
<argument><expr><name>h264_picture_parameter_set_t</name></expr></argument>,
<argument><expr><name>h264_decode_pps</name></expr></argument>,
<argument><expr><name>h264_release_pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"new PPS parsed: %u"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>h264_picture_parameter_set_t</name><operator>*</operator><operator>)</operator><name>p_xps</name><operator>)</operator><operator>-&gt;</operator><name>i_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i_nal_type</name> <operator>&lt;=</operator> <name>H264_NAL_SLICE_IDR</name>
<operator>&amp;&amp;</operator> <name>i_nal_type</name> <operator>!=</operator> <name>H264_NAL_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_sps_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>





<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>p_nal</name></expr></argument>, <argument><expr><name>i_nal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_pps_id</name> <init>= <expr><call><name>bs_read_ue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_pps_id</name> <operator>&gt;</operator> <name>H264_PPS_ID_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>hpps</name> <init>= <expr><operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>pps_list</name><index>[<expr><name>i_pps_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hpps</name><operator>-&gt;</operator><name>b</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>hsps</name> <init>=
<expr><operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>sps_list</name><index>[<expr><name><name>hpps</name><operator>-&gt;</operator><name>h264_pps</name><operator>-&gt;</operator><name>i_sps_id</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hsps</name><operator>-&gt;</operator><name>b</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>hpps</name><operator>-&gt;</operator><name>h264_pps</name><operator>-&gt;</operator><name>i_sps_id</name></name> <operator>==</operator> <name><name>hsps</name><operator>-&gt;</operator><name>h264_sps</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hsps</name><operator>-&gt;</operator><name>h264_sps</name><operator>-&gt;</operator><name>i_id</name></name> <operator>!=</operator> <name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_current_sps</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_current_sps</name></name> <operator>=</operator> <name><name>hsps</name><operator>-&gt;</operator><name>h264_sps</name><operator>-&gt;</operator><name>i_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_config_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>helper_check_sei_au</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_nal_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i_nal_type</name> <operator>&lt;=</operator> <name>HEVC_NAL_IRAP_VCL23</name> <operator>&amp;&amp;</operator>
<name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_previous_nal_type</name></name> <operator>!=</operator> <name>HEVC_NAL_PREF_SEI</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>i_nal_type</name> <operator>==</operator> <name>HEVC_NAL_PREF_SEI</name> <operator>&amp;&amp;</operator>
<name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_previous_nal_type</name></name> <operator>!=</operator> <name>HEVC_NAL_PREF_SEI</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>helper_clear_sei</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_previous_nal_type</name></name> <operator>=</operator> <name>i_nal_type</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hevc_helper_parse_nal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>i_nal_length_size</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_config_changed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_nal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hxxx_iterator_ctx_t</name></type> <name>it</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hxxx_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument>, <argument><expr><name>i_nal_length_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_config_changed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<while>while <condition>(<expr><ternary><condition><expr><operator>(</operator><name>i_nal_length_size</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>hxxx_iterate_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nal</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>hxxx_annexb_iterate_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nal</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>i_nal</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>hevc_getNALLayer</name><operator>(</operator><name>p_nal</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_nal_type</name> <init>= <expr><call><name>hevc_getNALType</name><argument_list>(<argument><expr><name>p_nal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>helper_check_sei_au</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>i_nal_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_nal_type</name> <operator>==</operator> <name>HEVC_NAL_VPS</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_id</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>hevc_get_xps_id</name><argument_list>(<argument><expr><name>p_nal</name></expr></argument>, <argument><expr><name>i_nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_id</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LOAD_xPS</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>vps_list</name></name></expr></argument>, <argument><expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_vps_count</name></name></expr></argument>,
<argument><expr><name>i_id</name></expr></argument>, <argument><expr><name>HEVC_VPS_ID_MAX</name></expr></argument>,
<argument><expr><name>hevc_video_parameter_set_t</name></expr></argument>,
<argument><expr><name>hevc_decode_vps</name></expr></argument>,
<argument><expr><name>hevc_rbsp_release_vps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"new VPS parsed: %u"</literal></expr></argument>, <argument><expr><name>i_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i_nal_type</name> <operator>==</operator> <name>HEVC_NAL_SPS</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_id</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>hevc_get_xps_id</name><argument_list>(<argument><expr><name>p_nal</name></expr></argument>, <argument><expr><name>i_nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_id</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LOAD_xPS</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>sps_list</name></name></expr></argument>, <argument><expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_sps_count</name></name></expr></argument>,
<argument><expr><name>i_id</name></expr></argument>, <argument><expr><name>HEVC_SPS_ID_MAX</name></expr></argument>,
<argument><expr><name>hevc_sequence_parameter_set_t</name></expr></argument>,
<argument><expr><name>hevc_decode_sps</name></expr></argument>,
<argument><expr><name>hevc_rbsp_release_sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"new SPS parsed: %u"</literal></expr></argument>, <argument><expr><name>i_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i_nal_type</name> <operator>==</operator> <name>HEVC_NAL_PPS</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_id</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>hevc_get_xps_id</name><argument_list>(<argument><expr><name>p_nal</name></expr></argument>, <argument><expr><name>i_nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_id</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LOAD_xPS</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>pps_list</name></name></expr></argument>, <argument><expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_pps_count</name></name></expr></argument>,
<argument><expr><name>i_id</name></expr></argument>, <argument><expr><name>HEVC_PPS_ID_MAX</name></expr></argument>,
<argument><expr><name>hevc_picture_parameter_set_t</name></expr></argument>,
<argument><expr><name>hevc_decode_pps</name></expr></argument>,
<argument><expr><name>hevc_rbsp_release_pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"new PPS parsed: %u"</literal></expr></argument>, <argument><expr><name>i_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i_nal_type</name> <operator>&lt;=</operator> <name>HEVC_NAL_IRAP_VCL23</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_sps_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_vps_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>p_nal</name></expr></argument>, <argument><expr><name>i_nal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_id</name> <init>= <expr><call><name>bs_read_ue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_id</name> <operator>&gt;</operator> <name>HEVC_PPS_ID_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>xps</name> <init>= <expr><operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>pps_list</name><index>[<expr><name>i_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xps</name><operator>-&gt;</operator><name>b</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_spsid</name> <init>= <expr><call><name>hevc_get_pps_sps_id</name><argument_list>(<argument><expr><name><name>xps</name><operator>-&gt;</operator><name>hevc_pps</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>xps</name> <operator>=</operator> <operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>sps_list</name><index>[<expr><name>i_spsid</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xps</name><operator>-&gt;</operator><name>b</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_id</name> <operator>=</operator> <call><name>hevc_get_sps_vps_id</name><argument_list>(<argument><expr><name><name>xps</name><operator>-&gt;</operator><name>hevc_sps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xps</name> <operator>=</operator> <operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>vps_list</name><index>[<expr><name>i_id</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_spsid</name> <operator>!=</operator> <name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_current_sps</name></name> <operator>||</operator>
<name>i_id</name> <operator>!=</operator> <name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_current_vps</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_current_sps</name></name> <operator>=</operator> <name>i_spsid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_current_vps</name></name> <operator>=</operator> <name>i_id</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_config_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break> 
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>i_nal_type</name> <operator>==</operator> <name>HEVC_NAL_PREF_SEI</name><operator>||</operator>
<name>i_nal_type</name> <operator>==</operator> <name>HEVC_NAL_SUFF_SEI</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>helper_load_sei</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>p_nal</name></expr></argument>, <argument><expr><name>i_nal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>helper_process_avcC_h264</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i_buf</name> <operator>&lt;</operator> <name>H264_MIN_AVCC_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_buf</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>j</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i_buf</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>i_num_nal</name> <init>= <expr><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><ternary><condition><expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0x1f</literal></expr> </then><else>: <expr><literal type="number">0xff</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_buf</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i_buf</name><operator>--</operator></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_num_nal</name> <operator>&amp;&amp;</operator> <name>i_buf</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_nal_size</name> <init>= <expr><operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_nal_size</name> <operator>&gt;</operator> <name>i_buf</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_unused</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>h264_helper_parse_nal</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_nal_size</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>b_unused</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <name>i_nal_size</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_buf</name> <operator>-=</operator> <name>i_nal_size</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>hxxx_extra_isannexb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_extra</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>i_extra</name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name>i_extra</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>annexb_startcode4</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>h264_helper_set_extra</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_extra</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>h264_isavcC</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>i_nal_length_size</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>p_extra</name><operator>)</operator><index>[<expr><literal type="number">4</literal></expr>]</index> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>helper_nal_length_valid</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>b_is_xvcC</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hh</name><operator>-&gt;</operator><name>b_need_xvcC</name></name> <operator>&amp;&amp;</operator> <name><name>hh</name><operator>-&gt;</operator><name>i_nal_length_size</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"nal_length_size is too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>helper_process_avcC_h264</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>hxxx_extra_isannexb</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>i_nal_length_size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>unused</name></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>i_extra</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>:
<expr><call><name>h264_helper_parse_nal</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>unused</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>helper_process_hvcC_hevc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i_buf</name> <operator>&lt;</operator> <name>HEVC_MIN_HVCC_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_num_array</name> <init>= <expr><name><name>p_buf</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">23</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_buf</name> <operator>-=</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_num_array</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>i_buf</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_num_nalu</name> <init>= <expr><name><name>p_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>p_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_buf</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint16_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_num_nalu</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>i_buf</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_nalu_length</name> <init>= <expr><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>p_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>i_buf</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>i_nalu_length</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>foo</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hevc_helper_parse_nal</name><argument_list>( <argument><expr><name>hh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>i_nalu_length</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>foo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <name>i_nalu_length</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_buf</name> <operator>-=</operator> <name>i_nalu_length</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hevc_helper_set_extra</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_extra</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>hevc_ishvcC</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>i_nal_length_size</name></name> <operator>=</operator> <call><name>hevc_getNALLengthSize</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>helper_nal_length_valid</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>b_is_xvcC</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><call><name>helper_process_hvcC_hevc</name><argument_list>( <argument><expr><name>hh</name></expr></argument>, <argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>hxxx_extra_isannexb</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>i_nal_length_size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>unused</name></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>i_extra</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>:
<expr><call><name>hevc_helper_parse_nal</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>unused</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>block_t</name> <modifier>*</modifier></type>
<name>helper_process_block_hxxx_annexb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>parser</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,<parameter><decl><type><name>uint8_t</name></type></decl></parameter>,<parameter><decl><type><name>bool</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_config_changed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_config_changed</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>parser</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_config_changed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type>
<name>helper_process_block_h264_annexb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_config_changed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_config_changed</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>helper_process_block_hxxx_annexb</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>h264_helper_parse_nal</name></expr></argument>,
<argument><expr><name>p_block</name></expr></argument>,<argument><expr><name>p_config_changed</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type>
<name>helper_process_block_hevc_annexb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_config_changed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_config_changed</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>helper_process_block_hxxx_annexb</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>hevc_helper_parse_nal</name></expr></argument>,
<argument><expr><name>p_block</name></expr></argument>,<argument><expr><name>p_config_changed</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type>
<name>helper_process_block_xvcc2annexb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_config_changed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>helper_nal_length_valid</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h264_AVC_to_AnnexB</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,
<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>i_nal_length_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>helper_process_block_h264_annexb</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>p_config_changed</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type>
<name>helper_process_block_h264_annexb2avcc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_config_changed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>helper_process_block_h264_annexb</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>p_config_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>p_block</name></expr> ?</condition><then> <expr><call><name>hxxx_AnnexB_to_xVC</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>, <argument><expr><name><name>hh</name><operator>-&gt;</operator><name>i_nal_length_size</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type>
<name>helper_process_block_hevc_annexb2hvcc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_config_changed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>helper_process_block_hevc_annexb</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>p_config_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>p_block</name></expr> ?</condition><then> <expr><call><name>hxxx_AnnexB_to_xVC</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>, <argument><expr><name><name>hh</name><operator>-&gt;</operator><name>i_nal_length_size</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type>
<name>helper_process_block_h264_avcc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_config_changed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_config_changed</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>h264_helper_parse_nal</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,
<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>i_nal_length_size</name></name></expr></argument>,
<argument><expr><name>p_config_changed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type>
<name>helper_process_block_hevc_hvcc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_config_changed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_config_changed</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>hevc_helper_parse_nal</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,
<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>i_nal_length_size</name></name></expr></argument>,
<argument><expr><name>p_config_changed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>hxxx_helper_set_extra</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_extra</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>i_codec</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>h264_helper_set_extra</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_HEVC</name></expr>:</case>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>hevc_helper_set_extra</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>i_codec</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>b_is_xvcC</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>b_need_xvcC</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>pf_process_block</name></name> <operator>=</operator> <name>helper_process_block_h264_avcc</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>pf_process_block</name></name> <operator>=</operator> <name>helper_process_block_xvcc2annexb</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>b_need_xvcC</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>pf_process_block</name></name> <operator>=</operator> <name>helper_process_block_h264_annexb2avcc</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>pf_process_block</name></name> <operator>=</operator> <name>helper_process_block_h264_annexb</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_HEVC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>b_is_xvcC</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>b_need_xvcC</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>pf_process_block</name></name> <operator>=</operator> <name>helper_process_block_hevc_hvcc</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>pf_process_block</name></name> <operator>=</operator> <name>helper_process_block_xvcc2annexb</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>b_need_xvcC</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>pf_process_block</name></name> <operator>=</operator> <name>helper_process_block_hevc_annexb2hvcc</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>pf_process_block</name></name> <operator>=</operator> <name>helper_process_block_hevc_annexb</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type>
<name>hxxx_helper_get_annexb_config</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name><name>pp_nal_lists</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>p_nal_counts</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>p_nal_maxs</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_lists_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>annexb_startcode</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_list</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_current</name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_lists_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nals_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>p_nal</name></decl>;</decl_stmt>
<macro><name>HELPER_FOREACH_NAL</name><argument_list>(<argument>p_nal</argument>, <argument>pp_nal_lists[i]</argument>, <argument>p_nal_counts[i]</argument>, <argument>p_nal_maxs[i]</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>i_nals_size</name> <operator>+=</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <sizeof>sizeof <name>annexb_startcode</name></sizeof></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name>i_nals_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_block_list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>HELPER_FOREACH_NAL</name><argument_list>(<argument>p_nal</argument>, <argument>pp_nal_lists[i]</argument>, <argument>p_nal_counts[i]</argument>, <argument>p_nal_maxs[i]</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>annexb_startcode</name></expr></argument>,
<argument><expr><sizeof>sizeof <name>annexb_startcode</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+=</operator> <sizeof>sizeof <name>annexb_startcode</name></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+=</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>p_block_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_current</name> <operator>=</operator> <name>p_block_list</name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_current</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_current</name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>p_block_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type>
<name>h264_helper_get_annexb_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_sps_count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_pps_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name><name>pp_nal_lists</name><index>[]</index></name> <init>= <expr><block>{
<expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>sps_list</name></name></expr>, <expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>pps_list</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>p_nal_counts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_sps_count</name></name></expr>, <expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_pps_count</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>p_nal_maxs</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>H264_SPS_ID_MAX</name><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>H264_PPS_ID_MAX</name><operator>+</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>hxxx_helper_get_annexb_config</name><argument_list>( <argument><expr><name>pp_nal_lists</name></expr></argument>, <argument><expr><name>p_nal_counts</name></expr></argument>, <argument><expr><name>p_nal_maxs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type>
<name>hevc_helper_get_annexb_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_vps_count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_sps_count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_pps_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name><name>pp_nal_lists</name><index>[]</index></name> <init>= <expr><block>{
<expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>vps_list</name></name></expr>, <expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>sps_list</name></name></expr>, <expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>pps_list</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>p_nal_counts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_vps_count</name></name></expr>, <expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_sps_count</name></name></expr>,
<expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_pps_count</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>p_nal_maxs</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>HEVC_VPS_ID_MAX</name><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>HEVC_SPS_ID_MAX</name><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>HEVC_PPS_ID_MAX</name><operator>+</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>hxxx_helper_get_annexb_config</name><argument_list>( <argument><expr><name>pp_nal_lists</name></expr></argument>, <argument><expr><name>p_nal_counts</name></expr></argument>, <argument><expr><name>p_nal_maxs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type>
<name>h264_helper_get_avcc_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>p_nal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>pp_sps_bufs</name><index>[<expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_sps_count</name></name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>p_sps_sizes</name><index>[<expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_sps_count</name></name></expr>]</index></name></decl>;</decl_stmt>
<macro><name>HELPER_FOREACH_NAL</name><argument_list>(<argument>p_nal</argument>, <argument>hh-&gt;h264.sps_list</argument>, <argument>hh-&gt;h264.i_sps_count</argument>,
<argument>H264_SPS_ID_MAX+<literal type="number">1</literal></argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name><name>pp_sps_bufs</name><index>[<expr><name>i_nal_found</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sps_sizes</name><index>[<expr><name>i_nal_found</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>pp_pps_bufs</name><index>[<expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_pps_count</name></name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>p_pps_sizes</name><index>[<expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_pps_count</name></name></expr>]</index></name></decl>;</decl_stmt>
<macro><name>HELPER_FOREACH_NAL</name><argument_list>(<argument>p_nal</argument>, <argument>hh-&gt;h264.pps_list</argument>, <argument>hh-&gt;h264.i_pps_count</argument>,
<argument>H264_PPS_ID_MAX+<literal type="number">1</literal></argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name><name>pp_pps_bufs</name><index>[<expr><name>i_nal_found</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pps_sizes</name><index>[<expr><name>i_nal_found</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><call><name>h264_NAL_to_avcC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>pp_sps_bufs</name></expr></argument>, <argument><expr><name>p_sps_sizes</name></expr></argument>, <argument><expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_sps_count</name></name></expr></argument>,
<argument><expr><name>pp_pps_bufs</name></expr></argument>, <argument><expr><name>p_pps_sizes</name></expr></argument>, <argument><expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_pps_count</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type>
<name>hevc_helper_get_hvcc_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hevc_dcr_params</name></name></type> <name>params</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>p_nal</name></decl>;</decl_stmt>

<macro><name>HELPER_FOREACH_NAL</name><argument_list>(<argument>p_nal</argument>, <argument>hh-&gt;hevc.vps_list</argument>, <argument>hh-&gt;hevc.i_vps_count</argument>,
<argument>HEVC_VPS_ID_MAX+<literal type="number">1</literal></argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>p_vps</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_vps_count</name></name></expr>]</index></name> <operator>=</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>rgi_vps</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_vps_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>HELPER_FOREACH_NAL</name><argument_list>(<argument>p_nal</argument>, <argument>hh-&gt;hevc.sps_list</argument>, <argument>hh-&gt;hevc.i_sps_count</argument>,
<argument>HEVC_SPS_ID_MAX+<literal type="number">1</literal></argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>p_sps</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_sps_count</name></name></expr>]</index></name> <operator>=</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>rgi_sps</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_sps_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>HELPER_FOREACH_NAL</name><argument_list>(<argument>p_nal</argument>, <argument>hh-&gt;hevc.pps_list</argument>, <argument>hh-&gt;hevc.i_pps_count</argument>,
<argument>HEVC_PPS_ID_MAX+<literal type="number">1</literal></argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>p_pps</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_pps_count</name></name></expr>]</index></name> <operator>=</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>rgi_pps</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_pps_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>HELPER_FOREACH_NAL</name><argument_list>(<argument>p_nal</argument>, <argument>hh-&gt;hevc.sei_list</argument>, <argument>hh-&gt;hevc.i_sei_count</argument>,
<argument>HEVC_DCR_SEI_COUNT</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>hevc_getNALType</name><argument_list>(<argument><expr><name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HEVC_NAL_PREF_SEI</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>p_seipref</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_seipref_count</name></name></expr>]</index></name> <operator>=</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>rgi_seipref</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_seipref_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>p_seisuff</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_seisuff_count</name></name></expr>]</index></name> <operator>=</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>rgi_seisuff</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_seisuff_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_dcr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dcr</name> <init>= <expr><call><name>hevc_create_dcr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dcr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>p_dcr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>block_heap_Alloc</name><argument_list>(<argument><expr><name>p_dcr</name></expr></argument>, <argument><expr><name>i_dcr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type>
<name>h264_helper_get_current_sps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_sps_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>hsps</name> <init>=
<expr><operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>sps_list</name><index>[<expr><name><name>hh</name><operator>-&gt;</operator><name>h264</name><operator>.</operator><name>i_current_sps</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>hsps</name><operator>-&gt;</operator><name>b</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hsps</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>hxxx_helper_get_current_picture_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>p_h</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>p_vw</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>p_vh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_H264</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>hsps</name> <init>= <expr><call><name>h264_helper_get_current_sps</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hsps</name> <operator>&amp;&amp;</operator> <call><name>h264_get_picture_size</name><argument_list>(<argument><expr><name><name>hsps</name><operator>-&gt;</operator><name>h264_sps</name></name></expr></argument>, <argument><expr><name>p_w</name></expr></argument>, <argument><expr><name>p_h</name></expr></argument>, <argument><expr><name>p_vw</name></expr></argument>, <argument><expr><name>p_vh</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_HEVC</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>hsps</name> <init>= <expr><operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>sps_list</name><index>[<expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_current_sps</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>hsps</name> <operator>&amp;&amp;</operator> <name><name>hsps</name><operator>-&gt;</operator><name>hevc_sps</name></name> <operator>&amp;&amp;</operator> <call><name>hevc_get_picture_size</name><argument_list>(<argument><expr><name><name>hsps</name><operator>-&gt;</operator><name>hevc_sps</name></name></expr></argument>, <argument><expr><name>p_w</name></expr></argument>, <argument><expr><name>p_h</name></expr></argument>, <argument><expr><name>p_vw</name></expr></argument>, <argument><expr><name>p_vh</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>hxxx_helper_get_current_sar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_num</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_den</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_H264</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>hsps</name> <init>= <expr><call><name>h264_helper_get_current_sps</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hsps</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_num</name> <operator>=</operator> <name><name>hsps</name><operator>-&gt;</operator><name>h264_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_sar_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_den</name> <operator>=</operator> <name><name>hsps</name><operator>-&gt;</operator><name>h264_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_HEVC</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>hsps</name> <init>= <expr><operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>sps_list</name><index>[<expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_current_sps</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>hsps</name> <operator>&amp;&amp;</operator> <name><name>hsps</name><operator>-&gt;</operator><name>hevc_sps</name></name> <operator>&amp;&amp;</operator> <call><name>hevc_get_aspect_ratio</name><argument_list>(<argument><expr><name><name>hsps</name><operator>-&gt;</operator><name>hevc_sps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_num</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_den</name> <operator>=</operator> <name>den</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>h264_helper_get_current_dpb_values</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_depth</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>p_delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>hsps</name> <init>= <expr><call><name>h264_helper_get_current_sps</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hsps</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><call><name>h264_get_dpb_values</name><argument_list>(<argument><expr><name><name>hsps</name><operator>-&gt;</operator><name>h264_sps</name></name></expr></argument>, <argument><expr><name>p_depth</name></expr></argument>, <argument><expr><name>p_delay</name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>hxxx_helper_get_current_profile_level</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_profile</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_H264</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>hsps</name> <init>= <expr><call><name>h264_helper_get_current_sps</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hsps</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_profile</name> <operator>=</operator> <name><name>hsps</name><operator>-&gt;</operator><name>h264_sps</name><operator>-&gt;</operator><name>i_profile</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_level</name> <operator>=</operator> <name><name>hsps</name><operator>-&gt;</operator><name>h264_sps</name><operator>-&gt;</operator><name>i_level</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_HEVC</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>hsps</name> <init>= <expr><operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>sps_list</name><index>[<expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_current_sps</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hsps</name> <operator>&amp;&amp;</operator> <name><name>hsps</name><operator>-&gt;</operator><name>hevc_sps</name></name> <operator>&amp;&amp;</operator>
<call><name>hevc_get_sps_profile_tier_level</name><argument_list>(<argument><expr><name><name>hsps</name><operator>-&gt;</operator><name>hevc_sps</name></name></expr></argument>, <argument><expr><name>p_profile</name></expr></argument>, <argument><expr><name>p_level</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>hxxx_helper_get_chroma_chroma</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_chroma_format</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_depth_luma</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_depth_chroma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>i_codec</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>hsps</name> <init>= <expr><call><name>h264_helper_get_current_sps</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hsps</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><call><name>h264_get_chroma_luma</name><argument_list>(<argument><expr><name><name>hsps</name><operator>-&gt;</operator><name>h264_sps</name></name></expr></argument>, <argument><expr><name>pi_chroma_format</name></expr></argument>, <argument><expr><name>pi_depth_luma</name></expr></argument>,
<argument><expr><name>pi_depth_chroma</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>true</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block>
<case>case <expr><name>VLC_CODEC_HEVC</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>hsps</name> <init>= <expr><operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>sps_list</name><index>[<expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_current_sps</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hsps</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>hsps</name><operator>-&gt;</operator><name>hevc_sps</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><call><name>hevc_get_chroma_luma</name><argument_list>(<argument><expr><name><name>hsps</name><operator>-&gt;</operator><name>hevc_sps</name></name></expr></argument>, <argument><expr><name>pi_chroma_format</name></expr></argument>, <argument><expr><name>pi_depth_luma</name></expr></argument>,
<argument><expr><name>pi_depth_chroma</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>true</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>hxxx_helper_get_colorimetry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name></decl></parameter>,
<parameter><decl><type><name>video_color_primaries_t</name> <modifier>*</modifier></type><name>p_primaries</name></decl></parameter>,
<parameter><decl><type><name>video_transfer_func_t</name> <modifier>*</modifier></type><name>p_transfer</name></decl></parameter>,
<parameter><decl><type><name>video_color_space_t</name> <modifier>*</modifier></type><name>p_colorspace</name></decl></parameter>,
<parameter><decl><type><name>video_color_range_t</name> <modifier>*</modifier></type><name>p_full_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>i_codec</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>hsps</name> <init>= <expr><call><name>h264_helper_get_current_sps</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hsps</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><call><name>h264_get_colorimetry</name><argument_list>(<argument><expr><name><name>hsps</name><operator>-&gt;</operator><name>h264_sps</name></name></expr></argument>, <argument><expr><name>p_primaries</name></expr></argument>, <argument><expr><name>p_transfer</name></expr></argument>,
<argument><expr><name>p_colorspace</name></expr></argument>, <argument><expr><name>p_full_range</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>true</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block>
<case>case <expr><name>VLC_CODEC_HEVC</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper_nal</name></name> <modifier>*</modifier></type><name>hsps</name> <init>= <expr><operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>sps_list</name><index>[<expr><name><name>hh</name><operator>-&gt;</operator><name>hevc</name><operator>.</operator><name>i_current_sps</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hsps</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>hsps</name><operator>-&gt;</operator><name>hevc_sps</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><call><name>hevc_get_colorimetry</name><argument_list>(<argument><expr><name><name>hsps</name><operator>-&gt;</operator><name>hevc_sps</name></name></expr></argument>, <argument><expr><name>p_primaries</name></expr></argument>, <argument><expr><name>p_transfer</name></expr></argument>,
<argument><expr><name>p_colorspace</name></expr></argument>, <argument><expr><name>p_full_range</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>true</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
