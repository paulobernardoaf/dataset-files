<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\twolame.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;twolame.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPEG_FRAME_SIZE</name></cpp:macro> <cpp:value>1152</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CODED_FRAME_SIZE</name></cpp:macro> <cpp:value>1792</cpp:value></cpp:define>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseEncoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encode</name> <parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-twolame-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_QUALITY_TEXT</name></cpp:macro> <cpp:value>N_("Encoding quality")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_QUALITY_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Force a specific encoding quality between 0.0 (high) and 50.0 (low), " "instead of specifying a particular bitrate. " "This will produce a VBR stream." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MODE_TEXT</name></cpp:macro> <cpp:value>N_("Stereo mode")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MODE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Handling mode for stereo streams" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_VBR_TEXT</name></cpp:macro> <cpp:value>N_("VBR mode")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_VBR_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Use Variable BitRate. Default is to use Constant BitRate (CBR)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_PSY_TEXT</name></cpp:macro> <cpp:value>N_("Psycho-acoustic model")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_PSY_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Integer from -1 (no model) to 4." )</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_stereo_values</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_stereo_descriptions</name><index>[]</index></name> <init>=
<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Stereo"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Dual mono"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Joint stereo"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>


<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"Twolame"</literal></argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Libtwolame audio encoder"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="number">120</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenEncoder</argument>, <argument>CloseEncoder</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_ACODEC</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"quality"</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument>ENC_QUALITY_TEXT</argument>,
<argument>ENC_QUALITY_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"mode"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ENC_MODE_TEXT</argument>,
<argument>ENC_MODE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<expr_stmt><expr><call><name>change_integer_list</name><argument_list>( <argument><expr><name>pi_stereo_values</name></expr></argument>, <argument><expr><name>ppsz_stereo_descriptions</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<macro><name>add_bool</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"vbr"</literal></argument>, <argument>false</argument>, <argument>ENC_VBR_TEXT</argument>,
<argument>ENC_VBR_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"psy"</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument>ENC_PSY_TEXT</argument>,
<argument>ENC_PSY_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_enc_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"quality"</literal></expr>, <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"vbr"</literal></expr>, <expr><literal type="string">"psy"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<typedef>typedef <type><struct>struct
<block>{



<decl_stmt><decl><type><name>int16_t</name></type> <name><name>p_buffer</name><index>[<expr><name>MPEG_FRAME_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_nb_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>twolame_options</name> <modifier>*</modifier></type><name>p_twolame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>p_out_buffer</name><index>[<expr><name>MAX_CODED_FRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>encoder_sys_t</name>;</typedef>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>mpa_bitrate_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">320</literal></expr>, <expr><literal type="number">384</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">160</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>mpa_freq_tab</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>=
<expr><block>{ <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">32000</literal></expr>, <expr><literal type="number">22050</literal></expr>, <expr><literal type="number">24000</literal></expr>, <expr><literal type="number">16000</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_frequency</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_MP2</name> <operator>&amp;&amp;</operator>
<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_MPGA</name> <operator>&amp;&amp;</operator>
<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"doesn't support &gt; 2 channels"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>( <init><expr><name>i_frequency</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_frequency</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i_frequency</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>==</operator> <name><name>mpa_freq_tab</name><index>[<expr><name>i_frequency</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>( <expr><name>i_frequency</name> <operator>==</operator> <literal type="number">6</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"MPEG audio doesn't support frequency=%d"</literal></expr></argument>,
<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_sys</name> <operator>=</operator> <operator>(</operator><name>encoder_sys_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>encoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name>AUDIO_ES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_MPGA</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_enc_options</name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_twolame</name></name> <operator>=</operator> <call><name>twolame_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>twolame_set_in_samplerate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_twolame</name></name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>twolame_set_out_samplerate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_twolame</name></name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"vbr"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f_quality</name> <init>= <expr><call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"quality"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>f_quality</name> <operator>&gt;</operator> <literal type="number">50.f</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>f_quality</name> <operator>=</operator> <literal type="number">50.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>f_quality</name> <operator>&lt;</operator> <literal type="number">0.f</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>f_quality</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>twolame_set_VBR</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_twolame</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>twolame_set_VBR_q</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_twolame</name></name></expr></argument>, <argument><expr><name>f_quality</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">1000</literal>
<operator>&lt;=</operator> <name><name>mpa_bitrate_tab</name><index>[<expr><name>i_frequency</name> <operator>/</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">1000</literal>
<operator>!=</operator> <name><name>mpa_bitrate_tab</name><index>[<expr><name>i_frequency</name> <operator>/</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"MPEG audio doesn't support bitrate=%d, using %d"</literal></expr></argument>,
<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name></expr></argument>,
<argument><expr><name><name>mpa_bitrate_tab</name><index>[<expr><name>i_frequency</name> <operator>/</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>mpa_bitrate_tab</name><index>[<expr><name>i_frequency</name> <operator>/</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name>
<operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>twolame_set_bitrate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_twolame</name></name></expr></argument>,
<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>twolame_set_num_channels</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_twolame</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>twolame_set_mode</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_twolame</name></name></expr></argument>, <argument><expr><name>TWOLAME_MONO</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>twolame_set_num_channels</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_twolame</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>( <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"mode"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>twolame_set_mode</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_twolame</name></name></expr></argument>, <argument><expr><name>TWOLAME_DUAL_CHANNEL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>twolame_set_mode</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_twolame</name></name></expr></argument>, <argument><expr><name>TWOLAME_JOINT_STEREO</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<default>default:</default>
<expr_stmt><expr><call><name>twolame_set_mode</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_twolame</name></name></expr></argument>, <argument><expr><name>TWOLAME_STEREO</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>twolame_set_psymodel</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_twolame</name></name></expr></argument>,
<argument><expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"psy"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>twolame_init_params</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_twolame</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"twolame initialization failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_audio</name></name> <operator>=</operator> <name>Encode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>Bufferize</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_nb_samples</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_offset</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_len</name> <init>= <expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_offset</name> <operator>&gt;=</operator> <name>i_len</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"buffer full"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_copy</name> <init>= <expr><name>i_nb_samples</name> <operator>*</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_copy</name> <operator>+</operator> <name>i_offset</name> <operator>&gt;</operator> <name>i_len</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"dropping samples"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_copy</name> <operator>=</operator> <name>i_len</name> <operator>-</operator> <name>i_offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i_offset</name></expr></argument>, <argument><expr><name>p_in</name></expr></argument>, <argument><expr><name>i_copy</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encode</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_aout_buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_aout_buf</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_used</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_used</name> <operator>=</operator> <call><name>twolame_encode_flush</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_twolame</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buffer</name></name></expr></argument>, <argument><expr><name>MAX_CODED_FRAME_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_used</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_used</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buffer</name></name></expr></argument>, <argument><expr><name>i_used</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><name>MPEG_FRAME_SIZE</name></expr></argument>,
<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_buffer</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>p_aout_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_nb_samples</name> <init>= <expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>-</operator>
<call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument>,
<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>+</operator> <name>i_nb_samples</name> <operator>&gt;=</operator> <name>MPEG_FRAME_SIZE</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Bufferize</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>MPEG_FRAME_SIZE</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_nb_samples</name> <operator>-=</operator> <name>MPEG_FRAME_SIZE</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buffer</name> <operator>+=</operator> <operator>(</operator><name>MPEG_FRAME_SIZE</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_samples</name></name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_used</name> <operator>=</operator> <call><name>twolame_encode_buffer_interleaved</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_twolame</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>MPEG_FRAME_SIZE</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buffer</name></name></expr></argument>, <argument><expr><name>MAX_CODED_FRAME_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_used</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"encoder error: %d"</literal></expr></argument>, <argument><expr><name>i_used</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_used</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_chain</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buffer</name></name></expr></argument>, <argument><expr><name>i_used</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><name>MPEG_FRAME_SIZE</name></expr></argument>,
<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_chain</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>( <expr><name>i_nb_samples</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Bufferize</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_nb_samples</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>+=</operator> <name>i_nb_samples</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_chain</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>twolame_close</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_twolame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
