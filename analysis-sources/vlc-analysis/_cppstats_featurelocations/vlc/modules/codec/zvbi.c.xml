<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\zvbi.c">






































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libzvbi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"substext.h"</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAGE_TEXT</name></cpp:macro> <cpp:value>N_("Teletext page")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAGE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Open the indicated Teletext page. " "Default page is index 100.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPAQUE_TEXT</name></cpp:macro> <cpp:value>N_("Opacity")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPAQUE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Setting to true " "makes the text to be boxed and maybe easier to read." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_TEXT</name></cpp:macro> <cpp:value>N_("Teletext alignment")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "You can enforce the teletext position on the video " "(0=center, 1=left, 2=right, 4=top, 8=bottom, you can " "also use combinations of these values, eg. 6 = top-right).")</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TELX_TEXT</name></cpp:macro> <cpp:value>N_("Teletext text subtitles")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TELX_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Output teletext subtitles as text " "instead of as RGBA." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_TEXT</name></cpp:macro> <cpp:value>N_("Presentation Level")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_pos_values</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_pos_descriptions</name><index>[]</index></name> <init>=
<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Center"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Left"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Right"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bottom"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top-Left"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top-Right"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bottom-Left"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Bottom-Right"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>level_values</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>level_descriptions</name><index>[]</index></name> <init>=
<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"1.5"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"2.5"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"3.5"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>level_zvbi_values</name><index>[]</index></name> <init>=
<expr><block>{ <expr><name>VBI_WST_LEVEL_1</name></expr>, <expr><name>VBI_WST_LEVEL_1p5</name></expr>, <expr><name>VBI_WST_LEVEL_2p5</name></expr>, <expr><name>VBI_WST_LEVEL_3p5</name></expr> }</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"VBI and Teletext decoder"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"VBI &amp; Teletext"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"spu decoder"</literal></argument>, <argument><literal type="number">51</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_SCODEC</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument><literal type="string">"vbi-page"</literal></argument>, <argument><literal type="number">100</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="char">'z'</literal> &lt;&lt; <literal type="number">16</literal></argument>,
<argument>PAGE_TEXT</argument>, <argument>PAGE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"vbi-opaque"</literal></argument>, <argument>true</argument>,
<argument>OPAQUE_TEXT</argument>, <argument>OPAQUE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"vbi-position"</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>POS_TEXT</argument>, <argument>POS_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<expr_stmt><expr><call><name>change_integer_list</name><argument_list>( <argument><expr><name>pi_pos_values</name></expr></argument>, <argument><expr><name>ppsz_pos_descriptions</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"vbi-text"</literal></argument>, <argument>false</argument>,
<argument>TELX_TEXT</argument>, <argument>TELX_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"vbi-level"</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument>LEVEL_TEXT</argument>, <argument>NULL</argument>, <argument>false</argument> )</argument_list></macro>
<expr_stmt><expr><call><name>change_integer_list</name><argument_list>( <argument><expr><name>level_values</name></expr></argument>, <argument><expr><name>level_descriptions</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>









<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_default_triplet</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">8</literal></expr>, 
<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>, 
<expr><literal type="number">24</literal></expr>,<expr><literal type="number">24</literal></expr>, 
<expr><literal type="number">32</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">32</literal></expr>, 
<expr><literal type="number">48</literal></expr>,<expr><literal type="number">48</literal></expr>, 
<expr><literal type="number">64</literal></expr>, 
<expr><literal type="number">80</literal></expr>, 
<expr><literal type="number">16</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_default_triplet</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"slo"</literal></expr>, <expr><literal type="string">"slk"</literal></expr>, <expr><literal type="string">"cze"</literal></expr>, <expr><literal type="string">"ces"</literal></expr>,
<expr><literal type="string">"pol"</literal></expr>,
<expr><literal type="string">"scc"</literal></expr>, <expr><literal type="string">"scr"</literal></expr>, <expr><literal type="string">"srp"</literal></expr>, <expr><literal type="string">"hrv"</literal></expr>, <expr><literal type="string">"slv"</literal></expr>,
<expr><literal type="string">"rum"</literal></expr>, <expr><literal type="string">"ron"</literal></expr>,
<expr><literal type="string">"est"</literal></expr>, <expr><literal type="string">"lit"</literal></expr>, <expr><literal type="string">"rus"</literal></expr>, <expr><literal type="string">"bul"</literal></expr>, <expr><literal type="string">"ukr"</literal></expr>,
<expr><literal type="string">"gre"</literal></expr>, <expr><literal type="string">"ell"</literal></expr>,
<expr><literal type="string">"ara"</literal></expr>,
<expr><literal type="string">"heb"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <block>{
<decl><name>ZVBI_KEY_RED</name> <init>= <expr><literal type="char">'r'</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>,
<decl><name>ZVBI_KEY_GREEN</name> <init>= <expr><literal type="char">'g'</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>,
<decl><name>ZVBI_KEY_YELLOW</name> <init>= <expr><literal type="char">'y'</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>,
<decl><name>ZVBI_KEY_BLUE</name> <init>= <expr><literal type="char">'b'</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>,
<decl><name>ZVBI_KEY_INDEX</name> <init>= <expr><literal type="char">'i'</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>,
}</block></enum></type> <name>ttxt_key_id</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SLICES</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vbi_decoder</name> <modifier>*</modifier></type> <name>p_vbi_dec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vbi_sliced</name></type> <name><name>p_vbi_sliced</name><index>[<expr><name>MAX_SLICES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_last_page</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_update</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_text</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_wanted_page</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_wanted_subpage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_opaque</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_level</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pgno</name></decl>, <name>subno</name>;</decl_stmt>
}</block> <decl><name><name>nav_link</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name><name>i_key</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>Subpicture</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_text</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_columns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_rows</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_align</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EventHandler</name><parameter_list>( <parameter><decl><type><name>vbi_event</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpaquePage</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vbi_page</name> <modifier>*</modifier></type><name>p_page</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>text_offset</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_first_visible_row</name><parameter_list>( <parameter><decl><type><name>vbi_char</name> <modifier>*</modifier></type><name>p_text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columns</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_last_visible_row</name><parameter_list>( <parameter><decl><type><name>vbi_char</name> <modifier>*</modifier></type><name>p_text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columns</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>RequestPage</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Opaque</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>;</function_decl>







<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_TELETEXT</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_page</name> <init>= <expr><call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vbi-page"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_page</name> <operator>&gt;</operator> <literal type="number">999</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"invalid vbi-page requested"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_page</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_key</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_update</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vbi_dec</name></name> <operator>=</operator> <call><name>vbi_decoder_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vbi_dec</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"VBI decoder could not be created."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ppsz_default_triplet</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>psz_language</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>psz_language</name></name></expr></argument>, <argument><expr><name><name>ppsz_default_triplet</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vbi_teletext_set_default_region</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vbi_dec</name></name></expr></argument>, <argument><expr><name><name>pi_default_triplet</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"overwriting default zvbi region: %d"</literal></expr></argument>, <argument><expr><name><name>pi_default_triplet</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>vbi_event_handler_register</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vbi_dec</name></name></expr></argument>, <argument><expr><name>VBI_EVENT_TTX_PAGE</name> <operator>|</operator> <name>VBI_EVENT_NETWORK</name> <operator>|</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZVBI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>VBI_EVENT_CAPTION</name> <operator>|</operator> <name>VBI_EVENT_TRIGGER</name> <operator>|</operator>
<name>VBI_EVENT_ASPECT</name> <operator>|</operator> <name>VBI_EVENT_PROG_INFO</name> <operator>|</operator> <name>VBI_EVENT_NETWORK_ID</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="number">0</literal></expr></argument> , <argument><expr><name>EventHandler</name></expr></argument>, <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name> <operator>=</operator> <name>i_page</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vbi-page"</literal></expr></argument>, <argument><expr><name>RequestPage</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name> <operator>==</operator> <literal type="number">100</literal> <operator>&amp;&amp;</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>teletext</name><operator>.</operator><name>i_magazine</name></name> <operator>&lt;</operator> <literal type="number">9</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name> <operator>=</operator> <literal type="number">100</literal> <operator>*</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>teletext</name><operator>.</operator><name>i_magazine</name></name> <operator>+</operator>
<call><name>vbi_bcd2dec</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>teletext</name><operator>.</operator><name>i_page</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vbi-page"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_subpage</name></name> <operator>=</operator> <name>VBI_ANY_SUBNO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_opaque</name></name> <operator>=</operator> <call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vbi-opaque"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vbi-opaque"</literal></expr></argument>, <argument><expr><name>Opaque</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vbi-position"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_text</name></name> <operator>=</operator> <call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vbi-text"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_level</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vbi-level"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_text</name></name></expr> ?</condition><then> <expr><name>VLC_CODEC_TEXT</name></expr> </then><else>: <expr><name>VLC_CODEC_RGBA</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>Decode</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vbi-opaque"</literal></expr></argument>, <argument><expr><name>Opaque</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vbi-page"</literal></expr></argument>, <argument><expr><name>RequestPage</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vbi_dec</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vbi_decoder_delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vbi_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZVBI_PIXFMT_RGBA32</name></cpp:macro> <cpp:value>VBI_PIXFMT_RGBA32_BE</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZVBI_PIXFMT_RGBA32</name></cpp:macro> <cpp:value>VBI_PIXFMT_RGBA32_LE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_cached</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vbi_page</name></type> <name>p_page</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0x10</literal> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x1f</literal> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0x99</literal> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x9b</literal> <operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vbi_sliced</name> <modifier>*</modifier></type><name>p_sliced</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vbi_sliced</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_lines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name><operator>++</operator></expr>;</expr_stmt>
<while>while<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_id</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_size</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">2</literal> <operator>+</operator> <name>i_size</name> <operator>&gt;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_id</name> <operator>==</operator> <literal type="number">0x02</literal> <operator>||</operator> <name>i_id</name> <operator>==</operator> <literal type="number">0x03</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <name>i_size</name> <operator>&gt;=</operator> <literal type="number">44</literal> <operator>&amp;&amp;</operator> <name>i_lines</name> <operator>&lt;</operator> <name>MAX_SLICES</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xE4</literal></expr> )</condition> 
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>line_offset</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>field_parity</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sliced</name><index>[<expr><name>i_lines</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>VBI_SLICED_TELETEXT_B</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>line_offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sliced</name><index>[<expr><name>i_lines</name></expr>]</index></name><operator>.</operator><name>line</name> <operator>=</operator> <name>line_offset</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>field_parity</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">313</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sliced</name><index>[<expr><name>i_lines</name></expr>]</index></name><operator>.</operator><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">42</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sliced</name><index>[<expr><name>i_lines</name></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vbi_rev8</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>i_lines</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <literal type="number">2</literal> <operator>+</operator> <name>i_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name>i_size</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>i_lines</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vbi_decode</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vbi_dec</name></name></expr></argument>, <argument><expr><name>p_sliced</name></expr></argument>, <argument><expr><name>i_lines</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_align</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_align</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>i_wanted_page</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>i_wanted_subpage</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_subpage</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_opaque</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_opaque</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>i_level</name> <init>= <expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_level</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_level</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_page</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vbi_page</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_cached</name> <operator>=</operator> <call><name>vbi_fetch_vt_page</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vbi_dec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_page</name></expr></argument>,
<argument><expr><call><name>vbi_dec2bcd</name><argument_list>( <argument><expr><name>i_wanted_page</name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><name>i_wanted_subpage</name></expr></argument>, <argument><expr><name><name>level_zvbi_values</name><index>[<expr><name>i_level</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_wanted_page</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_last_page</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_update</name></name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_cached</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_text</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_last_page</name></name> <operator>!=</operator> <name>i_wanted_page</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>Subpicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><name><name>p_page</name><operator>.</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>p_page</name><operator>.</operator><name>rows</name></name></expr></argument>,
<argument><expr><name>i_align</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_update</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_page</name></name> <operator>=</operator> <name>i_wanted_page</name></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_update</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_page</name></name> <operator>=</operator> <name>i_wanted_page</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZVBI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"we now have page: %d ready for display"</literal></expr></argument>,
<argument><expr><name>i_wanted_page</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>int</name></type> <name>i_first_row</name> <init>= <expr><call><name>get_first_visible_row</name><argument_list>( <argument><expr><name><name>p_page</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><name><name>p_page</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name><name>p_page</name><operator>.</operator><name>columns</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_num_rows</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_first_row</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>i_first_row</name> <operator>=</operator> <name><name>p_page</name><operator>.</operator><name>rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_num_rows</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i_num_rows</name> <operator>=</operator> <call><name>get_last_visible_row</name><argument_list>( <argument><expr><name><name>p_page</name><operator>.</operator><name>text</name></name></expr></argument>, <argument><expr><name><name>p_page</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name><name>p_page</name><operator>.</operator><name>columns</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <name>i_first_row</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZVBI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"After top and tail of page we have rows %i-%i of %i"</literal></expr></argument>,
<argument><expr><name>i_first_row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i_first_row</name> <operator>+</operator> <name>i_num_rows</name></expr></argument>, <argument><expr><name><name>p_page</name><operator>.</operator><name>rows</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>Subpicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_text</name></name></expr></argument>,
<argument><expr><name><name>p_page</name><operator>.</operator><name>columns</name></name></expr></argument>, <argument><expr><name>i_num_rows</name></expr></argument>,
<argument><expr><name>i_align</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_text</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_textsize</name> <init>= <expr><literal type="number">7000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_total</name></decl>,<decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>p_text</name><index>[<expr><name>i_textsize</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_total</name> <operator>=</operator> <call><name>vbi_print_page_region</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_page</name></expr></argument>, <argument><expr><name>p_text</name></expr></argument>, <argument><expr><name>i_textsize</name></expr></argument>,
<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_first_row</name></expr></argument>, <argument><expr><name><name>p_page</name><operator>.</operator><name>columns</name></name></expr></argument>, <argument><expr><name>i_num_rows</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>offset</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>offset</name><operator>&lt;</operator><name>i_total</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>( <argument><expr><name><name>p_text</name><index>[<expr><name>i_total</name><operator>-</operator><name>offset</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>offset</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_text</name><index>[<expr><name>i_total</name><operator>-</operator><name>offset</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>i_total</name> <operator>-=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<while>while<condition>( <expr><name>offset</name> <operator>&lt;</operator> <name>i_total</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>( <argument><expr><name><name>p_text</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><name>subtext_updater_sys_t</name> <modifier>*</modifier></type><name>p_spu_sys</name> <init>= <expr><name><name>p_spu</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>p_segments</name></name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_text</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>p_segments</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_opaque</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>p_segments</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>p_segments</name><operator>-&gt;</operator><name>style</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>p_segments</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>=</operator> <name>STYLE_BACKGROUND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>p_segments</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>inner_align</name></name> <operator>=</operator> <name>i_align</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>UPDT_REGION_IGNORE_BACKGROUND</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZVBI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"page %x-%x(%d)\n\"%s\""</literal></expr></argument>, <argument><expr><name><name>p_page</name><operator>.</operator><name>pgno</name></name></expr></argument>, <argument><expr><name><name>p_page</name><operator>.</operator><name>subno</name></name></expr></argument>, <argument><expr><name>i_total</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_text</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_picture</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>fmt</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name>i_first_row</name><operator>*</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <name><name>p_page</name><operator>.</operator><name>columns</name></name><operator>*</operator><literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <name><name>p_page</name><operator>.</operator><name>rows</name></name><operator>*</operator><literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vbi_draw_vt_page_region</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_page</name></expr></argument>, <argument><expr><name>ZVBI_PIXFMT_RGBA32</name></expr></argument>,
<argument><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_first_row</name></expr></argument>, <argument><expr><name><name>p_page</name><operator>.</operator><name>columns</name></name></expr></argument>, <argument><expr><name>i_num_rows</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>nav_link</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_page</name><operator>.</operator><name>nav_link</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>nav_link</name></name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OpaquePage</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>b_opaque</name></expr></argument>, <argument><expr><name>i_first_row</name> <operator>*</operator> <name><name>p_page</name><operator>.</operator><name>columns</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>exit</name>:</label>
<expr_stmt><expr><call><name>vbi_unref_page</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_page</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_spu</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decoder_QueueSub</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>vbi_unref_page</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_page</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>Subpicture</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_text</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_columns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_align</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>( <expr><name>b_text</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>decoder_NewSubpictureText</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>decoder_NewSubpicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"can't get spu buffer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><ternary><condition><expr><name>b_text</name></expr> ?</condition><then> <expr><name>VLC_CODEC_TEXT</name></expr> </then><else>: <expr><name>VLC_CODEC_RGBA</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_text</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name>i_columns</name> <operator>*</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name>i_rows</name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <call><name>subpicture_region_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate SPU region"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name>i_pts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <ternary><condition><expr><name>b_text</name></expr> ?</condition><then> <expr><name>i_pts</name> <operator>+</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <ternary><condition><expr><name>b_text</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_text</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>i_align</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>p_fmt</name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
<return>return <expr><name>p_spu</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EventHandler</name><parameter_list>( <parameter><decl><type><name>vbi_event</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>user_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ev</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VBI_EVENT_TTX_PAGE</name></expr> )</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZVBI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Page %03x.%02x "</literal></expr></argument>,
<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>ttx_page</name><operator>.</operator><name>pgno</name></name></expr></argument>,
<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>ttx_page</name><operator>.</operator><name>subno</name></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_page</name></name> <operator>==</operator> <call><name>vbi_bcd2dec</name><argument_list>( <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>ttx_page</name><operator>.</operator><name>pgno</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_update</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZVBI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>ev</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>ttx_page</name><operator>.</operator><name>clock_update</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"clock"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>ev</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>ttx_page</name><operator>.</operator><name>header_update</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"header"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>ev</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VBI_EVENT_CLOSE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Close event"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>ev</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VBI_EVENT_CAPTION</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Caption line: %x"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>caption</name><operator>.</operator><name>pgno</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>ev</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VBI_EVENT_NETWORK</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Network change"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vbi_network</name></type> <name>n</name> <init>= <expr><name><name>ev</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>network</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Network id:%d name: %s, call: %s "</literal></expr></argument>, <argument><expr><name><name>n</name><operator>.</operator><name>nuid</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>.</operator><name>call</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>ev</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VBI_EVENT_TRIGGER</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Trigger event"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>ev</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VBI_EVENT_ASPECT</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Aspect update"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>ev</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VBI_EVENT_PROG_INFO</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Program info received"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>ev</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VBI_EVENT_NETWORK_ID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Network ID changed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_first_visible_row</name><parameter_list>( <parameter><decl><type><name>vbi_char</name> <modifier>*</modifier></type><name>p_text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name> <operator>*</operator> <name>columns</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_text</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opacity</name> <operator>!=</operator> <name>VBI_TRANSPARENT_SPACE</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>i</name> <operator>/</operator> <name>columns</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_last_visible_row</name><parameter_list>( <parameter><decl><type><name>vbi_char</name> <modifier>*</modifier></type><name>p_text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>rows</name> <operator>*</operator> <name>columns</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_text</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opacity</name> <operator>!=</operator> <name>VBI_TRANSPARENT_SPACE</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name> <operator>/</operator> <name>columns</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpaquePage</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vbi_page</name> <modifier>*</modifier></type><name>p_page</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>text_offset</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_RGBA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vbi_opacity</name></type> <name>opacity</name> <init>= <expr><name><name>p_page</name><operator>-&gt;</operator><name>text</name><index>[ <expr><name>text_offset</name> <operator>+</operator> <name>y</name><operator>/</operator><literal type="number">10</literal> <operator>*</operator> <name><name>p_page</name><operator>-&gt;</operator><name>columns</name></name> <operator>+</operator> <name>x</name><operator>/</operator><literal type="number">12</literal></expr> ]</index></name><operator>.</operator><name>opacity</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>background</name> <init>= <expr><name><name>p_page</name><operator>-&gt;</operator><name>text</name><index>[ <expr><name>text_offset</name> <operator>+</operator> <name>y</name><operator>/</operator><literal type="number">10</literal> <operator>*</operator> <name><name>p_page</name><operator>-&gt;</operator><name>columns</name></name> <operator>+</operator> <name>x</name><operator>/</operator><literal type="number">12</literal></expr> ]</index></name><operator>.</operator><name>background</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_pixel</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_src</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>p_src</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>opacity</name></expr> )</condition>
<block>{<block_content>




<case>case <expr><name>VBI_OPAQUE</name></expr>:</case>

<case>case <expr><name>VBI_SEMI_TRANSPARENT</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name>b_opaque</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<case>case <expr><name>VBI_TRANSPARENT_FULL</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><name>p_pixel</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><literal type="number">0xff000000</literal> <operator>|</operator> <name><name>p_page</name><operator>-&gt;</operator><name>color_map</name><index>[<expr><name>background</name></expr>]</index></name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<case>case <expr><name>VBI_TRANSPARENT_SPACE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p_pixel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>RequestPage</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>want_navlink</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>( <expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>ZVBI_KEY_RED</name></expr>:</case>
<expr_stmt><expr><name>want_navlink</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ZVBI_KEY_GREEN</name></expr>:</case>
<expr_stmt><expr><name>want_navlink</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ZVBI_KEY_YELLOW</name></expr>:</case>
<expr_stmt><expr><name>want_navlink</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ZVBI_KEY_BLUE</name></expr>:</case>
<expr_stmt><expr><name>want_navlink</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ZVBI_KEY_INDEX</name></expr>:</case>
<expr_stmt><expr><name>want_navlink</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>want_navlink</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>page</name> <init>= <expr><call><name>vbi_bcd2dec</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>nav_link</name><index>[<expr><name>want_navlink</name></expr>]</index></name><operator>.</operator><name>pgno</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>page</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>page</name> <operator>&lt;</operator> <literal type="number">999</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name> <operator>=</operator> <name>page</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_subpage</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>nav_link</name><index>[<expr><name>want_navlink</name></expr>]</index></name><operator>.</operator><name>subno</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>newval</name><operator>.</operator><name>i_int</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name> <operator>&lt;</operator> <literal type="number">999</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_subpage</name></name> <operator>=</operator> <name>VBI_ANY_SUBNO</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Opaque</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_opaque</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>b_bool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_update</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
