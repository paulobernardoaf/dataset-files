<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\cc.c">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"substext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cea708.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Debug</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>code</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Debug</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPAQUE_TEXT</name></cpp:macro> <cpp:value>N_("Opacity")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPAQUE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Setting to true " "makes the text to be boxed and maybe easier to read." )</cpp:value></cpp:define>


<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"CC 608/708"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Closed Captions decoder"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"spu decoder"</literal></argument>, <argument><literal type="number">50</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_SCODEC</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"cc-opaque"</literal></argument>, <argument>true</argument>,
<argument>OPAQUE_TEXT</argument>, <argument>OPAQUE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<typedef>typedef <type><enum>enum
<block>{
<decl><name>EIA608_MODE_POPUP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>EIA608_MODE_ROLLUP_2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>EIA608_MODE_ROLLUP_3</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>EIA608_MODE_ROLLUP_4</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>EIA608_MODE_PAINTON</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>EIA608_MODE_TEXT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>
}</block></enum></type> <name>eia608_mode_t</name>;</typedef>

<typedef>typedef <type><enum>enum
<block>{
<decl><name>EIA608_COLOR_WHITE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>EIA608_COLOR_GREEN</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>EIA608_COLOR_BLUE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>EIA608_COLOR_CYAN</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>EIA608_COLOR_RED</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>EIA608_COLOR_YELLOW</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>EIA608_COLOR_MAGENTA</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>EIA608_COLOR_USERDEFINED</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>
}</block></enum></type> <name>eia608_color_t</name>;</typedef>

<typedef>typedef <type><enum>enum
<block>{
<decl><name>EIA608_FONT_REGULAR</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>EIA608_FONT_ITALICS</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>EIA608_FONT_UNDERLINE</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>EIA608_FONT_UNDERLINE_ITALICS</name> <init>= <expr><name>EIA608_FONT_UNDERLINE</name> <operator>|</operator> <name>EIA608_FONT_ITALICS</name></expr></init></decl>
}</block></enum></type> <name>eia608_font_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EIA608_SCREEN_ROWS</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EIA608_SCREEN_COLUMNS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EIA608_MARGIN</name></cpp:macro> <cpp:value>0.10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EIA608_VISIBLE</name></cpp:macro> <cpp:value>(1.0 - EIA608_MARGIN * 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FONT_TO_LINE_HEIGHT_RATIO</name></cpp:macro> <cpp:value>1.06</cpp:value></cpp:define>

<struct>struct <name>eia608_screen</name> 
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>characters</name><index>[<expr><name>EIA608_SCREEN_ROWS</name></expr>]</index><index>[<expr><name>EIA608_SCREEN_COLUMNS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eia608_color_t</name></type> <name><name>colors</name><index>[<expr><name>EIA608_SCREEN_ROWS</name></expr>]</index><index>[<expr><name>EIA608_SCREEN_COLUMNS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eia608_font_t</name></type> <name><name>fonts</name><index>[<expr><name>EIA608_SCREEN_ROWS</name></expr>]</index><index>[<expr><name>EIA608_SCREEN_COLUMNS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>row_used</name><index>[<expr><name>EIA608_SCREEN_ROWS</name></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>eia608_screen</name></name></type> <name>eia608_screen</name>;</typedef>

<typedef>typedef <type><enum>enum
<block>{
<decl><name>EIA608_STATUS_DEFAULT</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>EIA608_STATUS_CHANGED</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>, 
<decl><name>EIA608_STATUS_CAPTION_ENDED</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>, 
<decl><name>EIA608_STATUS_CAPTION_CLEARED</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>, 
<decl><name>EIA608_STATUS_DISPLAY</name> <init>= <expr><name>EIA608_STATUS_CAPTION_CLEARED</name> <operator>|</operator> <name>EIA608_STATUS_CAPTION_ENDED</name></expr></init></decl>,
}</block></enum></type> <name>eia608_status_t</name>;</typedef>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>eia608_color_t</name></type> <name>i_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eia608_font_t</name></type> <name>i_font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_column</name></decl>;</decl_stmt>
}</block> <decl><name><name>pac2_attribs</name><index>[]</index></name><init>= <expr><block>{
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_REGULAR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_UNDERLINE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_GREEN</name></expr>, <expr><name>EIA608_FONT_REGULAR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_GREEN</name></expr>, <expr><name>EIA608_FONT_UNDERLINE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_BLUE</name></expr>, <expr><name>EIA608_FONT_REGULAR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_BLUE</name></expr>, <expr><name>EIA608_FONT_UNDERLINE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_CYAN</name></expr>, <expr><name>EIA608_FONT_REGULAR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_CYAN</name></expr>, <expr><name>EIA608_FONT_UNDERLINE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_RED</name></expr>, <expr><name>EIA608_FONT_REGULAR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_RED</name></expr>, <expr><name>EIA608_FONT_UNDERLINE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_YELLOW</name></expr>, <expr><name>EIA608_FONT_REGULAR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_YELLOW</name></expr>, <expr><name>EIA608_FONT_UNDERLINE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_MAGENTA</name></expr>, <expr><name>EIA608_FONT_REGULAR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_MAGENTA</name></expr>, <expr><name>EIA608_FONT_UNDERLINE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_ITALICS</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_UNDERLINE_ITALICS</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_REGULAR</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_UNDERLINE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_REGULAR</name></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_UNDERLINE</name></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_REGULAR</name></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_UNDERLINE</name></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_REGULAR</name></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_UNDERLINE</name></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_REGULAR</name></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_UNDERLINE</name></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_REGULAR</name></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_UNDERLINE</name></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_REGULAR</name></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_UNDERLINE</name></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_REGULAR</name></expr>, <expr><literal type="number">28</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>EIA608_COLOR_WHITE</name></expr>, <expr><name>EIA608_FONT_UNDERLINE</name></expr>, <expr><literal type="number">28</literal></expr> }</block></expr> ,
}</block></expr></init></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EIA608_COLOR_DEFAULT</name></cpp:macro> <cpp:value>EIA608_COLOR_WHITE</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>rgi_eia608_colors</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xffffff</literal></expr>, 
<expr><literal type="number">0x00ff00</literal></expr>, 
<expr><literal type="number">0x0000ff</literal></expr>, 
<expr><literal type="number">0x00ffff</literal></expr>, 
<expr><literal type="number">0xff0000</literal></expr>, 
<expr><literal type="number">0xffff00</literal></expr>, 
<expr><literal type="number">0xff00ff</literal></expr>, 
<expr><literal type="number">0xffffff</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct
<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_channel</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_screen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>eia608_screen</name></type> <name><name>screen</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_column</name></decl>;</decl_stmt>
}</block> <decl><name>cursor</name></decl>;</struct>


<decl_stmt><decl><type><name>eia608_mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eia608_color_t</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eia608_font_t</name></type> <name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_row_rollup</name></decl>;</decl_stmt>


<struct>struct
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>d1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>d2</name></decl>;</decl_stmt>
}</block> <decl><name>last</name></decl>;</struct>
}</block></struct></type> <name>eia608_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Eia608Init</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>eia608_status_t</name></type> <name>Eia608Parse</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_channel_selected</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Eia608FillUpdaterRegions</name><parameter_list>( <parameter><decl><type><name>subtext_updater_sys_t</name> <modifier>*</modifier></type><name>p_updater</name></decl></parameter>, <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_MAX_REORDER_SIZE</name></cpp:macro> <cpp:value>(64)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_field</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_reorder_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cea708_demux_t</name> <modifier>*</modifier></type><name>p_dtvcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>p_eia608</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_opaque</name></decl>;</decl_stmt>
}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DTVCC_ServiceData_Handler</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_sid</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_sid</name> <operator>==</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_channel</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CEA708_Decoder_Push</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cea708</name></name></expr></argument>, <argument><expr><name>i_time</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_CEA608</name> <operator>||</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_channel</name></name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_CEA708</name> <operator>||</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_channel</name></name> <operator>&gt;</operator> <literal type="number">63</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>Decode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_CEA608</name></expr> )</condition>
<block>{<block_content>




<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_field</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_channel</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_channel</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_eia608</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_eia608</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_eia608</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Eia608Init</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_eia608</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dtvcc</name></name> <operator>=</operator> <call><name>CEA708_DTVCC_Demuxer_New</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>DTVCC_ServiceData_Handler</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_dtvcc</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cea708</name></name> <operator>=</operator> <call><name>CEA708_Decoder_New</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_cea708</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CEA708_DTVCC_Demuxer_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dtvcc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_channel</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_opaque</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"cc-opaque"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_reorder_depth</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_reorder_depth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_TEXT</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_eia608</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Eia608Init</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_eia608</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>CEA708_DTVCC_Demuxer_Flush</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dtvcc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CEA708_Decoder_Flush</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cea708</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_queue</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_queue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_queue</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Push</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Pop</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Convert</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>DoDecode</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_drain</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>Pop</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>b_drain</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Convert</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_DISCONTINUITY</name> <operator>|</operator> <name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr> )</condition>
<block>{<block_content>

<for>for<control>( <init>;</init> <condition><expr><call><name>DoDecode</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr> ;</condition> <incr/>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_eia608</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Eia608Init</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_eia608</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>CEA708_DTVCC_Demuxer_Flush</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dtvcc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CEA708_Decoder_Flush</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cea708</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator> <operator>||</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_reorder_depth</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>


<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_B</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<for>for<control>( <init>;</init> <condition><expr><call><name>DoDecode</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Push</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_no_reorder</name> <init>= <expr><operator>(</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_reorder_depth</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for<control>( <init>;</init> <condition><expr><call><name>DoDecode</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>(</operator><name>p_block</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <name>b_no_reorder</name></expr></argument> )</argument_list></call></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_eia608</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cea708</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CEA708_Decoder_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cea708</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CEA708_DTVCC_Demuxer_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dtvcc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_queue</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Push</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_queue</name></name> <operator>&gt;=</operator> <name>CC_MAX_REORDER_SIZE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><call><name>Pop</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Trashing a CC entry"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>pp_block</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_queue</name></name></expr>;</init> <condition><expr><operator>*</operator><name>pp_block</name></expr> ;</condition> <incr><expr><name>pp_block</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_block</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name> <operator>||</operator> <name><operator>(</operator><operator>*</operator><name>pp_block</name><operator>)</operator><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>&lt;</operator> <name><operator>(</operator><operator>*</operator><name>pp_block</name><operator>)</operator><operator>-&gt;</operator><name>i_pts</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_reorder_depth</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_queue</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_reorder_depth</name></name> <operator>&amp;&amp;</operator>
<name>pp_block</name> <operator>==</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_queue</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Increasing reorder depth to %d"</literal></expr></argument>, <argument><expr><operator>++</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_reorder_depth</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>pp_block</name></expr> ?</condition><then> <expr><operator>*</operator><name>pp_block</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_queue</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Pop</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_forced</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_queue</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_forced</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_queue</name></name> <operator>&lt;</operator> <name>CC_MAX_REORDER_SIZE</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_queue</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_reorder_depth</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_reorder_depth</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_queue</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_queue</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_queue</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>Subtitle</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>i_pts</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>decoder_NewSubpictureText</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name>i_pts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name>i_pts</name> <operator>+</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subtext_updater_sys_t</name> <modifier>*</modifier></type><name>p_spu_sys</name> <init>= <expr><name><name>p_spu</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_dec_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name><operator>|</operator><name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>inner_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name><operator>|</operator><name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>UPDT_REGION_IGNORE_BACKGROUND</name> <operator>|</operator> <name>UPDT_REGION_USES_GRID_COORDINATES</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_MONOSPACED</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_dec_sys</name><operator>-&gt;</operator><name>b_opaque</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>i_background_alpha</name></name> <operator>=</operator> <name>STYLE_ALPHA_OPAQUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_BACKGROUND_ALPHA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_BACKGROUND</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>margin_ratio</name></name> <operator>=</operator> <name>EIA608_MARGIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <name><name>rgi_eia608_colors</name><index>[<expr><name>EIA608_COLOR_DEFAULT</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <name>EIA608_VISIBLE</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>EIA608_SCREEN_ROWS</name> <operator>/</operator>
<name>FONT_TO_LINE_HEIGHT_RATIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <operator>(</operator><name>STYLE_HAS_FONT_COLOR</name> <operator>|</operator> <name>STYLE_HAS_FLAGS</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Eia608FillUpdaterRegions</name><argument_list>( <argument><expr><name>p_spu_sys</name></expr></argument>, <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_spu</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Convert</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_ticks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>( <expr><name>i_buffer</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x04</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_spupts</name> <init>= <expr><name>i_pts</name> <operator>+</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name>i_ticks</name></expr></argument>, <argument><expr><literal type="number">1200</literal><operator>/</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_eia608</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_field</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>eia608_status_t</name></type> <name>i_status</name> <init>= <expr><call><name>Eia608Parse</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_eia608</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channel</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>








<if_stmt><if>if<condition>( <expr><name>i_status</name> <operator>&amp;</operator> <operator>(</operator><name>EIA608_STATUS_DISPLAY</name> <operator>|</operator> <name>EIA608_STATUS_CHANGED</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><call><name>Subtitle</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_eia608</name></name></expr></argument>, <argument><expr><name>i_spupts</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_spu</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decoder_QueueSub</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cea708</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CEA708_DTVCC_Demuxer_Push</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dtvcc</name></name></expr></argument>, <argument><expr><name>i_spupts</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ticks</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_buffer</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buffer</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>Eia608Cursor</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_column</name></name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_column</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_column</name></name> <operator>&gt;</operator> <name>EIA608_SCREEN_COLUMNS</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_column</name></name> <operator>=</operator> <name>EIA608_SCREEN_COLUMNS</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>Eia608ClearScreenRowX</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_screen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>eia608_screen</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>screen</name><index>[<expr><name>i_screen</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>screen</name><operator>-&gt;</operator><name>row_used</name><index>[<expr><name>i_row</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>screen</name><operator>-&gt;</operator><name>row_used</name><index>[<expr><name>i_row</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>x</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>screen</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name>i_row</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal> <operator>||</operator>
<name><name>screen</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>i_row</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>EIA608_COLOR_DEFAULT</name> <operator>||</operator>
<name><name>screen</name><operator>-&gt;</operator><name>fonts</name><index>[<expr><name>i_row</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>EIA608_FONT_REGULAR</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>screen</name><operator>-&gt;</operator><name>row_used</name><index>[<expr><name>i_row</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>EIA608_SCREEN_COLUMNS</name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>screen</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name>i_row</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>x</name> <operator>&lt;</operator> <name>EIA608_SCREEN_COLUMNS</name></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><literal type="char">'\0'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>screen</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>i_row</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>EIA608_COLOR_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>screen</name><operator>-&gt;</operator><name>fonts</name><index>[<expr><name>i_row</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>EIA608_FONT_REGULAR</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Eia608ClearScreenRow</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_screen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_row</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Eia608ClearScreenRowX</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>i_screen</name></expr></argument>, <argument><expr><name>i_row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Eia608ClearScreen</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_screen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>EIA608_SCREEN_ROWS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Eia608ClearScreenRow</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>i_screen</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Eia608GetWritingScreenIndex</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>mode</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>EIA608_MODE_POPUP</name></expr>:</case> 
<return>return <expr><literal type="number">1</literal> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>i_screen</name></name></expr>;</return>

<case>case <expr><name>EIA608_MODE_ROLLUP_2</name></expr>:</case> 
<case>case <expr><name>EIA608_MODE_ROLLUP_3</name></expr>:</case>
<case>case <expr><name>EIA608_MODE_ROLLUP_4</name></expr>:</case>
<case>case <expr><name>EIA608_MODE_PAINTON</name></expr>:</case>
<return>return <expr><name><name>h</name><operator>-&gt;</operator><name>i_screen</name></name></expr>;</return>
<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Eia608EraseScreen</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_displayed</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Eia608ClearScreen</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><ternary><condition><expr><name>b_displayed</name></expr> ?</condition><then> <expr><name><name>h</name><operator>-&gt;</operator><name>i_screen</name></name></expr> </then><else>: <expr><operator>(</operator><literal type="number">1</literal><operator>-</operator><name><name>h</name><operator>-&gt;</operator><name>i_screen</name></name><operator>)</operator></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Eia608Write</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>c</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_row</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_row</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_column</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_column</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eia608_screen</name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>EIA608_MODE_TEXT</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>screen</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>screen</name><index>[<expr><call><name>Eia608GetWritingScreenIndex</name><argument_list>( <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>screen</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name>i_row</name></expr>]</index><index>[<expr><name>i_column</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>screen</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>i_row</name></expr>]</index><index>[<expr><name>i_column</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>screen</name><operator>-&gt;</operator><name>fonts</name><index>[<expr><name>i_row</name></expr>]</index><index>[<expr><name>i_column</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>font</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>screen</name><operator>-&gt;</operator><name>row_used</name><index>[<expr><name>i_row</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eia608Cursor</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>Eia608Erase</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_row</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_row</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_column</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_column</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eia608_screen</name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>EIA608_MODE_TEXT</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_column</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>screen</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>screen</name><index>[<expr><call><name>Eia608GetWritingScreenIndex</name><argument_list>( <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>screen</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name>i_row</name></expr>]</index><index>[<expr><name>i_column</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eia608Cursor</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>Eia608EraseToEndOfRow</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>EIA608_MODE_TEXT</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Eia608ClearScreenRowX</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>Eia608GetWritingScreenIndex</name><argument_list>( <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_row</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_column</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Eia608RollUp</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>EIA608_MODE_TEXT</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_screen</name> <init>= <expr><call><name>Eia608GetWritingScreenIndex</name><argument_list>( <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eia608_screen</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>screen</name><index>[<expr><name>i_screen</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keep_lines</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>EIA608_MODE_ROLLUP_2</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keep_lines</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>EIA608_MODE_ROLLUP_3</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keep_lines</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>EIA608_MODE_ROLLUP_4</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keep_lines</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return;</return></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_row</name></name> <operator>-</operator> <name>keep_lines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Eia608ClearScreenRow</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>i_screen</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keep_lines</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_row</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_row</name></name> <operator>-</operator> <name>keep_lines</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_row</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_row</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>EIA608_SCREEN_ROWS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>screen</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name>i_row</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>screen</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name>i_row</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>screen</name><operator>-&gt;</operator><name>characters</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>screen</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>i_row</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>screen</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>i_row</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>screen</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>screen</name><operator>-&gt;</operator><name>fonts</name><index>[<expr><name>i_row</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>screen</name><operator>-&gt;</operator><name>fonts</name><index>[<expr><name>i_row</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>screen</name><operator>-&gt;</operator><name>fonts</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>screen</name><operator>-&gt;</operator><name>row_used</name><index>[<expr><name>i_row</name></expr>]</index></name> <operator>=</operator> <name><name>screen</name><operator>-&gt;</operator><name>row_used</name><index>[<expr><name>i_row</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>Eia608ClearScreenRow</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>i_screen</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_row</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>Eia608ParseChannel</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>p4</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p4</name><index>[<expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name> <operator>==</operator> <name><name>p4</name><index>[<expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name> <operator>||</operator>
<name><name>p4</name><index>[<expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name> <operator>==</operator> <name><name>p4</name><index>[ <expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1</name> <init>= <expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>d1</name> <operator>&gt;=</operator> <literal type="number">0x10</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>&lt;=</operator> <literal type="number">0x1f</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>d1</name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>d1</name> <operator>&lt;</operator> <literal type="number">0x10</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>eia608_status_t</name></type> <name>Eia608ParseTextAttribute</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>d2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_index</name> <init>= <expr><name>d2</name> <operator>-</operator> <literal type="number">0x20</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>d2</name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>&lt;=</operator> <literal type="number">0x2f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[TA %d]"</literal></expr></argument>, <argument><expr><name>i_index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name><name>pac2_attribs</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>font</name></name> <operator>=</operator> <name><name>pac2_attribs</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_font</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eia608Cursor</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EIA608_STATUS_DEFAULT</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>eia608_status_t</name></type> <name>Eia608ParseSingle</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>dx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>dx</name> <operator>&gt;=</operator> <literal type="number">0x20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eia608Write</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>dx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EIA608_STATUS_CHANGED</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>eia608_status_t</name></type> <name>Eia608ParseDouble</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>d2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>d2</name> <operator>&gt;=</operator> <literal type="number">0x30</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>&lt;=</operator> <literal type="number">0x3f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033[0;33m%s\033[0m"</literal></expr></argument>, <argument><expr><name>d2</name> <operator>+</operator> <literal type="number">0x50</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eia608Write</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>d2</name> <operator>+</operator> <literal type="number">0x50</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><name>EIA608_STATUS_CHANGED</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>eia608_status_t</name></type> <name>Eia608ParseExtended</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>d1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>d2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>d2</name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>&lt;=</operator> <literal type="number">0x3f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>d1</name> <operator>==</operator> <literal type="number">0x12</literal> <operator>||</operator> <name>d1</name> <operator>==</operator> <literal type="number">0x13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>d1</name> <operator>==</operator> <literal type="number">0x12</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d2</name> <operator>+=</operator> <literal type="number">0x70</literal></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>d2</name> <operator>+=</operator> <literal type="number">0x90</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[EXT %x-&gt;'%c']"</literal></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Eia608Cursor</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eia608Write</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>d2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EIA608_STATUS_CHANGED</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>eia608_status_t</name></type> <name>Eia608ParseCommand0x14</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>d2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>eia608_status_t</name></type> <name>i_status</name> <init>= <expr><name>EIA608_STATUS_DEFAULT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eia608_mode_t</name></type> <name>proposed_mode</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>d2</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x20</literal></expr>:</case> 
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[RCL]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>EIA608_MODE_POPUP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x21</literal></expr>:</case> 
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[BS]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eia608Erase</name><argument_list>( <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>EIA608_STATUS_CHANGED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x22</literal></expr>:</case> 
<case>case <expr><literal type="number">0x23</literal></expr>:</case>
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[ALARM %d]"</literal></expr></argument>, <argument><expr><name>d2</name> <operator>-</operator> <literal type="number">0x22</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x24</literal></expr>:</case> 
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[DER]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eia608EraseToEndOfRow</name><argument_list>( <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x25</literal></expr>:</case> 
<case>case <expr><literal type="number">0x26</literal></expr>:</case> 
<case>case <expr><literal type="number">0x27</literal></expr>:</case> 
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[RU%d]"</literal></expr></argument>, <argument><expr><name>d2</name> <operator>-</operator> <literal type="number">0x23</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>EIA608_MODE_POPUP</name> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>EIA608_MODE_PAINTON</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Eia608EraseScreen</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eia608EraseScreen</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>EIA608_STATUS_CHANGED</name> <operator>|</operator> <name>EIA608_STATUS_CAPTION_CLEARED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>d2</name> <operator>==</operator> <literal type="number">0x25</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>proposed_mode</name> <operator>=</operator> <name>EIA608_MODE_ROLLUP_2</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>d2</name> <operator>==</operator> <literal type="number">0x26</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>proposed_mode</name> <operator>=</operator> <name>EIA608_MODE_ROLLUP_3</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>proposed_mode</name> <operator>=</operator> <name>EIA608_MODE_ROLLUP_4</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name>proposed_mode</name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>mode</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>proposed_mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_row</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>i_row_rollup</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x28</literal></expr>:</case> 
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[FON]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
<case>case <expr><literal type="number">0x29</literal></expr>:</case> 
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[RDC]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>EIA608_MODE_PAINTON</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x2a</literal></expr>:</case> 
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[TR]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x2b</literal></expr>:</case> 
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[RTD]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>EIA608_MODE_TEXT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x2c</literal></expr>:</case> 
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[EDM]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eia608EraseScreen</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>EIA608_STATUS_CHANGED</name> <operator>|</operator> <name>EIA608_STATUS_CAPTION_CLEARED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x2d</literal></expr>:</case> 
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[CR]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eia608RollUp</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>EIA608_STATUS_CHANGED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x2e</literal></expr>:</case> 
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[ENM]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eia608EraseScreen</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x2f</literal></expr>:</case> 
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[EOC]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>EIA608_MODE_PAINTON</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_screen</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>i_screen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>EIA608_MODE_POPUP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>EIA608_COLOR_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>font</name></name> <operator>=</operator> <name>EIA608_FONT_REGULAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>EIA608_STATUS_CHANGED</name> <operator>|</operator> <name>EIA608_STATUS_CAPTION_ENDED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>i_status</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>Eia608ParseCommand0x17</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>d2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>( <expr><name>d2</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x21</literal></expr>:</case> 
<case>case <expr><literal type="number">0x22</literal></expr>:</case> 
<case>case <expr><literal type="number">0x23</literal></expr>:</case> 
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[TO%d]"</literal></expr></argument>, <argument><expr><name>d2</name> <operator>-</operator> <literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eia608Cursor</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>d2</name> <operator>-</operator> <literal type="number">0x20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>Eia608ParsePac</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>d1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>d2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_row</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">11</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_row_index</name> <init>= <expr><operator>(</operator> <operator>(</operator><name>d1</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0e</literal><operator>)</operator> <operator>|</operator> <operator>(</operator> <operator>(</operator><name>d2</name><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[PAC,%d]"</literal></expr></argument>, <argument><expr><name>i_row_index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>d2</name> <operator>&gt;=</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pi_row</name><index>[<expr><name>i_row_index</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>EIA608_MODE_TEXT</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_row</name></name> <operator>=</operator> <name><name>pi_row</name><index>[<expr><name>i_row_index</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_row_rollup</name></name> <operator>=</operator> <name><name>pi_row</name><index>[<expr><name>i_row_index</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>d2</name> <operator>&gt;=</operator> <literal type="number">0x60</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d2</name> <operator>-=</operator> <literal type="number">0x60</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>d2</name> <operator>&gt;=</operator> <literal type="number">0x40</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d2</name> <operator>-=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_column</name></name> <operator>=</operator> <name><name>pac2_attribs</name><index>[<expr><name>d2</name></expr>]</index></name><operator>.</operator><name>i_column</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name><name>pac2_attribs</name><index>[<expr><name>d2</name></expr>]</index></name><operator>.</operator><name>i_color</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>font</name></name> <operator>=</operator> <name><name>pac2_attribs</name><index>[<expr><name>d2</name></expr>]</index></name><operator>.</operator><name>i_font</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>eia608_status_t</name></type> <name>Eia608ParseData</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>d1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>d2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>eia608_status_t</name></type> <name>i_status</name> <init>= <expr><name>EIA608_STATUS_DEFAULT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>d1</name> <operator>&gt;=</operator> <literal type="number">0x18</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>&lt;=</operator> <literal type="number">0x1f</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d1</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ON</name><parameter_list>( <parameter><type><name>d2min</name></type></parameter>, <parameter><type><name>d2max</name></type></parameter>, <parameter><type><name>cmd</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { if( d2 &gt;= d2min &amp;&amp; d2 &lt;= d2max ) i_status = cmd; } while(0)</cpp:value></cpp:define>
<switch>switch<condition>( <expr><name>d1</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x11</literal></expr>:</case>
<expr_stmt><expr><call><name>ON</name><argument_list>( <argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><literal type="number">0x2f</literal></expr></argument>, <argument><expr><call><name>Eia608ParseTextAttribute</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>d2</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ON</name><argument_list>( <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0x3f</literal></expr></argument>, <argument><expr><call><name>Eia608ParseDouble</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>d2</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x12</literal></expr>:</case> <case>case <expr><literal type="number">0x13</literal></expr>:</case>
<expr_stmt><expr><call><name>ON</name><argument_list>( <argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><literal type="number">0x3f</literal></expr></argument>, <argument><expr><call><name>Eia608ParseExtended</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x14</literal></expr>:</case> <case>case <expr><literal type="number">0x15</literal></expr>:</case>
<expr_stmt><expr><call><name>ON</name><argument_list>( <argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><literal type="number">0x2f</literal></expr></argument>, <argument><expr><call><name>Eia608ParseCommand0x14</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>d2</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x17</literal></expr>:</case>
<expr_stmt><expr><call><name>ON</name><argument_list>( <argument><expr><literal type="number">0x21</literal></expr></argument>, <argument><expr><literal type="number">0x23</literal></expr></argument>, <argument><expr><call><name>Eia608ParseCommand0x17</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>d2</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ON</name><argument_list>( <argument><expr><literal type="number">0x2e</literal></expr></argument>, <argument><expr><literal type="number">0x2f</literal></expr></argument>, <argument><expr><call><name>Eia608ParseTextAttribute</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>d2</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if<condition>( <expr><name>d1</name> <operator>==</operator> <literal type="number">0x10</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ON</name><argument_list>( <argument><expr><literal type="number">0x40</literal></expr></argument>, <argument><expr><literal type="number">0x5f</literal></expr></argument>, <argument><expr><call><name>Eia608ParsePac</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>d1</name> <operator>&gt;=</operator> <literal type="number">0x11</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>&lt;=</operator> <literal type="number">0x17</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ON</name><argument_list>( <argument><expr><literal type="number">0x40</literal></expr></argument>, <argument><expr><literal type="number">0x7f</literal></expr></argument>, <argument><expr><call><name>Eia608ParsePac</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ON</name></cpp:undef>
<if_stmt><if>if<condition>( <expr><name>d1</name> <operator>&gt;=</operator> <literal type="number">0x20</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033[0;33m%c"</literal></expr></argument>, <argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <call><name>Eia608ParseSingle</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>d1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>d2</name> <operator>&gt;=</operator> <literal type="number">0x20</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_status</name> <operator>|=</operator> <call><name>Eia608ParseSingle</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>d2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033[0m"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>EIA608_MODE_POPUP</name> <operator>&amp;&amp;</operator> <name>i_status</name> <operator>==</operator> <name>EIA608_STATUS_CHANGED</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <name>EIA608_STATUS_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Eia608TextUtf8</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_utf8</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter> )</parameter_list> 
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E1</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ c, { u, '\0' } }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E2</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>u1</name></type></parameter>,<parameter><type><name>u2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ c, { u1, u2, '\0' } }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E3</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>u1</name></type></parameter>,<parameter><type><name>u2</name></type></parameter>,<parameter><type><name>u3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ c, { u1, u2, u3, '\0' } }</cpp:value></cpp:define>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>utf8</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>c2utf8</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x2a</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xa1</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x5c</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xa9</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x5e</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xad</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x5f</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xb3</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x60</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xba</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x7b</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xa7</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x7c</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xb7</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x7d</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x91</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x7e</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xb1</literal></expr></argument>)</argument_list></call></expr>, 


<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0xc2</literal></expr></argument>,<argument><expr><literal type="number">0xae</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x81</literal></expr></argument>, <argument><expr><literal type="number">0xc2</literal></expr></argument>,<argument><expr><literal type="number">0xb0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x82</literal></expr></argument>, <argument><expr><literal type="number">0xc2</literal></expr></argument>,<argument><expr><literal type="number">0xbd</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x83</literal></expr></argument>, <argument><expr><literal type="number">0xc2</literal></expr></argument>,<argument><expr><literal type="number">0xbf</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E3</name><argument_list>( <argument><expr><literal type="number">0x84</literal></expr></argument>, <argument><expr><literal type="number">0xe2</literal></expr></argument>,<argument><expr><literal type="number">0x84</literal></expr></argument>,<argument><expr><literal type="number">0xa2</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x85</literal></expr></argument>, <argument><expr><literal type="number">0xc2</literal></expr></argument>,<argument><expr><literal type="number">0xa2</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x86</literal></expr></argument>, <argument><expr><literal type="number">0xc2</literal></expr></argument>,<argument><expr><literal type="number">0xa3</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E3</name><argument_list>( <argument><expr><literal type="number">0x87</literal></expr></argument>, <argument><expr><literal type="number">0xe2</literal></expr></argument>,<argument><expr><literal type="number">0x99</literal></expr></argument>,<argument><expr><literal type="number">0xaa</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x88</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xa0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x89</literal></expr></argument>, <argument><expr><literal type="number">0xc2</literal></expr></argument>,<argument><expr><literal type="number">0xa0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x8a</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xa8</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x8b</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xa2</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x8c</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xaa</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x8d</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xae</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x8e</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xb4</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x8f</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xbb</literal></expr></argument>)</argument_list></call></expr>, 


<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x90</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x81</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x91</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x89</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x92</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x93</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x93</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x9a</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x94</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x9c</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x95</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xbc</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E1</name><argument_list>( <argument><expr><literal type="number">0x96</literal></expr></argument>, <argument><expr><literal type="number">0x27</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x97</literal></expr></argument>, <argument><expr><literal type="number">0xc2</literal></expr></argument>,<argument><expr><literal type="number">0xa1</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E1</name><argument_list>( <argument><expr><literal type="number">0x98</literal></expr></argument>, <argument><expr><literal type="number">0x2a</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E1</name><argument_list>( <argument><expr><literal type="number">0x99</literal></expr></argument>, <argument><expr><literal type="number">0x27</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E1</name><argument_list>( <argument><expr><literal type="number">0x9a</literal></expr></argument>, <argument><expr><literal type="number">0x2d</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0x9b</literal></expr></argument>, <argument><expr><literal type="number">0xc2</literal></expr></argument>,<argument><expr><literal type="number">0xa9</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E3</name><argument_list>( <argument><expr><literal type="number">0x9c</literal></expr></argument>, <argument><expr><literal type="number">0xe2</literal></expr></argument>,<argument><expr><literal type="number">0x84</literal></expr></argument>,<argument><expr><literal type="number">0xa0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E1</name><argument_list>( <argument><expr><literal type="number">0x9d</literal></expr></argument>, <argument><expr><literal type="number">0x2e</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E3</name><argument_list>( <argument><expr><literal type="number">0x9e</literal></expr></argument>, <argument><expr><literal type="number">0xe2</literal></expr></argument>,<argument><expr><literal type="number">0x80</literal></expr></argument>,<argument><expr><literal type="number">0x9c</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E3</name><argument_list>( <argument><expr><literal type="number">0x9f</literal></expr></argument>, <argument><expr><literal type="number">0xe2</literal></expr></argument>,<argument><expr><literal type="number">0x80</literal></expr></argument>,<argument><expr><literal type="number">0x9d</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xa0</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xa1</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x82</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xa2</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x87</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xa3</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x88</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xa4</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x8a</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xa5</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x8b</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xa6</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xab</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xa7</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x8e</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xa8</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x8f</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xa9</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xaf</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xaa</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x94</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xab</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x99</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xac</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xb9</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xad</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x9b</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xae</literal></expr></argument>, <argument><expr><literal type="number">0xc2</literal></expr></argument>,<argument><expr><literal type="number">0xab</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xaf</literal></expr></argument>, <argument><expr><literal type="number">0xc2</literal></expr></argument>,<argument><expr><literal type="number">0xbb</literal></expr></argument>)</argument_list></call></expr>, 


<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xb0</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x83</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xb1</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xa3</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xb2</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x8d</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xb3</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x8c</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xb4</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xac</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xb5</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x92</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xb6</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xb2</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xb7</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x95</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xb8</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xb5</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E1</name><argument_list>( <argument><expr><literal type="number">0xb9</literal></expr></argument>, <argument><expr><literal type="number">0x7b</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E1</name><argument_list>( <argument><expr><literal type="number">0xba</literal></expr></argument>, <argument><expr><literal type="number">0x7d</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E1</name><argument_list>( <argument><expr><literal type="number">0xbb</literal></expr></argument>, <argument><expr><literal type="number">0x5c</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E1</name><argument_list>( <argument><expr><literal type="number">0xbc</literal></expr></argument>, <argument><expr><literal type="number">0x5e</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E1</name><argument_list>( <argument><expr><literal type="number">0xbd</literal></expr></argument>, <argument><expr><literal type="number">0x5f</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xbe</literal></expr></argument>, <argument><expr><literal type="number">0xc2</literal></expr></argument>,<argument><expr><literal type="number">0xa6</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E1</name><argument_list>( <argument><expr><literal type="number">0xbf</literal></expr></argument>, <argument><expr><literal type="number">0x7e</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xc0</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x84</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xc1</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xa4</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xc2</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x96</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xc3</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xb6</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xc4</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x9f</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xc5</literal></expr></argument>, <argument><expr><literal type="number">0xc2</literal></expr></argument>,<argument><expr><literal type="number">0xa5</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xc6</literal></expr></argument>, <argument><expr><literal type="number">0xc2</literal></expr></argument>,<argument><expr><literal type="number">0xa4</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E1</name><argument_list>( <argument><expr><literal type="number">0xc7</literal></expr></argument>, <argument><expr><literal type="number">0x7c</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xc8</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x85</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xc9</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xa5</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xca</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x98</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E2</name><argument_list>( <argument><expr><literal type="number">0xcb</literal></expr></argument>, <argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0xb8</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E3</name><argument_list>( <argument><expr><literal type="number">0xcc</literal></expr></argument>, <argument><expr><literal type="number">0xe2</literal></expr></argument>,<argument><expr><literal type="number">0x8c</literal></expr></argument>,<argument><expr><literal type="number">0x9c</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E3</name><argument_list>( <argument><expr><literal type="number">0xcd</literal></expr></argument>, <argument><expr><literal type="number">0xe2</literal></expr></argument>,<argument><expr><literal type="number">0x8c</literal></expr></argument>,<argument><expr><literal type="number">0x9d</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E3</name><argument_list>( <argument><expr><literal type="number">0xce</literal></expr></argument>, <argument><expr><literal type="number">0xe2</literal></expr></argument>,<argument><expr><literal type="number">0x8c</literal></expr></argument>,<argument><expr><literal type="number">0x9e</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>E3</name><argument_list>( <argument><expr><literal type="number">0xcf</literal></expr></argument>, <argument><expr><literal type="number">0xe2</literal></expr></argument>,<argument><expr><literal type="number">0x8c</literal></expr></argument>,<argument><expr><literal type="number">0x9f</literal></expr></argument>)</argument_list></call></expr>, 

<macro><name>E1</name><argument_list>(<argument><literal type="number">0</literal></argument>,<argument><literal type="number">0</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</struct>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>E3</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>E2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>E1</name></cpp:undef>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>c2utf8</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><name><name>c2utf8</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name> <operator>==</operator> <name>c</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>( <argument><expr><name>psz_utf8</name></expr></argument>, <argument><expr><name><name>c2utf8</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>utf8</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>psz_utf8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr> ?</condition><then> <expr><name>c</name></expr> </then><else>: <expr><literal type="char">'?'</literal></expr></else></ternary></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>psz_utf8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Eia608Strlcat</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_max</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_max</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strncat</name><argument_list>( <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_max</name><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <call><name>strnlen</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>i_max</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_max</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>i_max</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAT</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Eia608Strlcat( psz_text, t, i_text_max )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>text_segment_t</name> <modifier>*</modifier></type> <name>Eia608TextLine</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>eia608_screen</name></name> <modifier>*</modifier></type><name>screen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_row</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_char</name> <init>= <expr><name><name>screen</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name>i_row</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>eia608_color_t</name> <modifier>*</modifier></type><name>p_color</name> <init>= <expr><name><name>screen</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>i_row</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>eia608_font_t</name> <modifier>*</modifier></type><name>p_font</name> <init>= <expr><name><name>screen</name><operator>-&gt;</operator><name>fonts</name><index>[<expr><name>i_row</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eia608_color_t</name></type> <name>prev_color</name> <init>= <expr><name>EIA608_COLOR_DEFAULT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eia608_font_t</name></type> <name>prev_font</name> <init>= <expr><name>EIA608_FONT_REGULAR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>utf8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_text_max</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name>EIA608_SCREEN_COLUMNS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>psz_text</name><index>[<expr><name>i_text_max</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>psz_text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>i_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<while>while<condition>( <expr><name>i_start</name> <operator>&lt;</operator> <name>EIA608_SCREEN_COLUMNS</name> <operator>&amp;&amp;</operator> <name><name>p_char</name><index>[<expr><name>i_start</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Eia608TextUtf8</name><argument_list>( <argument><expr><name>utf8</name></expr></argument>, <argument><expr><literal type="number">0x89</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CAT</name><argument_list>( <argument><expr><name>utf8</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_start</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>i_end</name> <operator>=</operator> <name>EIA608_SCREEN_COLUMNS</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<while>while<condition>( <expr><name>i_end</name> <operator>&gt;</operator> <name>i_start</name> <operator>&amp;&amp;</operator> <name><name>p_char</name><index>[<expr><name>i_end</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_end</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>


<if_stmt><if>if<condition>( <expr><name>i_start</name> <operator>&gt;</operator> <name>i_end</name></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_segments_head</name> <init>= <expr><name>p_segment</name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_segment</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_segment</name><operator>-&gt;</operator><name>style</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>text_segment_Delete</name><argument_list>(<argument><expr><name>p_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_MONOSPACED</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <name>i_start</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>i_end</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>eia608_color_t</name></type> <name>color</name> <init>= <expr><name><name>p_color</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eia608_font_t</name></type> <name>font</name> <init>= <expr><name><name>p_font</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>font</name> <operator>!=</operator> <name>prev_font</name> <operator>||</operator> <name>color</name> <operator>!=</operator> <name>prev_color</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>EnsureUTF8</name><argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_segment</name> <operator>=</operator> <name><name>p_segment</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_segment</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_segments_head</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_segment</name><operator>-&gt;</operator><name>style</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>text_segment_Delete</name><argument_list>(<argument><expr><name>p_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_segments_head</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_MONOSPACED</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>font</name> <operator>&amp;</operator> <name>EIA608_FONT_ITALICS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_ITALIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>font</name> <operator>&amp;</operator> <name>EIA608_FONT_UNDERLINE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_UNDERLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>color</name> <operator>!=</operator> <name>EIA608_COLOR_DEFAULT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <name><name>rgi_eia608_colors</name><index>[<expr><name>color</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_COLOR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Eia608TextUtf8</name><argument_list>( <argument><expr><name>utf8</name></expr></argument>, <argument><expr><name><name>p_char</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CAT</name><argument_list>( <argument><expr><name>utf8</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>prev_font</name> <operator>=</operator> <name>font</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CAT</name></cpp:undef>

<if_stmt><if>if<condition>( <expr><name>p_segment</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>EnsureUTF8</name><argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_segments_head</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Eia608FillUpdaterRegions</name><parameter_list>( <parameter><decl><type><name>subtext_updater_sys_t</name> <modifier>*</modifier></type><name>p_updater</name></decl></parameter>, <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>eia608_screen</name></name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>screen</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>i_screen</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>substext_updater_region_t</name> <modifier>*</modifier></type><name>p_region</name> <init>= <expr><operator>&amp;</operator><name><name>p_updater</name><operator>-&gt;</operator><name>region</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_last</name> <init>= <expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_segments</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_newregion</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>EIA608_SCREEN_ROWS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>screen</name><operator>-&gt;</operator><name>row_used</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_segments</name> <init>= <expr><call><name>Eia608TextLine</name><argument_list>( <argument><expr><name>screen</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_segments</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_newregion</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>substext_updater_region_t</name> <modifier>*</modifier></type><name>p_newregion</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p_newregion</name> <operator>=</operator> <call><name>SubpictureUpdaterSysRegionNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_newregion</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>text_segment_ChainDelete</name><argument_list>( <argument><expr><name>p_segments</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_newregion</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>align</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_newregion</name><operator>-&gt;</operator><name>inner_align</name></name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>inner_align</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_newregion</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SubpictureUpdaterSysRegionAdd</name><argument_list>( <argument><expr><name>p_region</name></expr></argument>, <argument><expr><name>p_newregion</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_region</name> <operator>=</operator> <name>p_newregion</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pp_last</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_segments</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_newregion</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>p_segments</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>origin</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>i</name> 
<operator>/</operator> <operator>(</operator><name>EIA608_SCREEN_ROWS</name> <operator>*</operator> <name>FONT_TO_LINE_HEIGHT_RATIO</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>UPDT_REGION_ORIGIN_Y_IS_RATIO</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_last</name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_last</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pp_last</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_last</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_last</name> <operator>=</operator> <name>p_segments</name></expr>;</expr_stmt>
<do>do <block>{<block_content> <expr_stmt><expr><name>pp_last</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_last</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt> </block_content>}</block> while <condition>( <expr><operator>*</operator><name>pp_last</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>;</do>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>b_newregion</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_segments</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Eia608Init</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_screen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eia608ClearScreen</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Eia608ClearScreen</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cursor</name><operator>.</operator><name>i_row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>d1</name></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>d2</name></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>EIA608_MODE_POPUP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>EIA608_COLOR_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>font</name></name> <operator>=</operator> <name>EIA608_FONT_REGULAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_row_rollup</name></name> <operator>=</operator> <name>EIA608_SCREEN_ROWS</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>eia608_status_t</name></type> <name>Eia608Parse</name><parameter_list>( <parameter><decl><type><name>eia608_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_channel_selected</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>d1</name> <init>= <expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>d2</name> <init>= <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eia608_status_t</name></type> <name>i_screen_status</name> <init>= <expr><name>EIA608_STATUS_DEFAULT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>d1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>EIA608_STATUS_DEFAULT</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>Eia608ParseChannel</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>!=</operator> <name>i_channel_selected</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>d1</name> <operator>&gt;=</operator> <literal type="number">0x10</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>d1</name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>||</operator>
<name>d1</name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>d1</name></name> <operator>||</operator> <name>d2</name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>d2</name></name></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>i_screen_status</name> <operator>=</operator> <call><name>Eia608ParseData</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>,<argument><expr><name>d2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>d1</name></name> <operator>=</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>d2</name></name> <operator>=</operator> <name>d2</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator> <name>d1</name> <operator>&gt;=</operator> <literal type="number">0x01</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>&lt;=</operator> <literal type="number">0x0E</literal> <operator>)</operator> <operator>||</operator> <name>d1</name> <operator>==</operator> <literal type="number">0x0F</literal></expr> )</condition>
<block>{<block_content>

</block_content>}</block></if></if_stmt>
<return>return <expr><name>i_screen_status</name></expr>;</return>
</block_content>}</block></function>
</unit>
