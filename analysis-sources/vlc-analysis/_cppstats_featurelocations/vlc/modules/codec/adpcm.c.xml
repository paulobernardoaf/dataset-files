<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\adpcm.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeAudio</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"ADPCM audio decoder"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio decoder"</literal></argument>, <argument><literal type="number">50</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_ACODEC</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenDecoder</argument>, <argument>CloseDecoder</argument> )</argument_list></macro>
<expr_stmt><expr><call><name>vlc_module_end</name> <argument_list>()</argument_list></call>




enum <name>adpcm_codec_e</name>
<block>{
<expr><name>ADPCM_IMA_QT</name></expr>,
<expr><name>ADPCM_IMA_WAV</name></expr>,
<expr><name>ADPCM_MS</name></expr>,
<expr><name>ADPCM_DK3</name></expr>,
<expr><name>ADPCM_DK4</name></expr>,
<expr><name>ADPCM_EA</name></expr>
}</block></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name><name>enum</name> <name>adpcm_codec_e</name></name></type> <name>codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_samplesperblock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>end_date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DecodeAdpcmMs</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DecodeAdpcmImaWav</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DecodeAdpcmImaQT</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DecodeAdpcmDk4</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DecodeAdpcmDk3</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DecodeAdpcmEA</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>i_index_table</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>i_step_table</name><index>[<expr><literal type="number">89</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>,
<expr><literal type="number">19</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">45</literal></expr>,
<expr><literal type="number">50</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">118</literal></expr>,
<expr><literal type="number">130</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">157</literal></expr>, <expr><literal type="number">173</literal></expr>, <expr><literal type="number">190</literal></expr>, <expr><literal type="number">209</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">253</literal></expr>, <expr><literal type="number">279</literal></expr>, <expr><literal type="number">307</literal></expr>,
<expr><literal type="number">337</literal></expr>, <expr><literal type="number">371</literal></expr>, <expr><literal type="number">408</literal></expr>, <expr><literal type="number">449</literal></expr>, <expr><literal type="number">494</literal></expr>, <expr><literal type="number">544</literal></expr>, <expr><literal type="number">598</literal></expr>, <expr><literal type="number">658</literal></expr>, <expr><literal type="number">724</literal></expr>, <expr><literal type="number">796</literal></expr>,
<expr><literal type="number">876</literal></expr>, <expr><literal type="number">963</literal></expr>, <expr><literal type="number">1060</literal></expr>, <expr><literal type="number">1166</literal></expr>, <expr><literal type="number">1282</literal></expr>, <expr><literal type="number">1411</literal></expr>, <expr><literal type="number">1552</literal></expr>, <expr><literal type="number">1707</literal></expr>, <expr><literal type="number">1878</literal></expr>, <expr><literal type="number">2066</literal></expr>,
<expr><literal type="number">2272</literal></expr>, <expr><literal type="number">2499</literal></expr>, <expr><literal type="number">2749</literal></expr>, <expr><literal type="number">3024</literal></expr>, <expr><literal type="number">3327</literal></expr>, <expr><literal type="number">3660</literal></expr>, <expr><literal type="number">4026</literal></expr>, <expr><literal type="number">4428</literal></expr>, <expr><literal type="number">4871</literal></expr>, <expr><literal type="number">5358</literal></expr>,
<expr><literal type="number">5894</literal></expr>, <expr><literal type="number">6484</literal></expr>, <expr><literal type="number">7132</literal></expr>, <expr><literal type="number">7845</literal></expr>, <expr><literal type="number">8630</literal></expr>, <expr><literal type="number">9493</literal></expr>, <expr><literal type="number">10442</literal></expr>, <expr><literal type="number">11487</literal></expr>, <expr><literal type="number">12635</literal></expr>, <expr><literal type="number">13899</literal></expr>,
<expr><literal type="number">15289</literal></expr>, <expr><literal type="number">16818</literal></expr>, <expr><literal type="number">18500</literal></expr>, <expr><literal type="number">20350</literal></expr>, <expr><literal type="number">22385</literal></expr>, <expr><literal type="number">24623</literal></expr>, <expr><literal type="number">27086</literal></expr>, <expr><literal type="number">29794</literal></expr>, <expr><literal type="number">32767</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>i_adaptation_table</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">230</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">307</literal></expr>, <expr><literal type="number">409</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">614</literal></expr>,
<expr><literal type="number">768</literal></expr>, <expr><literal type="number">614</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">409</literal></expr>, <expr><literal type="number">307</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">230</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>i_adaptation_coeff1</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">256</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">460</literal></expr>, <expr><literal type="number">392</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>i_adaptation_coeff2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">256</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">208</literal></expr>, <expr><operator>-</operator><literal type="number">232</literal></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_ADPCM_IMA_QT</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_ADPCM_IMA_WAV</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_ADPCM_MS</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_ADPCM_DK4</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_ADPCM_DK3</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_ADPCM_XA_EA</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"bad samplerate"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samplesperblock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_channels</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_max_channels</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_ADPCM_IMA_QT</name></expr>:</case> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>ADPCM_IMA_QT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_max_channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_ADPCM_IMA_WAV</name></expr>:</case> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>ADPCM_IMA_WAV</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_max_channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_ADPCM_MS</name></expr>:</case> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>ADPCM_MS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_max_channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_ADPCM_DK4</name></expr>:</case> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>ADPCM_DK4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_max_channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_ADPCM_DK3</name></expr>:</case> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>ADPCM_DK3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_max_channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_ADPCM_XA_EA</name></expr>:</case> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>ADPCM_EA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>int16_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>i_channels</name> <operator>&gt;</operator> <name>i_max_channels</name> <operator>||</operator> <name>i_channels</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Invalid number of channels %i"</literal></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name> <operator>==</operator> <name>ADPCM_IMA_QT</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">34</literal> <operator>*</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr> </then><else>: <expr><literal type="number">1024</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"block size undefined, using %zu"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>ADPCM_IMA_QT</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samplesperblock</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ADPCM_IMA_WAV</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>*</operator> <name>i_channels</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samplesperblock</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>i_channels</name> <operator>)</operator>
<operator>/</operator> <name>i_channels</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ADPCM_MS</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name> <operator>&gt;=</operator> <literal type="number">7</literal> <operator>*</operator> <name>i_channels</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samplesperblock</name></name> <operator>=</operator>
<literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name> <operator>-</operator> <literal type="number">7</literal> <operator>*</operator> <name>i_channels</name><operator>)</operator> <operator>/</operator> <name>i_channels</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ADPCM_DK4</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>*</operator> <name>i_channels</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samplesperblock</name></name> <operator>=</operator>
<literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>i_channels</name><operator>)</operator> <operator>/</operator> <name>i_channels</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ADPCM_DK3</name></expr>:</case>
<expr_stmt><expr><name>i_channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name> <operator>&gt;=</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samplesperblock</name></name> <operator>=</operator> <operator>(</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name> <operator>-</operator> <literal type="number">16</literal> <operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator><operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ADPCM_EA</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name> <operator>&gt;=</operator> <name>i_channels</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samplesperblock</name></name> <operator>=</operator>
<literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name> <operator>-</operator> <name>i_channels</name><operator>)</operator> <operator>/</operator> <name>i_channels</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"format: samplerate:%d Hz channels:%d bits/sample:%d "</literal>
<literal type="string">"blockalign:%zu samplesperblock:%zu"</literal></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name>i_channels</name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samplesperblock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samplesperblock</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Error computing number of samples per block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name>i_channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name><name>vlc_chan_maps</name><index>[<expr><name>i_channels</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeAudio</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DecodeBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>pp_block</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <operator>*</operator><name>pp_block</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_DISCONTINUITY</name><operator>|</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Flush</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>
<name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>decoder_UpdateAudioFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_out</name> <operator>=</operator> <call><name>decoder_NewAudioBuffer</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samplesperblock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_out</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samplesperblock</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <name><name>p_out</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>ADPCM_IMA_QT</name></expr>:</case>
<expr_stmt><expr><call><name>DecodeAdpcmImaQT</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ADPCM_IMA_WAV</name></expr>:</case>
<expr_stmt><expr><call><name>DecodeAdpcmImaWav</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ADPCM_MS</name></expr>:</case>
<expr_stmt><expr><call><name>DecodeAdpcmMs</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ADPCM_DK4</name></expr>:</case>
<expr_stmt><expr><call><name>DecodeAdpcmDk4</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ADPCM_DK3</name></expr>:</case>
<expr_stmt><expr><call><name>DecodeAdpcmDk3</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ADPCM_EA</name></expr>:</case>
<expr_stmt><expr><call><name>DecodeAdpcmEA</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name></expr>;</expr_stmt>
<return>return <expr><name>p_out</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<label><name>drop</name>:</label>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeAudio</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name> <init>= <expr><operator>&amp;</operator><name>p_block</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>
<while>while<condition>( <expr><operator>(</operator> <name>p_out</name> <operator>=</operator> <call><name>DecodeBlock</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>pp_block</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decoder_QueueAudio</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prev</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLAMP</name><parameter_list>( <parameter><type><name>v</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( (v) &lt; (min) ) (v) = (min); if( (v) &gt; (max) ) (v) = (max)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetByte</name><parameter_list>( <parameter><type><name>v</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(v) = *p_buffer; p_buffer++;</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetWord</name><parameter_list>( <parameter><type><name>v</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(v) = *p_buffer; p_buffer++; (v) |= ( *p_buffer ) &lt;&lt; 8; p_buffer++; if( (v)&amp;0x8000 ) (v) -= 0x010000;</cpp:value></cpp:define>







<typedef>typedef <type><struct>struct <name>adpcm_ms_channel_s</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_idelta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_sample1</name></decl>, <name>i_sample2</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_coeff1</name></decl>, <name>i_coeff2</name>;</decl_stmt>

}</block></struct></type> <name>adpcm_ms_channel_t</name>;</typedef>


<function><type><specifier>static</specifier> <name>int</name></type> <name>AdpcmMsExpandNibble</name><parameter_list>(<parameter><decl><type><name>adpcm_ms_channel_t</name> <modifier>*</modifier></type><name>p_channel</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_nibble</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_predictor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_snibble</name></decl>;</decl_stmt>


<expr_stmt><expr><name>i_snibble</name> <operator>=</operator> <name>i_nibble</name> <operator>-</operator> <operator>(</operator> <ternary><condition><expr><name>i_nibble</name><operator>&amp;</operator><literal type="number">0x08</literal></expr> ?</condition><then> <expr><literal type="number">0x10</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_predictor</name> <operator>=</operator> <operator>(</operator> <name><name>p_channel</name><operator>-&gt;</operator><name>i_sample1</name></name> <operator>*</operator> <name><name>p_channel</name><operator>-&gt;</operator><name>i_coeff1</name></name> <operator>+</operator>
<name><name>p_channel</name><operator>-&gt;</operator><name>i_sample2</name></name> <operator>*</operator> <name><name>p_channel</name><operator>-&gt;</operator><name>i_coeff2</name></name> <operator>)</operator> <operator>/</operator> <literal type="number">256</literal> <operator>+</operator>
<name>i_snibble</name> <operator>*</operator> <name><name>p_channel</name><operator>-&gt;</operator><name>i_idelta</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLAMP</name><argument_list>( <argument><expr><name>i_predictor</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">32768</literal></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_channel</name><operator>-&gt;</operator><name>i_sample2</name></name> <operator>=</operator> <name><name>p_channel</name><operator>-&gt;</operator><name>i_sample1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_channel</name><operator>-&gt;</operator><name>i_sample1</name></name> <operator>=</operator> <name>i_predictor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_channel</name><operator>-&gt;</operator><name>i_idelta</name></name> <operator>=</operator> <operator>(</operator> <name><name>i_adaptation_table</name><index>[<expr><name>i_nibble</name></expr>]</index></name> <operator>*</operator>
<name><name>p_channel</name><operator>-&gt;</operator><name>i_idelta</name></name> <operator>)</operator> <operator>/</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_channel</name><operator>-&gt;</operator><name>i_idelta</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_channel</name><operator>-&gt;</operator><name>i_idelta</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator> <name>i_predictor</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecodeAdpcmMs</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_sample</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>adpcm_ms_channel_t</name></type> <name><name>channel</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_stereo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_block_predictor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_total_samples</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samplesperblock</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>i_total_samples</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_stereo</name> <operator>=</operator> <ternary><condition><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetByte</name><argument_list>( <argument><expr><name>i_block_predictor</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLAMP</name><argument_list>( <argument><expr><name>i_block_predictor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_coeff1</name> <operator>=</operator> <name><name>i_adaptation_coeff1</name><index>[<expr><name>i_block_predictor</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_coeff2</name> <operator>=</operator> <name><name>i_adaptation_coeff2</name><index>[<expr><name>i_block_predictor</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_stereo</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>GetByte</name><argument_list>( <argument><expr><name>i_block_predictor</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLAMP</name><argument_list>( <argument><expr><name>i_block_predictor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_coeff1</name> <operator>=</operator> <name><name>i_adaptation_coeff1</name><index>[<expr><name>i_block_predictor</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_coeff2</name> <operator>=</operator> <name><name>i_adaptation_coeff2</name><index>[<expr><name>i_block_predictor</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GetWord</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_idelta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_stereo</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>GetWord</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_idelta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GetWord</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_sample1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_stereo</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>GetWord</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_sample1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GetWord</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_sample2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_stereo</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>GetWord</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_sample2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_stereo</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_sample2</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_sample2</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_sample1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_sample1</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_sample2</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_sample1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for<control>( <init><expr><name>i_total_samples</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i_total_samples</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i_total_samples</name> <operator>-=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>p_buffer</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <call><name>AdpcmMsExpandNibble</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <call><name>AdpcmMsExpandNibble</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>channel</name><index>[<expr><ternary><condition><expr><name>b_stereo</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<typedef>typedef <type><struct>struct <name>adpcm_ima_wav_channel_s</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_predictor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_step_index</name></decl>;</decl_stmt>

}</block></struct></type> <name>adpcm_ima_wav_channel_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AdpcmImaWavExpandNibble</name><parameter_list>(<parameter><decl><type><name>adpcm_ima_wav_channel_t</name> <modifier>*</modifier></type><name>p_channel</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_nibble</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_diff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_diff</name> <operator>=</operator> <name><name>i_step_table</name><index>[<expr><name><name>p_channel</name><operator>-&gt;</operator><name>i_step_index</name></name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_nibble</name><operator>&amp;</operator><literal type="number">0x04</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_diff</name> <operator>+=</operator> <name><name>i_step_table</name><index>[<expr><name><name>p_channel</name><operator>-&gt;</operator><name>i_step_index</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_nibble</name><operator>&amp;</operator><literal type="number">0x02</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_diff</name> <operator>+=</operator> <name><name>i_step_table</name><index>[<expr><name><name>p_channel</name><operator>-&gt;</operator><name>i_step_index</name></name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_nibble</name><operator>&amp;</operator><literal type="number">0x01</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_diff</name> <operator>+=</operator> <name><name>i_step_table</name><index>[<expr><name><name>p_channel</name><operator>-&gt;</operator><name>i_step_index</name></name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_nibble</name><operator>&amp;</operator><literal type="number">0x08</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_channel</name><operator>-&gt;</operator><name>i_predictor</name></name> <operator>-=</operator> <name>i_diff</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_channel</name><operator>-&gt;</operator><name>i_predictor</name></name> <operator>+=</operator> <name>i_diff</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>CLAMP</name><argument_list>( <argument><expr><name><name>p_channel</name><operator>-&gt;</operator><name>i_predictor</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">32768</literal></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_channel</name><operator>-&gt;</operator><name>i_step_index</name></name> <operator>+=</operator> <name><name>i_index_table</name><index>[<expr><name>i_nibble</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLAMP</name><argument_list>( <argument><expr><name><name>p_channel</name><operator>-&gt;</operator><name>i_step_index</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return<expr><operator>(</operator> <name><name>p_channel</name><operator>-&gt;</operator><name>i_predictor</name></name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecodeAdpcmImaWav</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_sample</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>adpcm_ima_wav_channel_t</name></type> <name><name>channel</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_nibbles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_stereo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b_stereo</name> <operator>=</operator> <ternary><condition><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetWord</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_predictor</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetByte</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_step_index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLAMP</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_step_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buffer</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_stereo</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>GetWord</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_predictor</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetByte</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_step_index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLAMP</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_step_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buffer</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_stereo</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><expr><name>i_nibbles</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</init>
<condition><expr><name>i_nibbles</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition>
<incr><expr><name>i_nibbles</name> <operator>-=</operator> <literal type="number">16</literal></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sample</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator>
<call><name>AdpcmImaWavExpandNibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>p_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sample</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator>
<call><name>AdpcmImaWavExpandNibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>p_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p_buffer</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sample</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<call><name>AdpcmImaWavExpandNibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>p_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sample</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator>
<call><name>AdpcmImaWavExpandNibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>p_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p_buffer</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_sample</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>


</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for<control>( <init><expr><name>i_nibbles</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr>;</init>
<condition><expr><name>i_nibbles</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition>
<incr><expr><name>i_nibbles</name> <operator>-=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>p_buffer</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator><call><name>AdpcmImaWavExpandNibble</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator><call><name>AdpcmImaWavExpandNibble</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>DecodeAdpcmImaQT</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_sample</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>adpcm_ima_wav_channel_t</name></type> <name><name>channel</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_nibbles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_step</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_step</name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_ch</name> <operator>&lt;</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</condition> <incr><expr><name>i_ch</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<expr_stmt><expr><name><name>channel</name><index>[<expr><name>i_ch</name></expr>]</index></name><operator>.</operator><name>i_predictor</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator> <operator>(</operator> <name><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>)</operator><operator>|</operator><operator>(</operator> <name><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal> <operator>)</operator> <operator>)</operator><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><index>[<expr><name>i_ch</name></expr>]</index></name><operator>.</operator><name>i_step_index</name> <operator>=</operator> <name><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLAMP</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><name>i_ch</name></expr>]</index></name><operator>.</operator><name>i_step_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buffer</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_nibbles</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_nibbles</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i_nibbles</name> <operator>+=</operator><literal type="number">2</literal></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_sample</name> <operator>=</operator> <call><name>AdpcmImaWavExpandNibble</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>channel</name><index>[<expr><name>i_ch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_sample</name> <operator>+=</operator> <name>i_step</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_sample</name> <operator>=</operator> <call><name>AdpcmImaWavExpandNibble</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>channel</name><index>[<expr><name>i_ch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>p_buffer</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_sample</name> <operator>+=</operator> <name>i_step</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buffer</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>p_sample</name> <operator>+=</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">64</literal> <operator>*</operator> <name>i_step</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>DecodeAdpcmDk4</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_sample</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>adpcm_ima_wav_channel_t</name></type> <name><name>channel</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nibbles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_stereo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b_stereo</name> <operator>=</operator> <ternary><condition><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetWord</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_predictor</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetByte</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_step_index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLAMP</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_step_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buffer</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_stereo</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>GetWord</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_predictor</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetByte</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_step_index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLAMP</name><argument_list>( <argument><expr><name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_step_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buffer</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_predictor</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_stereo</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <name><name>channel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_predictor</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i_nibbles</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><name>i_nibbles</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>b_stereo</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary> <operator>)</operator></expr>;</condition>
<incr><expr><name>i_nibbles</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <call><name>AdpcmImaWavExpandNibble</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <call><name>AdpcmImaWavExpandNibble</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>channel</name><index>[<expr><ternary><condition><expr><name>b_stereo</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buffer</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>DecodeAdpcmDk3</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_sample</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>adpcm_ima_wav_channel_t</name></type> <name>sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>adpcm_ima_wav_channel_t</name></type> <name>diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_diff_value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_buffer</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetWord</name><argument_list>( <argument><expr><name><name>sum</name><operator>.</operator><name>i_predictor</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetWord</name><argument_list>( <argument><expr><name><name>diff</name><operator>.</operator><name>i_predictor</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetByte</name><argument_list>( <argument><expr><name><name>sum</name><operator>.</operator><name>i_step_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetByte</name><argument_list>( <argument><expr><name><name>diff</name><operator>.</operator><name>i_step_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_diff_value</name> <operator>=</operator> <name><name>diff</name><operator>.</operator><name>i_predictor</name></name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_buffer</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>p_end</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>AdpcmImaWavExpandNibble</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sum</name></expr></argument>,
<argument><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AdpcmImaWavExpandNibble</name><argument_list>( <argument><expr><operator>&amp;</operator><name>diff</name></expr></argument>,
<argument><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_diff_value</name> <operator>=</operator> <operator>(</operator> <name>i_diff_value</name> <operator>+</operator> <name><name>diff</name><operator>.</operator><name>i_predictor</name></name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <name><name>sum</name><operator>.</operator><name>i_predictor</name></name> <operator>+</operator> <name>i_diff_value</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <name><name>sum</name><operator>.</operator><name>i_predictor</name></name> <operator>-</operator> <name>i_diff_value</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buffer</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AdpcmImaWavExpandNibble</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sum</name></expr></argument>,
<argument><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <name><name>sum</name><operator>.</operator><name>i_predictor</name></name> <operator>+</operator> <name>i_diff_value</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <name><name>sum</name><operator>.</operator><name>i_predictor</name></name> <operator>-</operator> <name>i_diff_value</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AdpcmImaWavExpandNibble</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sum</name></expr></argument>,
<argument><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buffer</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_buffer</name> <operator>&lt;</operator> <name>p_end</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AdpcmImaWavExpandNibble</name><argument_list>( <argument><expr><operator>&amp;</operator><name>diff</name></expr></argument>,
<argument><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_diff_value</name> <operator>=</operator> <operator>(</operator> <name>i_diff_value</name> <operator>+</operator> <name><name>diff</name><operator>.</operator><name>i_predictor</name></name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <name><name>sum</name><operator>.</operator><name>i_predictor</name></name> <operator>+</operator> <name>i_diff_value</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <name><name>sum</name><operator>.</operator><name>i_predictor</name></name> <operator>-</operator> <name>i_diff_value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AdpcmImaWavExpandNibble</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sum</name></expr></argument>,
<argument><expr><operator>(</operator><operator>*</operator><name>p_buffer</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buffer</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <name><name>sum</name><operator>.</operator><name>i_predictor</name></name> <operator>+</operator> <name>i_diff_value</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_sample</name><operator>++</operator> <operator>=</operator> <name><name>sum</name><operator>.</operator><name>i_predictor</name></name> <operator>-</operator> <name>i_diff_value</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CHAN</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DecodeAdpcmEA</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_sample</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>EATable</name><index>[]</index></name><init>=
<expr><block>{
<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x00F0</literal></expr>, <expr><literal type="number">0x01CC</literal></expr>, <expr><literal type="number">0x0188</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0xFF30</literal></expr>, <expr><literal type="number">0xFF24</literal></expr>,
<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0001</literal></expr>, <expr><literal type="number">0x0003</literal></expr>, <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">0x0007</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x000A</literal></expr>, <expr><literal type="number">0x000B</literal></expr>,
<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0xFFFF</literal></expr>, <expr><literal type="number">0xFFFD</literal></expr>, <expr><literal type="number">0xFFFC</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_fast32_t</name></type> <name><name>c1</name><index>[<expr><name>MAX_CHAN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c2</name><index>[<expr><name>MAX_CHAN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_fast8_t</name></type> <name><name>d</name><index>[<expr><name>MAX_CHAN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>chans</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_block</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>prev</name> <operator>+</operator> <name>chans</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>chans</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>input</name> <init>= <expr><name><name>p_buffer</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c1</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>EATable</name><index>[<expr><name>input</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c2</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>EATable</name><index>[<expr><operator>(</operator><name>input</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>input</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>p_buffer</name> <operator>+=</operator> <name>chans</name></expr>;</init> <condition><expr><name>p_buffer</name> <operator>&lt;</operator> <name>p_end</name></expr>;</condition> <incr><expr><name>p_buffer</name> <operator>+=</operator> <name>chans</name></expr></incr>)</control>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>uint32_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt> }</block> <decl><name>spl</name></decl>;</union>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>chans</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>.</operator><name>u</name></name> <operator>=</operator> <operator>(</operator><name><name>p_buffer</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0u</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24u</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>.</operator><name>i</name></name> <operator>&gt;&gt;=</operator> <name><name>d</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>.</operator><name>i</name></name> <operator>=</operator> <operator>(</operator><name><name>spl</name><operator>.</operator><name>i</name></name> <operator>+</operator> <name><name>cur</name><index>[<expr><name>c</name></expr>]</index></name> <operator>*</operator> <name><name>c1</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <name><name>prev</name><index>[<expr><name>c</name></expr>]</index></name> <operator>*</operator> <name><name>c2</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLAMP</name><argument_list>(<argument><expr><name><name>spl</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">32768</literal></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prev</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>cur</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>spl</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_sample</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>spl</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>chans</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>spl</name><operator>.</operator><name>u</name></name> <operator>=</operator> <operator>(</operator><name><name>p_buffer</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0fu</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">28u</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>.</operator><name>i</name></name> <operator>&gt;&gt;=</operator> <name><name>d</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spl</name><operator>.</operator><name>i</name></name> <operator>=</operator> <operator>(</operator><name><name>spl</name><operator>.</operator><name>i</name></name> <operator>+</operator> <name><name>cur</name><index>[<expr><name>c</name></expr>]</index></name> <operator>*</operator> <name><name>c1</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <name><name>prev</name><index>[<expr><name>c</name></expr>]</index></name> <operator>*</operator> <name><name>c2</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLAMP</name><argument_list>(<argument><expr><name><name>spl</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">32768</literal></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prev</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>cur</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>spl</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_sample</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>spl</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
