<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\scte18.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_SCTE18_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_SCTE18_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCTE18_SI_BASE_PID</name></cpp:macro> <cpp:value>0x1FFB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCTE18_TABLE_ID</name></cpp:macro> <cpp:value>0xD8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCTE18_DESCRIPTION</name></cpp:macro> <cpp:value>N_("Emergency Alert Messaging for Cable")</cpp:value></cpp:define>

<enum>enum
<block>{
<decl><name>EAS_PRIORITY_TEST</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>EAS_PRIORITY_LOW</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>EAS_PRIORITY_MEDIUM</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>EAS_PRIORITY_HIGH</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>EAS_PRIORITY_MAX</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>
}</block>;</enum>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>scte18_get_EAS_priority</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_buffer</name> <operator>&lt;</operator> <literal type="number">17</literal> <operator>||</operator> <name><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_offset</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><name><name>p_buffer</name><index>[<expr><name>i_offset</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name>i_offset</name> <operator>+=</operator> <name>i_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<if_stmt><if>if<condition>( <expr><name>i_offset</name> <operator>&gt;=</operator> <name>i_buffer</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <name><name>p_buffer</name><index>[<expr><name>i_offset</name></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>i_offset</name> <operator>+=</operator> <name>i_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>i_offset</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_offset</name> <operator>&gt;=</operator> <name>i_buffer</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>p_buffer</name><index>[<expr><name>i_offset</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
