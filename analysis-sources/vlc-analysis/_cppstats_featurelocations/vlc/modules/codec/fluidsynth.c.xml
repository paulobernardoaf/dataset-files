<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\fluidsynth.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_POSIX_VERSION</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glob.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLUIDSYNTH_NOT_A_DLL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FLUIDLITE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fluidsynth.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fluidlite.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUNDFONT_TEXT</name></cpp:macro> <cpp:value>N_("SoundFont file")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUNDFONT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "SoundFont file to use for software synthesis." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHORUS_TEXT</name></cpp:macro> <cpp:value>N_("Chorus")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAIN_TEXT</name></cpp:macro> <cpp:value>N_("Synthesis gain")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAIN_LONGTEXT</name></cpp:macro> <cpp:value>N_("This gain is applied to synthesis output. " "High values may cause saturation when many notes are played at a time." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLYPHONY_TEXT</name></cpp:macro> <cpp:value>N_("Polyphony")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLYPHONY_LONGTEXT</name></cpp:macro> <cpp:value>N_( "The polyphony defines how many voices can be played at a time. " "Larger values require more processing power.")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REVERB_TEXT</name></cpp:macro> <cpp:value>N_("Reverb")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLE_RATE_TEXT</name></cpp:macro> <cpp:value>N_("Sample rate")</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name> <argument_list>(<argument>N_(<literal type="string">"FluidSynth MIDI synthesizer"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name> <argument_list>(<argument><literal type="string">"audio decoder"</literal></argument>, <argument><literal type="number">100</literal></argument>)</argument_list></macro>
<macro><name>set_shortname</name> <argument_list>(<argument>N_(<literal type="string">"FluidSynth"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name> <argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name> <argument_list>(<argument>SUBCAT_INPUT_ACODEC</argument>)</argument_list></macro>
<macro><name>set_callbacks</name> <argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>add_loadfile</name><argument_list>(<argument><literal type="string">"soundfont"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>SOUNDFONT_TEXT</argument>, <argument>SOUNDFONT_LONGTEXT</argument>)</argument_list></macro>
<macro><name>add_bool</name> <argument_list>(<argument><literal type="string">"synth-chorus"</literal></argument>, <argument>true</argument>, <argument>CHORUS_TEXT</argument>, <argument>CHORUS_TEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>add_float</name> <argument_list>(<argument><literal type="string">"synth-gain"</literal></argument>, <argument><literal type="number">.5</literal></argument>, <argument>GAIN_TEXT</argument>, <argument>GAIN_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_float_range</name> <argument_list>(<argument><literal type="number">0.</literal></argument>, <argument><literal type="number">10.</literal></argument>)</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"synth-polyphony"</literal></argument>, <argument><literal type="number">256</literal></argument>,
<argument>POLYPHONY_TEXT</argument>, <argument>POLYPHONY_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">65535</literal></argument>)</argument_list></macro>
<macro><name>add_bool</name> <argument_list>(<argument><literal type="string">"synth-reverb"</literal></argument>, <argument>true</argument>, <argument>REVERB_TEXT</argument>, <argument>REVERB_TEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"synth-sample-rate"</literal></argument>, <argument><literal type="number">44100</literal></argument>,
<argument>SAMPLE_RATE_TEXT</argument>, <argument>SAMPLE_RATE_TEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">22050</literal></argument>, <argument><literal type="number">96000</literal></argument>)</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>fluid_settings_t</name> <modifier>*</modifier></type><name>settings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fluid_synth_t</name> <modifier>*</modifier></type><name>synth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>soundfont</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>date_t</name></type> <name>end_date</name></decl>;</decl_stmt>
}</block></struct></type> <name>decoder_sys_t</name>;</typedef>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name> <parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name> <parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_MIDI</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>settings</name></name> <operator>=</operator> <call><name>new_fluid_settings</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name> <operator>=</operator> <call><name>new_fluid_synth</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>soundfont</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>font_path</name> <init>= <expr><call><name>var_InheritString</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"soundfont"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>font_path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"loading sound fonts file %s"</literal></expr></argument>, <argument><expr><name>font_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>soundfont</name></name> <operator>=</operator> <call><name>fluid_synth_sfload</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>, <argument><expr><name>font_path</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>soundfont</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"cannot load sound fonts file %s"</literal></expr></argument>, <argument><expr><name>font_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>font_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_POSIX_VERSION</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>glob_t</name></type> <name>gl</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glob</name> <argument_list>(<argument><expr><literal type="string">"/usr/share/sounds/sf2/*.sf2"</literal></expr></argument>, <argument><expr><name>GLOB_NOESCAPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gl</name><operator>.</operator><name>gl_pathc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>gl</name><operator>.</operator><name>gl_pathv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"loading sound fonts file %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>soundfont</name></name> <operator>=</operator> <call><name>fluid_synth_sfload</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>soundfont</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"cannot load sound fonts file %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>globfree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>soundfont</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"sound font file required for synthesis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_dialog_display_error</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"MIDI synthesis not set up"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"A sound font file (.SF2) is required for MIDI synthesis.\n"</literal>
<literal type="string">"Please install a sound font and configure it "</literal>
<literal type="string">"from the VLC preferences "</literal>
<literal type="string">"(Input / Codecs &gt; Audio codecs &gt; FluidSynth).\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delete_fluid_synth</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delete_fluid_settings</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fluid_synth_set_chorus_on</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>,
<argument><expr><call><name>var_InheritBool</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"synth-chorus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fluid_synth_set_gain</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>,
<argument><expr><call><name>var_InheritFloat</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"synth-gain"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fluid_synth_set_polyphony</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>,
<argument><expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"synth-polyphony"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fluid_synth_set_reverb_on</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>,
<argument><expr><call><name>var_InheritBool</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"synth-reverb"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator>
<call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"synth-sample-rate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>fluid_synth_set_sample_rate</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>date_Init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeBlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name><operator>)</operator><operator>-&gt;</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fluid_synth_sfunload</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>soundfont</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delete_fluid_synth</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delete_fluid_settings</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name> <parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>date_Set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fluid_synth_program_reset</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>channel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>note</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>note</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>note</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fluid_synth_noteoff</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name> <parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_DISCONTINUITY</name><operator>|</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Flush</name> <argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name>
<operator>&amp;&amp;</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>date_Set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>&lt;</operator> <call><name>date_Get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"MIDI message in the past?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>drop</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>event</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>channel</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>event</name> <operator>&amp;=</operator> <literal type="number">0xF0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <literal type="number">0xF0</literal></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name>channel</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xF7</literal></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"fragmented SysEx not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>drop</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fluid_synth_sysex</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xF</literal></expr>:</case>
<expr_stmt><expr><call><name>fluid_synth_system_reset</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>p1</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>p2</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>event</name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x80</literal></expr>:</case>
<expr_stmt><expr><call><name>fluid_synth_noteoff</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x90</literal></expr>:</case>
<expr_stmt><expr><call><name>fluid_synth_noteon</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>FLUIDSYNTH_VERSION_MAJOR</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator></expr></cpp:if>
<case>case <expr><literal type="number">0xA0</literal></expr>:</case>
<expr_stmt><expr><call><name>fluid_synth_key_pressure</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="number">0xB0</literal></expr>:</case>
<expr_stmt><expr><call><name>fluid_synth_cc</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xC0</literal></expr>:</case>
<expr_stmt><expr><call><name>fluid_synth_program_change</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xD0</literal></expr>:</case>
<expr_stmt><expr><call><name>fluid_synth_channel_pressure</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xE0</literal></expr>:</case>
<expr_stmt><expr><call><name>fluid_synth_pitch_bend</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><operator>(</operator><name>p2</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>unsigned</name></type> <name>samples</name> <init>=
<expr><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>-</operator> <call><name>date_Get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">441</literal> <operator>/</operator> <literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>samples</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decoder_UpdateAudioFormat</name> <argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_out</name> <operator>=</operator> <call><name>decoder_NewAudioBuffer</name> <argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_out</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>date_Increment</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call>
<operator>-</operator> <name><name>p_out</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fluid_synth_write_float</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>synth</name></name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>drop</name>:</label>
<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decoder_QueueAudio</name> <argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
