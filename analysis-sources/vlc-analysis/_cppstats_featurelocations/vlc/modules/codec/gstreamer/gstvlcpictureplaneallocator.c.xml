<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\gstreamer\gstvlcpictureplaneallocator.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gst/gst.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gstvlcpictureplaneallocator.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gst_vlc_picture_plane_allocator_parent_class</name></cpp:macro> <cpp:value>parent_class</cpp:value></cpp:define>
<expr_stmt><expr><call><name>G_DEFINE_TYPE</name> <argument_list>(<argument><expr><name>GstVlcPicturePlaneAllocator</name></expr></argument>, <argument><expr><name>gst_vlc_picture_plane_allocator</name></expr></argument>, \
<argument><expr><name>GST_TYPE_ALLOCATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gst_vlc_picture_plane_allocator_finalize</name><parameter_list>( <parameter><decl><type><name>GObject</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>GstMemory</name><modifier>*</modifier></type> <name>gst_vlc_picture_plane_allocator_dummy_alloc</name><parameter_list>(
<parameter><decl><type><name>GstAllocator</name><modifier>*</modifier></type> <name>p_allocator</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>i_size</name></decl></parameter>,
<parameter><decl><type><name>GstAllocationParams</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gst_vlc_picture_plane_allocator_free</name><parameter_list>( <parameter><decl><type><name>GstAllocator</name> <modifier>*</modifier></type><name>p_allocator</name></decl></parameter>,
<parameter><decl><type><name>GstMemory</name> <modifier>*</modifier></type><name>p_gmem</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>gpointer</name></type> <name>gst_vlc_picture_plane_map</name><parameter_list>( <parameter><decl><type><name>GstMemory</name> <modifier>*</modifier></type><name>p_gmem</name></decl></parameter>,
<parameter><decl><type><name>gsize</name></type> <name>i_maxsize</name></decl></parameter>, <parameter><decl><type><name>GstMapFlags</name></type> <name>flags</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gst_vlc_picture_plane_unmap</name><parameter_list>( <parameter><decl><type><name>GstMemory</name> <modifier>*</modifier></type><name>p_mem</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>GstMemory</name><modifier>*</modifier></type> <name>gst_vlc_picture_plane_copy</name><parameter_list>(
<parameter><decl><type><name>GstMemory</name> <modifier>*</modifier></type><name>p_mem</name></decl></parameter>, <parameter><decl><type><name>gssize</name></type> <name>i_offset</name></decl></parameter>, <parameter><decl><type><name>gssize</name></type> <name>i_size</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GST_VLC_PICTURE_PLANE_ALLOCATOR_NAME</name></cpp:macro> <cpp:value>"vlcpictureplane"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gst_vlc_picture_plane_allocator_class_init</name><parameter_list>(
<parameter><decl><type><name>GstVlcPicturePlaneAllocatorClass</name> <modifier>*</modifier></type><name>p_klass</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GObjectClass</name> <modifier>*</modifier></type><name>p_gobject_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstAllocatorClass</name> <modifier>*</modifier></type><name>p_allocator_class</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_gobject_class</name> <operator>=</operator> <operator>(</operator><name>GObjectClass</name><operator>*</operator><operator>)</operator> <name>p_klass</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_allocator_class</name> <operator>=</operator> <operator>(</operator><name>GstAllocatorClass</name><operator>*</operator><operator>)</operator> <name>p_klass</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_gobject_class</name><operator>-&gt;</operator><name>finalize</name></name> <operator>=</operator> <name>gst_vlc_picture_plane_allocator_finalize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_allocator_class</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name>gst_vlc_picture_plane_allocator_dummy_alloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_allocator_class</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>gst_vlc_picture_plane_allocator_free</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gst_vlc_picture_plane_allocator_init</name><parameter_list>(
<parameter><decl><type><name>GstVlcPicturePlaneAllocator</name> <modifier>*</modifier></type><name>p_allocator</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GstAllocator</name> <modifier>*</modifier></type><name>p_alloc</name> <init>= <expr><call><name>GST_ALLOCATOR_CAST</name><argument_list>( <argument><expr><name>p_allocator</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_alloc</name><operator>-&gt;</operator><name>mem_type</name></name> <operator>=</operator> <name>GST_VLC_PICTURE_PLANE_ALLOCATOR_NAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_alloc</name><operator>-&gt;</operator><name>mem_map</name></name> <operator>=</operator> <name>gst_vlc_picture_plane_map</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_alloc</name><operator>-&gt;</operator><name>mem_unmap</name></name> <operator>=</operator> <name>gst_vlc_picture_plane_unmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_alloc</name><operator>-&gt;</operator><name>mem_copy</name></name> <operator>=</operator> <name>gst_vlc_picture_plane_copy</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>GST_OBJECT_FLAG_SET</name><argument_list>( <argument><expr><name>p_allocator</name></expr></argument>, <argument><expr><name>GST_ALLOCATOR_FLAG_CUSTOM_ALLOC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gst_vlc_picture_plane_allocator_finalize</name><parameter_list>( <parameter><decl><type><name>GObject</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GstVlcPicturePlaneAllocator</name> <modifier>*</modifier></type><name>p_alloc</name> <init>= <expr><call><name>GST_VLC_PICTURE_PLANE_ALLOCATOR</name><argument_list>(
<argument><expr><name>p_object</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_alloc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>G_OBJECT_CLASS</name> <argument_list>(<argument><expr><name>parent_class</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>finalize</name><argument_list>( <argument><expr><name>p_object</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GstMemory</name><modifier>*</modifier></type> <name>gst_vlc_picture_plane_allocator_dummy_alloc</name><parameter_list>(
<parameter><decl><type><name>GstAllocator</name><modifier>*</modifier></type> <name>p_allocator</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>i_size</name></decl></parameter>, <parameter><decl><type><name>GstAllocationParams</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_allocator</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_params</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gst_vlc_picture_plane_allocator_free</name><parameter_list>( <parameter><decl><type><name>GstAllocator</name> <modifier>*</modifier></type><name>p_allocator</name></decl></parameter>,
<parameter><decl><type><name>GstMemory</name> <modifier>*</modifier></type><name>p_gmem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_allocator</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>GstVlcPicturePlane</name> <modifier>*</modifier></type><name>p_mem</name> <init>= <expr><operator>(</operator><name>GstVlcPicturePlane</name><operator>*</operator><operator>)</operator> <name>p_gmem</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>g_slice_free</name><argument_list>( <argument><expr><name>GstVlcPicturePlane</name></expr></argument>, <argument><expr><name>p_mem</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gpointer</name></type> <name>gst_vlc_picture_plane_map</name><parameter_list>( <parameter><decl><type><name>GstMemory</name> <modifier>*</modifier></type><name>p_gmem</name></decl></parameter>,
<parameter><decl><type><name>gsize</name></type> <name>i_maxsize</name></decl></parameter>, <parameter><decl><type><name>GstMapFlags</name></type> <name>flags</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_maxsize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>GstVlcPicturePlane</name><modifier>*</modifier></type> <name>p_mem</name> <init>= <expr><operator>(</operator><name>GstVlcPicturePlane</name><operator>*</operator><operator>)</operator> <name>p_gmem</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_mem</name><operator>-&gt;</operator><name>p_pic</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>gpointer</name><operator>)</operator> <operator>(</operator><name><name>p_mem</name><operator>-&gt;</operator><name>p_plane</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name><name>p_mem</name><operator>-&gt;</operator><name>parent</name><operator>.</operator><name>offset</name></name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gst_vlc_picture_plane_unmap</name><parameter_list>( <parameter><decl><type><name>GstMemory</name> <modifier>*</modifier></type><name>p_mem</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_mem</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GstMemory</name><modifier>*</modifier></type> <name>gst_vlc_picture_plane_copy</name><parameter_list>(
<parameter><decl><type><name>GstMemory</name> <modifier>*</modifier></type><name>p_mem</name></decl></parameter>, <parameter><decl><type><name>gssize</name></type> <name>i_offset</name></decl></parameter>, <parameter><decl><type><name>gssize</name></type> <name>i_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_mem</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gst_vlc_picture_plane_allocator_release</name><parameter_list>(
<parameter><decl><type><name>GstVlcPicturePlaneAllocator</name> <modifier>*</modifier></type><name>p_allocator</name></decl></parameter>, <parameter><decl><type><name>GstBuffer</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_allocator</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GstVlcPicturePlane</name><modifier>*</modifier></type> <name>p_mem</name> <init>=
<expr><operator>(</operator><name>GstVlcPicturePlane</name><operator>*</operator><operator>)</operator> <call><name>gst_buffer_peek_memory</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>i_plane</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_mem</name><operator>-&gt;</operator><name>p_pic</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_mem</name><operator>-&gt;</operator><name>p_pic</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <call><name>gst_buffer_n_memory</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</condition>
<incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>p_mem</name> <operator>=</operator> <operator>(</operator><name>GstVlcPicturePlane</name><operator>*</operator><operator>)</operator> <call><name>gst_buffer_peek_memory</name> <argument_list>( <argument><expr><name>p_buffer</name></expr></argument>,
<argument><expr><name>i_plane</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mem</name><operator>-&gt;</operator><name>p_pic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mem</name><operator>-&gt;</operator><name>p_plane</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gst_vlc_picture_plane_allocator_hold</name><parameter_list>(
<parameter><decl><type><name>GstVlcPicturePlaneAllocator</name> <modifier>*</modifier></type><name>p_allocator</name></decl></parameter>, <parameter><decl><type><name>GstBuffer</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name><modifier>*</modifier></type> <name>p_pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_t</name><modifier>*</modifier></type> <name>p_dec</name> <init>= <expr><name><name>p_allocator</name><operator>-&gt;</operator><name>p_dec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstVlcPicturePlane</name> <modifier>*</modifier></type><name>p_mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_plane</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>decoder_UpdateVideoFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>decoder_NewPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_allocator</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><literal type="string">"failed to acquire picture from vout"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i_plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>p_mem</name> <operator>=</operator> <operator>(</operator><name>GstVlcPicturePlane</name><operator>*</operator><operator>)</operator> <call><name>gst_buffer_peek_memory</name> <argument_list>( <argument><expr><name>p_buffer</name></expr></argument>,
<argument><expr><name>i_plane</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mem</name><operator>-&gt;</operator><name>p_pic</name></name> <operator>=</operator> <name>p_pic</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mem</name><operator>-&gt;</operator><name>p_plane</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[ <expr><name>i_plane</name></expr> ]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gst_vlc_picture_plane_allocator_alloc</name><parameter_list>(
<parameter><decl><type><name>GstVlcPicturePlaneAllocator</name> <modifier>*</modifier></type><name>p_allocator</name></decl></parameter>,
<parameter><decl><type><name>GstBuffer</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_plane</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gsize</name></type> <name>i_max_size</name></decl>, <decl><type ref="prev"/><name>i_align</name></decl>, <decl><type ref="prev"/><name>i_offset</name></decl>, <decl><type ref="prev"/><name>i_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_allocator</name><operator>-&gt;</operator><name>pic_info</name></name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>GstVlcPicturePlane</name> <modifier>*</modifier></type><name>p_mem</name> <init>=
<expr><operator>(</operator><name>GstVlcPicturePlane</name><operator>*</operator><operator>)</operator> <call><name>g_slice_new0</name><argument_list>( <argument><expr><name>GstVlcPicturePlane</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[ <expr><name>i_plane</name></expr> ]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator>
<name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[ <expr><name>i_plane</name></expr> ]</index></name><operator>.</operator><name>i_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_max_size</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[ <expr><name>i_plane</name></expr> ]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator>
<name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[ <expr><name>i_plane</name></expr> ]</index></name><operator>.</operator><name>i_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_align</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gst_memory_init</name><argument_list>( <argument><expr><call><name>GST_MEMORY_CAST</name><argument_list>( <argument><expr><name>p_mem</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>GST_MEMORY_FLAG_NO_SHARE</name></expr></argument>,
<argument><expr><call><name>GST_ALLOCATOR_CAST</name><argument_list>( <argument><expr><name>p_allocator</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_max_size</name></expr></argument>,
<argument><expr><name>i_align</name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_buffer_append_memory</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>GstMemory</name><operator>*</operator><operator>)</operator> <name>p_mem</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gst_vlc_set_vout_fmt</name><parameter_list>( <parameter><decl><type><name>GstVideoInfo</name> <modifier>*</modifier></type><name>p_info</name></decl></parameter>, <parameter><decl><type><name>GstVideoAlignment</name> <modifier>*</modifier></type><name>p_align</name></decl></parameter>,
<parameter><decl><type><name>GstCaps</name> <modifier>*</modifier></type><name>p_caps</name></decl></parameter>, <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_outfmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_voutfmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstStructure</name> <modifier>*</modifier></type><name>p_str</name> <init>= <expr><call><name>gst_caps_get_structure</name><argument_list>( <argument><expr><name>p_caps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_padded_width</name></decl>, <decl><type ref="prev"/><name>i_padded_height</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_chroma</name> <operator>=</operator> <name><name>p_outfmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <call><name>vlc_fourcc_GetCodecFromString</name><argument_list>(
<argument><expr><name>VIDEO_ES</name></expr></argument>,
<argument><expr><call><name>gst_structure_get_string</name><argument_list>( <argument><expr><name>p_str</name></expr></argument>, <argument><expr><literal type="string">"format"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_chroma</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"video chroma type not supported"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_padded_width</name> <operator>=</operator> <call><name>GST_VIDEO_INFO_WIDTH</name><argument_list>( <argument><expr><name>p_info</name></expr></argument> )</argument_list></call> <operator>+</operator> <name><name>p_align</name><operator>-&gt;</operator><name>padding_left</name></name> <operator>+</operator>
<name><name>p_align</name><operator>-&gt;</operator><name>padding_right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_padded_height</name> <operator>=</operator> <call><name>GST_VIDEO_INFO_HEIGHT</name><argument_list>( <argument><expr><name>p_info</name></expr></argument> )</argument_list></call> <operator>+</operator> <name><name>p_align</name><operator>-&gt;</operator><name>padding_top</name></name> <operator>+</operator>
<name><name>p_align</name><operator>-&gt;</operator><name>padding_bottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Setup</name><argument_list>( <argument><expr><name>p_voutfmt</name></expr></argument>, <argument><expr><name>i_chroma</name></expr></argument>, <argument><expr><name>i_padded_width</name></expr></argument>, <argument><expr><name>i_padded_height</name></expr></argument>,
<argument><expr><call><name>GST_VIDEO_INFO_WIDTH</name><argument_list>( <argument><expr><name>p_info</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name>GST_VIDEO_INFO_HEIGHT</name><argument_list>( <argument><expr><name>p_info</name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>GST_VIDEO_INFO_PAR_N</name><argument_list>( <argument><expr><name>p_info</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name>GST_VIDEO_INFO_PAR_D</name><argument_list>( <argument><expr><name>p_info</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_voutfmt</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>p_align</name><operator>-&gt;</operator><name>padding_left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_voutfmt</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>=</operator> <name><name>p_align</name><operator>-&gt;</operator><name>padding_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_voutfmt</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>=</operator> <call><name>GST_VIDEO_INFO_FPS_N</name><argument_list>( <argument><expr><name>p_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_voutfmt</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <call><name>GST_VIDEO_INFO_FPS_D</name><argument_list>( <argument><expr><name>p_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>gst_vlc_video_info_from_vout</name><parameter_list>( <parameter><decl><type><name>GstVideoInfo</name> <modifier>*</modifier></type><name>p_info</name></decl></parameter>,
<parameter><decl><type><name>GstVideoAlignment</name> <modifier>*</modifier></type><name>p_align</name></decl></parameter>, <parameter><decl><type><name>GstCaps</name> <modifier>*</modifier></type><name>p_caps</name></decl></parameter>, <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_info</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>GstVideoFormatInfo</name> <modifier>*</modifier></type><name>p_vinfo</name> <init>= <expr><name><name>p_info</name><operator>-&gt;</operator><name>finfo</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>gst_vlc_dec_ensure_empty_queue</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_video_info_align</name><argument_list>( <argument><expr><name>p_info</name></expr></argument>, <argument><expr><name>p_align</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>gst_vlc_set_vout_fmt</name><argument_list>( <argument><expr><name>p_info</name></expr></argument>, <argument><expr><name>p_align</name></expr></argument>, <argument><expr><name>p_caps</name></expr></argument>, <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed to set output format to vout"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>decoder_UpdateVideoFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>decoder_NewPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed to acquire picture from vout; for pic info"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_info</name><operator>-&gt;</operator><name>stride</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>strides_mismatch</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_info</name><operator>-&gt;</operator><name>offset</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>
<name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_lines</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>GST_VIDEO_INFO_SIZE</name><argument_list>( <argument><expr><name>p_info</name></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_info</name><operator>-&gt;</operator><name>offset</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>
<name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_lines</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_v_edge</name></decl>, <decl><type ref="prev"/><name>i_h_edge</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_h_edge</name> <operator>=</operator>
<call><name>GST_VIDEO_FORMAT_INFO_SCALE_WIDTH</name><argument_list>( <argument><expr><name>p_vinfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name><name>p_align</name><operator>-&gt;</operator><name>padding_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_v_edge</name> <operator>=</operator>
<call><name>GST_VIDEO_FORMAT_INFO_SCALE_HEIGHT</name><argument_list>( <argument><expr><name>p_vinfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name><name>p_align</name><operator>-&gt;</operator><name>padding_top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator> <name>i_v_edge</name> <operator>*</operator> <name><name>p_info</name><operator>-&gt;</operator><name>stride</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator> <operator>+</operator>
<operator>(</operator> <name>i_h_edge</name> <operator>*</operator> <call><name>GST_VIDEO_FORMAT_INFO_PSTRIDE</name><argument_list>( <argument><expr><name>p_vinfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_pic_info</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>picture_t</name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>strides_mismatch</name>:</label>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"strides mismatch"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>gst_vlc_picture_plane_allocator_query_format</name><parameter_list>(
<parameter><decl><type><name>GstVlcPicturePlaneAllocator</name> <modifier>*</modifier></type><name>p_allocator</name></decl></parameter>, <parameter><decl><type><name>GstVideoInfo</name> <modifier>*</modifier></type><name>p_info</name></decl></parameter>,
<parameter><decl><type><name>GstVideoAlignment</name> <modifier>*</modifier></type><name>p_align</name></decl></parameter>, <parameter><decl><type><name>GstCaps</name> <modifier>*</modifier></type><name>p_caps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name><name>p_allocator</name><operator>-&gt;</operator><name>p_dec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name></type> <name>v_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_info</name> <init>= <expr><operator>&amp;</operator><name><name>p_allocator</name><operator>-&gt;</operator><name>pic_info</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>v_fmt</name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>=
<expr><call><name>gst_vlc_video_info_from_vout</name><argument_list>( <argument><expr><name>p_info</name></expr></argument>, <argument><expr><name>p_align</name></expr></argument>, <argument><expr><name>p_caps</name></expr></argument>, <argument><expr><name>p_dec</name></expr></argument>,
<argument><expr><name>p_pic_info</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name> <operator>=</operator> <name>v_fmt</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_ret</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_allocator</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><literal type="string">"failed to get the vout info"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GstVlcPicturePlaneAllocator</name><modifier>*</modifier></type> <name>gst_vlc_picture_plane_allocator_new</name><parameter_list>(
<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GstVlcPicturePlaneAllocator</name> <modifier>*</modifier></type><name>p_allocator</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_allocator</name> <operator>=</operator> <call><name>g_object_new</name><argument_list>( <argument><expr><name>GST_TYPE_VLC_PICTURE_PLANE_ALLOCATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_allocator</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>=</operator> <name>p_dec</name></expr>;</expr_stmt>

<return>return <expr><name>p_allocator</name></expr>;</return>
</block_content>}</block></function>
</unit>
