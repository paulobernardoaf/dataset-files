<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\gstreamer\gstvlcvideopool.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_GST_VIDEO_POOL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_GST_VIDEO_POOL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gst/gstbufferpool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gst/video/gstvideopool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gstvlcpictureplaneallocator.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>_GstVlcVideoPool</name></name></type> <name>GstVlcVideoPool</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_GstVlcVideoPoolClass</name></name></type> <name>GstVlcVideoPoolClass</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GST_TYPE_VLC_VIDEO_POOL</name></cpp:macro> <cpp:value>(gst_vlc_video_pool_get_type())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GST_IS_VLC_VIDEO_POOL</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_VLC_VIDEO_POOL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GST_VLC_VIDEO_POOL</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_VLC_VIDEO_POOL, GstVlcVideoPool))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GST_VLC_VIDEO_POOL_CAST</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((GstVlcVideoPool*)(obj))</cpp:value></cpp:define>

<struct>struct <name>_GstVlcVideoPool</name>
<block>{
<decl_stmt><decl><type><name>GstBufferPool</name></type> <name>bufferpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstVlcPicturePlaneAllocator</name> <modifier>*</modifier></type><name>p_allocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GstCaps</name> <modifier>*</modifier></type><name>p_caps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstVideoInfo</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstVideoAlignment</name></type> <name>align</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_add_metavideo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_need_aligned</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>_GstVlcVideoPoolClass</name>
<block>{
<decl_stmt><decl><type><name>GstBufferPoolClass</name></type> <name>parent_class</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>GType</name></type> <name>gst_vlc_video_pool_get_type</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>GstVlcVideoPool</name><modifier>*</modifier></type> <name>gst_vlc_video_pool_new</name><parameter_list>(
<parameter><decl><type><name>GstAllocator</name> <modifier>*</modifier></type><name>p_allocator</name></decl></parameter>, <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
