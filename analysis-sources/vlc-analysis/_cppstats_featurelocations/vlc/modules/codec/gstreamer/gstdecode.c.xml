<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\gstreamer\gstdecode.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gst/gst.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gst/video/video.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gst/video/gstvideometa.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gst/app/gstappsrc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gst/gstatomicqueue.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gstvlcpictureplaneallocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gstvlcvideosink.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>GstElement</name> <modifier>*</modifier></type><name>p_decoder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstElement</name> <modifier>*</modifier></type><name>p_decode_src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstElement</name> <modifier>*</modifier></type><name>p_decode_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstElement</name> <modifier>*</modifier></type><name>p_decode_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GstVlcPicturePlaneAllocator</name> <modifier>*</modifier></type><name>p_allocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GstBus</name> <modifier>*</modifier></type><name>p_bus</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GstVideoInfo</name></type> <name>vinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstAtomicQueue</name> <modifier>*</modifier></type><name>p_que</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_prerolled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_running</name></decl>;</decl_stmt>
}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>GstCaps</name> <modifier>*</modifier></type><name>p_sinkcaps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstCaps</name> <modifier>*</modifier></type><name>p_srccaps</name></decl>;</decl_stmt>
}</block></struct></type> <name>sink_src_caps_t</name>;</typedef>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULE_DESCRIPTION</name></cpp:macro> <cpp:value>N_( "Uses GStreamer framework's plugins " "to decode the media codecs" )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USEDECODEBIN_TEXT</name></cpp:macro> <cpp:value>N_( "Use DecodeBin" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USEDECODEBIN_LONGTEXT</name></cpp:macro> <cpp:value>N_( "DecodeBin is a container element, that can add and " "manage multiple elements. Apart from adding the decoders, " "decodebin also adds elementary stream parsers which can provide " "more info such as codec profile, level and other attributes, " "in the form of GstCaps (Stream Capabilities) to decoder." )</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USEVLCPOOL_TEXT</name></cpp:macro> <cpp:value>"Use VLCPool"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USEVLCPOOL_LONGTEXT</name></cpp:macro> <cpp:value>"Allow the gstreamer decoders to directly decode (direct render) " "into the buffers provided and managed by the (downstream)VLC modules " "that follow. Note: Currently this feature is unstable, enable it at " "your own risk."</cpp:value></cpp:define>





<macro><name>vlc_module_begin</name><argument_list>( )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"GstDecode"</literal></argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"gstdecode"</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_VCODEC</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_( <literal type="string">"GStreamer Based Decoder"</literal> )</argument> )</argument_list></macro>
<macro><name>set_help</name><argument_list>( <argument>MODULE_DESCRIPTION</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video decoder"</literal></argument>, <argument><literal type="number">50</literal></argument> )</argument_list></macro>
<macro><name>set_section</name><argument_list>( <argument>N_( <literal type="string">"Decoding"</literal> )</argument> , <argument>NULL</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenDecoder</argument>, <argument>CloseDecoder</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"use-decodebin"</literal></argument>, <argument>true</argument>, <argument>USEDECODEBIN_TEXT</argument>,
<argument>USEDECODEBIN_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"use-vlcpool"</literal></argument>, <argument>false</argument>, <argument>USEVLCPOOL_TEXT</argument>,
<argument>USEVLCPOOL_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>( )</argument_list></macro>

<function><type><name>void</name></type> <name>gst_vlc_dec_ensure_empty_queue</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Ensuring the decoder queue is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<while>while<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_running</name></name> <operator>&amp;&amp;</operator> <name>i_count</name> <operator>&lt;</operator> <literal type="number">60</literal> <operator>&amp;&amp;</operator>
<call><name>gst_atomic_queue_length</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_que</name></name></expr></argument> )</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_tick_sleep</name> <argument_list>( <argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_running</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>gst_atomic_queue_length</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_que</name></name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Ensured the decoder queue is empty"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Timed out when ensuring an empty queue"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Ensuring empty decoder queue not required; decoder \
not running"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>seek_data_cb</name><parameter_list>( <parameter><decl><type><name>GstAppSrc</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>guint64</name></type> <name>l_offset</name></decl></parameter>,
<parameter><decl><type><name>gpointer</name></type> <name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"appsrc seeking to %"</literal><name>G_GUINT64_FORMAT</name></expr></argument>, <argument><expr><name>l_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>pad_added_cb</name><parameter_list>( <parameter><decl><type><name>GstElement</name> <modifier>*</modifier></type><name>p_ele</name></decl></parameter>, <parameter><decl><type><name>GstPad</name> <modifier>*</modifier></type><name>p_pad</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_ele</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><call><name>gst_pad_has_current_caps</name><argument_list>( <argument><expr><name>p_pad</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GstPadLinkReturn</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstPad</name> <modifier>*</modifier></type><name>p_sinkpad</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"linking the decoder with the vsink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sinkpad</name> <operator>=</operator> <call><name>gst_element_get_static_pad</name><argument_list>(
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_out</name></name></expr></argument>, <argument><expr><literal type="string">"sink"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gst_pad_link</name><argument_list>( <argument><expr><name>p_pad</name></expr></argument>, <argument><expr><name>p_sinkpad</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>GST_PAD_LINK_OK</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed to link decoder with vsink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gst_object_unref</name><argument_list>( <argument><expr><name>p_sinkpad</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"decodebin src pad has no caps"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GST_ELEMENT_ERROR</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name>STREAM</name></expr></argument>, <argument><expr><name>FAILED</name></expr></argument>,
<argument><expr><operator>(</operator> <literal type="string">"vlc stream error"</literal> <operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>caps_handoff_cb</name><parameter_list>( <parameter><decl><type><name>GstElement</name><modifier>*</modifier></type> <name>p_ele</name></decl></parameter>, <parameter><decl><type><name>GstCaps</name> <modifier>*</modifier></type><name>p_caps</name></decl></parameter>,
<parameter><decl><type><name>gpointer</name></type> <name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_ele</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstVideoAlignment</name></type> <name>align</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"got new caps %s"</literal></expr></argument>, <argument><expr><call><name>gst_caps_to_string</name><argument_list>( <argument><expr><name>p_caps</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>gst_video_info_from_caps</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>vinfo</name></name></expr></argument>, <argument><expr><name>p_caps</name></expr></argument> )</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed to negotiate"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gst_vlc_dec_ensure_empty_queue</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_video_alignment_reset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>align</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>gst_vlc_set_vout_fmt</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>vinfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>align</name></expr></argument>, <argument><expr><name>p_caps</name></expr></argument>, <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>frame_handoff_cb</name><parameter_list>( <parameter><decl><type><name>GstElement</name> <modifier>*</modifier></type><name>p_ele</name></decl></parameter>, <parameter><decl><type><name>GstBuffer</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>,
<parameter><decl><type><name>gpointer</name></type> <name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_ele</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>gst_atomic_queue_push</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_que</name></name></expr></argument>, <argument><expr><call><name>gst_buffer_ref</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>gst_CopyPicture</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>, <parameter><decl><type><name>GstVideoFrame</name> <modifier>*</modifier></type><name>p_frame</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_plane</name></decl>, <decl><type ref="prev"/><name>i_planes</name></decl>, <decl><type ref="prev"/><name>i_line</name></decl>, <decl><type ref="prev"/><name>i_dst_stride</name></decl>, <decl><type ref="prev"/><name>i_src_stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_w</name></decl>, <decl><type ref="prev"/><name>i_h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_planes</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i_plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name>i_planes</name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>p_dst</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_src</name> <operator>=</operator> <call><name>GST_VIDEO_FRAME_PLANE_DATA</name><argument_list>( <argument><expr><name>p_frame</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dst_stride</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_src_stride</name> <operator>=</operator> <call><name>GST_VIDEO_FRAME_PLANE_STRIDE</name><argument_list>( <argument><expr><name>p_frame</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_w</name> <operator>=</operator> <call><name>GST_VIDEO_FRAME_COMP_WIDTH</name><argument_list>( <argument><expr><name>p_frame</name></expr></argument>,
<argument><expr><name>i_plane</name></expr></argument> )</argument_list></call> <operator>*</operator> <call><name>GST_VIDEO_FRAME_COMP_PSTRIDE</name><argument_list>( <argument><expr><name>p_frame</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_h</name> <operator>=</operator> <call><name>GST_VIDEO_FRAME_COMP_HEIGHT</name><argument_list>( <argument><expr><name>p_frame</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><name>i_line</name> <operator>&lt;</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></argument>, <argument><expr><name>i_h</name></expr></argument> )</argument_list></call></expr>;</condition>
<incr><expr><name>i_line</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <name>i_src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <name>i_dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>gint</name></type> <name>find_decoder_func</name><parameter_list>( <parameter><decl><type><name>gconstpointer</name></type> <name>p_p1</name></decl></parameter>, <parameter><decl><type><name>gconstpointer</name></type> <name>p_p2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GstElementFactory</name> <modifier>*</modifier></type><name>p_factory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sink_src_caps_t</name> <modifier>*</modifier></type><name>p_caps</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_factory</name> <operator>=</operator> <operator>(</operator> <name>GstElementFactory</name><operator>*</operator> <operator>)</operator><name>p_p1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_caps</name> <operator>=</operator> <operator>(</operator> <name>sink_src_caps_t</name><operator>*</operator> <operator>)</operator><name>p_p2</name></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><operator>(</operator> <call><name>gst_element_factory_can_sink_any_caps</name><argument_list>( <argument><expr><name>p_factory</name></expr></argument>,
<argument><expr><name><name>p_caps</name><operator>-&gt;</operator><name>p_sinkcaps</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>gst_element_factory_can_src_any_caps</name><argument_list>( <argument><expr><name>p_factory</name></expr></argument>,
<argument><expr><name><name>p_caps</name><operator>-&gt;</operator><name>p_srccaps</name></name></expr></argument> )</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>default_msg_handler</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>GstMessage</name> <modifier>*</modifier></type><name>p_msg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>err</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><call><name>GST_MESSAGE_TYPE</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument> )</argument_list></call></expr> )</condition><block>{<block_content>
<case>case <expr><name>GST_MESSAGE_ERROR</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>psz_debug</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>p_error</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gst_message_parse_error</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_debug</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_free</name><argument_list>( <argument><expr><name>psz_debug</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Error from %s: %s"</literal></expr></argument>,
<argument><expr><call><name>GST_ELEMENT_NAME</name><argument_list>( <argument><expr><call><name>GST_MESSAGE_SRC</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><name><name>p_error</name><operator>-&gt;</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_error_free</name><argument_list>( <argument><expr><name>p_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>GST_MESSAGE_WARNING</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>psz_debug</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>p_error</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gst_message_parse_warning</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_debug</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_free</name><argument_list>( <argument><expr><name>psz_debug</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Warning from %s: %s"</literal></expr></argument>,
<argument><expr><call><name>GST_ELEMENT_NAME</name><argument_list>( <argument><expr><call><name>GST_MESSAGE_SRC</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><name><name>p_error</name><operator>-&gt;</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_error_free</name><argument_list>( <argument><expr><name>p_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>GST_MESSAGE_INFO</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>psz_debug</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>p_error</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gst_message_parse_info</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_debug</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_free</name><argument_list>( <argument><expr><name>psz_debug</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Info from %s: %s"</literal></expr></argument>,
<argument><expr><call><name>GST_ELEMENT_NAME</name><argument_list>( <argument><expr><call><name>GST_MESSAGE_SRC</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><name><name>p_error</name><operator>-&gt;</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_error_free</name><argument_list>( <argument><expr><name>p_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>vlc_gst_plugin_init</name><parameter_list>( <parameter><decl><type><name>GstPlugin</name> <modifier>*</modifier></type><name>p_plugin</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>gst_element_register</name><argument_list>( <argument><expr><name>p_plugin</name></expr></argument>, <argument><expr><literal type="string">"vlcvideosink"</literal></expr></argument>, <argument><expr><name>GST_RANK_NONE</name></expr></argument>,
<argument><expr><name>GST_TYPE_VLC_VIDEO_SINK</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>vlc_gst_registered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_gst_init_once</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gst_init</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vlc_gst_registered</name> <operator>=</operator> <call><name>gst_plugin_register_static</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"videolan"</literal></expr></argument>,
<argument><expr><literal type="string">"VLC Gstreamer plugins"</literal></expr></argument>, <argument><expr><name>vlc_gst_plugin_init</name></expr></argument>,
<argument><expr><literal type="string">"1.0.0"</literal></expr></argument>, <argument><expr><literal type="string">"LGPL"</literal></expr></argument>, <argument><expr><literal type="string">"NA"</literal></expr></argument>, <argument><expr><literal type="string">"vlc"</literal></expr></argument>, <argument><expr><literal type="string">"NA"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>vlc_gst_init</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_once_t</name></type> <name>once</name> <init>= <expr><name>VLC_STATIC_ONCE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once</name></expr></argument>, <argument><expr><name>vlc_gst_init_once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>vlc_gst_registered</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GstStructure</name><modifier>*</modifier></type> <name>vlc_to_gst_fmt</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_vfmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstStructure</name> <modifier>*</modifier></type><name>p_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition><block>{<block_content>
<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case>
<expr_stmt><expr><name>p_str</name> <operator>=</operator> <call><name>gst_structure_new_empty</name><argument_list>( <argument><expr><literal type="string">"video/x-h264"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_structure_set</name><argument_list>( <argument><expr><name>p_str</name></expr></argument>, <argument><expr><literal type="string">"alignment"</literal></expr></argument>, <argument><expr><name>G_TYPE_STRING</name></expr></argument>, <argument><expr><literal type="string">"au"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gst_structure_set</name><argument_list>( <argument><expr><name>p_str</name></expr></argument>, <argument><expr><literal type="string">"stream-format"</literal></expr></argument>, <argument><expr><name>G_TYPE_STRING</name></expr></argument>, <argument><expr><literal type="string">"avc"</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gst_structure_set</name><argument_list>( <argument><expr><name>p_str</name></expr></argument>, <argument><expr><literal type="string">"stream-format"</literal></expr></argument>, <argument><expr><name>G_TYPE_STRING</name></expr></argument>,
<argument><expr><literal type="string">"byte-stream"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_MP4V</name></expr>:</case>
<expr_stmt><expr><name>p_str</name> <operator>=</operator> <call><name>gst_structure_new_empty</name><argument_list>( <argument><expr><literal type="string">"video/mpeg"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_structure_set</name><argument_list>( <argument><expr><name>p_str</name></expr></argument>, <argument><expr><literal type="string">"mpegversion"</literal></expr></argument>, <argument><expr><name>G_TYPE_INT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><literal type="string">"systemstream"</literal></expr></argument>, <argument><expr><name>G_TYPE_BOOLEAN</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_VP8</name></expr>:</case>
<expr_stmt><expr><name>p_str</name> <operator>=</operator> <call><name>gst_structure_new_empty</name><argument_list>( <argument><expr><literal type="string">"video/x-vp8"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_MPGV</name></expr>:</case>
<expr_stmt><expr><name>p_str</name> <operator>=</operator> <call><name>gst_structure_new_empty</name><argument_list>( <argument><expr><literal type="string">"video/mpeg"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_structure_set</name><argument_list>( <argument><expr><name>p_str</name></expr></argument>, <argument><expr><literal type="string">"mpegversion"</literal></expr></argument>, <argument><expr><name>G_TYPE_INT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="string">"systemstream"</literal></expr></argument>, <argument><expr><name>G_TYPE_BOOLEAN</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_FLV1</name></expr>:</case>
<expr_stmt><expr><name>p_str</name> <operator>=</operator> <call><name>gst_structure_new_empty</name><argument_list>( <argument><expr><literal type="string">"video/x-flash-video"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_structure_set</name><argument_list>( <argument><expr><name>p_str</name></expr></argument>, <argument><expr><literal type="string">"flvversion"</literal></expr></argument>, <argument><expr><name>G_TYPE_INT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_WMV1</name></expr>:</case>
<expr_stmt><expr><name>p_str</name> <operator>=</operator> <call><name>gst_structure_new_empty</name><argument_list>( <argument><expr><literal type="string">"video/x-wmv"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_structure_set</name><argument_list>( <argument><expr><name>p_str</name></expr></argument>, <argument><expr><literal type="string">"wmvversion"</literal></expr></argument>, <argument><expr><name>G_TYPE_INT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"format"</literal></expr></argument>, <argument><expr><name>G_TYPE_STRING</name></expr></argument>, <argument><expr><literal type="string">"WMV1"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_WMV2</name></expr>:</case>
<expr_stmt><expr><name>p_str</name> <operator>=</operator> <call><name>gst_structure_new_empty</name><argument_list>( <argument><expr><literal type="string">"video/x-wmv"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_structure_set</name><argument_list>( <argument><expr><name>p_str</name></expr></argument>, <argument><expr><literal type="string">"wmvversion"</literal></expr></argument>, <argument><expr><name>G_TYPE_INT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="string">"format"</literal></expr></argument>, <argument><expr><name>G_TYPE_STRING</name></expr></argument>, <argument><expr><literal type="string">"WMV2"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_WMV3</name></expr>:</case>
<expr_stmt><expr><name>p_str</name> <operator>=</operator> <call><name>gst_structure_new_empty</name><argument_list>( <argument><expr><literal type="string">"video/x-wmv"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_structure_set</name><argument_list>( <argument><expr><name>p_str</name></expr></argument>, <argument><expr><literal type="string">"wmvversion"</literal></expr></argument>, <argument><expr><name>G_TYPE_INT</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><literal type="string">"format"</literal></expr></argument>, <argument><expr><name>G_TYPE_STRING</name></expr></argument>, <argument><expr><literal type="string">"WMV3"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_VC1</name></expr>:</case>
<expr_stmt><expr><name>p_str</name> <operator>=</operator> <call><name>gst_structure_new_empty</name><argument_list>( <argument><expr><literal type="string">"video/x-wmv"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_structure_set</name><argument_list>( <argument><expr><name>p_str</name></expr></argument>, <argument><expr><literal type="string">"wmvversion"</literal></expr></argument>, <argument><expr><name>G_TYPE_INT</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><literal type="string">"format"</literal></expr></argument>, <argument><expr><name>G_TYPE_STRING</name></expr></argument>, <argument><expr><literal type="string">"WVC1"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>i_width</name></name> <operator>&amp;&amp;</operator> <name><name>p_vfmt</name><operator>-&gt;</operator><name>i_height</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gst_structure_set</name><argument_list>( <argument><expr><name>p_str</name></expr></argument>,
<argument><expr><literal type="string">"width"</literal></expr></argument>, <argument><expr><name>G_TYPE_INT</name></expr></argument>, <argument><expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>,
<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name>G_TYPE_INT</name></expr></argument>, <argument><expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>&amp;&amp;</operator> <name><name>p_vfmt</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gst_structure_set</name><argument_list>( <argument><expr><name>p_str</name></expr></argument>, <argument><expr><literal type="string">"framerate"</literal></expr></argument>, <argument><expr><name>GST_TYPE_FRACTION</name></expr></argument>,
<argument><expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>i_frame_rate</name></name></expr></argument>,
<argument><expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>&amp;&amp;</operator> <name><name>p_vfmt</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gst_structure_set</name><argument_list>( <argument><expr><name>p_str</name></expr></argument>, <argument><expr><literal type="string">"pixel-aspect-ratio"</literal></expr></argument>, <argument><expr><name>GST_TYPE_FRACTION</name></expr></argument>,
<argument><expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr></argument>,
<argument><expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GstBuffer</name> <modifier>*</modifier></type><name>p_buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_buf</name> <operator>=</operator> <call><name>gst_buffer_new_wrapped_full</name><argument_list>( <argument><expr><name>GST_MEMORY_FLAG_READONLY</name></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_buf</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gst_structure_free</name><argument_list>( <argument><expr><name>p_str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gst_structure_set</name><argument_list>( <argument><expr><name>p_str</name></expr></argument>, <argument><expr><literal type="string">"codec_data"</literal></expr></argument>, <argument><expr><name>GST_TYPE_BUFFER</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_buffer_unref</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_str</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator> <name>decoder_t</name><operator>*</operator> <operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstStateChangeReturn</name></type> <name>i_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>b_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sink_src_caps_t</name></type> <name>caps</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstStructure</name> <modifier>*</modifier></type><name>p_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstAppSrcCallbacks</name></type> <name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_rval</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>p_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dbin</name></decl>, <decl><type ref="prev"/><name>vlc_pool</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_GST_CHECK</name><parameter_list>( <parameter><type><name>r</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>t</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>{ if( r == v ){ msg_Err( p_dec, s ); i_rval = t; goto fail; } }</cpp:value></cpp:define>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_gst_init</name><argument_list>( )</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed to register vlcvideosink"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_str</name> <operator>=</operator> <call><name>vlc_to_gst_fmt</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_str</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gst_structure_free</name><argument_list>( <argument><expr><name>p_str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dbin</name> <operator>=</operator> <call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"use-decodebin"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Using decodebin? %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>dbin</name></expr> ?</condition><then> <expr><literal type="string">"yes "</literal></expr></then><else>:<expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>caps</name><operator>.</operator><name>p_sinkcaps</name></name> <operator>=</operator> <call><name>gst_caps_new_empty</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_caps_append_structure</name><argument_list>( <argument><expr><name><name>caps</name><operator>.</operator><name>p_sinkcaps</name></name></expr></argument>, <argument><expr><name>p_str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>caps</name><operator>.</operator><name>p_srccaps</name></name> <operator>=</operator> <call><name>gst_caps_new_empty_simple</name><argument_list>( <argument><expr><literal type="string">"video/x-raw"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p_list</name> <operator>=</operator> <call><name>gst_element_factory_list_get_elements</name><argument_list>(
<argument><expr><name>GST_ELEMENT_FACTORY_TYPE_DECODER</name></expr></argument>, <argument><expr><name>GST_RANK_MARGINAL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_GST_CHECK</name><argument_list>( <argument><expr><name>p_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"no decoder list found"</literal></expr></argument>, <argument><expr><name>VLC_ENOMOD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>dbin</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>p_l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_list</name> <operator>=</operator> <call><name>g_list_sort</name><argument_list>( <argument><expr><name>p_list</name></expr></argument>, <argument><expr><name>gst_plugin_feature_rank_compare_func</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_GST_CHECK</name><argument_list>( <argument><expr><name>p_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"failed to sort decoders list"</literal></expr></argument>,
<argument><expr><name>VLC_ENOMOD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_l</name> <operator>=</operator> <call><name>g_list_find_custom</name><argument_list>( <argument><expr><name>p_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>, <argument><expr><name>find_decoder_func</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_GST_CHECK</name><argument_list>( <argument><expr><name>p_l</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"no suitable decoder found"</literal></expr></argument>,
<argument><expr><name>VLC_ENOMOD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_in</name></name> <operator>=</operator> <call><name>gst_element_factory_create</name><argument_list>(
<argument><expr><operator>(</operator> <name>GstElementFactory</name><operator>*</operator> <operator>)</operator><name><name>p_l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_GST_CHECK</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_in</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="string">"failed to create decoder"</literal></expr></argument>, <argument><expr><name>VLC_ENOMOD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>p_l</name></decl>;</decl_stmt>


<expr_stmt><expr><name>p_l</name> <operator>=</operator> <call><name>g_list_find_custom</name><argument_list>( <argument><expr><name>p_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>, <argument><expr><name>find_decoder_func</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_GST_CHECK</name><argument_list>( <argument><expr><name>p_l</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"no suitable decoder found"</literal></expr></argument>,
<argument><expr><name>VLC_ENOMOD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>gst_plugin_feature_list_free</name><argument_list>( <argument><expr><name>p_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_caps_unref</name><argument_list>( <argument><expr><name><name>caps</name><operator>.</operator><name>p_srccaps</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>caps</name><operator>.</operator><name>p_srccaps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_prerolled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_running</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_que</name></name> <operator>=</operator> <call><name>gst_atomic_queue_new</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_GST_CHECK</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_que</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"failed to create queue"</literal></expr></argument>,
<argument><expr><name>VLC_ENOMEM</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_src</name></name> <operator>=</operator> <call><name>gst_element_factory_make</name><argument_list>( <argument><expr><literal type="string">"appsrc"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_GST_CHECK</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_src</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"appsrc not found"</literal></expr></argument>,
<argument><expr><name>VLC_ENOMOD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_set</name><argument_list>( <argument><expr><call><name>G_OBJECT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_src</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="string">"caps"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>.</operator><name>p_sinkcaps</name></name></expr></argument>,
<argument><expr><literal type="string">"emit-signals"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="string">"format"</literal></expr></argument>, <argument><expr><name>GST_FORMAT_BYTES</name></expr></argument>,
<argument><expr><literal type="string">"stream-type"</literal></expr></argument>, <argument><expr><name>GST_APP_STREAM_TYPE_SEEKABLE</name></expr></argument>,





<argument><expr><literal type="string">"block"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="string">"max-bytes"</literal></expr></argument>, <argument><expr><operator>(</operator> <name>guint64</name> <operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_caps_unref</name><argument_list>( <argument><expr><name><name>caps</name><operator>.</operator><name>p_sinkcaps</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>caps</name><operator>.</operator><name>p_sinkcaps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>enough_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>need_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>seek_data</name></name> <operator>=</operator> <name>seek_data_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_app_src_set_callbacks</name><argument_list>( <argument><expr><call><name>GST_APP_SRC</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_src</name></name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>dbin</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_in</name></name> <operator>=</operator> <call><name>gst_element_factory_make</name><argument_list>( <argument><expr><literal type="string">"decodebin"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_GST_CHECK</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_in</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"decodebin not found"</literal></expr></argument>,
<argument><expr><name>VLC_ENOMOD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>( <argument><expr><call><name>G_OBJECT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_in</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pad-added"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>( <argument><expr><name>pad_added_cb</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_out</name></name> <operator>=</operator> <call><name>gst_element_factory_make</name><argument_list>( <argument><expr><literal type="string">"vlcvideosink"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_GST_CHECK</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_out</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"vlcvideosink not found"</literal></expr></argument>,
<argument><expr><name>VLC_ENOMOD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc_pool</name> <operator>=</operator> <call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"use-vlcpool"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Using vlc pool? %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>vlc_pool</name></expr> ?</condition><then> <expr><literal type="string">"yes "</literal></expr></then><else>:<expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_allocator</name></name> <operator>=</operator> <call><name>gst_vlc_picture_plane_allocator_new</name><argument_list>(
<argument><expr><operator>(</operator><name>gpointer</name><operator>)</operator> <name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_set</name><argument_list>( <argument><expr><call><name>G_OBJECT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_out</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sync"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="string">"allocator"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_allocator</name></name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name><operator>)</operator> <name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"use-pool"</literal></expr></argument>, <argument><expr><name>vlc_pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>( <argument><expr><call><name>G_OBJECT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_out</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new-buffer"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>( <argument><expr><name>frame_handoff_cb</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
g_signal_connect( G_OBJECT( p_sys-&gt;p_decode_out ), "new-caps",
G_CALLBACK( caps_handoff_cb ), p_dec );
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>GST_VLC_VIDEO_SINK</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_out</name></name></expr></argument> )</argument_list></call><operator>-&gt;</operator><name>new_caps</name> <operator>=</operator> <name>caps_handoff_cb</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name></name> <operator>=</operator> <call><name>GST_ELEMENT</name><argument_list>( <argument><expr><call><name>gst_bin_new</name><argument_list>( <argument><expr><literal type="string">"decoder"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_GST_CHECK</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"bin not found"</literal></expr></argument>, <argument><expr><name>VLC_ENOMOD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_bus</name></name> <operator>=</operator> <call><name>gst_bus_new</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_GST_CHECK</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_bus</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"failed to create bus"</literal></expr></argument>,
<argument><expr><name>VLC_ENOMOD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_element_set_bus</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_bus</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gst_bin_add_many</name><argument_list>( <argument><expr><call><name>GST_BIN</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_src</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_in</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_out</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_object_ref</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_src</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_object_ref</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_object_ref</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <call><name>gst_element_link</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_src</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_GST_CHECK</name><argument_list>( <argument><expr><name>b_ret</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="string">"failed to link src &lt;-&gt; in"</literal></expr></argument>,
<argument><expr><name>VLC_EGENERIC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>dbin</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <call><name>gst_element_link</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_in</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_GST_CHECK</name><argument_list>( <argument><expr><name>b_ret</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="string">"failed to link in &lt;-&gt; out"</literal></expr></argument>,
<argument><expr><name>VLC_EGENERIC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>gst_element_set_state</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name>GST_STATE_PLAYING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_GST_CHECK</name><argument_list>( <argument><expr><name>i_ret</name></expr></argument>, <argument><expr><name>GST_STATE_CHANGE_FAILURE</name></expr></argument>,
<argument><expr><literal type="string">"set state failure"</literal></expr></argument>, <argument><expr><name>VLC_EGENERIC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_running</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeBlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>fail</name>:</label>
<if_stmt><if>if<condition>( <expr><name><name>caps</name><operator>.</operator><name>p_sinkcaps</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gst_caps_unref</name><argument_list>( <argument><expr><name><name>caps</name><operator>.</operator><name>p_sinkcaps</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>caps</name><operator>.</operator><name>p_srccaps</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gst_caps_unref</name><argument_list>( <argument><expr><name><name>caps</name><operator>.</operator><name>p_srccaps</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>p_list</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gst_plugin_feature_list_free</name><argument_list>( <argument><expr><name>p_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CloseDecoder</name><argument_list>( <argument><expr><operator>(</operator> <name>vlc_object_t</name><operator>*</operator> <operator>)</operator><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_rval</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstBuffer</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>b_ret</name></decl>;</decl_stmt>





<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <call><name>gst_element_seek_simple</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>,
<argument><expr><name>GST_FORMAT_BYTES</name></expr></argument>, <argument><expr><name>GST_SEEK_FLAG_FLUSH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"new segment event : %d"</literal></expr></argument>, <argument><expr><name>b_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<while>while<condition>( <expr><operator>(</operator> <name>p_buffer</name> <operator>=</operator> <call><name>gst_atomic_queue_pop</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_que</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gst_buffer_unref</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_prerolled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstMessage</name> <modifier>*</modifier></type><name>p_msg</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_DISCONTINUITY</name> <operator>|</operator>
<name>BLOCK_FLAG_CORRUPTED</name> <operator>)</operator></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Flush</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GstBuffer</name> <modifier>*</modifier></type><name>p_buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_buf</name> <operator>=</operator> <call><name>gst_buffer_new_wrapped_full</name><argument_list>( <argument><expr><name>GST_MEMORY_FLAG_READONLY</name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_start</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_start</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,
<argument><expr><name>p_block</name></expr></argument>, <argument><expr><operator>(</operator> <name>GDestroyNotify</name> <operator>)</operator><name>block_Release</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_buf</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed to create input gstbuffer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_ECRITICAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GST_BUFFER_DTS</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>gst_util_uint64_scale</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>,
<argument><expr><name>GST_SECOND</name></expr></argument>, <argument><expr><name>GST_MSECOND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GST_BUFFER_PTS</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>GST_BUFFER_DTS</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GST_BUFFER_PTS</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>gst_util_uint64_scale</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>,
<argument><expr><name>GST_SECOND</name></expr></argument>, <argument><expr><name>GST_MSECOND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GST_BUFFER_DURATION</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>gst_util_uint64_scale</name><argument_list>(
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>, <argument><expr><name>GST_SECOND</name></expr></argument>, <argument><expr><name>GST_MSECOND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&amp;&amp;</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GST_BUFFER_DURATION</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>gst_util_uint64_scale</name><argument_list>( <argument><expr><name>GST_SECOND</name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>












<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><call><name>gst_app_src_push_buffer</name><argument_list>(
<argument><expr><call><name>GST_APP_SRC_CAST</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_src</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call>
<operator>!=</operator> <name>GST_FLOW_OK</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed to push buffer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_ECRITICAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>p_msg</name> <operator>=</operator> <call><name>gst_bus_pop_filtered</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_bus</name></name></expr></argument>,
<argument><expr><name>GST_MESSAGE_ASYNC_DONE</name> <operator>|</operator> <name>GST_MESSAGE_ERROR</name> <operator>|</operator>
<name>GST_MESSAGE_EOS</name> <operator>|</operator> <name>GST_MESSAGE_WARNING</name> <operator>|</operator>
<name>GST_MESSAGE_INFO</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_msg</name></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><call><name>GST_MESSAGE_TYPE</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument> )</argument_list></call></expr> )</condition><block>{<block_content>
<case>case <expr><name>GST_MESSAGE_EOS</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"got unexpected eos"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>GST_MESSAGE_ASYNC_DONE</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_prerolled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Pipeline is prerolled"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if<condition>( <expr><call><name>default_msg_handler</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_msg</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gst_message_unref</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_ECRITICAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>gst_message_unref</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>gst_atomic_queue_peek</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_que</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GstBuffer</name> <modifier>*</modifier></type><name>p_buf</name> <init>= <expr><call><name>GST_BUFFER_CAST</name><argument_list>(
<argument><expr><call><name>gst_atomic_queue_pop</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_que</name></name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstMemory</name> <modifier>*</modifier></type><name>p_mem</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator> <name>p_mem</name> <operator>=</operator> <call><name>gst_buffer_peek_memory</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>GST_IS_VLC_PICTURE_PLANE_ALLOCATOR</name><argument_list>( <argument><expr><name><name>p_mem</name><operator>-&gt;</operator><name>allocator</name></name></expr></argument> )</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>picture_Hold</name><argument_list>(<argument><expr><operator>(</operator> <operator>(</operator><name>GstVlcPicturePlane</name><operator>*</operator><operator>)</operator> <name>p_mem</name> <operator>)</operator><operator>-&gt;</operator><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>GstVideoFrame</name></type> <name>frame</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><call><name>decoder_UpdateVideoFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>decoder_NewPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><call><name>gst_video_frame_map</name><argument_list>( <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>vinfo</name></name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>GST_MAP_READ</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed to map gst video frame"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_buffer_unref</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_ECRITICAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gst_CopyPicture</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_video_frame_unmap</name><argument_list>( <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><call><name>GST_BUFFER_PTS_IS_VALID</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <call><name>gst_util_uint64_scale</name><argument_list>(
<argument><expr><call><name>GST_BUFFER_PTS</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>GST_MSECOND</name></expr></argument>, <argument><expr><name>GST_SECOND</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Gst Buffer has no timestamp"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>gst_buffer_unref</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>done</name>:</label>
<if_stmt><if>if<condition>( <expr><name>p_pic</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decoder_QueueVideo</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator> <name>decoder_t</name><operator>*</operator> <operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>b_running</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_running</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_running</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GstMessage</name> <modifier>*</modifier></type><name>p_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstFlowReturn</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_running</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>gst_app_src_end_of_stream</name><argument_list>(
<argument><expr><call><name>GST_APP_SRC_CAST</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_src</name></name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"app src eos: %s"</literal></expr></argument>, <argument><expr><call><name>gst_flow_get_name</name><argument_list>( <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p_msg</name> <operator>=</operator> <call><name>gst_bus_timed_pop_filtered</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_bus</name></name></expr></argument>,
<argument><expr><literal type="number">2000000000ULL</literal></expr></argument>, <argument><expr><name>GST_MESSAGE_EOS</name> <operator>|</operator> <name>GST_MESSAGE_ERROR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_msg</name></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><call><name>GST_MESSAGE_TYPE</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument> )</argument_list></call></expr> )</condition><block>{<block_content>
<case>case <expr><name>GST_MESSAGE_EOS</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"got eos"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if<condition>( <expr><call><name>default_msg_handler</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_msg</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"pipeline may not close gracefully"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>gst_message_unref</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>,
<argument><expr><literal type="string">"no message, pipeline may not close gracefully"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_que</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GstBuffer</name> <modifier>*</modifier></type><name>p_buf</name></decl>;</decl_stmt>
<while>while<condition>( <expr><operator>(</operator> <name>p_buf</name> <operator>=</operator> <call><name>gst_atomic_queue_pop</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_que</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gst_buffer_unref</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>gst_atomic_queue_unref</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_que</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_running</name> <operator>&amp;&amp;</operator> <call><name>gst_element_set_state</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name>GST_STATE_NULL</name></expr></argument> )</argument_list></call>
<operator>!=</operator> <name>GST_STATE_CHANGE_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>,
<argument><expr><literal type="string">"failed to change the state to NULL,"</literal> \
<literal type="string">"pipeline may not close gracefully"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_allocator</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gst_object_unref</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_allocator</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_bus</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gst_object_unref</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_bus</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_src</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gst_object_unref</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_src</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_in</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gst_object_unref</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_out</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gst_object_unref</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decode_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gst_object_unref</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
