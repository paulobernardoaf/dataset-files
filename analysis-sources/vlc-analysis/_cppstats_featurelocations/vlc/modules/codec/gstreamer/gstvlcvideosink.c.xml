<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\gstreamer\gstvlcvideosink.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gstvlcvideopool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gstvlcvideosink.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<enum>enum
<block>{
<decl><name>SIGNAL_NEW_CAPS</name></decl>,
<decl><name>SIGNAL_NEW_BUFFER</name></decl>,
<decl><name>LAST_SIGNAL</name></decl>
}</block>;</enum>

<enum>enum
<block>{
<decl><name>PROP_0</name></decl>,
<decl><name>PROP_ALLOCATOR</name></decl>,
<decl><name>PROP_ID</name></decl>,
<decl><name>PROP_USE_POOL</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name>guint</name></type> <name><name>gst_vlc_video_sink_signals</name><index>[ <expr><name>LAST_SIGNAL</name></expr> ]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GstStaticPadTemplate</name></type> <name>sink_template</name> <init>=
<expr><call><name>GST_STATIC_PAD_TEMPLATE</name> <argument_list>(<argument><expr><literal type="string">"sink"</literal></expr></argument>,
<argument><expr><name>GST_PAD_SINK</name></expr></argument>,
<argument><expr><name>GST_PAD_ALWAYS</name></expr></argument>,
<argument><expr><call><name>GST_STATIC_CAPS</name> <argument_list>(<argument><expr><literal type="string">"video/x-raw, "</literal>
<literal type="string">"framerate = (fraction) [ 0, MAX ], "</literal>
<literal type="string">"width = (int) [ 1, MAX ], "</literal> <literal type="string">"height = (int) [ 1, MAX ]"</literal></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>gboolean</name></type> <name>gst_vlc_video_sink_setcaps</name><parameter_list>( <parameter><decl><type><name>GstBaseSink</name> <modifier>*</modifier></type><name>p_bsink</name></decl></parameter>,
<parameter><decl><type><name>GstCaps</name> <modifier>*</modifier></type><name>p_caps</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>gboolean</name></type> <name>gst_vlc_video_sink_propose_allocation</name><parameter_list>( <parameter><decl><type><name>GstBaseSink</name> <modifier>*</modifier></type><name>p_bsink</name></decl></parameter>,
<parameter><decl><type><name>GstQuery</name> <modifier>*</modifier></type><name>p_query</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>GstFlowReturn</name></type> <name>gst_vlc_video_sink_chain</name><parameter_list>( <parameter><decl><type><name>GstBaseSink</name> <modifier>*</modifier></type><name>p_vsink</name></decl></parameter>,
<parameter><decl><type><name>GstBuffer</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gst_vlc_video_sink_set_property</name><parameter_list>( <parameter><decl><type><name>GObject</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>prop_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GValue</name> <modifier>*</modifier></type><name>p_value</name></decl></parameter>, <parameter><decl><type><name>GParamSpec</name> <modifier>*</modifier></type><name>p_pspec</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gst_vlc_video_sink_get_property</name><parameter_list>( <parameter><decl><type><name>GObject</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>prop_id</name></decl></parameter>,
<parameter><decl><type><name>GValue</name> <modifier>*</modifier></type><name>p_value</name></decl></parameter>, <parameter><decl><type><name>GParamSpec</name> <modifier>*</modifier></type><name>p_pspec</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gst_vlc_video_sink_finalize</name><parameter_list>( <parameter><decl><type><name>GObject</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gst_vlc_video_sink_parent_class</name></cpp:macro> <cpp:value>parent_class</cpp:value></cpp:define>
<expr_stmt><expr><call><name>G_DEFINE_TYPE</name><argument_list>( <argument><expr><name>GstVlcVideoSink</name></expr></argument>, <argument><expr><name>gst_vlc_video_sink</name></expr></argument>, <argument><expr><name>GST_TYPE_BASE_SINK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gst_vlc_video_sink_class_init</name><parameter_list>( <parameter><decl><type><name>GstVlcVideoSinkClass</name> <modifier>*</modifier></type><name>p_klass</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GObjectClass</name> <modifier>*</modifier></type><name>p_gobject_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstElementClass</name> <modifier>*</modifier></type><name>p_gstelement_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstBaseSinkClass</name> <modifier>*</modifier></type><name>p_gstbasesink_class</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_gobject_class</name> <operator>=</operator> <operator>(</operator><name>GObjectClass</name><operator>*</operator><operator>)</operator> <name>p_klass</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_gstelement_class</name> <operator>=</operator> <operator>(</operator><name>GstElementClass</name><operator>*</operator><operator>)</operator> <name>p_klass</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_gstbasesink_class</name> <operator>=</operator> <operator>(</operator><name>GstBaseSinkClass</name><operator>*</operator><operator>)</operator> <name>p_klass</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_gobject_class</name><operator>-&gt;</operator><name>set_property</name></name> <operator>=</operator> <name>gst_vlc_video_sink_set_property</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gobject_class</name><operator>-&gt;</operator><name>get_property</name></name> <operator>=</operator> <name>gst_vlc_video_sink_get_property</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gobject_class</name><operator>-&gt;</operator><name>finalize</name></name> <operator>=</operator> <name>gst_vlc_video_sink_finalize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_object_class_install_property</name><argument_list>( <argument><expr><call><name>G_OBJECT_CLASS</name><argument_list>( <argument><expr><name>p_klass</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>PROP_USE_POOL</name></expr></argument>,
<argument><expr><call><name>g_param_spec_boolean</name><argument_list>( <argument><expr><literal type="string">"use-pool"</literal></expr></argument>, <argument><expr><literal type="string">"Use-Pool"</literal></expr></argument>, <argument><expr><literal type="string">"Use downstream VLC video output pool"</literal></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>G_PARAM_READWRITE</name> <operator>|</operator> <name>GST_PARAM_MUTABLE_READY</name> <operator>|</operator>
<name>G_PARAM_STATIC_STRINGS</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_object_class_install_property</name><argument_list>( <argument><expr><call><name>G_OBJECT_CLASS</name><argument_list>( <argument><expr><name>p_klass</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>PROP_ALLOCATOR</name></expr></argument>,
<argument><expr><call><name>g_param_spec_pointer</name><argument_list>( <argument><expr><literal type="string">"allocator"</literal></expr></argument>, <argument><expr><literal type="string">"Allocator"</literal></expr></argument>, <argument><expr><literal type="string">"VlcPictureAllocator"</literal></expr></argument>,
<argument><expr><name>G_PARAM_READWRITE</name> <operator>|</operator> <name>GST_PARAM_MUTABLE_READY</name> <operator>|</operator>
<name>G_PARAM_STATIC_STRINGS</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_object_class_install_property</name><argument_list>( <argument><expr><call><name>G_OBJECT_CLASS</name><argument_list>( <argument><expr><name>p_klass</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>PROP_ID</name></expr></argument>,
<argument><expr><call><name>g_param_spec_pointer</name><argument_list>( <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"Id"</literal></expr></argument>, <argument><expr><literal type="string">"ID"</literal></expr></argument>,
<argument><expr><name>G_PARAM_WRITABLE</name> <operator>|</operator> <name>GST_PARAM_MUTABLE_READY</name> <operator>|</operator>
<name>G_PARAM_STATIC_STRINGS</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
gst_vlc_video_sink_signals[ SIGNAL_NEW_CAPS ] =
g_signal_new( "new-caps", G_TYPE_FROM_CLASS( p_klass ),
G_SIGNAL_RUN_LAST, G_STRUCT_OFFSET( GstVlcVideoSinkClass,
new_caps ), g_signal_accumulator_true_handled,
NULL, g_cclosure_marshal_generic,
G_TYPE_BOOLEAN, 1, GST_TYPE_CAPS );
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>gst_vlc_video_sink_signals</name><index>[ <expr><name>SIGNAL_NEW_BUFFER</name></expr> ]</index></name> <operator>=</operator>
<call><name>g_signal_new</name><argument_list>( <argument><expr><literal type="string">"new-buffer"</literal></expr></argument>, <argument><expr><call><name>G_TYPE_FROM_CLASS</name><argument_list>( <argument><expr><name>p_klass</name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><name>G_SIGNAL_RUN_LAST</name></expr></argument>, <argument><expr><call><name>G_STRUCT_OFFSET</name><argument_list>( <argument><expr><name>GstVlcVideoSinkClass</name></expr></argument>,
<argument><expr><name>new_buffer</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>g_cclosure_marshal_generic</name></expr></argument>,
<argument><expr><name>G_TYPE_NONE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GST_TYPE_BUFFER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gst_element_class_add_pad_template</name><argument_list>( <argument><expr><name>p_gstelement_class</name></expr></argument>,
<argument><expr><call><name>gst_static_pad_template_get</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sink_template</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gst_element_class_set_static_metadata</name><argument_list>( <argument><expr><name>p_gstelement_class</name></expr></argument>,
<argument><expr><literal type="string">"VLC Video Sink"</literal></expr></argument>, <argument><expr><literal type="string">"Sink/Video"</literal></expr></argument>,
<argument><expr><literal type="string">"Video Sink for VLC video decoders"</literal></expr></argument>,
<argument><expr><literal type="string">"Vikram Fugro &lt;vikram.fugro@gmail.com&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_gstbasesink_class</name><operator>-&gt;</operator><name>set_caps</name></name> <operator>=</operator> <name>gst_vlc_video_sink_setcaps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_gstbasesink_class</name><operator>-&gt;</operator><name>propose_allocation</name></name> <operator>=</operator>
<name>gst_vlc_video_sink_propose_allocation</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_gstbasesink_class</name><operator>-&gt;</operator><name>render</name></name> <operator>=</operator> <name>gst_vlc_video_sink_chain</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>gst_vlc_video_sink_setcaps</name><parameter_list>( <parameter><decl><type><name>GstBaseSink</name> <modifier>*</modifier></type><name>p_basesink</name></decl></parameter>,
<parameter><decl><type><name>GstCaps</name> <modifier>*</modifier></type><name>p_caps</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GstVlcVideoSink</name> <modifier>*</modifier></type><name>p_vsink</name> <init>= <expr><call><name>GST_VLC_VIDEO_SINK</name><argument_list>( <argument><expr><name>p_basesink</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstVideoInfo</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>b_ret</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
GValue ret = { 0 };
GValue args[2] = { {0}, {0} };
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>gst_video_info_from_caps</name><argument_list>( <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>p_caps</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_vsink</name><operator>-&gt;</operator><name>vinfo</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
g_value_init( &amp;args[0], GST_TYPE_ELEMENT );
g_value_set_object( &amp;args[0], p_vsink );
g_value_init( &amp;args[1], GST_TYPE_CAPS );
g_value_set_boxed( &amp;args[1], p_caps );

g_signal_emitv( args, gst_vlc_video_sink_signals[ SIGNAL_NEW_CAPS ],
0, &amp;b_ret );
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <call><name><name>p_vsink</name><operator>-&gt;</operator><name>new_caps</name></name><argument_list>( <argument><expr><call><name>GST_ELEMENT_CAST</name><argument_list>( <argument><expr><name>p_vsink</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>p_caps</name></expr></argument>,
<argument><expr><operator>(</operator><name>gpointer</name><operator>)</operator> <name><name>p_vsink</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>b_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gst_vlc_video_sink_init</name><parameter_list>( <parameter><decl><type><name>GstVlcVideoSink</name> <modifier>*</modifier></type><name>p_vlc_video_sink</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_vlc_video_sink</name><operator>-&gt;</operator><name>b_use_pool</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_base_sink_set_sync</name><argument_list>( <argument><expr><call><name>GST_BASE_SINK</name><argument_list>( <argument><expr><name>p_vlc_video_sink</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gst_vlc_video_sink_finalize</name><parameter_list>( <parameter><decl><type><name>GObject</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GstVlcVideoSink</name> <modifier>*</modifier></type><name>p_vsink</name> <init>= <expr><call><name>GST_VLC_VIDEO_SINK</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_vsink</name><operator>-&gt;</operator><name>p_allocator</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gst_object_unref</name><argument_list>( <argument><expr><name><name>p_vsink</name><operator>-&gt;</operator><name>p_allocator</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>G_OBJECT_CLASS</name><argument_list>( <argument><expr><name>parent_class</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>finalize</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GstVlcVideoPool</name><modifier>*</modifier></type> <name>gst_vlc_video_sink_create_pool</name><parameter_list>(
<parameter><decl><type><name>GstVlcVideoSink</name> <modifier>*</modifier></type><name>p_vsink</name></decl></parameter>, <parameter><decl><type><name>GstCaps</name> <modifier>*</modifier></type><name>p_caps</name></decl></parameter>, <parameter><decl><type><name>gsize</name></type> <name>i_size</name></decl></parameter>, <parameter><decl><type><name>gint</name></type> <name>i_min</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GstVlcVideoPool</name> <modifier>*</modifier></type><name>p_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstStructure</name> <modifier>*</modifier></type><name>p_config</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_pool</name> <operator>=</operator> <call><name>gst_vlc_video_pool_new</name><argument_list>( <argument><expr><name><name>p_vsink</name><operator>-&gt;</operator><name>p_allocator</name></name></expr></argument>, <argument><expr><name><name>p_vsink</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_config</name> <operator>=</operator> <call><name>gst_buffer_pool_get_config</name><argument_list>( <argument><expr><call><name>GST_BUFFER_POOL_CAST</name><argument_list>( <argument><expr><name>p_pool</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_buffer_pool_config_set_params</name><argument_list>( <argument><expr><name>p_config</name></expr></argument>, <argument><expr><name>p_caps</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>, <argument><expr><name>i_min</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>gst_buffer_pool_set_config</name><argument_list>( <argument><expr><call><name>GST_BUFFER_POOL_CAST</name><argument_list>( <argument><expr><name>p_pool</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>p_config</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>config_failed</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>p_pool</name></expr>;</return>

<label><name>config_failed</name>:</label>
<block>{<block_content>
<expr_stmt><expr><call><name>gst_object_unref</name> <argument_list>(<argument><expr><name>p_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>gst_vlc_video_sink_propose_allocation</name><parameter_list>( <parameter><decl><type><name>GstBaseSink</name><modifier>*</modifier></type> <name>p_bsink</name></decl></parameter>,
<parameter><decl><type><name>GstQuery</name><modifier>*</modifier></type> <name>p_query</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GstVlcVideoSink</name> <modifier>*</modifier></type><name>p_vsink</name> <init>= <expr><call><name>GST_VLC_VIDEO_SINK</name><argument_list>( <argument><expr><name>p_bsink</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstCaps</name> <modifier>*</modifier></type><name>p_caps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>b_need_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GstBufferPool</name><modifier>*</modifier></type> <name>p_pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gsize</name></type> <name>i_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gst_query_parse_allocation</name> <argument_list>(<argument><expr><name>p_query</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_caps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_need_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_caps</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>no_caps</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_vsink</name><operator>-&gt;</operator><name>b_use_pool</name></name> <operator>&amp;&amp;</operator> <name>b_need_pool</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GstVideoInfo</name></type> <name>info</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>gst_video_info_from_caps</name><argument_list>( <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>p_caps</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid_caps</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_pool</name> <operator>=</operator> <operator>(</operator><name>GstBufferPool</name><operator>*</operator><operator>)</operator> <call><name>gst_vlc_video_sink_create_pool</name><argument_list>( <argument><expr><name>p_vsink</name></expr></argument>,
<argument><expr><name>p_caps</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_pool</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>no_pool</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <call><name>GST_VIDEO_INFO_SIZE</name><argument_list>( <argument><expr><operator>&amp;</operator><call><name>GST_VLC_VIDEO_POOL_CAST</name><argument_list>( <argument><expr><name>p_pool</name></expr></argument> )</argument_list></call><operator>-&gt;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pool</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>gst_query_add_allocation_pool</name><argument_list>( <argument><expr><name>p_query</name></expr></argument>, <argument><expr><name>p_pool</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gst_object_unref</name> <argument_list>(<argument><expr><name>p_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>gst_query_add_allocation_meta</name><argument_list>( <argument><expr><name>p_query</name></expr></argument>, <argument><expr><name>GST_VIDEO_META_API_TYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>


<label><name>no_pool</name>:</label>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_vsink</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><literal type="string">"failed to create the pool"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block>
<label><name>no_caps</name>:</label>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_vsink</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><literal type="string">"no caps in allocation query"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block>
<label><name>invalid_caps</name>:</label>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_vsink</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><literal type="string">"invalid caps in allocation query"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GstFlowReturn</name></type> <name>gst_vlc_video_sink_chain</name><parameter_list>( <parameter><decl><type><name>GstBaseSink</name> <modifier>*</modifier></type><name>p_bsink</name></decl></parameter>,
<parameter><decl><type><name>GstBuffer</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>g_signal_emit</name><argument_list>( <argument><expr><name>p_bsink</name></expr></argument>,
<argument><expr><name><name>gst_vlc_video_sink_signals</name><index>[ <expr><name>SIGNAL_NEW_BUFFER</name></expr> ]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GST_FLOW_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gst_vlc_video_sink_set_property</name><parameter_list>( <parameter><decl><type><name>GObject</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>i_prop_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>GValue</name> <modifier>*</modifier></type><name>p_value</name></decl></parameter>, <parameter><decl><type><name>GParamSpec</name> <modifier>*</modifier></type><name>p_pspec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_pspec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GstVlcVideoSink</name> <modifier>*</modifier></type><name>p_vsink</name> <init>= <expr><call><name>GST_VLC_VIDEO_SINK</name><argument_list>( <argument><expr><name>p_object</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_prop_id</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>PROP_ALLOCATOR</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>GstAllocator</name> <modifier>*</modifier></type><name>p_allocator</name> <init>= <expr><operator>(</operator><name>GstAllocator</name><operator>*</operator><operator>)</operator> <call><name>g_value_get_pointer</name><argument_list>(
<argument><expr><name>p_value</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>GST_IS_VLC_PICTURE_PLANE_ALLOCATOR</name><argument_list>( <argument><expr><name>p_allocator</name></expr></argument> )</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_vsink</name><operator>-&gt;</operator><name>p_allocator</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gst_object_unref</name><argument_list>( <argument><expr><name><name>p_vsink</name><operator>-&gt;</operator><name>p_allocator</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_vsink</name><operator>-&gt;</operator><name>p_allocator</name></name> <operator>=</operator> <call><name>gst_object_ref</name><argument_list>( <argument><expr><name>p_allocator</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_vsink</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid Allocator set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>PROP_ID</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>p_vsink</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>=</operator> <operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator> <call><name>g_value_get_pointer</name><argument_list>( <argument><expr><name>p_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>PROP_USE_POOL</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>p_vsink</name><operator>-&gt;</operator><name>b_use_pool</name></name> <operator>=</operator> <call><name>g_value_get_boolean</name><argument_list>( <argument><expr><name>p_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gst_vlc_video_sink_get_property</name><parameter_list>( <parameter><decl><type><name>GObject</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>i_prop_id</name></decl></parameter>,
<parameter><decl><type><name>GValue</name> <modifier>*</modifier></type><name>p_value</name></decl></parameter>, <parameter><decl><type><name>GParamSpec</name> <modifier>*</modifier></type><name>p_pspec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_pspec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GstVlcVideoSink</name> <modifier>*</modifier></type><name>p_vsink</name> <init>= <expr><call><name>GST_VLC_VIDEO_SINK</name><argument_list>( <argument><expr><name>p_object</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_prop_id</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>PROP_ALLOCATOR</name></expr>:</case>
<expr_stmt><expr><call><name>g_value_set_pointer</name><argument_list>( <argument><expr><name>p_value</name></expr></argument>, <argument><expr><name><name>p_vsink</name><operator>-&gt;</operator><name>p_allocator</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>PROP_USE_POOL</name></expr>:</case>
<expr_stmt><expr><call><name>g_value_set_boolean</name><argument_list>( <argument><expr><name>p_value</name></expr></argument>, <argument><expr><name><name>p_vsink</name><operator>-&gt;</operator><name>b_use_pool</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
