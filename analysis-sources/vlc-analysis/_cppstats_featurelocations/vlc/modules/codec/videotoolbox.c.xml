<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\videotoolbox.c">





















<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>preamble</name></cpp:pragma>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:empty>#import "config.h"</cpp:empty>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:empty>#import &lt;vlc_common.h&gt;</cpp:empty>
<cpp:empty>#import &lt;vlc_plugin.h&gt;</cpp:empty>
<cpp:empty>#import &lt;vlc_codec.h&gt;</cpp:empty>
<cpp:empty>#import "hxxx_helper.h"</cpp:empty>
<cpp:empty>#import &lt;vlc_bits.h&gt;</cpp:empty>
<cpp:empty>#import &lt;vlc_boxes.h&gt;</cpp:empty>
<cpp:empty>#import "vt_utils.h"</cpp:empty>
<cpp:empty>#import "../packetizer/h264_nal.h"</cpp:empty>
<cpp:empty>#import "../packetizer/h264_slice.h"</cpp:empty>
<cpp:empty>#import "../packetizer/hxxx_nal.h"</cpp:empty>
<cpp:empty>#import "../packetizer/hxxx_sei.h"</cpp:empty>

<cpp:empty>#import &lt;VideoToolbox/VideoToolbox.h&gt;</cpp:empty>
<cpp:empty>#import &lt;VideoToolbox/VTErrors.h&gt;</cpp:empty>

<cpp:empty>#import &lt;CoreFoundation/CoreFoundation.h&gt;</cpp:empty>
<cpp:empty>#import &lt;TargetConditionals.h&gt;</cpp:empty>

<cpp:empty>#import &lt;sys/types.h&gt;</cpp:empty>
<cpp:empty>#import &lt;sys/sysctl.h&gt;</cpp:empty>
<cpp:empty>#import &lt;mach/machine.h&gt;</cpp:empty>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_ALIGNMENT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_RESTART_MAX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>-</name> <name>module</name> <name>descriptor</name></cpp:pragma>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecDevice</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_ENABLE_TEXT</name></cpp:macro> <cpp:value>N_("Enable hardware acceleration")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_REQUIRE_HW_DEC</name></cpp:macro> <cpp:value>N_("Use Hardware decoders only")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_FORCE_CVPX_CHROMA</name></cpp:macro> <cpp:value>"Force the VT decoder CVPX chroma"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_FORCE_CVPX_CHROMA_LONG</name></cpp:macro> <cpp:value>"Values can be 'BGRA', 'y420', '420f', '420v', '2vuy'. By Default, the best chroma is choosen by the VT decoder."</cpp:value></cpp:define>


<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_VCODEC</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"VideoToolbox video decoder"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"video decoder"</literal></argument>,<argument><literal type="number">800</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>OpenDecoder</argument>, <argument>CloseDecoder</argument>)</argument_list></macro>

<macro><name>add_obsolete_bool</name><argument_list>(<argument><literal type="string">"videotoolbox-temporal-deinterlacing"</literal></argument>)</argument_list></macro>
<macro><name>add_obsolete_bool</name><argument_list>(<argument><literal type="string">"videotoolbox"</literal></argument>)</argument_list></macro>
<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"videotoolbox-hw-decoder-only"</literal></argument>, <argument>true</argument>, <argument>VT_REQUIRE_HW_DEC</argument>, <argument>VT_REQUIRE_HW_DEC</argument>, <argument>false</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>add_string</name><argument_list>(<argument><expr><literal type="string">"videotoolbox-cvpx-chroma"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>VT_FORCE_CVPX_CHROMA</name></expr></argument>, <argument><expr><name>VT_FORCE_CVPX_CHROMA_LONG</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>set_callback_dec_device</name><argument_list>(<argument>OpenDecDevice</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>vlc_module_end</name><argument_list>()</argument_list></call>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>-</name> <name>local</name> <name>prototypes</name></cpp:pragma>

enum <name>vtsession_status</name>
<block>{
<expr><name>VTSESSION_STATUS_OK</name></expr>,
<expr><name>VTSESSION_STATUS_RESTART</name></expr>,
<expr><name>VTSESSION_STATUS_RESTART_CHROMA</name></expr>,
<expr><name>VTSESSION_STATUS_ABORT</name></expr>,
}</block></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ConfigureVout</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CFMutableDictionaryRef</name></type> <name>ESDSExtradataInfoCreate</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CFMutableDictionaryRef</name></type> <name>ExtradataInfoCreate</name><parameter_list>(<parameter><decl><type><name>CFStringRef</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CFMutableDictionaryRef</name></type> <name>CreateSessionDescriptionFormat</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>HandleVTStatus</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>OSStatus</name></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vtsession_status</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RequestFlush</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Drain</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>flush</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DecoderCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>OSStatus</name></type></decl></parameter>, <parameter><decl><type><name>VTDecodeInfoFlags</name></type></decl></parameter>,
<parameter><decl><type><name>CVPixelBufferRef</name></type></decl></parameter>, <parameter><decl><type><name>CMTime</name></type></decl></parameter>, <parameter><decl><type><name>CMTime</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Boolean</name></type> <name>deviceSupportsHEVC</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Boolean</name></type> <name>deviceSupportsAdvancedProfiles</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Boolean</name></type> <name>deviceSupportsAdvancedLevels</name><parameter_list>()</parameter_list>;</function_decl>

<typedef>typedef <type><name><name>struct</name> <name>frame_info_t</name></name></type> <name>frame_info_t</name>;</typedef>

<struct>struct <name>frame_info_t</name>
<block>{
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_poc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_foc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_flush</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_eos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_keyframe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_field</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_progressive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_top_field_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_num_ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_info_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>-</name> <name>decoder</name> <name>structure</name></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_MAX_DPB</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT_MAX_SEI_COUNT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>decoder_sys_t</name>
<block>{
<decl_stmt><decl><type><name>CMVideoCodecType</name></type> <name>codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hxxx_helper</name></name></type> <name>hh</name></decl>;</decl_stmt>


<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>pf_codec_init</name>)<parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_codec_clean</name>)<parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>pf_codec_supported</name>)<parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>pf_late_start</name>)<parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>block_t</name><modifier>*</modifier></type> (<modifier>*</modifier><name>pf_process_block</name>)<parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>pf_need_restart</name>)<parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>VTDecompressionSessionRef</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>pf_configure_vout</name>)<parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CFMutableDictionaryRef</name></type> (<modifier>*</modifier><name>pf_get_extradata</name>)<parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>pf_fill_reorder_info</name>)<parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>frame_info_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>bool</name></type> <name>b_vt_feed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_vt_flush</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_vt_need_keyframe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTDecompressionSessionRef</name></type> <name>session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CMVideoFormatDescriptionRef</name></type> <name>videoFormatDescription</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_info_t</name> <modifier>*</modifier></type><name>p_pic_reorder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_pic_reorder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_pic_reorder_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_invalid_pic_reorder_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_poc_based_reorder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_format_propagated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vtsession_status</name></name></type> <name>vtsession_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_restart_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_cvpx_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_cvpx_format_forced</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>h264_poc_context_t</name></type> <name>h264_pocctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hevc_poc_ctx_t</name></type> <name>hevc_pocctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_drop_blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>date_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pic_pacer</name></name> <modifier>*</modifier></type><name>pic_pacer</name></decl>;</decl_stmt>
}</block></struct></type> <name>decoder_sys_t</name>;</typedef>



<struct>struct <name>pic_pacer</name>
<block>{
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>wait</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>nb_field_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>field_reorder_max</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pic_pacer_UpdateReorderMax</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pic_pacer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>-</name> <name>start</name> <name>&amp;</name> <name>stop</name></cpp:pragma>



<function><type><specifier>static</specifier> <name>void</name></type> <name>HXXXGetBestChroma</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cvpx_format</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_cvpx_format_forced</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_chroma_format</name></decl>, <decl><type ref="prev"/><name>i_depth_luma</name></decl>, <decl><type ref="prev"/><name>i_depth_chroma</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hxxx_helper_get_chroma_chroma</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_chroma_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_depth_luma</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_depth_chroma</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_chroma_format</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i_depth_luma</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>i_depth_chroma</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cvpx_format</name></name> <operator>=</operator> <name>kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange</name></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>


<if type="elseif">else if <condition>(<expr><name>i_depth_luma</name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>i_depth_chroma</name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <call><name>deviceSupportsHEVC</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cvpx_format</name></name> <operator>=</operator> <literal type="char">'x420'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetxPSH264</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>i_pps_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_sps</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>h264_picture_parameter_set_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_pps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_pps</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>h264</name><operator>.</operator><name>pps_list</name><index>[<expr><name>i_pps_id</name></expr>]</index></name><operator>.</operator><name>h264_pps</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pp_pps</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp_sps</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp_sps</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>h264</name><operator>.</operator><name>sps_list</name><index>[<expr><name><operator>(</operator><operator>*</operator><name>pp_pps</name><operator>)</operator><operator>-&gt;</operator><name>i_sps_id</name></name></expr>]</index></name><operator>.</operator><name>h264_sps</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<struct>struct <name>sei_callback_h264_s</name>
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_pic_struct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ParseH264SEI</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hxxx_sei_data_t</name> <modifier>*</modifier></type><name>p_sei_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>HXXX_SEI_PIC_TIMING</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sei_callback_h264_s</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>p_sps</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_valid</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_hrd_parameters_present_flag</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bs_read</name><argument_list>(<argument><expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>p_bs</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_cpb_removal_delay_length_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bs_read</name><argument_list>(<argument><expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>p_bs</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_dpb_output_delay_length_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_pic_struct_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_pic_struct</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>p_bs</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>FillReorderInfoH264</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>,
<parameter><decl><type><name>frame_info_t</name> <modifier>*</modifier></type><name>p_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hxxx_iterator_ctx_t</name></type> <name>itctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hxxx_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>itctx</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>i_nal_length_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_nal</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>i_nal</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_nal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nal</name></decl>;</decl_stmt>
}</block> <decl><name><name>sei_array</name><index>[<expr><name>VT_MAX_SEI_COUNT</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_sei_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><call><name>hxxx_iterate_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>itctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nal</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>i_nal</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>h264_nal_unit_type_e</name></name></type> <name>i_nal_type</name> <init>= <expr><name><name>p_nal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_nal_type</name> <operator>&lt;=</operator> <name>H264_NAL_SLICE_IDR</name> <operator>&amp;&amp;</operator> <name>i_nal_type</name> <operator>!=</operator> <name>H264_NAL_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>h264_slice_t</name></type> <name>slice</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>h264_decode_slice</name><argument_list>(<argument><expr><name>p_nal</name></expr></argument>, <argument><expr><name>i_nal</name></expr></argument>, <argument><expr><name>GetxPSH264</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slice</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>h264_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetxPSH264</name><argument_list>(<argument><expr><name><name>slice</name><operator>.</operator><name>i_pic_parameter_set_id</name></name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>p_sps</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bFOC</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>h264_compute_poc</name><argument_list>(<argument><expr><name>p_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>h264_pocctx</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_info</name><operator>-&gt;</operator><name>i_poc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_info</name><operator>-&gt;</operator><name>i_foc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bFOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>b_keyframe</name></name> <operator>=</operator> <name><name>slice</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>H264_SLICE_TYPE_I</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>b_flush</name></name> <operator>=</operator> <operator>(</operator><name><name>slice</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>H264_SLICE_TYPE_I</name><operator>)</operator> <operator>||</operator> <name><name>slice</name><operator>.</operator><name>has_mmco5</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>b_field</name></name> <operator>=</operator> <name><name>slice</name><operator>.</operator><name>i_field_pic_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>b_progressive</name></name> <operator>=</operator> <operator>!</operator><name><name>p_sps</name><operator>-&gt;</operator><name>mb_adaptive_frame_field_flag</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>slice</name><operator>.</operator><name>i_field_pic_flag</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sei_callback_h264_s</name></name></type> <name>sei</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sei</name><operator>.</operator><name>p_sps</name></name> <operator>=</operator> <name>p_sps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sei</name><operator>.</operator><name>i_pic_struct</name></name> <operator>=</operator> <name>UINT8_MAX</name></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_sei_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HxxxParseSEI</name><argument_list>(<argument><expr><name><name>sei_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_nal</name></expr></argument>, <argument><expr><name><name>sei_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_nal</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>ParseH264SEI</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_num_ts</name></name> <operator>=</operator> <call><name>h264_get_num_ts</name><argument_list>(<argument><expr><name>p_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slice</name></expr></argument>, <argument><expr><name><name>sei</name><operator>.</operator><name>i_pic_struct</name></name></expr></argument>,
<argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_foc</name></name></expr></argument>, <argument><expr><name>bFOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_info</name><operator>-&gt;</operator><name>b_progressive</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>b_top_field_first</name></name> <operator>=</operator> <operator>(</operator><name><name>sei</name><operator>.</operator><name>i_pic_struct</name></name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>||</operator>
<operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_time_scale</name></name> <operator>&amp;&amp;</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_num_units_in_tick</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>date_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_time_scale</name></name></expr></argument>,
<argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>i_num_units_in_tick</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_invalid_pic_reorder_max</name></name> <operator>&amp;&amp;</operator> <name>i_nal_type</name> <operator>==</operator> <name>H264_NAL_SLICE_IDR</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_reorder</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>h264_get_dpb_values</name><argument_list>(<argument><expr><name>p_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_reorder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_reorder_max</name></name> <operator>=</operator> <name>i_reorder</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pic_pacer_UpdateReorderMax</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pic_pacer</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_reorder_max</name></name></expr></argument>,
<argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_num_ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return> 
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>i_nal_type</name> <operator>==</operator> <name>H264_NAL_SEI</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>i_sei_count</name> <operator>&lt;</operator> <name>VT_MAX_SEI_COUNT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sei_array</name><index>[<expr><name>i_sei_count</name></expr>]</index></name><operator>.</operator><name>p_nal</name> <operator>=</operator> <name>p_nal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sei_array</name><index>[<expr><name>i_sei_count</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>i_nal</name> <operator>=</operator> <name>i_nal</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ProcessBlockH264</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_config_changed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>pf_process_block</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>pb_config_changed</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>InitH264</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>h264_poc_context_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>h264_pocctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hxxx_helper_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>, <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>hxxx_helper_set_extra</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CleanH264</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hxxx_helper_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CFMutableDictionaryRef</name></type> <name>GetDecoderExtradataH264</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>extradata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>b_is_xvcC</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>extradata</name> <operator>=</operator> <call><name>ExtradataInfoCreate</name><argument_list>(<argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"avcC"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>h264</name><operator>.</operator><name>i_pps_count</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>h264</name><operator>.</operator><name>i_sps_count</name></name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_avcC</name> <init>= <expr><call><name>h264_helper_get_avcc_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_avcC</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>extradata</name> <operator>=</operator> <call><name>ExtradataInfoCreate</name><argument_list>(<argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"avcC"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>p_avcC</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_avcC</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_avcC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>extradata</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CodecSupportedH264</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_profile</name></decl>, <decl><type ref="prev"/><name>i_level</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hxxx_helper_get_current_profile_level</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_profile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_level</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>i_profile</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PROFILE_H264_BASELINE</name></expr>:</case>
<case>case <expr><name>PROFILE_H264_MAIN</name></expr>:</case>
<case>case <expr><name>PROFILE_H264_HIGH</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>PROFILE_H264_HIGH_10</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>deviceSupportsAdvancedProfiles</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"current device doesn't support H264 10bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<default>default:</default>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"unknown H264 profile %"</literal> <name>PRIx8</name></expr></argument>, <argument><expr><name>i_profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></switch>




<if_stmt><if>if <condition>(<expr><name>i_level</name> <operator>&gt;</operator> <literal type="number">52</literal> <operator>||</operator> <operator>(</operator><name>i_level</name> <operator>&gt;</operator> <literal type="number">42</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>deviceSupportsAdvancedLevels</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"current device doesn't support this H264 level: %"</literal>
<name>PRIx8</name></expr></argument>, <argument><expr><name>i_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>HXXXGetBestChroma</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>LateStartH264</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>h264</name><operator>.</operator><name>i_pps_count</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>h264</name><operator>.</operator><name>i_sps_count</name></name><operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ConfigureVoutH264</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>==</operator> <name>COLOR_PRIMARIES_UNDEF</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>video_color_primaries_t</name></type> <name>primaries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_transfer_func_t</name></type> <name>transfer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_color_space_t</name></type> <name>colorspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_color_range_t</name></type> <name>full_range</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hxxx_helper_get_colorimetry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>primaries</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>transfer</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>colorspace</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>full_range</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <name>primaries</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>transfer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name>colorspace</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>color_range</name></name> <operator>=</operator> <name>full_range</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>||</operator> <operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_width</name></decl>, <decl><type ref="prev"/><name>i_height</name></decl>, <decl><type ref="prev"/><name>i_vis_width</name></decl>, <decl><type ref="prev"/><name>i_vis_height</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>VLC_SUCCESS</name> <operator>==</operator>
<call><name>hxxx_helper_get_current_picture_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_height</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_vis_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_vis_height</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name>i_vis_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <call><name>vlc_align</name><argument_list>( <argument><expr><name>i_vis_width</name></expr></argument>, <argument><expr><name>VT_ALIGNMENT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name>i_vis_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <call><name>vlc_align</name><argument_list>( <argument><expr><name>i_vis_height</name></expr></argument>, <argument><expr><name>VT_ALIGNMENT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>||</operator> <operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_sar_num</name></decl>, <decl><type ref="prev"/><name>i_sar_den</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>VLC_SUCCESS</name> <operator>==</operator>
<call><name>hxxx_helper_get_current_sar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sar_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sar_den</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name>i_sar_num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name>i_sar_den</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>VideoToolboxNeedsToRestartH264</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,
<parameter><decl><type><name>VTDecompressionSessionRef</name></type> <name>session</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hxxx_helper</name></name> <modifier>*</modifier></type><name>hh</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>vw</name></decl>, <decl><type ref="prev"/><name>vh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sarn</name></decl>, <decl><type ref="prev"/><name>sard</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hxxx_helper_get_current_picture_size</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vh</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hxxx_helper_get_current_sar</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sarn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sard</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>decoderConfiguration</name> <init>=
<expr><call><name>CreateSessionDescriptionFormat</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>sarn</name></expr></argument>, <argument><expr><name>sard</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>decoderConfiguration</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>CMFormatDescriptionRef</name></type> <name>newvideoFormatDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name> <init>= <expr><call><name>CMVideoFormatDescriptionCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>,
<argument><expr><name>vw</name></expr></argument>, <argument><expr><name>vh</name></expr></argument>,
<argument><expr><name>decoderConfiguration</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>newvideoFormatDesc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>status</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <operator>!</operator><call><name>VTDecompressionSessionCanAcceptFormatDescription</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
<argument><expr><name>newvideoFormatDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>newvideoFormatDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>decoderConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>InitHEVC</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hevc_poc_cxt_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hevc_pocctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hxxx_helper_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>, <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>hxxx_helper_set_extra</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CleanHEVC</name></cpp:macro> <cpp:value>CleanH264</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetxPSHEVC</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>i_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>,
<parameter><decl><type><name>hevc_picture_parameter_set_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_pps</name></decl></parameter>,
<parameter><decl><type><name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_sps</name></decl></parameter>,
<parameter><decl><type><name>hevc_video_parameter_set_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_vps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_pps</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>hevc</name><operator>.</operator><name>pps_list</name><index>[<expr><name>i_id</name></expr>]</index></name><operator>.</operator><name>hevc_pps</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pp_pps</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_vps</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_sps</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_sps_id</name> <init>= <expr><call><name>hevc_get_pps_sps_id</name><argument_list>(<argument><expr><operator>*</operator><name>pp_pps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_sps</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>hevc</name><operator>.</operator><name>sps_list</name><index>[<expr><name>i_sps_id</name></expr>]</index></name><operator>.</operator><name>hevc_sps</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pp_sps</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp_vps</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_vps_id</name> <init>= <expr><call><name>hevc_get_sps_vps_id</name><argument_list>(<argument><expr><operator>*</operator><name>pp_sps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_vps</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>hevc</name><operator>.</operator><name>vps_list</name><index>[<expr><name>i_vps_id</name></expr>]</index></name><operator>.</operator><name>hevc_vps</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<struct>struct <name>hevc_sei_callback_s</name>
<block>{
<decl_stmt><decl><type><name>hevc_sei_pic_timing_t</name> <modifier>*</modifier></type><name>p_timing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ParseHEVCSEI</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hxxx_sei_data_t</name> <modifier>*</modifier></type><name>p_sei_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>HXXX_SEI_PIC_TIMING</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hevc_sei_callback_s</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_sps</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_timing</name></name> <operator>=</operator> <call><name>hevc_decode_sei_pic_timing</name><argument_list>(<argument><expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>p_bs</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_sps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>FillReorderInfoHEVC</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>,
<parameter><decl><type><name>frame_info_t</name> <modifier>*</modifier></type><name>p_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hxxx_iterator_ctx_t</name></type> <name>itctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hxxx_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>itctx</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>i_nal_length_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_nal</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>i_nal</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_nal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nal</name></decl>;</decl_stmt>
}</block> <decl><name><name>sei_array</name><index>[<expr><name>VT_MAX_SEI_COUNT</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_sei_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><call><name>hxxx_iterate_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>itctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nal</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>i_nal</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>hevc_getNALLayer</name><operator>(</operator><name>p_nal</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>hevc_nal_unit_type_e</name></name></type> <name>i_nal_type</name> <init>= <expr><call><name>hevc_getNALType</name><argument_list>(<argument><expr><name>p_nal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_nal_type</name> <operator>&lt;=</operator> <name>HEVC_NAL_IRAP_VCL23</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>hevc_slice_segment_header_t</name> <modifier>*</modifier></type><name>p_sli</name> <init>=
<expr><call><name>hevc_decode_slice_header</name><argument_list>(<argument><expr><name>p_nal</name></expr></argument>, <argument><expr><name>i_nal</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GetxPSHEVC</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_sli</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_vt_feed</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_nal_type</name> <operator>!=</operator> <name>HEVC_NAL_IDR_W_RADL</name> <operator>&amp;&amp;</operator>
<name>i_nal_type</name> <operator>!=</operator> <name>HEVC_NAL_IDR_N_LP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_drop_blocks</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_drop_blocks</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i_nal_type</name> <operator>==</operator> <name>HEVC_NAL_RASL_N</name> <operator>||</operator> <name>i_nal_type</name> <operator>==</operator> <name>HEVC_NAL_RASL_R</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>hevc_rbsp_release_slice_header</name><argument_list>(<argument><expr><name>p_sli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_drop_blocks</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>b_keyframe</name></name> <operator>=</operator> <name>i_nal_type</name> <operator>&gt;=</operator> <name>HEVC_NAL_BLA_W_LP</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>hevc_slice_type_e</name></name></type> <name>slice_type</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>hevc_get_slice_type</name><argument_list>(<argument><expr><name>p_sli</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slice_type</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>b_keyframe</name></name> <operator>|=</operator> <operator>(</operator><name>slice_type</name> <operator>==</operator> <name>HEVC_SLICE_TYPE_I</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hevc_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hevc_video_parameter_set_t</name> <modifier>*</modifier></type><name>p_vps</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetxPSHEVC</name><argument_list>(<argument><expr><call><name>hevc_get_slice_pps_id</name><argument_list>(<argument><expr><name>p_sli</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_pps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_vps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>p_sps</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hevc_sei_callback_s</name></name></type> <name>sei</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sei</name><operator>.</operator><name>p_sps</name></name> <operator>=</operator> <name>p_sps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sei</name><operator>.</operator><name>p_timing</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>POC</name> <init>= <expr><call><name>hevc_compute_picture_order_count</name><argument_list>(<argument><expr><name>p_sps</name></expr></argument>, <argument><expr><name>p_sli</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hevc_pocctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_sei_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HxxxParseSEI</name><argument_list>(<argument><expr><name><name>sei_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_nal</name></expr></argument>, <argument><expr><name><name>sei_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_nal</name></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ParseHEVCSEI</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_poc</name></name> <operator>=</operator> <name>POC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_foc</name></name> <operator>=</operator> <name>POC</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_num_ts</name></name> <operator>=</operator> <call><name>hevc_get_num_clock_ts</name><argument_list>(<argument><expr><name>p_sps</name></expr></argument>, <argument><expr><name><name>sei</name><operator>.</operator><name>p_timing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>b_flush</name></name> <operator>=</operator> <operator>(</operator><name>POC</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>b_field</name></name> <operator>=</operator> <operator>(</operator><name><name>p_info</name><operator>-&gt;</operator><name>i_num_ts</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>b_progressive</name></name> <operator>=</operator> <call><name>hevc_frame_is_progressive</name><argument_list>(<argument><expr><name>p_sps</name></expr></argument>, <argument><expr><name><name>sei</name><operator>.</operator><name>p_timing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>||</operator>
<operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>hevc_get_frame_rate</name><argument_list>(<argument><expr><name>p_sps</name></expr></argument>, <argument><expr><name>p_vps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>date_Change</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sei</name><operator>.</operator><name>p_timing</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hevc_release_sei_pic_timing</name><argument_list>(<argument><expr><name><name>sei</name><operator>.</operator><name>p_timing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_invalid_pic_reorder_max</name></name> <operator>&amp;&amp;</operator> <name>p_vps</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_reorder_max</name></name> <operator>=</operator> <call><name>hevc_get_max_num_reorder</name><argument_list>(<argument><expr><name>p_vps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pic_pacer_UpdateReorderMax</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pic_pacer</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_reorder_max</name></name></expr></argument>,
<argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_num_ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hevc_rbsp_release_slice_header</name><argument_list>(<argument><expr><name>p_sli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return> 
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>i_nal_type</name> <operator>==</operator> <name>HEVC_NAL_PREF_SEI</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>i_sei_count</name> <operator>&lt;</operator> <name>VT_MAX_SEI_COUNT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sei_array</name><index>[<expr><name>i_sei_count</name></expr>]</index></name><operator>.</operator><name>p_nal</name> <operator>=</operator> <name>p_nal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sei_array</name><index>[<expr><name>i_sei_count</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>i_nal</name> <operator>=</operator> <name>i_nal</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CFMutableDictionaryRef</name></type> <name>GetDecoderExtradataHEVC</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>extradata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>b_is_xvcC</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>extradata</name> <operator>=</operator> <call><name>ExtradataInfoCreate</name><argument_list>(<argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"hvcC"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>hevc</name><operator>.</operator><name>i_pps_count</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>hevc</name><operator>.</operator><name>i_sps_count</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>hevc</name><operator>.</operator><name>i_vps_count</name></name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_hvcC</name> <init>= <expr><call><name>hevc_helper_get_hvcc_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_hvcC</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>extradata</name> <operator>=</operator> <call><name>ExtradataInfoCreate</name><argument_list>(<argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"hvcC"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>p_hvcC</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_hvcC</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_hvcC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>extradata</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>LateStartHEVC</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>hevc</name><operator>.</operator><name>i_pps_count</name></name> <operator>||</operator>
<operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>hevc</name><operator>.</operator><name>i_sps_count</name></name> <operator>||</operator>
<operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>hevc</name><operator>.</operator><name>i_vps_count</name></name><operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CodecSupportedHEVC</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>HXXXGetBestChroma</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ConfigureVoutHEVC</name></cpp:macro> <cpp:value>ConfigureVoutH264</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ProcessBlockHEVC</name></cpp:macro> <cpp:value>ProcessBlockH264</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VideoToolboxNeedsToRestartHEVC</name></cpp:macro> <cpp:value>VideoToolboxNeedsToRestartH264</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>CFMutableDictionaryRef</name></type> <name>GetDecoderExtradataMPEG4</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ESDSExtradataInfoCreate</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CFMutableDictionaryRef</name></type> <name>GetDecoderExtradataDefault</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ExtradataInfoCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>InsertIntoDPB</name><parameter_list>(<parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>frame_info_t</name> <modifier>*</modifier></type><name>p_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>frame_info_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_lead_in</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_pic_reorder</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr><expr><name>pp_lead_in</name> <operator>=</operator> <operator>&amp;</operator> <operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_lead_in</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_insert</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pp_lead_in</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_insert</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_poc_based_reorder</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_insert</name> <operator>=</operator> <operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_lead_in</name><operator>)</operator><operator>-&gt;</operator><name>i_foc</name></name> <operator>&gt;</operator> <name><name>p_info</name><operator>-&gt;</operator><name>i_foc</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>b_insert</name> <operator>=</operator> <operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_lead_in</name><operator>)</operator><operator>-&gt;</operator><name><name>p_picture</name><operator>-&gt;</operator><name>date</name></name></name> <operator>&gt;=</operator> <name><name>p_info</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>date</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>b_insert</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <operator>*</operator><name>pp_lead_in</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_lead_in</name> <operator>=</operator> <name>p_info</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_reorder</name></name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name><name>p_info</name><operator>-&gt;</operator><name>b_field</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
for(frame_info_t *p_in=p_sys-&gt;p_pic_reorder; p_in; p_in = p_in-&gt;p_next)
printf(" %d", p_in-&gt;i_foc);
printf("\n");
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type> <name>RemoveOneFrameFromDPB</name><parameter_list>(<parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>frame_info_t</name> <modifier>*</modifier></type><name>p_info</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pic_reorder</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>p_info</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_framepoc</name> <init>= <expr><name><name>p_info</name><operator>-&gt;</operator><name>i_poc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_ret_last</name> <init>= <expr><operator>&amp;</operator><name>p_ret</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_dequeue</name></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_field</name> <init>= <expr><name><name>p_info</name><operator>-&gt;</operator><name>p_picture</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_field</name><operator>-&gt;</operator><name>date</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_field</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>p_field</name><operator>-&gt;</operator><name>date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_info</name><operator>-&gt;</operator><name>i_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>p_field</name><operator>-&gt;</operator><name>date</name></name> <operator>+</operator> <name><name>p_info</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>date_Increment</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_num_ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_ret_last</name> <operator>=</operator> <name>p_field</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pp_ret_last</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_field</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_reorder</name></name> <operator>-=</operator> <ternary><condition><expr><operator>(</operator><name><name>p_info</name><operator>-&gt;</operator><name>b_field</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pic_reorder</name></name> <operator>=</operator> <name><name>p_info</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_info</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pic_reorder</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_info</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_poc_based_reorder</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_dequeue</name> <operator>=</operator> <operator>(</operator><name><name>p_info</name><operator>-&gt;</operator><name>i_poc</name></name> <operator>==</operator> <name>i_framepoc</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>b_dequeue</name> <operator>=</operator> <operator>(</operator><name><name>p_field</name><operator>-&gt;</operator><name>date</name></name> <operator>==</operator> <name><name>p_info</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>date</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>b_dequeue</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block> while<condition>(<expr><name>b_dequeue</name></expr>)</condition>;</do>

<return>return <expr><name>p_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrainDPBLocked</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>flush</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_fields</name> <init>= <expr><call><name>RemoveOneFrameFromDPB</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_fields</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<do>do
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_fields</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_fields</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flush</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>p_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decoder_QueueVideo</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>p_fields</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>p_fields</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>frame_info_t</name> <modifier>*</modifier></type> <name>CreateReorderInfo</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_info_t</name> <modifier>*</modifier></type><name>p_info</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_info</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_fill_reorder_info</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_fill_reorder_info</name></name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>p_info</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_num_ts</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>b_progressive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>b_field</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>b_keyframe</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>b_eos</name></name> <operator>=</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_END_OF_SEQUENCE</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_info</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OnDecodedFrame</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>frame_info_t</name> <modifier>*</modifier></type><name>p_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name><name>p_info</name><operator>-&gt;</operator><name>b_flush</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_reorder</name></name> <operator>&gt;=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_reorder_max</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pic_reorder</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_info</name><operator>-&gt;</operator><name>b_flush</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_reorder_max</name></name> <operator>&lt;</operator> <name>H264_MAX_DPB</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_poc_based_reorder</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pic_reorder</name><operator>-&gt;</operator><name>i_foc</name></name> <operator>&gt;</operator> <name><name>p_info</name><operator>-&gt;</operator><name>i_foc</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_invalid_pic_reorder_max</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_reorder_max</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pic_pacer_UpdateReorderMax</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pic_pacer</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_reorder_max</name></name></expr></argument>, <argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_num_ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Raising max DPB to %"</literal><name>PRIu8</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_reorder_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_poc_based_reorder</name></name> <operator>&amp;&amp;</operator>
<name><name>p_info</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>date</name></name> <operator>&gt;</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>p_pic_reorder</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>date</name></name> <operator>&gt;</operator> <name><name>p_info</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>date</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_invalid_pic_reorder_max</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_reorder_max</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pic_pacer_UpdateReorderMax</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pic_pacer</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_reorder_max</name></name></expr></argument>, <argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>i_num_ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Raising max DPB to %"</literal><name>PRIu8</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_reorder_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_fields</name> <init>= <expr><call><name>RemoveOneFrameFromDPB</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_fields</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<do>do
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_fields</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_fields</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decoder_QueueVideo</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_fields</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>p_fields</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
</block_content>}</block></while>

<expr_stmt><expr><call><name>InsertIntoDPB</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>p_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CMVideoCodecType</name></type> <name>CodecPrecheck</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case>
<return>return <expr><name>kCMVideoCodecType_H264</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_HEVC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>deviceSupportsHEVC</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"device doesn't support HEVC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>kCMVideoCodecType_HEVC</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_MP4V</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument> )</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"XVID decoding not implemented, fallback on software"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Will decode MP4V with original FourCC '%4.4s'"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_original_fourcc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>kCMVideoCodecType_MPEG4Video</name></expr>;</return>
</block_content>}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>
<case>case <expr><name>VLC_CODEC_H263</name></expr>:</case>
<return>return <expr><name>kCMVideoCodecType_H263</name></expr>;</return>


<case>case <expr><name>VLC_CODEC_PRORES</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_original_fourcc</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument> )</argument_list></call></expr>:</case>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'h'</literal></expr></argument> )</argument_list></call></expr>:</case>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'x'</literal></expr></argument> )</argument_list></call></expr>:</case>
<return>return <expr><name>kCMVideoCodecType_AppleProRes4444</name></expr>;</return>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'h'</literal></expr></argument> )</argument_list></call></expr>:</case>
<return>return <expr><name>kCMVideoCodecType_AppleProRes422HQ</name></expr>;</return>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'s'</literal></expr></argument> )</argument_list></call></expr>:</case>
<return>return <expr><name>kCMVideoCodecType_AppleProRes422LT</name></expr>;</return>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'o'</literal></expr></argument> )</argument_list></call></expr>:</case>
<return>return <expr><name>kCMVideoCodecType_AppleProRes422Proxy</name></expr>;</return>

<default>default:</default>
<return>return <expr><name>kCMVideoCodecType_AppleProRes422</name></expr>;</return>
</block_content>}</block></switch>

<case>case <expr><name>VLC_CODEC_DV</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_original_fourcc</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Decoding DV NTSC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>kCMVideoCodecType_DVCNTSC</name></expr>;</return>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Decoding DV PAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>kCMVideoCodecType_DVCPAL</name></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
case VLC_CODEC_MPGV:
return kCMVideoCodecType_MPEG1Video;
case VLC_CODEC_MP2V:
return kCMVideoCodecType_MPEG2Video;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"'%4.4s' is not supported"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CFMutableDictionaryRef</name></type> <name>CreateSessionDescriptionFormat</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>i_sar_num</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>i_sar_den</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>decoderConfiguration</name> <init>= <expr><call><name>cfdict_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>decoderConfiguration</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>extradata</name> <init>= <expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_extradata</name></name></expr>
?</condition><then> <expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_extradata</name></name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>extradata</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>decoderConfiguration</name></expr></argument>,
<argument><expr><name>kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms</name></expr></argument>,
<argument><expr><name>extradata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>extradata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>decoderConfiguration</name></expr></argument>,
<argument><expr><name>kCVImageBufferChromaLocationBottomFieldKey</name></expr></argument>,
<argument><expr><name>kCVImageBufferChromaLocation_Left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>decoderConfiguration</name></expr></argument>,
<argument><expr><name>kCVImageBufferChromaLocationTopFieldKey</name></expr></argument>,
<argument><expr><name>kCVImageBufferChromaLocation_Left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>i_sar_num</name> <operator>&amp;&amp;</operator> <name>i_sar_den</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>pixelaspectratio</name> <init>= <expr><call><name>cfdict_create</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>pixelaspectratio</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>decoderConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cfdict_set_int32</name><argument_list>(<argument><expr><name>pixelaspectratio</name></expr></argument>,
<argument><expr><name>kCVImageBufferPixelAspectRatioHorizontalSpacingKey</name></expr></argument>,
<argument><expr><name>i_sar_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfdict_set_int32</name><argument_list>(<argument><expr><name>pixelaspectratio</name></expr></argument>,
<argument><expr><name>kCVImageBufferPixelAspectRatioVerticalSpacingKey</name></expr></argument>,
<argument><expr><name>i_sar_den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>decoderConfiguration</name></expr></argument>,
<argument><expr><name>kCVImageBufferPixelAspectRatioKey</name></expr></argument>,
<argument><expr><name>pixelaspectratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>pixelaspectratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<decl_stmt><decl><type><name>CFStringRef</name></type> <name>yuvmatrix</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>COLOR_SPACE_BT601</name></expr>:</case>
<expr_stmt><expr><name>yuvmatrix</name> <operator>=</operator> <name>kCVImageBufferYCbCrMatrix_ITU_R_601_4</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLOR_SPACE_BT2020</name></expr>:</case>
<expr_stmt><expr><name>yuvmatrix</name> <operator>=</operator> <name>kCVImageBufferColorPrimaries_ITU_R_2020</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLOR_SPACE_BT709</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>yuvmatrix</name> <operator>=</operator> <name>kCVImageBufferColorPrimaries_ITU_R_709_2</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>decoderConfiguration</name></expr></argument>, <argument><expr><name>kCVImageBufferYCbCrMatrixKey</name></expr></argument>,
<argument><expr><name>yuvmatrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_OSX</name></expr></cpp:if>



<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>decoderConfiguration</name></expr></argument>,
<argument><expr><name>kVTVideoDecoderSpecification_EnableHardwareAcceleratedVideoDecoder</name></expr></argument>,
<argument><expr><name>kCFBooleanTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"videotoolbox-hw-decoder-only"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>decoderConfiguration</name></expr></argument>,
<argument><expr><name>kVTVideoDecoderSpecification_RequireHardwareAcceleratedVideoDecoder</name></expr></argument>,
<argument><expr><name>kCFBooleanTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>decoderConfiguration</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PtsInit</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>&amp;&amp;</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">30000</literal></expr></argument>, <argument><expr><literal type="number">1001</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>StartVideoToolbox</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_late_start</name></name> <operator>&amp;&amp;</operator> <call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_late_start</name></name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>session</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>ConfigureVout</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>destinationPixelBufferAttributes</name> <init>= <expr><call><name>cfdict_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>destinationPixelBufferAttributes</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>decoderConfiguration</name> <init>=
<expr><call><name>CreateSessionDescriptionFormat</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>decoderConfiguration</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>destinationPixelBufferAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name> <init>= <expr><call><name>CMVideoFormatDescriptionCreate</name><argument_list>(
<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>,
<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>,
<argument><expr><name>decoderConfiguration</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>videoFormatDescription</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>destinationPixelBufferAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>decoderConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"video format description creation failed (%i)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>
<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>destinationPixelBufferAttributes</name></expr></argument>,
<argument><expr><name>kCVPixelBufferIOSurfaceOpenGLTextureCompatibilityKey</name></expr></argument>,
<argument><expr><name>kCFBooleanTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>destinationPixelBufferAttributes</name></expr></argument>,
<argument><expr><name>kCVPixelBufferOpenGLESCompatibilityKey</name></expr></argument>,
<argument><expr><name>kCFBooleanTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>cfdict_set_int32</name><argument_list>(<argument><expr><name>destinationPixelBufferAttributes</name></expr></argument>,
<argument><expr><name>kCVPixelBufferWidthKey</name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfdict_set_int32</name><argument_list>(<argument><expr><name>destinationPixelBufferAttributes</name></expr></argument>,
<argument><expr><name>kCVPixelBufferHeightKey</name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cvpx_format</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>chroma</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cvpx_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"forcing CVPX format: %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfdict_set_int32</name><argument_list>(<argument><expr><name>destinationPixelBufferAttributes</name></expr></argument>,
<argument><expr><name>kCVPixelBufferPixelFormatTypeKey</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cvpx_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cfdict_set_int32</name><argument_list>(<argument><expr><name>destinationPixelBufferAttributes</name></expr></argument>,
<argument><expr><name>kCVPixelBufferBytesPerRowAlignmentKey</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>VTDecompressionOutputCallbackRecord</name></type> <name>decoderCallbackRecord</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>decoderCallbackRecord</name><operator>.</operator><name>decompressionOutputCallback</name></name> <operator>=</operator> <name>DecoderCallback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>decoderCallbackRecord</name><operator>.</operator><name>decompressionOutputRefCon</name></name> <operator>=</operator> <name>p_dec</name></expr>;</expr_stmt>


<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTDecompressionSessionCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>videoFormatDescription</name></name></expr></argument>,
<argument><expr><name>decoderConfiguration</name></expr></argument>,
<argument><expr><name>destinationPixelBufferAttributes</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>decoderCallbackRecord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>decoderConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>destinationPixelBufferAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HandleVTStatus</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>StopVideoToolbox</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>closing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>session</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Drain</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VTDecompressionSessionInvalidate</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_IPHONE</name></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name>closing</name> <operator>&amp;&amp;</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_CVPX_BGRA</name>
<operator>&amp;&amp;</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>*</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>&gt;=</operator> <literal type="number">8000000</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name></type> <name>orig</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>decoder_UpdateVideoFormat</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name> <operator>=</operator> <name>orig</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>closing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_format_propagated</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>videoFormatDescription</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>videoFormatDescription</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>videoFormatDescription</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vt_feed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_drop_blocks</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>-</name> <name>module</name> <name>open</name> <name>and</name> <name>close</name></cpp:pragma>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pic_pacer_Destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>priv</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pic_pacer_Init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pic_pacer</name></name> <modifier>*</modifier></type><name>pic_pacer</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>pic_reorder_max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_pacer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_pacer</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic_pacer</name><operator>-&gt;</operator><name>nb_field_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic_pacer</name><operator>-&gt;</operator><name>field_reorder_max</name></name> <operator>=</operator> <name>pic_reorder_max</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>CreateVideoContext</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_dev</name> <init>= <expr><call><name>decoder_GetDecoderDevice</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dec_dev</name> <operator>||</operator> <name><name>dec_dev</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>VLC_DECODER_DEVICE_VIDEOTOOLBOX</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Could not find an VIDEOTOOLBOX decoder device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_video_context_operations</name></name></type> <name>ops</name> <init>=
<expr><block>{
<expr><name>pic_pacer_Destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vctx</name></name> <operator>=</operator>
<call><name>vlc_video_context_CreateCVPX</name><argument_list>(<argument><expr><name>dec_dev</name></expr></argument>,
<argument><expr><name>CVPX_VIDEO_CONTEXT_VIDEOTOOLBOX</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pic_pacer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>vctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pic_pacer</name></name> <operator>=</operator>
<call><name>vlc_video_context_GetCVPXPrivate</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>,
<argument><expr><name>CVPX_VIDEO_CONTEXT_VIDEOTOOLBOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pic_pacer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pic_pacer_Init</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pic_pacer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_reorder_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>var_Type</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"videotoolbox-failed"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>CMVideoCodecType</name></type> <name>codec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name>CodecPrecheck</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>codec</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>codec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>videoFormatDescription</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pic_reorder_max</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vtsession_status</name></name> <operator>=</operator> <name>VTSESSION_STATUS_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_cvpx_format_forced</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cvpx_chroma</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"videotoolbox-cvpx-chroma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cvpx_chroma</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>cvpx_chroma</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"invalid videotoolbox-cvpx-chroma option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cvpx_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_cvpx_format</name></name></expr></argument>, <argument><expr><name>cvpx_chroma</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cvpx_format</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cvpx_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_cvpx_format_forced</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cvpx_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>||</operator> <operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>CreateVideoContext</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vt_need_keyframe</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeBlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>RequestFlush</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>codec</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>kCMVideoCodecType_H264</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_codec_init</name></name> <operator>=</operator> <name>InitH264</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_codec_clean</name></name> <operator>=</operator> <name>CleanH264</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_codec_supported</name></name> <operator>=</operator> <name>CodecSupportedH264</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_late_start</name></name> <operator>=</operator> <name>LateStartH264</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_process_block</name></name> <operator>=</operator> <name>ProcessBlockH264</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_need_restart</name></name> <operator>=</operator> <name>VideoToolboxNeedsToRestartH264</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_configure_vout</name></name> <operator>=</operator> <name>ConfigureVoutH264</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_extradata</name></name> <operator>=</operator> <name>GetDecoderExtradataH264</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_fill_reorder_info</name></name> <operator>=</operator> <name>FillReorderInfoH264</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_poc_based_reorder</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vt_need_keyframe</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>kCMVideoCodecType_HEVC</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_codec_init</name></name> <operator>=</operator> <name>InitHEVC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_codec_clean</name></name> <operator>=</operator> <name>CleanHEVC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_codec_supported</name></name> <operator>=</operator> <name>CodecSupportedHEVC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_late_start</name></name> <operator>=</operator> <name>LateStartHEVC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_process_block</name></name> <operator>=</operator> <name>ProcessBlockHEVC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_need_restart</name></name> <operator>=</operator> <name>VideoToolboxNeedsToRestartHEVC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_configure_vout</name></name> <operator>=</operator> <name>ConfigureVoutHEVC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_extradata</name></name> <operator>=</operator> <name>GetDecoderExtradataHEVC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_fill_reorder_info</name></name> <operator>=</operator> <name>FillReorderInfoHEVC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_poc_based_reorder</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vt_need_keyframe</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>kCMVideoCodecType_MPEG4Video</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_extradata</name></name> <operator>=</operator> <name>GetDecoderExtradataMPEG4</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_extradata</name></name> <operator>=</operator> <name>GetDecoderExtradataDefault</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_codec_init</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_codec_init</name></name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CloseDecoder</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_codec_supported</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_codec_supported</name></name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CloseDecoder</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>StartVideoToolbox</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PtsInit</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Using Video Toolbox to decode '%4.4s'"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>CloseDecoder</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StopVideoToolbox</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_codec_clean</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_codec_clean</name></name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>-</name> <name>helpers</name></cpp:pragma>

<function><type><specifier>static</specifier> <name>Boolean</name></type> <name>deviceSupportsHEVC</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__builtin_available</name><argument_list>(<argument><expr><name>macOS</name> <literal type="number">10.13</literal></expr></argument>, <argument><expr><name>iOS</name> <literal type="number">11.0</literal></expr></argument>, <argument><expr><name>tvOS</name> <literal type="number">11.0</literal></expr></argument>, <argument><expr><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>VTIsHardwareDecodeSupported</name><argument_list>(<argument><expr><name>kCMVideoCodecType_HEVC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Boolean</name></type> <name>deviceSupportsAdvancedProfiles</name><parameter_list>()</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_IPHONE</name></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cpu_type_t</name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"hw.cputype"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CPU_TYPE_ARM64</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Boolean</name></type> <name>deviceSupportsAdvancedLevels</name><parameter_list>()</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_IPHONE</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cpufamily</name></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cpufamily</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"hw.cpufamily"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpufamily</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>cpufamily</name> <operator>==</operator> <name>CPUFAMILY_ARM_CYCLONE</name> <operator>||</operator> <name>cpufamily</name> <operator>==</operator> <name>CPUFAMILY_ARM_TYPHOON</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bo_add_mp4_tag_descr</name><parameter_list>(<parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>p_bo</name></expr></argument>, <argument><expr><operator>(</operator><name>size</name><operator>&gt;&gt;</operator><operator>(</operator><literal type="number">7</literal><operator>*</operator><name>i</name><operator>)</operator><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>size</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CFMutableDictionaryRef</name></type> <name>ESDSExtradataInfoCreate</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>i_buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>full_size</name> <init>= <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator><literal type="number">13</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>i_buf_size</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>config_size</name> <init>= <expr><literal type="number">13</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>i_buf_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bo_t</name></type> <name>bo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>status</name> <init>= <expr><call><name>bo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_24be</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>bo_add_mp4_tag_descr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument>, <argument><expr><name>full_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>bo_add_mp4_tag_descr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>, <argument><expr><name>config_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_24be</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>bo_add_mp4_tag_descr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><name>i_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_buf_size</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x06</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>extradataInfo</name> <init>=
<expr><call><name>ExtradataInfoCreate</name><argument_list>(<argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"esds"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bo</name><operator>.</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>bo</name><operator>.</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bo_deinit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>extradataInfo</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ConfigureVout</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_configure_vout</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_configure_vout</name></name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>||</operator> <operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <call><name>vlc_align</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name>VT_ALIGNMENT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <call><name>vlc_align</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>, <argument><expr><name>VT_ALIGNMENT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CFMutableDictionaryRef</name></type> <name>ExtradataInfoCreate</name><parameter_list>(<parameter><decl><type><name>CFStringRef</name></type> <name>name</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>extradataInfo</name> <init>= <expr><call><name>cfdict_create</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>extradataInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>CFDataRef</name></type> <name>extradata</name> <init>= <expr><call><name>CFDataCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>extradata</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>extradataInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>extradataInfo</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>extradata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>extradata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>extradataInfo</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CMSampleBufferRef</name></type> <name>VTSampleBufferCreate</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,
<parameter><decl><type><name>CMFormatDescriptionRef</name></type> <name>fmt_desc</name></decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CMBlockBufferRef</name></type> <name>block_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CMSampleBufferRef</name></type> <name>sample_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CMTime</name></type> <name>pts</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_poc_based_reorder</name></name> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>CMTimeMake</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>, <argument><expr><name>CLOCK_FREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>CMTimeMake</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>, <argument><expr><name>CLOCK_FREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>CMSampleTimingInfo</name></type> <name><name>timeInfoArray</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{
<expr><operator>.</operator><name>duration</name> <operator>=</operator> <call><name>CMTimeMake</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>presentationTimeStamp</name> <operator>=</operator> <name>pts</name></expr>,
<expr><operator>.</operator><name>decodeTimeStamp</name> <operator>=</operator> <call><name>CMTimeMake</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>, <argument><expr><name>CLOCK_FREQ</name></expr></argument>)</argument_list></call></expr>,
}</block></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CMBlockBufferCreateWithMemoryBlock</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, 
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, 
<argument><expr><name>kCFAllocatorNull</name></expr></argument>, 
<argument><expr><name>NULL</name></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, 
<argument><expr><name>false</name></expr></argument>, 
<argument><expr><operator>&amp;</operator><name>block_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>status</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CMSampleBufferCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, 
<argument><expr><name>block_buf</name></expr></argument>, 
<argument><expr><name>true</name></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><name>fmt_desc</name></expr></argument>, 
<argument><expr><literal type="number">1</literal></expr></argument>, 
<argument><expr><literal type="number">1</literal></expr></argument>, 
<argument><expr><name>timeInfoArray</name></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><name>NULL</name></expr></argument>, 
<argument><expr><operator>&amp;</operator><name>sample_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"sample buffer creation failure %i"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"cm block buffer creation failure %i"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>block_buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>block_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>block_buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>sample_buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>HandleVTStatus</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>OSStatus</name></type> <name>status</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>vtsession_status</name></name> <modifier>*</modifier></type> <name>p_vtsession_status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTERRCASE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case x: msg_Warn(p_dec, "vt session error: '" #x "'"); break;</cpp:value></cpp:define>


<switch>switch <condition>(<expr><name>status</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>noErr</name></expr>:</case>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<macro><name>VTERRCASE</name><argument_list>(<argument>kVTPropertyNotSupportedErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTPropertyReadOnlyErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTParameterErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTInvalidSessionErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTAllocationFailedErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTPixelTransferNotSupportedErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTCouldNotFindVideoDecoderErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTCouldNotCreateInstanceErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTCouldNotFindVideoEncoderErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTVideoDecoderBadDataErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTVideoDecoderUnsupportedDataFormatErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTVideoDecoderMalfunctionErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTVideoEncoderMalfunctionErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTVideoDecoderNotAvailableNowErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTImageRotationNotSupportedErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTVideoEncoderNotAvailableNowErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTFormatDescriptionChangeNotSupportedErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTInsufficientSourceColorDataErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTCouldNotCreateColorCorrectionDataErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTColorSyncTransformConvertFailedErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTVideoDecoderAuthorizationErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTVideoEncoderAuthorizationErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTColorCorrectionPixelTransferFailedErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTMultiPassStorageIdentifierMismatchErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTMultiPassStorageInvalidErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTFrameSiloInvalidTimeStampErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTFrameSiloInvalidTimeRangeErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTCouldNotFindTemporalFilterErr</argument>)</argument_list></macro>
<macro><name>VTERRCASE</name><argument_list>(<argument>kVTPixelTransferNotPermittedErr</argument>)</argument_list></macro>
<case>case <expr><operator>-</operator><literal type="number">12219</literal></expr>:</case>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"vt session error: "</literal>
<literal type="string">"'kVTColorCorrectionImageRotationFailedErr'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"unknown vt session error (%i)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VTERRCASE</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><name>p_vtsession_status</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name>status</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>kVTPixelTransferNotSupportedErr</name></expr>:</case>
<case>case <expr><name>kVTPixelTransferNotPermittedErr</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p_vtsession_status</name> <operator>=</operator> <name>VTSESSION_STATUS_RESTART_CHROMA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><literal type="number">8960</literal></expr> :</case>
<case>case <expr><name>kVTVideoDecoderMalfunctionErr</name></expr>:</case>
<case>case <expr><name>kVTInvalidSessionErr</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p_vtsession_status</name> <operator>=</operator> <name>VTSESSION_STATUS_RESTART</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><literal type="number">8969</literal></expr> :</case>
<case>case <expr><name>kVTVideoDecoderBadDataErr</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><operator>*</operator><name>p_vtsession_status</name> <operator>=</operator> <name>VTSESSION_STATUS_ABORT</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>-</name> <name>actual</name> <name>decoding</name></cpp:pragma>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RequestFlush</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vt_flush</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Drain</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>flush</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vt_flush</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrainDPBLocked</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>session</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_vt_feed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VTDecompressionSessionWaitForAsynchronousFrames</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>RemoveOneFrameFromDPB</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vt_flush</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vt_feed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_drop_blocks</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vt_flush</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Drain</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtsInit</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Drain</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_INTERLACED_MASK</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_IPHONE</name></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"VT decoder doesn't handle deinterlacing on iOS, "</literal>
<literal type="string">"aborting..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vtsession_status</name></name> <operator>=</operator> <name>VTSESSION_STATUS_ABORT</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_cvpx_format_forced</name></name>
<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cvpx_format</name></name> <operator>==</operator> <name>kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cvpx_format</name></name> <operator>=</operator> <name>kCVPixelFormatType_420YpCbCr8Planar</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Interlaced content: forcing VT to output I420"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>session</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>vtsession_status</name></name> <operator>==</operator> <name>VTSESSION_STATUS_OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"restarting vt session (color changed)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Drain</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StopVideoToolbox</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>vtsession_status</name></name> <operator>==</operator> <name>VTSESSION_STATUS_RESTART</name> <operator>||</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>vtsession_status</name></name> <operator>==</operator> <name>VTSESSION_STATUS_RESTART_CHROMA</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>do_restart</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>vtsession_status</name></name> <operator>==</operator> <name>VTSESSION_STATUS_RESTART_CHROMA</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cvpx_format</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_cvpx_format_forced</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>do_restart</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cvpx_format</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_cvpx_format_forced</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>do_restart</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>do_restart</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_restart_count</name></name> <operator>&lt;=</operator> <name>VT_RESTART_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_restart</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"restarting vt session (dec callback failed)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>StopVideoToolbox</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vtsession_status</name></name> <operator>=</operator> <name>VTSESSION_STATUS_OK</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"too many vt failure..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vtsession_status</name></name> <operator>=</operator> <name>VTSESSION_STATUS_ABORT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>vtsession_status</name></name> <operator>==</operator> <name>VTSESSION_STATUS_ABORT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"decoder failure, Abort."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"videotoolbox-failed"</literal></expr></argument>, <argument><expr><name>VLC_VAR_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_RELOAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name><operator>&amp;</operator><operator>(</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vt_feed</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Drain</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PtsInit</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_config_changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_process_block</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_process_block</name></name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_config_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_block</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>frame_info_t</name> <modifier>*</modifier></type><name>p_info</name> <init>= <expr><call><name>CreateReorderInfo</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>session</name></name> <operator>||</operator>
<operator>(</operator><name>b_config_changed</name> <operator>&amp;&amp;</operator> <name><name>p_info</name><operator>-&gt;</operator><name>b_flush</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>session</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>pf_need_restart</name></name> <operator>&amp;&amp;</operator>
<call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_need_restart</name></name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>,<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"parameters sets changed: draining decoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Drain</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"parameters sets changed: restarting decoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StopVideoToolbox</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pf_codec_supported</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_codec_supported</name></name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <call><name>StartVideoToolbox</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vtsession_status</name></name> <operator>=</operator> <name>VTSESSION_STATUS_ABORT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_vt_feed</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_vt_need_keyframe</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_info</name><operator>-&gt;</operator><name>b_keyframe</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>CMSampleBufferRef</name></type> <name>sampleBuffer</name> <init>=
<expr><call><name>VTSampleBufferCreate</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>videoFormatDescription</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>sampleBuffer</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>skip</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>VTDecodeInfoFlags</name></type> <name>flagOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTDecodeFrameFlags</name></type> <name>decoderFlags</name> <init>= <expr><name>kVTDecodeFrame_EnableAsynchronousDecompression</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name> <init>=
<expr><call><name>VTDecompressionSessionDecodeFrame</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>sampleBuffer</name></expr></argument>,
<argument><expr><name>decoderFlags</name></expr></argument>, <argument><expr><name>p_info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flagOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vtsession_status</name></name></type> <name>vtsession_status</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HandleVTStatus</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtsession_status</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vt_feed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_END_OF_SEQUENCE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Drain</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vtsession_status</name> <operator>==</operator> <name>VTSESSION_STATUS_RESTART</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_restart_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vtsession_status</name></name> <operator>=</operator> <name>vtsession_status</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>sampleBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>skip</name>:</label>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>UpdateVideoFormat</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>CVPixelBufferRef</name></type> <name>imageBuffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFDictionaryRef</name></type> <name>attachmentDict</name> <init>=
<expr><call><name>CVBufferGetAttachments</name><argument_list>(<argument><expr><name>imageBuffer</name></expr></argument>, <argument><expr><name>kCVAttachmentMode_ShouldPropagate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>attachmentDict</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>CFDictionaryGetCount</name><argument_list>(<argument><expr><name>attachmentDict</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>chroma_location</name></name> <operator>==</operator> <name>CHROMA_LOCATION_UNDEF</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>chromaLocation</name> <init>=
<expr><call><name>CFDictionaryGetValue</name><argument_list>(<argument><expr><name>attachmentDict</name></expr></argument>, <argument><expr><name>kCVImageBufferChromaLocationTopFieldKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>chromaLocation</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CFEqual</name><argument_list>(<argument><expr><name>chromaLocation</name></expr></argument>, <argument><expr><name>kCVImageBufferChromaLocation_Left</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>CFEqual</name><argument_list>(<argument><expr><name>chromaLocation</name></expr></argument>, <argument><expr><name>kCVImageBufferChromaLocation_DV420</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>chroma_location</name></name> <operator>=</operator> <name>CHROMA_LOCATION_LEFT</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CFEqual</name><argument_list>(<argument><expr><name>chromaLocation</name></expr></argument>, <argument><expr><name>kCVImageBufferChromaLocation_Center</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>chroma_location</name></name> <operator>=</operator> <name>CHROMA_LOCATION_CENTER</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CFEqual</name><argument_list>(<argument><expr><name>chromaLocation</name></expr></argument>, <argument><expr><name>kCVImageBufferChromaLocation_TopLeft</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>chroma_location</name></name> <operator>=</operator> <name>CHROMA_LOCATION_TOP_LEFT</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CFEqual</name><argument_list>(<argument><expr><name>chromaLocation</name></expr></argument>, <argument><expr><name>kCVImageBufferChromaLocation_Top</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>chroma_location</name></name> <operator>=</operator> <name>CHROMA_LOCATION_TOP_CENTER</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>chroma_location</name></name> <operator>==</operator> <name>CHROMA_LOCATION_UNDEF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>chromaLocation</name> <operator>=</operator>
<call><name>CFDictionaryGetValue</name><argument_list>(<argument><expr><name>attachmentDict</name></expr></argument>, <argument><expr><name>kCVImageBufferChromaLocationBottomFieldKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chromaLocation</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CFEqual</name><argument_list>(<argument><expr><name>chromaLocation</name></expr></argument>, <argument><expr><name>kCVImageBufferChromaLocation_BottomLeft</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>chroma_location</name></name> <operator>=</operator> <name>CHROMA_LOCATION_BOTTOM_LEFT</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CFEqual</name><argument_list>(<argument><expr><name>chromaLocation</name></expr></argument>, <argument><expr><name>kCVImageBufferChromaLocation_Bottom</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>chroma_location</name></name> <operator>=</operator> <name>CHROMA_LOCATION_BOTTOM_CENTER</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cvfmt</name> <init>= <expr><call><name>CVPixelBufferGetPixelFormatType</name><argument_list>(<argument><expr><name>imageBuffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>msg_Info</name><argument_list>(<argument>p_dec</argument>, <argument><literal type="string">"vt cvpx chroma: %4.4s"</literal></argument>,
<argument>(const char *)&amp;(uint32_t) { htonl(cvfmt) }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<switch>switch <condition>(<expr><name>cvfmt</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>kCVPixelFormatType_422YpCbCr8</name></expr>:</case>
<case>case <expr><literal type="char">'yuv2'</literal></expr>:</case>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_CVPX_UYVY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>CVPixelBufferIsPlanar</name><argument_list>(<argument><expr><name>imageBuffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange</name></expr>:</case>
<case>case <expr><name>kCVPixelFormatType_420YpCbCr8BiPlanarFullRange</name></expr>:</case>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_CVPX_NV12</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>CVPixelBufferIsPlanar</name><argument_list>(<argument><expr><name>imageBuffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'xf20'</literal></expr>:</case> 
<case>case <expr><literal type="char">'x420'</literal></expr>:</case> 
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_CVPX_P010</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>CVPixelBufferIsPlanar</name><argument_list>(<argument><expr><name>imageBuffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>kCVPixelFormatType_420YpCbCr8Planar</name></expr>:</case>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_CVPX_I420</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>CVPixelBufferIsPlanar</name><argument_list>(<argument><expr><name>imageBuffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>kCVPixelFormatType_32BGRA</name></expr>:</case>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_CVPX_BGRA</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>CVPixelBufferIsPlanar</name><argument_list>(<argument><expr><name>imageBuffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vtsession_status</name></name> <operator>=</operator> <name>VTSESSION_STATUS_ABORT</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>decoder_UpdateVideoOutput</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vtsession_status</name></name> <operator>=</operator> <name>VTSESSION_STATUS_ABORT</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>video_context_OnPicReleased</name><parameter_list>(<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nb_fields</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pic_pacer</name></name> <modifier>*</modifier></type><name>pic_pacer</name> <init>=
<expr><call><name>vlc_video_context_GetCVPXPrivate</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>CVPX_VIDEO_CONTEXT_VIDEOTOOLBOX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_pacer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>pic_pacer</name><operator>-&gt;</operator><name>nb_field_out</name></name> <operator>-</operator> <name>nb_fields</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic_pacer</name><operator>-&gt;</operator><name>nb_field_out</name></name> <operator>-=</operator> <name>nb_fields</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_pacer</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_pacer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pic_pacer_UpdateReorderMax</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pic_pacer</name></name> <modifier>*</modifier></type><name>pic_pacer</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>pic_reorder_max</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>nb_field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_pacer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic_pacer</name><operator>-&gt;</operator><name>field_reorder_max</name></name> <operator>=</operator> <name>pic_reorder_max</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>nb_field</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><name>nb_field</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_pacer</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_pacer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pic_pacer_Wait</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pic_pacer</name></name> <modifier>*</modifier></type><name>pic_pacer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>reserved_fields</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>pic</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><name><name>pic</name><operator>-&gt;</operator><name>i_nb_fields</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_pacer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>deadline</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pic_pacer</name><operator>-&gt;</operator><name>field_reorder_max</name></name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>pic_pacer</name><operator>-&gt;</operator><name>nb_field_out</name></name> <operator>&gt;=</operator> <name><name>pic_pacer</name><operator>-&gt;</operator><name>field_reorder_max</name></name> <operator>+</operator> <name>reserved_fields</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_pacer</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pic_pacer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>deadline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>pic_pacer</name><operator>-&gt;</operator><name>nb_field_out</name></name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>i_nb_fields</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_pacer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecoderCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>decompressionOutputRefCon</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sourceFrameRefCon</name></decl></parameter>,
<parameter><decl><type><name>OSStatus</name></type> <name>status</name></decl></parameter>,
<parameter><decl><type><name>VTDecodeInfoFlags</name></type> <name>infoFlags</name></decl></parameter>,
<parameter><decl><type><name>CVPixelBufferRef</name></type> <name>imageBuffer</name></decl></parameter>,
<parameter><decl><type><name>CMTime</name></type> <name>pts</name></decl></parameter>,
<parameter><decl><type><name>CMTime</name></type> <name>duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>decompressionOutputRefCon</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frame_info_t</name> <modifier>*</modifier></type><name>p_info</name> <init>= <expr><operator>(</operator><name>frame_info_t</name> <operator>*</operator><operator>)</operator> <name>sourceFrameRefCon</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vt_flush</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vtsession_status</name></name></type> <name>vtsession_status</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HandleVTStatus</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtsession_status</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>vtsession_status</name></name> <operator>!=</operator> <name>VTSESSION_STATUS_ABORT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vtsession_status</name></name> <operator>=</operator> <name>vtsession_status</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vtsession_status</name> <operator>==</operator> <name>VTSESSION_STATUS_RESTART</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_restart_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>imageBuffer</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"critical: null imageBuffer with a valid status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vtsession_status</name></name> <operator>=</operator> <name>VTSESSION_STATUS_ABORT</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>vtsession_status</name></name> <operator>==</operator> <name>VTSESSION_STATUS_ABORT</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_format_propagated</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_format_propagated</name></name> <operator>=</operator>
<call><name>UpdateVideoFormat</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>imageBuffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_format_propagated</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>infoFlags</name> <operator>&amp;</operator> <name>kVTDecodeInfo_FrameDropped</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"decoder dropped frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CMTIME_IS_VALID</name><argument_list>(<argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CVPixelBufferGetDataSize</name><argument_list>(<argument><expr><name>imageBuffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>p_info</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><call><name>decoder_NewPicture</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_pic</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_info</name><operator>-&gt;</operator><name>p_picture</name></name> <operator>=</operator> <name>p_pic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <name><name>pts</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_force</name></name> <operator>=</operator> <name><name>p_info</name><operator>-&gt;</operator><name>b_eos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_still</name></name> <operator>=</operator> <name><name>p_info</name><operator>-&gt;</operator><name>b_eos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_progressive</name></name> <operator>=</operator> <name><name>p_info</name><operator>-&gt;</operator><name>b_progressive</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_pic</name><operator>-&gt;</operator><name>b_progressive</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>=</operator> <name><name>p_info</name><operator>-&gt;</operator><name>i_num_ts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_top_field_first</name></name> <operator>=</operator> <name><name>p_info</name><operator>-&gt;</operator><name>b_top_field_first</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cvpxpic_attach</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>imageBuffer</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>,
<argument><expr><name>video_context_OnPicReleased</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>pic_pacer_Wait</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pic_pacer</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"pic_pacer_Wait timed out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_vt_flush</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_restart_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OnDecodedFrame</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>OpenDecDevice</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_decoder_device_operations</name></name></type> <name>ops</name> <init>=
<expr><block>{
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>ops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>VLC_DECODER_DEVICE_VIDEOTOOLBOX</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
