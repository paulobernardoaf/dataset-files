<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\subsdec.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xml.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"substext.h"</cpp:file></cpp:include>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_encodings</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"system"</literal></expr>,
<expr><literal type="string">"UTF-8"</literal></expr>,
<expr><literal type="string">"UTF-16"</literal></expr>,
<expr><literal type="string">"UTF-16BE"</literal></expr>,
<expr><literal type="string">"UTF-16LE"</literal></expr>,
<expr><literal type="string">"GB18030"</literal></expr>,
<expr><literal type="string">"ISO-8859-15"</literal></expr>,
<expr><literal type="string">"Windows-1252"</literal></expr>,
<expr><literal type="string">"IBM850"</literal></expr>,
<expr><literal type="string">"ISO-8859-2"</literal></expr>,
<expr><literal type="string">"Windows-1250"</literal></expr>,
<expr><literal type="string">"ISO-8859-3"</literal></expr>,
<expr><literal type="string">"ISO-8859-10"</literal></expr>,
<expr><literal type="string">"Windows-1251"</literal></expr>,
<expr><literal type="string">"KOI8-R"</literal></expr>,
<expr><literal type="string">"KOI8-U"</literal></expr>,
<expr><literal type="string">"ISO-8859-6"</literal></expr>,
<expr><literal type="string">"Windows-1256"</literal></expr>,
<expr><literal type="string">"ISO-8859-7"</literal></expr>,
<expr><literal type="string">"Windows-1253"</literal></expr>,
<expr><literal type="string">"ISO-8859-8"</literal></expr>,
<expr><literal type="string">"Windows-1255"</literal></expr>,
<expr><literal type="string">"ISO-8859-9"</literal></expr>,
<expr><literal type="string">"Windows-1254"</literal></expr>,
<expr><literal type="string">"ISO-8859-11"</literal></expr>,
<expr><literal type="string">"Windows-874"</literal></expr>,
<expr><literal type="string">"ISO-8859-13"</literal></expr>,
<expr><literal type="string">"Windows-1257"</literal></expr>,
<expr><literal type="string">"ISO-8859-14"</literal></expr>,
<expr><literal type="string">"ISO-8859-16"</literal></expr>,
<expr><literal type="string">"ISO-2022-CN-EXT"</literal></expr>,
<expr><literal type="string">"EUC-CN"</literal></expr>,
<expr><literal type="string">"ISO-2022-JP-2"</literal></expr>,
<expr><literal type="string">"EUC-JP"</literal></expr>,
<expr><literal type="string">"Shift_JIS"</literal></expr>,
<expr><literal type="string">"CP949"</literal></expr>,
<expr><literal type="string">"ISO-2022-KR"</literal></expr>,
<expr><literal type="string">"Big5"</literal></expr>,
<expr><literal type="string">"ISO-2022-TW"</literal></expr>,
<expr><literal type="string">"Big5-HKSCS"</literal></expr>,
<expr><literal type="string">"VISCII"</literal></expr>,
<expr><literal type="string">"Windows-1258"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_encoding_names</name><index>[]</index></name> <init>= <expr><block>{




<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Default (Windows-1252)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"System codeset"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Universal (UTF-8)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Universal (UTF-16)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Universal (big endian UTF-16)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Universal (little endian UTF-16)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Universal, Chinese (GB18030)"</literal></expr></argument>)</argument_list></call></expr>,



<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Western European (Latin-9)"</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Western European (Windows-1252)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Western European (IBM 00850)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Eastern European (Latin-2)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Eastern European (Windows-1250)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Esperanto (Latin-3)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Nordic (Latin-6)"</literal></expr></argument>)</argument_list></call></expr>, 

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Cyrillic (Windows-1251)"</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Russian (KOI8-R)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Ukrainian (KOI8-U)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Arabic (ISO 8859-6)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Arabic (Windows-1256)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Greek (ISO 8859-7)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Greek (Windows-1253)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Hebrew (ISO 8859-8)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Hebrew (Windows-1255)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Turkish (ISO 8859-9)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Turkish (Windows-1254)"</literal></expr></argument>)</argument_list></call></expr>,


<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Thai (TIS 620-2533/ISO 8859-11)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Thai (Windows-874)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Baltic (Latin-7)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Baltic (Windows-1257)"</literal></expr></argument>)</argument_list></call></expr>,


<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Celtic (Latin-8)"</literal></expr></argument>)</argument_list></call></expr>,


<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"South-Eastern European (Latin-10)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Simplified Chinese (ISO-2022-CN-EXT)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Simplified Chinese Unix (EUC-CN)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Japanese (7-bits JIS/ISO-2022-JP-2)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Japanese Unix (EUC-JP)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Japanese (Shift JIS)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Korean (EUC-KR/CP949)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Korean (ISO-2022-KR)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Traditional Chinese (Big5)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Traditional Chinese Unix (EUC-TW)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Hong-Kong Supplementary (HKSCS)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Vietnamese (VISCII)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Vietnamese (Windows-1258)"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_justification</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_justification_text</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Auto"</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Center"</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Left"</literal></expr></argument>)</argument_list></call></expr>,<macro><name>N_</name><argument_list>(<argument><literal type="string">"Right"</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODING_TEXT</name></cpp:macro> <cpp:value>N_("Subtitle text encoding")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODING_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set the encoding used in text subtitles")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_TEXT</name></cpp:macro> <cpp:value>N_("Subtitle justification")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set the justification of subtitles")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTODETECT_UTF8_TEXT</name></cpp:macro> <cpp:value>N_("UTF-8 subtitle autodetection")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTODETECT_UTF8_LONGTEXT</name></cpp:macro> <cpp:value>N_("This enables automatic detection of " "UTF-8 encoding within subtitle files.")</cpp:value></cpp:define>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Subtitles"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Text subtitle decoder"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"spu decoder"</literal></argument>, <argument><literal type="number">50</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenDecoder</argument>, <argument>CloseDecoder</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_SCODEC</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"subsdec-align"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>ALIGN_TEXT</argument>, <argument>ALIGN_LONGTEXT</argument>,
<argument>false</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>pi_justification</argument>, <argument>ppsz_justification_text</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument><literal type="string">"subsdec-encoding"</literal></argument>, <argument><literal type="string">""</literal></argument>,
<argument>ENCODING_TEXT</argument>, <argument>ENCODING_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_string_list</name><argument_list>( <argument>ppsz_encodings</argument>, <argument>ppsz_encoding_names</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"subsdec-autodetect-utf8"</literal></argument>, <argument>true</argument>,
<argument>AUTODETECT_UTF8_TEXT</argument>, <argument>AUTODETECT_UTF8_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_BREAKING_SPACE</name></cpp:macro> <cpp:value>"&amp;#160;"</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_align</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_iconv_t</name></type> <name>iconv_handle</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_autodetect_utf8</name></decl>;</decl_stmt>
}</block></struct></type> <name>decoder_sys_t</name>;</typedef>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>ParseText</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>text_segment_t</name> <modifier>*</modifier></type><name>ParseSubtitles</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_align</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>







<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_SUBT</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_ITU_T140</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>


<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeBlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>iconv_handle</name></name> <operator>=</operator> <operator>(</operator><name>vlc_iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_autodetect_utf8</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_ITU_T140</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>encoding</name> <operator>=</operator> <literal type="string">"UTF-8"</literal></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else
if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>psz_encoding</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>psz_encoding</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>encoding</name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>psz_encoding</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"trying demuxer-specified character encoding: %s"</literal></expr></argument>,
<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>var</name> <operator>=</operator> <call><name>var_InheritString</name> <argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"subsdec-encoding"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"trying configured character encoding: %s"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"system"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>var</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>encoding</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>encoding</name> <operator>=</operator> <name>var</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else

<block>{<block_content>










<expr_stmt><expr><name>encoding</name> <operator>=</operator> <call><name>vlc_pgettext</name><argument_list>(<argument><expr><literal type="string">"GetACP"</literal></expr></argument>, <argument><expr><literal type="string">"CP1252"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"trying default character encoding: %s"</literal></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name> <argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"subsdec-autodetect-utf8"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"using automatic UTF-8 detection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_autodetect_utf8</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name> <argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name> <argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><literal type="string">"utf8"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>iconv_handle</name></name> <operator>=</operator> <call><name>vlc_iconv_open</name> <argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>iconv_handle</name></name> <operator>==</operator> <operator>(</operator><name>vlc_iconv_t</name><operator>)</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"cannot convert from %s: %s"</literal></expr></argument>, <argument><expr><name>encoding</name></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"subsdec-align"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>ParseText</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_spu</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decoder_QueueSub</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>iconv_handle</name></name> <operator>!=</operator> <operator>(</operator><name>vlc_iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_iconv_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>iconv_handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>ParseText</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"subtitle without a date"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"no subtitle data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_subtitle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>iconv_handle</name></name> <operator>==</operator> <operator>(</operator><name>vlc_iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>b_autodetect_utf8</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_subtitle</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_subtitle</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_subtitle</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>iconv_handle</name></name> <operator>==</operator> <operator>(</operator><name>vlc_iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EnsureUTF8</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed to convert subtitle encoding.\n"</literal>
<literal type="string">"Try manually setting a character-encoding "</literal>
<literal type="string">"before you open the file."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_autodetect_utf8</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>IsUTF8</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"invalid UTF-8 sequence: "</literal>
<literal type="string">"disabling UTF-8 subtitles autodetection"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_autodetect_utf8</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_autodetect_utf8</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>inbytes_left</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>outbytes_left</name> <init>= <expr><literal type="number">6</literal> <operator>*</operator> <name>inbytes_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_new_subtitle</name> <init>= <expr><call><name>xmalloc</name><argument_list>( <argument><expr><name>outbytes_left</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_convert_buffer_out</name> <init>= <expr><name>psz_new_subtitle</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_convert_buffer_in</name> <init>=
<expr><ternary><condition><expr><name>psz_subtitle</name></expr> ?</condition><then> <expr><name>psz_subtitle</name></expr> </then><else>: <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><call><name>vlc_iconv</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>iconv_handle</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>psz_convert_buffer_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inbytes_left</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>psz_convert_buffer_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outbytes_left</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>psz_convert_buffer_out</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>)</operator> <operator>||</operator> <name>inbytes_left</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_new_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed to convert subtitle encoding.\n"</literal>
<literal type="string">"Try manually setting a character-encoding "</literal>
<literal type="string">"before you open the file."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_subtitle</name> <operator>=</operator> <call><name>realloc</name><argument_list>( <argument><expr><name>psz_new_subtitle</name></expr></argument>,
<argument><expr><name>psz_convert_buffer_out</name> <operator>-</operator> <name>psz_new_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_subtitle</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_subtitle</name> <operator>=</operator> <name>psz_new_subtitle</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>decoder_NewSubpictureText</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subtext_updater_sys_t</name> <modifier>*</modifier></type><name>p_spu_sys</name> <init>= <expr><name><name>p_spu</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_inline_align</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>p_segments</name></name> <operator>=</operator> <call><name>ParseSubtitles</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_inline_align</name></expr></argument>, <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_align</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name> <operator>|</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_align</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>inner_align</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_align</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_inline_align</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>align</name></name> <operator>=</operator> <name>i_inline_align</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>inner_align</name></name> <operator>=</operator> <name>i_inline_align</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>inner_align</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>p_spu</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>AppendCharacter</name><parameter_list>( <parameter><decl><type><name>text_segment_t</name><modifier>*</modifier></type> <name>p_segment</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"%s%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr> ?</condition><then> <expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>c</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>AppendString</name><parameter_list>( <parameter><decl><type><name>text_segment_t</name><modifier>*</modifier></type> <name>p_segment</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_str</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr> ?</condition><then> <expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>psz_str</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>ConsumeAttribute</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppsz_subtitle</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppsz_attribute_value</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_subtitle</name> <init>= <expr><operator>*</operator><name>ppsz_subtitle</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_attribute_name</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>ppsz_attribute_value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>psz_subtitle</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><name>size_t</name></type> <name>attr_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>delimiter</name></decl>;</decl_stmt>

<while>while <condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>&amp;&amp;</operator> <call><name>isalpha</name><argument_list>( <argument><expr><operator>*</operator><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>attr_len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>*</operator><name>psz_subtitle</name> <operator>||</operator> <name>attr_len</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>psz_attribute_name</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>attr_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>psz_attribute_name</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>( <argument><expr><name>psz_attribute_name</name></expr></argument>, <argument><expr><name>psz_subtitle</name> <operator>-</operator> <name>attr_len</name></expr></argument>, <argument><expr><name>attr_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_attribute_name</name><index>[<expr><name>attr_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<while>while <condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_subtitle</name> <operator>!=</operator> <literal type="char">'='</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>*</operator><name>psz_subtitle</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ppsz_subtitle</name> <operator>=</operator> <name>psz_subtitle</name></expr>;</expr_stmt>
<return>return <expr><name>psz_attribute_name</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt>


<while>while <condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>( <argument><expr><operator>*</operator><name>psz_subtitle</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <operator>*</operator><name>psz_subtitle</name> <operator>==</operator> <literal type="char">'"'</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>delimiter</name> <operator>=</operator> <operator>*</operator><name>psz_subtitle</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>delimiter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<while>while <condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>( <argument><expr><operator>*</operator><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>attr_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>(</operator> <name>delimiter</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_subtitle</name> <operator>!=</operator> <name>delimiter</name> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name>delimiter</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>psz_subtitle</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_subtitle</name> <operator>!=</operator> <literal type="char">'&gt;'</literal> <operator>)</operator> <operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>attr_len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>( <expr><name>attr_len</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ppsz_subtitle</name> <operator>=</operator> <name>psz_subtitle</name></expr>;</expr_stmt>
<return>return <expr><name>psz_attribute_name</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><operator>(</operator> <operator>*</operator><name>ppsz_attribute_value</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>attr_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_attribute_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_attribute_value</name></expr></argument>, <argument><expr><name>psz_subtitle</name> <operator>-</operator> <name>attr_len</name></expr></argument>, <argument><expr><name>attr_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppsz_attribute_value</name><operator>)</operator><index>[<expr><name>attr_len</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delimiter</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_subtitle</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ppsz_subtitle</name> <operator>=</operator> <name>psz_subtitle</name></expr>;</expr_stmt>
<return>return <expr><name>psz_attribute_name</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>GetTag</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppsz_subtitle</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_closing</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_subtitle</name> <init>= <expr><operator>*</operator><name>ppsz_subtitle</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>!=</operator> <literal type="char">'&lt;'</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>b_closing</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_subtitle</name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>==</operator> <literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>isalpha</name><argument_list>( <argument><expr><operator>*</operator><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tag_size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>( <expr><call><name>isalnum</name><argument_list>( <argument><expr><name><name>psz_subtitle</name><index>[<expr><name>tag_size</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>||</operator> <name><name>psz_subtitle</name><index>[<expr><name>tag_size</name></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag_size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_tagname</name> <init>= <expr><call><name>vlc_alloc</name><argument_list>( <argument><expr><name>tag_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>psz_tagname</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>psz_tagname</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>( <argument><expr><name>psz_tagname</name></expr></argument>, <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><name>tag_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_tagname</name><index>[<expr><name>tag_size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_subtitle</name> <operator>+=</operator> <name>tag_size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppsz_subtitle</name> <operator>=</operator> <name>psz_subtitle</name></expr>;</expr_stmt>
<return>return <expr><name>psz_tagname</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsClosed</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_subtitle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_tagname</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_tagpos</name> <init>= <expr><call><name>strcasestr</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><name>psz_tagname</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_tagpos</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_endtag</name> <init>= <expr><name>psz_tagpos</name> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_tagname</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>( <expr><operator>*</operator><name>psz_endtag</name> <operator>==</operator> <literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_endtag</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>( <expr><operator>*</operator><name>psz_endtag</name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_tagpos</name><operator>--</operator></expr>;</expr_stmt>
<while>while <condition>( <expr><operator>*</operator><name>psz_tagpos</name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>psz_tagpos</name> <operator>&gt;</operator> <name>psz_subtitle</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_tagpos</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>( <expr><operator>*</operator><name>psz_tagpos</name><operator>--</operator> <operator>!=</operator> <literal type="char">'/'</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>*</operator><name>psz_tagpos</name> <operator>!=</operator> <literal type="char">'&lt;'</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><name><name>struct</name> <name>tag_stack</name></name></type> <name>tag_stack_t</name>;</typedef>
<struct>struct <name>tag_stack</name>
<block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_tagname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tag_stack_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AppendTag</name><parameter_list>( <parameter><decl><type><name>tag_stack_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_stack</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_tagname</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tag_stack_t</name><modifier>*</modifier></type> <name>p_elem</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_elem</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_elem</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_elem</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <operator>*</operator><name>pp_stack</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_elem</name><operator>-&gt;</operator><name>psz_tagname</name></name> <operator>=</operator> <name>psz_tagname</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_stack</name> <operator>=</operator> <name>p_elem</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>HasTag</name><parameter_list>( <parameter><decl><type><name>tag_stack_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_stack</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_tagname</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tag_stack_t</name> <modifier>*</modifier></type><name>p_prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for <control>( <init><decl><type><name>tag_stack_t</name><modifier>*</modifier></type> <name>p_current</name> <init>= <expr><operator>*</operator><name>pp_stack</name></expr></init></decl>;</init> <condition><expr><name>p_current</name></expr>;</condition> <incr><expr><name>p_current</name> <operator>=</operator> <name><name>p_current</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_tagname</name></expr></argument>, <argument><expr><name><name>p_current</name><operator>-&gt;</operator><name>psz_tagname</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>p_current</name> <operator>==</operator> <operator>*</operator><name>pp_stack</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_stack</name> <operator>=</operator> <name><name>p_current</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_prev</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name><name>p_current</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_current</name><operator>-&gt;</operator><name>psz_tagname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_current</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_prev</name> <operator>=</operator> <name>p_current</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>




<typedef>typedef <type><name><name>struct</name> <name>style_stack</name></name></type> <name>style_stack_t</name>;</typedef>
<struct>struct <name>style_stack</name>
<block>{
<decl_stmt><decl><type><name>text_style_t</name><modifier>*</modifier></type> <name>p_style</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>style_stack_t</name><modifier>*</modifier></type> <name>p_next</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>text_style_t</name><modifier>*</modifier></type> <name>DuplicateAndPushStyle</name><parameter_list>(<parameter><decl><type><name>style_stack_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>text_style_t</name><modifier>*</modifier></type> <name>p_dup</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <operator>*</operator><name>pp_stack</name> <operator>)</operator></expr> ?</condition><then> <expr><call><name>text_style_Duplicate</name><argument_list>( <argument><expr><name><operator>(</operator><operator>*</operator><name>pp_stack</name><operator>)</operator><operator>-&gt;</operator><name>p_style</name></name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_dup</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>style_stack_t</name><modifier>*</modifier></type> <name>p_entry</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_entry</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_entry</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><name>p_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_style</name></name> <operator>=</operator> <name>p_dup</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <operator>*</operator><name>pp_stack</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_stack</name> <operator>=</operator> <name>p_entry</name></expr>;</expr_stmt>
<return>return <expr><name>p_dup</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PopStyle</name><parameter_list>(<parameter><decl><type><name>style_stack_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>style_stack_t</name><modifier>*</modifier></type> <name>p_old</name> <init>= <expr><operator>*</operator><name>pp_stack</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_old</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_stack</name> <operator>=</operator> <name><name>p_old</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_old</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>text_segment_t</name><modifier>*</modifier></type> <name>NewTextSegmentPushStyle</name><parameter_list>( <parameter><decl><type><name>text_segment_t</name><modifier>*</modifier></type> <name>p_segment</name></decl></parameter>, <parameter><decl><type><name>style_stack_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_stack</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>text_segment_t</name><modifier>*</modifier></type> <name>p_new</name> <init>= <expr><call><name>text_segment_New</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_new</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>text_style_t</name><modifier>*</modifier></type> <name>p_style</name> <init>= <expr><call><name>DuplicateAndPushStyle</name><argument_list>( <argument><expr><name>pp_stack</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_new</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <name>p_style</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_new</name></expr>;</expr_stmt>
<return>return <expr><name>p_new</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>text_segment_t</name><modifier>*</modifier></type> <name>NewTextSegmentPopStyle</name><parameter_list>( <parameter><decl><type><name>text_segment_t</name><modifier>*</modifier></type> <name>p_segment</name></decl></parameter>, <parameter><decl><type><name>style_stack_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_stack</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>text_segment_t</name><modifier>*</modifier></type> <name>p_new</name> <init>= <expr><call><name>text_segment_New</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_new</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>PopStyle</name><argument_list>( <argument><expr><name>pp_stack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>text_style_t</name><modifier>*</modifier></type> <name>p_dup</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <operator>*</operator><name>pp_stack</name> <operator>)</operator></expr> ?</condition><then> <expr><call><name>text_style_Duplicate</name><argument_list>( <argument><expr><name><operator>(</operator><operator>*</operator><name>pp_stack</name><operator>)</operator><operator>-&gt;</operator><name>p_style</name></name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_new</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <name>p_dup</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_new</name></expr>;</expr_stmt>
<return>return <expr><name>p_new</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>text_segment_t</name><modifier>*</modifier></type> <name>ParseSubtitles</name><parameter_list>( <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_align</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_subtitle</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>text_segment_t</name><modifier>*</modifier></type> <name>p_segment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>text_segment_t</name><modifier>*</modifier></type> <name>p_first_segment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>style_stack_t</name><modifier>*</modifier></type> <name>p_stack</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tag_stack_t</name><modifier>*</modifier></type> <name>p_tag_stack</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>p_first_segment</name> <operator>=</operator> <name>p_segment</name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>( <argument><expr><literal type="string">""</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_align</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<while>while<condition>( <expr><operator>*</operator><name>psz_subtitle</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tagname</name> <init>= <expr><call><name>GetTag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_subtitle</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>psz_tagname</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_tagname</name></expr></argument>, <argument><expr><literal type="string">"br"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>AppendCharacter</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tagname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_tagname</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_segment</name> <operator>=</operator> <call><name>NewTextSegmentPushStyle</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_stack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_BOLD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_tagname</name></expr></argument>, <argument><expr><literal type="string">"i"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_segment</name> <operator>=</operator> <call><name>NewTextSegmentPushStyle</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_stack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_ITALIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_tagname</name></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_segment</name> <operator>=</operator> <call><name>NewTextSegmentPushStyle</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_stack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_UNDERLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_tagname</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_segment</name> <operator>=</operator> <call><name>NewTextSegmentPushStyle</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_stack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_STRIKEOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_tagname</name></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_segment</name> <operator>=</operator> <call><name>NewTextSegmentPushStyle</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_stack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_attribute_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_attribute_value</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>psz_attribute_name</name> <operator>=</operator> <call><name>ConsumeAttribute</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_subtitle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_attribute_value</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_attribute_value</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_attribute_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_attribute_name</name></expr></argument>, <argument><expr><literal type="string">"face"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>psz_fontname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>psz_fontname</name></name> <operator>=</operator> <name>psz_attribute_value</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_attribute_value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_attribute_name</name></expr></argument>, <argument><expr><literal type="string">"family"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>psz_monofontname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>psz_monofontname</name></name> <operator>=</operator> <name>psz_attribute_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_attribute_value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_attribute_name</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>atoi</name><argument_list>( <argument><expr><name>psz_attribute_value</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>size</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <name>STYLE_DEFAULT_REL_FONT_SIZE</name> <operator>*</operator>
<name>STYLE_DEFAULT_FONT_SIZE</name> <operator>/</operator> <name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_font_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_attribute_name</name></expr></argument>, <argument><expr><literal type="string">"color"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <call><name>vlc_html_color</name><argument_list>( <argument><expr><name>psz_attribute_value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_COLOR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_attribute_name</name></expr></argument>, <argument><expr><literal type="string">"outline-color"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_outline_color</name></name> <operator>=</operator> <call><name>vlc_html_color</name><argument_list>( <argument><expr><name>psz_attribute_value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_OUTLINE_COLOR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_attribute_name</name></expr></argument>, <argument><expr><literal type="string">"shadow-color"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_shadow_color</name></name> <operator>=</operator> <call><name>vlc_html_color</name><argument_list>( <argument><expr><name>psz_attribute_value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_SHADOW_COLOR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_attribute_name</name></expr></argument>, <argument><expr><literal type="string">"outline-level"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_outline_width</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>psz_attribute_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_attribute_name</name></expr></argument>, <argument><expr><literal type="string">"shadow-level"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_shadow_width</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>psz_attribute_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_attribute_name</name></expr></argument>, <argument><expr><literal type="string">"back-color"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_background_color</name></name> <operator>=</operator> <call><name>vlc_html_color</name><argument_list>( <argument><expr><name>psz_attribute_value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_BACKGROUND_COLOR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_attribute_name</name></expr></argument>, <argument><expr><literal type="string">"alpha"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_font_alpha</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>psz_attribute_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_ALPHA</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_attribute_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_attribute_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>IsClosed</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><name>psz_tagname</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AppendCharacter</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AppendString</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><name>psz_tagname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AppendCharacter</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>AppendTag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_tag_stack</name></expr></argument>, <argument><expr><name>psz_tagname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>psz_tagname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_subtitle</name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tagname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">"&lt;/"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_closetagname</name> <init>= <expr><call><name>GetTag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_subtitle</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>psz_closetagname</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_closetagname</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_closetagname</name></expr></argument>, <argument><expr><literal type="string">"i"</literal></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_closetagname</name></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_closetagname</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_closetagname</name></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name>p_segment</name> <operator>=</operator> <call><name>NewTextSegmentPopStyle</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_stack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>HasTag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_tag_stack</name></expr></argument>, <argument><expr><name>psz_closetagname</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AppendString</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><literal type="string">"&lt;/"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AppendString</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><name>psz_closetagname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AppendCharacter</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<while>while <condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>==</operator> <literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_closetagname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>




<expr_stmt><expr><call><name>AppendString</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><literal type="string">"&lt;/"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_subtitle</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>




<expr_stmt><expr><call><name>AppendCharacter</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>psz_subtitle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal> <operator>&amp;&amp;</operator> <name><name>psz_subtitle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator>
<call><name>strchr</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_align</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">"{\\an"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name><name>psz_subtitle</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'1'</literal> <operator>&amp;&amp;</operator> <name><name>psz_subtitle</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal> <operator>&amp;&amp;</operator> <name><name>psz_subtitle</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'}'</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_vertical</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>SUBPICTURE_ALIGN_BOTTOM</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SUBPICTURE_ALIGN_TOP</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_horizontal</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>SUBPICTURE_ALIGN_LEFT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SUBPICTURE_ALIGN_RIGHT</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_id</name> <init>= <expr><name><name>psz_subtitle</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'1'</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_align</name> <operator>=</operator> <name><name>pi_vertical</name><index>[<expr><name>i_id</name><operator>/</operator><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <name><name>pi_horizontal</name><index>[<expr><name>i_id</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>psz_subtitle</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>








<if type="elseif">else if<condition>( <expr><name><name>psz_subtitle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal> <operator>&amp;&amp;</operator> <name><name>psz_subtitle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>psz_subtitle</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_subtitle</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tag_end</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_subtitle</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><name>psz_tag_end</name> <operator>-</operator> <operator>&amp;</operator><name><name>psz_subtitle</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>psz_subtitle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'Y'</literal> <operator>||</operator> <name><name>psz_subtitle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'y'</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>psz_subtitle</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_segment</name> <operator>=</operator> <call><name>NewTextSegmentPushStyle</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_stack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_ITALIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>psz_subtitle</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_segment</name> <operator>=</operator> <call><name>NewTextSegmentPushStyle</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_stack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_BOLD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>psz_subtitle</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_segment</name> <operator>=</operator> <call><name>NewTextSegmentPushStyle</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_stack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_UNDERLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator><name><name>psz_subtitle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal> <operator>||</operator> <name><name>psz_subtitle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal> <operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>psz_subtitle</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal> <operator>&amp;&amp;</operator> <name>i_len</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_color</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>psz_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>psz_subtitle</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>psz_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>psz_subtitle</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>psz_subtitle</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>psz_color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>psz_subtitle</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>psz_subtitle</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>psz_color</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>psz_subtitle</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_color</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_segment</name> <operator>=</operator> <call><name>NewTextSegmentPushStyle</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_stack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <call><name>vlc_html_color</name><argument_list>( <argument><expr><name>psz_color</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_COLOR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>psz_subtitle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'F'</literal> <operator>||</operator> <name><name>psz_subtitle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'f'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_segment</name> <operator>=</operator> <call><name>NewTextSegmentPushStyle</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_stack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>psz_fontname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>psz_fontname</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_subtitle</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>psz_subtitle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>||</operator> <name><name>psz_subtitle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>atoi</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_subtitle</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>size</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_segment</name> <operator>=</operator> <call><name>NewTextSegmentPushStyle</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_stack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <name>STYLE_DEFAULT_REL_FONT_SIZE</name> <operator>*</operator>
<name>STYLE_DEFAULT_FONT_SIZE</name> <operator>/</operator> <name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_font_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>









<expr_stmt><expr><name>psz_subtitle</name> <operator>=</operator> <name>psz_tag_end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">"\\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>AppendCharacter</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_subtitle</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">"\\h"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>AppendString</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><literal type="string">"\xC2\xA0"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>psz_subtitle</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>AppendCharacter</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><operator>*</operator><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<while>while <condition>( <expr><name>p_stack</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PopStyle</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_stack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>( <expr><name>p_tag_stack</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>tag_stack_t</name> <modifier>*</modifier></type><name>p_tag</name> <init>= <expr><name>p_tag_stack</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_tag_stack</name> <operator>=</operator> <name><name>p_tag_stack</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_tag</name><operator>-&gt;</operator><name>psz_tagname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>p_first_segment</name></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>text_segment_ChainDelete</name><argument_list>( <argument><expr><name>p_first_segment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
