<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\codec\webvtt\css_parser.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CSS_PARSER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSS_PARSER_H</name></cpp:macro></cpp:define>




<typedef>typedef <type><name><name>struct</name> <name>vlc_css_parser_t</name></name></type> <name>vlc_css_parser_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>vlc_css_selector_t</name></name></type> <name>vlc_css_selector_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>vlc_css_declaration_t</name></name></type> <name>vlc_css_declaration_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>vlc_css_rule_t</name></name></type> <name>vlc_css_rule_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>vlc_css_expr_t</name></name></type> <name>vlc_css_expr_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_css_expr_t</name> <modifier>*</modifier></type><name>function</name></decl>;</decl_stmt>
<enum>enum
<block>{
<decl><name>TYPE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>TYPE_EMS</name></decl>,
<decl><name>TYPE_EXS</name></decl>,
<decl><name>TYPE_PIXELS</name></decl>,
<decl><name>TYPE_POINTS</name></decl>,
<decl><name>TYPE_MILLIMETERS</name></decl>,
<decl><name>TYPE_PERCENT</name></decl>,
<decl><name>TYPE_MILLISECONDS</name></decl>,
<decl><name>TYPE_HERTZ</name></decl>,
<decl><name>TYPE_DEGREES</name></decl>,
<decl><name>TYPE_DIMENSION</name></decl>,
<decl><name>TYPE_STRING</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,
<decl><name>TYPE_FUNCTION</name></decl>,
<decl><name>TYPE_IDENTIFIER</name></decl>,
<decl><name>TYPE_HEXCOLOR</name></decl>,
<decl><name>TYPE_UNICODERANGE</name></decl>,
<decl><name>TYPE_URI</name></decl>,
}</block> <decl><name>type</name></decl>;</enum>
}</block></struct></type> <name>vlc_css_term_t</name>;</typedef>

<struct>struct <name>vlc_css_expr_t</name>
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>char</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_css_term_t</name></type> <name>term</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>seq</name></decl>;</struct>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_count</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>vlc_css_declaration_t</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_property</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_css_expr_t</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_css_declaration_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>vlc_css_match_e</name>
<block>{
<decl><name>MATCH_EQUALS</name></decl>,
<decl><name>MATCH_INCLUDES</name></decl>,
<decl><name>MATCH_DASHMATCH</name></decl>,
<decl><name>MATCH_BEGINSWITH</name></decl>,
<decl><name>MATCH_ENDSWITH</name></decl>,
<decl><name>MATCH_CONTAINS</name></decl>,
}</block>;</enum>

<enum>enum <name>vlc_css_relation_e</name>
<block>{
<decl><name>RELATION_SELF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>RELATION_DESCENDENT</name> <init>= <expr><literal type="char">' '</literal></expr></init></decl>,
<decl><name>RELATION_DIRECTADJACENT</name> <init>= <expr><literal type="char">'+'</literal></expr></init></decl>,
<decl><name>RELATION_INDIRECTADJACENT</name> <init>= <expr><literal type="char">'~'</literal></expr></init></decl>,
<decl><name>RELATION_CHILD</name> <init>= <expr><literal type="char">'&gt;'</literal></expr></init></decl>,
}</block>;</enum>

<struct>struct <name>vlc_css_selector_t</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<enum>enum
<block>{
<decl><name>SELECTOR_SIMPLE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>SELECTOR_PSEUDOCLASS</name></decl>,
<decl><name>SELECTOR_PSEUDOELEMENT</name></decl>,




<decl><name>SPECIFIER_ID</name></decl>,
<decl><name>SPECIFIER_CLASS</name></decl>,
<decl><name>SPECIFIER_ATTRIB</name></decl>,
}</block> <decl><name>type</name></decl>;</enum>
<struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_css_selector_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_append</name></decl>;</decl_stmt>
}</block> <decl><name>specifiers</name></decl>;</struct>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_css_match_e</name></name></type> <name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_matchsel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_css_relation_e</name></name></type> <name>combinator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>vlc_css_rule_t</name>
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_selectors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_css_declaration_t</name> <modifier>*</modifier></type><name>p_declarations</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_css_rule_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>vlc_css_parser_t</name>
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_css_rule_t</name> <modifier>*</modifier></type><name>p_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_css_rule_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_append</name></decl>;</decl_stmt>
}</block> <decl><name>rules</name></decl>;</struct>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAIN_APPEND_DECL</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void n( t *p_a, t *p_b )</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>vlc_css_term_Clean</name><parameter_list>( <parameter><decl><type><name>vlc_css_term_t</name></type> <name>a</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>vlc_css_expression_AddTerm</name><parameter_list>( <parameter><decl><type><name>vlc_css_expr_t</name> <modifier>*</modifier></type><name>p_expr</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>vlc_css_term_t</name></type> <name>a</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>vlc_css_expression_Delete</name><parameter_list>( <parameter><decl><type><name>vlc_css_expr_t</name> <modifier>*</modifier></type><name>p_expr</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>vlc_css_expr_t</name> <modifier>*</modifier></type> <name>vlc_css_expression_New</name><parameter_list>( <parameter><decl><type><name>vlc_css_term_t</name></type> <name>term</name></decl></parameter> )</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>CHAIN_APPEND_DECL</name><argument_list>(<argument><expr><name>vlc_css_declarations_Append</name></expr></argument>, <argument><expr><name>vlc_css_declaration_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>vlc_css_declarations_Delete</name><parameter_list>( <parameter><decl><type><name>vlc_css_declaration_t</name> <modifier>*</modifier></type><name>p_decl</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>vlc_css_declaration_t</name> <modifier>*</modifier></type> <name>vlc_css_declaration_New</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>CHAIN_APPEND_DECL</name><argument_list>(<argument><expr><name>vlc_css_selector_Append</name></expr></argument>, <argument><expr><name>vlc_css_selector_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>vlc_css_selector_AddSpecifier</name><parameter_list>( <parameter><decl><type><name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_sel</name></decl></parameter>, <parameter><decl><type><name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_spec</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>vlc_css_selectors_Delete</name><parameter_list>( <parameter><decl><type><name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_sel</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>vlc_css_selector_t</name> <modifier>*</modifier></type> <name>vlc_css_selector_New</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vlc_css_rules_Delete</name><parameter_list>( <parameter><decl><type><name>vlc_css_rule_t</name> <modifier>*</modifier></type><name>p_rule</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>vlc_css_rule_t</name> <modifier>*</modifier></type> <name>vlc_css_rule_New</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vlc_css_parser_AddRule</name><parameter_list>( <parameter><decl><type><name>vlc_css_parser_t</name> <modifier>*</modifier></type><name>p_parser</name></decl></parameter>, <parameter><decl><type><name>vlc_css_rule_t</name> <modifier>*</modifier></type><name>p_rule</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>vlc_css_parser_Debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_css_parser_t</name> <modifier>*</modifier></type><name>p_parser</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>vlc_css_parser_Clean</name><parameter_list>( <parameter><decl><type><name>vlc_css_parser_t</name> <modifier>*</modifier></type><name>p_parser</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>vlc_css_parser_Init</name><parameter_list>( <parameter><decl><type><name>vlc_css_parser_t</name> <modifier>*</modifier></type><name>p_parser</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>vlc_css_parser_ParseBytes</name><parameter_list>( <parameter><decl><type><name>vlc_css_parser_t</name> <modifier>*</modifier></type><name>p_parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>vlc_css_parser_ParseString</name><parameter_list>( <parameter><decl><type><name>vlc_css_parser_t</name> <modifier>*</modifier></type><name>p_parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vlc_css_unescape</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type> <name>vlc_css_unquoted</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type> <name>vlc_css_unescaped</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type> <name>vlc_css_unquotedunescaped</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CSS_PARSER_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>css_selector_Debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_sel</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>css_rule_Debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_css_rule_t</name> <modifier>*</modifier></type><name>p_rule</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
