<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\visualization\visual\effects.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"visual.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"window.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEAK_SPEED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAR_DECREASE_SPEED</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAD_ANGLE_MIN</name></cpp:macro> <cpp:value>0.2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAD_ANGLE_MAX</name></cpp:macro> <cpp:value>0.5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAD_INCR</name></cpp:macro> <cpp:value>0.01</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type> <name>dummy_Run</name><parameter_list>( <parameter><decl><type><name>visual_effect_t</name> <modifier>*</modifier></type> <name>p_effect</name></decl></parameter>, <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>p_buffer</name></decl></parameter> , <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>p_picture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_effect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dummy_Free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<typedef>typedef <type><struct>struct <name>spectrum_data</name>
<block>{
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>peaks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>prev_heights</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_prev_nb_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_prev_s16_buff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>window_param</name></type> <name>wind_param</name></decl>;</decl_stmt>
}</block></struct></type> <name>spectrum_data</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>spectrum_Run</name><parameter_list>(<parameter><decl><type><name>visual_effect_t</name> <modifier>*</modifier></type> <name>p_effect</name></decl></parameter>, <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>p_buffer</name></decl></parameter> , <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>p_picture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>spectrum_data</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_effect</name><operator>-&gt;</operator><name>p_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>p_output</name><index>[<expr><name>FFT_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>peaks</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>prev_heights</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_80_bands</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_nb_bands</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_band_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_peak</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>xscale1</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">27</literal></expr>,
<expr><literal type="number">36</literal></expr>,<expr><literal type="number">47</literal></expr>,<expr><literal type="number">62</literal></expr>,<expr><literal type="number">82</literal></expr>,<expr><literal type="number">107</literal></expr>,<expr><literal type="number">141</literal></expr>,<expr><literal type="number">184</literal></expr>,<expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>xscale2</name><index>[]</index></name> <init>=
<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,
<expr><literal type="number">19</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">23</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">25</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">27</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">29</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">33</literal></expr>,<expr><literal type="number">34</literal></expr>,
<expr><literal type="number">35</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">37</literal></expr>,<expr><literal type="number">38</literal></expr>,<expr><literal type="number">39</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">41</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">43</literal></expr>,<expr><literal type="number">44</literal></expr>,<expr><literal type="number">45</literal></expr>,<expr><literal type="number">46</literal></expr>,<expr><literal type="number">47</literal></expr>,<expr><literal type="number">48</literal></expr>,<expr><literal type="number">49</literal></expr>,<expr><literal type="number">50</literal></expr>,<expr><literal type="number">51</literal></expr>,
<expr><literal type="number">52</literal></expr>,<expr><literal type="number">53</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">55</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">57</literal></expr>,<expr><literal type="number">58</literal></expr>,<expr><literal type="number">59</literal></expr>,<expr><literal type="number">61</literal></expr>,<expr><literal type="number">63</literal></expr>,<expr><literal type="number">67</literal></expr>,<expr><literal type="number">72</literal></expr>,<expr><literal type="number">77</literal></expr>,<expr><literal type="number">82</literal></expr>,<expr><literal type="number">87</literal></expr>,<expr><literal type="number">93</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">105</literal></expr>,
<expr><literal type="number">110</literal></expr>,<expr><literal type="number">115</literal></expr>,<expr><literal type="number">121</literal></expr>,<expr><literal type="number">130</literal></expr>,<expr><literal type="number">141</literal></expr>,<expr><literal type="number">152</literal></expr>,<expr><literal type="number">163</literal></expr>,<expr><literal type="number">174</literal></expr>,<expr><literal type="number">185</literal></expr>,<expr><literal type="number">200</literal></expr>,<expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>xscale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fft_state</name> <modifier>*</modifier></type><name>p_state</name></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>DEFINE_WIND_CONTEXT</name><argument_list>( <argument><expr><name>wind_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl> , <decl><type ref="prev"/><name>j</name></decl> , <decl><type ref="prev"/><name>y</name></decl> , <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>p_dest</name><index>[<expr><name>FFT_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>p_buffer1</name><index>[<expr><name>FFT_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_buffl</name> <init>= 
<expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_buffs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_s16_buff</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"no samples yet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_data</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_effect</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <name>p_data</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>spectrum_data</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_data</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>peaks</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>prev_heights</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_prev_nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_prev_s16_buff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>window_get_param</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_data</name><operator>-&gt;</operator><name>wind_param</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>peaks</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>p_data</name><operator>-&gt;</operator><name>peaks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_heights</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>p_data</name><operator>-&gt;</operator><name>prev_heights</name></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>!=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_prev_nb_samples</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_prev_s16_buff</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_prev_s16_buff</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator>
<name><name>p_effect</name><operator>-&gt;</operator><name>i_nb_chans</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_prev_nb_samples</name></name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_prev_s16_buff</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_buffs</name> <operator>=</operator> <name>p_s16_buff</name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>p_prev_s16_buff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_80_bands</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"visual-80-bands"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_peak</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"visual-peaks"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_80_bands</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>xscale</name> <operator>=</operator> <name>xscale2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_nb_bands</name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>xscale</name> <operator>=</operator> <name>xscale1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_nb_bands</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_nb_bands</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>height</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_nb_chans</name></name></expr>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt> }</block> <decl><name>u</name></decl>;</union>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>f</name></name> <operator>=</operator> <operator>*</operator><name>p_buffl</name> <operator>+</operator> <literal type="number">384.0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>u</name><operator>.</operator><name>i</name></name> <operator>&gt;</operator> <literal type="number">0x43c07fff</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator> <name>p_buffs</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>u</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">0x43bf8000</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p_buffs</name> <operator>=</operator> <operator>-</operator><literal type="number">32768</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p_buffs</name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>i</name></name> <operator>-</operator> <literal type="number">0x43c00000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p_buffl</name><operator>++</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>p_buffs</name><operator>++</operator></expr> ;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p_state</name> <operator>=</operator> <call><name>visual_fft_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_state</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>,<argument><expr><literal type="string">"unable to initialize FFT transform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>window_init</name><argument_list>( <argument><expr><name>FFT_BUFFER_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_data</name><operator>-&gt;</operator><name>wind_param</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wind_ctx</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fft_close</name><argument_list>( <argument><expr><name>p_state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>,<argument><expr><literal type="string">"unable to initialize FFT window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_buffs</name> <operator>=</operator> <name>p_s16_buff</name></expr>;</expr_stmt>
<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FFT_BUFFER_SIZE</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p_buffs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buffs</name> <operator>+=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_nb_chans</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_buffs</name> <operator>&gt;=</operator> <operator>&amp;</operator><name><name>p_s16_buff</name><index>[<expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_nb_chans</name></name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_buffs</name> <operator>=</operator> <name>p_s16_buff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>
<expr_stmt><expr><call><name>window_scale_in_place</name><argument_list>( <argument><expr><name>p_buffer1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wind_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fft_perform</name><argument_list>( <argument><expr><name>p_buffer1</name></expr></argument>, <argument><expr><name>p_output</name></expr></argument>, <argument><expr><name>p_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name>FFT_BUFFER_SIZE</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator> <literal type="number">2</literal> <operator>^</operator> <literal type="number">16</literal> <operator>)</operator> <operator>/</operator> <operator>(</operator> <operator>(</operator> <name>FFT_BUFFER_SIZE</name> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">32768</literal> <operator>)</operator> <operator>^</operator> <literal type="number">2</literal> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>i_band_width</name> <operator>=</operator> <call><name>floor</name><argument_list>( <argument><expr><name><name>p_effect</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <name>i_nb_bands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_start</name> <operator>=</operator> <operator>(</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_width</name></name> <operator>-</operator> <name>i_band_width</name> <operator>*</operator> <name>i_nb_bands</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb_bands</name></expr> ;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <name><name>xscale</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator> <name><name>xscale</name><index>[ <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_dest</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>y</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>p_dest</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>y</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>log</name><argument_list>( <argument><expr><name>y</name></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">380</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">380</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>height</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if<condition>( <expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>height</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>PEAK_SPEED</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>height</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>height</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>prev_heights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>BAR_DECREASE_SPEED</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>prev_heights</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>BAR_DECREASE_SPEED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>prev_heights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>height</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_peak</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_line</name> <operator>=</operator> <name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_band_width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>-</operator><literal type="number">1</literal> <operator>-</operator><name>k</name> <operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator>
<operator>(</operator> <name>i_start</name> <operator>+</operator> <name>i_band_width</name><operator>*</operator><name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>)</operator>
<operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator><name>k</name><operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name>i_start</name> <operator>+</operator> <name>i_band_width</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>)</operator>
<operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_line</name> <operator>+</operator> <name>k</name> <operator>-</operator> <literal type="number">0x0f</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>i_line</name> <operator>+</operator> <name>k</name> <operator>-</operator> <literal type="number">0x0f</literal> <operator>&lt;</operator> <literal type="number">0xff</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator><name>k</name><operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name>i_start</name> <operator>+</operator> <name>i_band_width</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>)</operator>
<operator>=</operator> <operator>(</operator> <name>i_line</name> <operator>+</operator> <name>k</name> <operator>)</operator> <operator>-</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator><name>k</name><operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name>i_start</name> <operator>+</operator> <name>i_band_width</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>)</operator>
<operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator><name>k</name><operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name>i_start</name> <operator>+</operator> <name>i_band_width</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>)</operator>
<operator>=</operator> <literal type="number">0x10</literal></expr> ;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_line</name> <operator>&lt;</operator> <name><name>height</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_line</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_band_width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator><name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator>
<operator>(</operator> <name>i_start</name> <operator>+</operator> <name>i_band_width</name><operator>*</operator><name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>)</operator> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name>i_start</name> <operator>+</operator> <name>i_band_width</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>)</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_line</name> <operator>-</operator> <literal type="number">0x0f</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_line</name> <operator>-</operator> <literal type="number">0x0f</literal> <operator>&lt;</operator> <literal type="number">0xff</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name>i_start</name> <operator>+</operator> <name>i_band_width</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>)</operator> <operator>=</operator>
<name>i_line</name> <operator>-</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name>i_start</name> <operator>+</operator> <name>i_band_width</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>)</operator> <operator>=</operator>
<literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name>i_start</name> <operator>+</operator> <name>i_band_width</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>)</operator> <operator>=</operator>
<literal type="number">0x10</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>window_close</name><argument_list>( <argument><expr><operator>&amp;</operator><name>wind_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fft_close</name><argument_list>( <argument><expr><name>p_state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spectrum_Free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>spectrum_data</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_data</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>peaks</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>prev_heights</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_prev_s16_buff</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>peaks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_prev_nb_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_prev_s16_buff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>window_param</name></type> <name>wind_param</name></decl>;</decl_stmt>
}</block></struct></type> <name>spectrometer_data</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>spectrometer_Run</name><parameter_list>(<parameter><decl><type><name>visual_effect_t</name> <modifier>*</modifier></type> <name>p_effect</name></decl></parameter>, <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>p_buffer</name></decl></parameter> , <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>p_picture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name><parameter_list>(<parameter><type><name>R</name></type></parameter>,<parameter><type><name>G</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint8_t)( (R * .299) + (G * .587) + (B * .114) ))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U</name><parameter_list>(<parameter><type><name>R</name></type></parameter>,<parameter><type><name>G</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint8_t)( (R * -.169) + (G * -.332) + (B * .500) + 128 ))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name><parameter_list>(<parameter><type><name>R</name></type></parameter>,<parameter><type><name>G</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint8_t)( (R * .500) + (G * -.419) + (B * -.0813) + 128 ))</cpp:value></cpp:define>
<decl_stmt><decl><type><name>float</name></type> <name><name>p_output</name><index>[<expr><name>FFT_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>peaks</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_80_bands</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_nb_bands</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_band_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_separ</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_amp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_peak</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_original</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_rad</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_sections</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_extra_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_peak_height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>band_sep_angle</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>section_sep_angle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_band_length</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_show_base</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_show_bands</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>a</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>xx</name></decl>,<decl><type ref="prev"/><name>yy</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name>color1</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>xscale1</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">27</literal></expr>,
<expr><literal type="number">36</literal></expr>,<expr><literal type="number">47</literal></expr>,<expr><literal type="number">62</literal></expr>,<expr><literal type="number">82</literal></expr>,<expr><literal type="number">107</literal></expr>,<expr><literal type="number">141</literal></expr>,<expr><literal type="number">184</literal></expr>,<expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>xscale2</name><index>[]</index></name> <init>=
<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,
<expr><literal type="number">19</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">23</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">25</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">27</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">29</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">33</literal></expr>,<expr><literal type="number">34</literal></expr>,
<expr><literal type="number">35</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">37</literal></expr>,<expr><literal type="number">38</literal></expr>,<expr><literal type="number">39</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">41</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">43</literal></expr>,<expr><literal type="number">44</literal></expr>,<expr><literal type="number">45</literal></expr>,<expr><literal type="number">46</literal></expr>,<expr><literal type="number">47</literal></expr>,<expr><literal type="number">48</literal></expr>,<expr><literal type="number">49</literal></expr>,<expr><literal type="number">50</literal></expr>,<expr><literal type="number">51</literal></expr>,
<expr><literal type="number">52</literal></expr>,<expr><literal type="number">53</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">55</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">57</literal></expr>,<expr><literal type="number">58</literal></expr>,<expr><literal type="number">59</literal></expr>,<expr><literal type="number">61</literal></expr>,<expr><literal type="number">63</literal></expr>,<expr><literal type="number">67</literal></expr>,<expr><literal type="number">72</literal></expr>,<expr><literal type="number">77</literal></expr>,<expr><literal type="number">82</literal></expr>,<expr><literal type="number">87</literal></expr>,<expr><literal type="number">93</literal></expr>,<expr><literal type="number">99</literal></expr>,<expr><literal type="number">105</literal></expr>,
<expr><literal type="number">110</literal></expr>,<expr><literal type="number">115</literal></expr>,<expr><literal type="number">121</literal></expr>,<expr><literal type="number">130</literal></expr>,<expr><literal type="number">141</literal></expr>,<expr><literal type="number">152</literal></expr>,<expr><literal type="number">163</literal></expr>,<expr><literal type="number">174</literal></expr>,<expr><literal type="number">185</literal></expr>,<expr><literal type="number">200</literal></expr>,<expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>xscale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>y_scale</name> <init>= <expr><literal type="number">3.60673760222</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>fft_state</name> <modifier>*</modifier></type><name>p_state</name></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>DEFINE_WIND_CONTEXT</name><argument_list>( <argument><expr><name>wind_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl> , <decl><type ref="prev"/><name>j</name></decl> , <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>p_dest</name><index>[<expr><name>FFT_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>p_buffer1</name><index>[<expr><name>FFT_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_buffl</name> <init>= 
<expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_buffs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_s16_buff</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"no samples yet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>spectrometer_data</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_effect</name><operator>-&gt;</operator><name>p_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_data</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>spectrometer_data</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_data</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>peaks</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_data</name><operator>-&gt;</operator><name>peaks</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_prev_nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_prev_s16_buff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>window_get_param</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_data</name><operator>-&gt;</operator><name>wind_param</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_effect</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p_data</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>peaks</name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>peaks</name></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>!=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_prev_nb_samples</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_prev_s16_buff</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_prev_s16_buff</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator>
<name><name>p_effect</name><operator>-&gt;</operator><name>i_nb_chans</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_prev_nb_samples</name></name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_prev_s16_buff</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_buffs</name> <operator>=</operator> <name>p_s16_buff</name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>p_prev_s16_buff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_original</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"spect-show-original"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_80_bands</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"spect-80-bands"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_separ</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"spect-separ"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_amp</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"spect-amp"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_peak</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"spect-show-peaks"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_show_base</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"spect-show-base"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_show_bands</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"spect-show-bands"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_rad</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"spect-radius"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_sections</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"spect-sections"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_extra_width</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"spect-peak-width"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_peak_height</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"spect-peak-height"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>color1</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"spect-color"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_80_bands</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>xscale</name> <operator>=</operator> <name>xscale2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_nb_bands</name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>xscale</name> <operator>=</operator> <name>xscale1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_nb_bands</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_nb_bands</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_nb_chans</name></name></expr>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt> }</block> <decl><name>u</name></decl>;</union>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>f</name></name> <operator>=</operator> <operator>*</operator><name>p_buffl</name> <operator>+</operator> <literal type="number">384.0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>u</name><operator>.</operator><name>i</name></name> <operator>&gt;</operator> <literal type="number">0x43c07fff</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator> <name>p_buffs</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>u</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">0x43bf8000</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p_buffs</name> <operator>=</operator> <operator>-</operator><literal type="number">32768</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p_buffs</name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>i</name></name> <operator>-</operator> <literal type="number">0x43c00000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p_buffl</name><operator>++</operator></expr> ;</expr_stmt> <expr_stmt><expr><name>p_buffs</name><operator>++</operator></expr> ;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p_state</name> <operator>=</operator> <call><name>visual_fft_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_state</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>,<argument><expr><literal type="string">"unable to initialize FFT transform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>window_init</name><argument_list>( <argument><expr><name>FFT_BUFFER_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_data</name><operator>-&gt;</operator><name>wind_param</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wind_ctx</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fft_close</name><argument_list>( <argument><expr><name>p_state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>,<argument><expr><literal type="string">"unable to initialize FFT window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_buffs</name> <operator>=</operator> <name>p_s16_buff</name></expr>;</expr_stmt>
<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FFT_BUFFER_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p_buffs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buffs</name> <operator>+=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_nb_chans</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_buffs</name> <operator>&gt;=</operator> <operator>&amp;</operator><name><name>p_s16_buff</name><index>[<expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_nb_chans</name></name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_buffs</name> <operator>=</operator> <name>p_s16_buff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>window_scale_in_place</name><argument_list>( <argument><expr><name>p_buffer1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wind_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fft_perform</name><argument_list>( <argument><expr><name>p_buffer1</name></expr></argument>, <argument><expr><name>p_output</name></expr></argument>, <argument><expr><name>p_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FFT_BUFFER_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sqrti</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>p_output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sqrti</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>i_nb_bands</name> <operator>*=</operator> <name>i_sections</name></expr>;</expr_stmt>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name>i_nb_bands</name><operator>/</operator><name>i_sections</name></expr> ;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <name><name>xscale</name><index>[<expr><name>i</name></expr>]</index></name></expr> <operator>,</operator> <expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name><operator>&lt;</operator> <name><name>xscale</name><index>[ <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_dest</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>y</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>p_dest</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>y</name> <operator>&gt;&gt;=</operator><literal type="number">7</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>y</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>logy</name> <init>= <expr><call><name>log</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>logy</name> <operator>*</operator> <name>y_scale</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">150</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">150</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>i_band_width</name> <operator>=</operator> <call><name>floor</name><argument_list>( <argument><expr><name><name>p_effect</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <operator>(</operator><name>i_nb_bands</name><operator>/</operator><name>i_sections</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_amp</name> <operator>*</operator> <name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i_amp</name> <operator>*</operator> <name><name>height</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>PEAK_SPEED</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>i_amp</name> <operator>*</operator> <name><name>height</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i_amp</name> <operator>*</operator> <name><name>height</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_original</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_peak</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_line</name> <operator>=</operator> <name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name><operator>&lt;</operator> <name>i_band_width</name> <operator>-</operator> <name>i_separ</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for<control>( <init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name><operator>&lt;</operator> <literal type="number">3</literal></expr> ;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator><name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>-</operator><literal type="number">1</literal> <operator>-</operator><name>k</name> <operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator> <operator>(</operator><name>i_band_width</name><operator>*</operator><name>i</name> <operator>+</operator><name>j</name><operator>)</operator> <operator>)</operator>
<operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator><literal type="number">1</literal> <operator>-</operator><name>k</name><operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name>i_band_width</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>)</operator>
<operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">0x04</literal> <operator>*</operator> <operator>(</operator><name>i_line</name> <operator>+</operator> <name>k</name> <operator>)</operator> <operator>-</operator> <literal type="number">0x0f</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><literal type="number">0x04</literal> <operator>*</operator> <operator>(</operator><name>i_line</name> <operator>+</operator> <name>k</name> <operator>)</operator> <operator>-</operator><literal type="number">0x0f</literal> <operator>&lt;</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator><name>k</name><operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name>i_band_width</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>)</operator>
<operator>=</operator> <operator>(</operator> <literal type="number">0x04</literal> <operator>*</operator> <operator>(</operator> <name>i_line</name> <operator>+</operator> <name>k</name> <operator>)</operator> <operator>)</operator> <operator>-</operator><literal type="number">0x0f</literal></expr> ;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator><name>k</name><operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name>i_band_width</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>)</operator>
<operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator><name>k</name><operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name>i_band_width</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>)</operator>
<operator>=</operator> <literal type="number">0x10</literal></expr> ;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>i_amp</name> <operator>&gt;</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>/</operator> <name>i_amp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i_line</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i_line</name> <operator>&lt;</operator> <name>i_amp</name> <operator>*</operator> <name><name>height</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_line</name> <operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name><operator>&lt;</operator> <name>i_band_width</name> <operator>-</operator> <name>i_separ</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator><name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator> <operator>(</operator><name>i_band_width</name><operator>*</operator><name>i</name> <operator>+</operator><name>j</name><operator>)</operator> <operator>)</operator> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name>i_band_width</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>)</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">0x04</literal> <operator>*</operator> <name>i_line</name> <operator>-</operator> <literal type="number">0x0f</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><literal type="number">0x04</literal> <operator>*</operator> <name>i_line</name> <operator>-</operator> <literal type="number">0x0f</literal> <operator>&lt;</operator> <literal type="number">0xff</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name>i_band_width</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>)</operator> <operator>=</operator>
<operator>(</operator> <literal type="number">0x04</literal> <operator>*</operator> <name>i_line</name><operator>)</operator> <operator>-</operator><literal type="number">0x0f</literal></expr> ;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name>i_band_width</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>)</operator> <operator>=</operator>
<literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_line</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator>
<operator>(</operator> <operator>(</operator> <name>i_band_width</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>)</operator> <operator>=</operator>
<literal type="number">0x10</literal></expr> ;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>band_sep_angle</name> <operator>=</operator> <literal type="number">360.0</literal> <operator>/</operator> <name>i_nb_bands</name></expr>;</expr_stmt>
<expr_stmt><expr><name>section_sep_angle</name> <operator>=</operator> <literal type="number">360.0</literal> <operator>/</operator> <name>i_sections</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_peak_height</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_peak_height</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>max_band_length</name> <operator>=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <operator>(</operator> <name>i_rad</name> <operator>+</operator> <name>i_peak_height</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_band_width</name> <operator>=</operator> <call><name>floor</name><argument_list>( <argument><expr><literal type="number">360</literal> <operator>/</operator> <name>i_nb_bands</name> <operator>-</operator> <name>i_separ</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_band_width</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_band_width</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>i_sections</name></expr> ;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>i_nb_bands</name> <operator>/</operator> <name>i_sections</name><operator>)</operator></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_peak</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_line</name> <operator>=</operator> <name><name>peaks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_peak_height</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xx</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yy</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <operator>(</operator><name>i_band_width</name> <operator>+</operator> <name>i_extra_width</name><operator>)</operator></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>yy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>band_sep_angle</name> <operator>+</operator> <name>section_sep_angle</name> <operator>*</operator> <operator>(</operator><name>c</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>k</name> <operator>)</operator>
<operator>*</operator> <literal type="number">3.141592</literal> <operator>/</operator> <literal type="number">180.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator> <call><name>cos</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator> <name>i_line</name> <operator>+</operator> <name>j</name> <operator>+</operator> <name>i_rad</name> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator> <operator>-</operator><call><name>sin</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator> <name>i_line</name> <operator>+</operator> <name>j</name> <operator>+</operator> <name>i_rad</name> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>)</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">0x04</literal> <operator>*</operator> <operator>(</operator><name>i_line</name> <operator>+</operator> <name>k</name> <operator>)</operator> <operator>-</operator> <literal type="number">0x0f</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><literal type="number">0x04</literal> <operator>*</operator> <operator>(</operator><name>i_line</name> <operator>+</operator> <name>k</name> <operator>)</operator> <operator>-</operator><literal type="number">0x0f</literal> <operator>&lt;</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>)</operator> <operator>=</operator> <operator>(</operator> <literal type="number">0x04</literal> <operator>*</operator> <operator>(</operator> <name>i_line</name> <operator>+</operator> <name>k</name> <operator>)</operator> <operator>)</operator> <operator>-</operator><operator>(</operator><name>color1</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>)</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>)</operator> <operator>=</operator> <name>color1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>i_amp</name><operator>)</operator> <operator>&gt;</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>floor</name><argument_list>( <argument><expr><name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>/</operator> <name>i_amp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>i_show_base</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>band_sep_angle</name> <operator>+</operator> <name>section_sep_angle</name> <operator>*</operator> <operator>(</operator><name>c</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>)</operator>
<operator>*</operator> <literal type="number">3.141592</literal> <operator>/</operator> <literal type="number">180.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator> <call><name>cos</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i_rad</name> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator> <operator>-</operator><call><name>sin</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i_rad</name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>)</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">0x04</literal> <operator>*</operator> <name>i_line</name> <operator>-</operator> <literal type="number">0x0f</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><literal type="number">0x04</literal> <operator>*</operator> <name>i_line</name> <operator>-</operator><literal type="number">0x0f</literal> <operator>&lt;</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>)</operator> <operator>=</operator> <operator>(</operator> <literal type="number">0x04</literal> <operator>*</operator> <name>i_line</name><operator>)</operator> <operator>-</operator><operator>(</operator><name>color1</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>)</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>)</operator> <operator>=</operator> <name>color1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>i_show_bands</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_band_width</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xx</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yy</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>band_sep_angle</name> <operator>+</operator> <name>section_sep_angle</name> <operator>*</operator> <operator>(</operator><name>c</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>j</name> <operator>)</operator>
<operator>*</operator> <literal type="number">3.141592</literal><operator>/</operator><literal type="number">180.0</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>i_rad</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>max_band_length</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>k</name><operator>-</operator><name>i_rad</name><operator>)</operator> <operator>&gt;</operator> <name><name>height</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>yy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator> <call><name>cos</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>k</name> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator> <operator>-</operator><call><name>sin</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>k</name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>)</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">0x04</literal> <operator>*</operator> <name>i_line</name> <operator>-</operator> <literal type="number">0x0f</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><literal type="number">0x04</literal> <operator>*</operator> <name>i_line</name> <operator>-</operator><literal type="number">0x0f</literal> <operator>&lt;</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>)</operator> <operator>=</operator> <operator>(</operator> <literal type="number">0x04</literal> <operator>*</operator> <name>i_line</name><operator>)</operator> <operator>-</operator><operator>(</operator><name>color1</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>)</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>)</operator> <operator>=</operator> <name>color1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for></block_content></block></if></if_stmt>
</block_content>}</block></for></block_content></block></for>

<expr_stmt><expr><call><name>window_close</name><argument_list>( <argument><expr><operator>&amp;</operator><name>wind_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fft_close</name><argument_list>( <argument><expr><name>p_state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spectrometer_Free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>spectrometer_data</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_data</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>peaks</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_prev_s16_buff</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>scope_Run</name><parameter_list>(<parameter><decl><type><name>visual_effect_t</name> <modifier>*</modifier></type> <name>p_effect</name></decl></parameter>, <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>p_buffer</name></decl></parameter> , <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>p_picture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_sample</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>ppp_area</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i_index</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> ;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>ppp_area</name><index>[<expr><name>i_index</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>
<name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <operator>(</operator><name>i_index</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_lines</name>
<operator>/</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for<control>( <init><expr><name>i_index</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p_sample</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</init>
<condition><expr><name>i_index</name> <operator>&lt;</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_effect</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument> )</argument_list></call></expr>;</condition>
<incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int8_t</name></type> <name>i_value</name></decl>;</decl_stmt>


<expr_stmt><expr><name>i_value</name> <operator>=</operator> <name><name>p_sample</name><index>[<expr><name><name>p_effect</name><operator>-&gt;</operator><name>i_idx_left</name></name></expr>]</index></name> <operator>*</operator> <literal type="number">127</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>ppp_area</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name>
<operator>+</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name>i_index</name> <operator>/</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_width</name></name>
<operator>+</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name>i_value</name> <operator>/</operator> <literal type="number">512</literal>
<operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name><operator>)</operator> <operator>=</operator> <literal type="number">0xbf</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>ppp_area</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name>
<operator>+</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name>i_index</name> <operator>/</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_width</name></name>
<operator>+</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name>i_value</name> <operator>/</operator> <literal type="number">512</literal>
<operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name><operator>)</operator> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>i_value</name> <operator>=</operator> <name><name>p_sample</name><index>[<expr><name><name>p_effect</name><operator>-&gt;</operator><name>i_idx_right</name></name></expr>]</index></name> <operator>*</operator> <literal type="number">127</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>ppp_area</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name>
<operator>+</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name>i_index</name> <operator>/</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_width</name></name>
<operator>+</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name>i_value</name> <operator>/</operator> <literal type="number">512</literal>
<operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name><operator>)</operator> <operator>=</operator> <literal type="number">0x9f</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>ppp_area</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name>
<operator>+</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name>i_index</name> <operator>/</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_width</name></name>
<operator>+</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name>i_value</name> <operator>/</operator> <literal type="number">512</literal>
<operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name><operator>)</operator> <operator>=</operator> <literal type="number">0xdd</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sample</name> <operator>+=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_nb_chans</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>vuMeter_Run</name><parameter_list>(<parameter><decl><type><name>visual_effect_t</name> <modifier>*</modifier></type> <name>p_effect</name></decl></parameter>, <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>p_buffer</name></decl></parameter> , <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>p_picture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>i_value_l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>i_value_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_sample</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>p_sample</name><index>[<expr><name><name>p_effect</name><operator>-&gt;</operator><name>i_idx_left</name></name></expr>]</index></name> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <name>i_value_l</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_value_l</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>p_sample</name><index>[<expr><name><name>p_effect</name><operator>-&gt;</operator><name>i_idx_right</name></name></expr>]</index></name> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <name>i_value_r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_value_r</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_sample</name> <operator>+=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>i_nb_chans</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>i_value_l</name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>i_value_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_value_r</name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>i_value_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>( <expr><name>i_value_l</name> <operator>&gt;</operator> <literal type="number">200</literal> <operator>*</operator> <name>M_PI_2</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_value_l</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <name>M_PI_2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>i_value_r</name> <operator>&gt;</operator> <literal type="number">200</literal> <operator>*</operator> <name>M_PI_2</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_value_r</name> <operator>=</operator> <literal type="number">200</literal> <operator>*</operator> <name>M_PI_2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>i_value</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_effect</name><operator>-&gt;</operator><name>p_data</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_effect</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_value</name> <operator>=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>p_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>i_value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i_value_l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>i_value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i_value_r</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name>i_value</name> <operator>=</operator> <name><name>p_effect</name><operator>-&gt;</operator><name>p_data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_value_l</name> <operator>&gt;</operator> <name><name>i_value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">6</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>i_value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i_value_l</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>i_value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>i_value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_value_r</name> <operator>&gt;</operator> <name><name>i_value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">6</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>i_value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i_value_r</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>i_value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>i_value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>teta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>teta_grad</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_x</name> <init>= <expr><name><name>p_effect</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">120</literal></expr></init></decl>;</decl_stmt> 

<for>for <control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>teta_grad</name> <operator>=</operator> <name>GRAD_ANGLE_MIN</name></expr>;</expr_stmt>
<for>for <control>( <init><expr><name>teta</name> <operator>=</operator> <operator>-</operator><name>M_PI_4</name></expr>;</init> <condition><expr><name>teta</name> <operator>&lt;=</operator> <name>M_PI_4</name></expr>;</condition> <incr><expr><name>teta</name> <operator>=</operator> <name>teta</name> <operator>+</operator> <literal type="number">0.003</literal></expr></incr> )</control>
<block>{<block_content>
<for>for <control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">140</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">150</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>i</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>teta</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>i</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>teta</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>start_x</name> <operator>+</operator> <literal type="number">240</literal> <operator>*</operator> <name>j</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>teta</name> <operator>&gt;=</operator> <name>teta_grad</name> <operator>+</operator> <name>GRAD_INCR</name> <operator>&amp;&amp;</operator> <name>teta_grad</name> <operator>&lt;=</operator> <name>GRAD_ANGLE_MAX</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>teta_grad</name> <operator>=</operator> <name>teta_grad</name> <operator>+</operator> <name>GRAD_INCR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>k</name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>+</operator> <name>x</name> <operator>)</operator> <operator>=</operator> <literal type="number">0x45</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>-</operator> <name>y</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>+</operator> <name>x</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>-</operator> <name>y</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>+</operator> <name>x</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator> <operator>=</operator> <literal type="number">0x4D</literal> <operator>+</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name>teta</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>i_value</name><index>[<expr><name>j</name></expr>]</index></name> <operator>/</operator> <literal type="number">200</literal> <operator>-</operator> <name>M_PI_4</name></expr>;</expr_stmt>
<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">150</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>i</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>teta</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>i</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>teta</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>start_x</name> <operator>+</operator> <literal type="number">240</literal> <operator>*</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>+</operator> <name>x</name> <operator>)</operator> <operator>=</operator> <literal type="number">0xAD</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>-</operator> <name>y</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>+</operator> <name>x</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator> <operator>=</operator> <literal type="number">0xFC</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>-</operator> <name>y</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>+</operator> <name>x</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator> <operator>=</operator> <literal type="number">0xAC</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>( <init><expr><name>teta</name> <operator>=</operator> <operator>-</operator><name>M_PI_2</name></expr>;</init> <condition><expr><name>teta</name> <operator>&lt;=</operator> <name>M_PI_2</name> <operator>+</operator> <literal type="number">0.01</literal></expr>;</condition> <incr><expr><name>teta</name> <operator>=</operator> <name>teta</name> <operator>+</operator> <literal type="number">0.003</literal></expr></incr> )</control>
<block>{<block_content>
<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>i</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>teta</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>i</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>teta</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>start_x</name> <operator>+</operator> <literal type="number">240</literal> <operator>*</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>+</operator> <name>x</name> <operator>)</operator> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>-</operator> <name>y</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>+</operator> <name>x</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator>
<operator>(</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>-</operator> <name>y</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>+</operator> <name>x</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>visual_cb_t</name></name></type> <name><name>effectv</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"scope"</literal></expr>, <expr><name>scope_Run</name></expr>, <expr><name>dummy_Free</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vuMeter"</literal></expr>, <expr><name>vuMeter_Run</name></expr>, <expr><name>dummy_Free</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"spectrum"</literal></expr>, <expr><name>spectrum_Run</name></expr>, <expr><name>spectrum_Free</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"spectrometer"</literal></expr>, <expr><name>spectrometer_Run</name></expr>, <expr><name>spectrometer_Free</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dummy"</literal></expr>, <expr><name>dummy_Run</name></expr>, <expr><name>dummy_Free</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>effectc</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>effectv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>effectv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
</unit>
