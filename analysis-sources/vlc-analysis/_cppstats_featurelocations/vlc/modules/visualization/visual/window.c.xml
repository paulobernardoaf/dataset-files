<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\visualization\visual\window.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"window_presets.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FT_A0</name></cpp:macro> <cpp:value>1.000f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FT_A1</name></cpp:macro> <cpp:value>1.930f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FT_A2</name></cpp:macro> <cpp:value>1.290f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FT_A3</name></cpp:macro> <cpp:value>0.388f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FT_A4</name></cpp:macro> <cpp:value>0.028f</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BH_A0</name></cpp:macro> <cpp:value>0.35875f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BH_A1</name></cpp:macro> <cpp:value>0.48829f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BH_A2</name></cpp:macro> <cpp:value>0.14128f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BH_A3</name></cpp:macro> <cpp:value>0.01168f</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>float</name></type> <name>bessi0</name><parameter_list>( <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>ax</name></decl>, <decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>y</name></decl>;</decl_stmt> 
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ax</name> <operator>=</operator> <call><name>fabsf</name><argument_list>( <argument><expr><name>x</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&lt;</operator> <literal type="number">3.75f</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>/</operator> <literal type="number">3.75</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>*=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <operator>(</operator> <literal type="number">3.5156229</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <operator>(</operator> <literal type="number">3.0899424</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <operator>(</operator> <literal type="number">1.2067492</literal>
<operator>+</operator> <name>y</name> <operator>*</operator> <operator>(</operator> <literal type="number">0.2659732</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <operator>(</operator> <literal type="number">0.360768e-1</literal>
<operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">0.45813e-2</literal> <operator>)</operator> <operator>)</operator> <operator>)</operator> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">3.75</literal> <operator>/</operator> <name>ax</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator> <call><name>exp</name><argument_list>( <argument><expr><name>ax</name></expr></argument> )</argument_list></call> <operator>/</operator> <call><name>sqrt</name><argument_list>( <argument><expr><name>ax</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>*</operator> <operator>(</operator> <literal type="number">0.39894228</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <operator>(</operator> <literal type="number">0.1328592e-1</literal>
<operator>+</operator> <name>y</name> <operator>*</operator> <operator>(</operator> <literal type="number">0.225319e-2</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <operator>(</operator> <operator>-</operator><literal type="number">0.157565e-2</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <operator>(</operator> <literal type="number">0.916281e-2</literal>
<operator>+</operator> <name>y</name> <operator>*</operator> <operator>(</operator> <operator>-</operator><literal type="number">0.2057706e-1</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <operator>(</operator> <literal type="number">0.2635537e-1</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <operator>(</operator> <operator>-</operator><literal type="number">0.1647633e-1</literal>
<operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">0.392377e-2</literal> <operator>)</operator> <operator>)</operator> <operator>)</operator> <operator>)</operator> <operator>)</operator> <operator>)</operator> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ans</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>window_get_param</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_aout</name></decl></parameter>, <parameter><decl><type><name>window_param</name> <modifier>*</modifier></type> <name>p_param</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>p_param</name><operator>-&gt;</operator><name>f_kaiser_alpha</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"effect-kaiser-param"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_preset</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"effect-fft-window"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_preset</name></expr> )</condition>
<block>{<block_content>
<goto>goto <name>no_preset</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_WINDOWS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_preset</name></expr></argument>, <argument><expr><name><name>window_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_preset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_param</name><operator>-&gt;</operator><name>wind_type</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_preset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>no_preset</name>:</label>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"No matching window preset found; using rectangular "</literal>
<literal type="string">"window (i.e. no window)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_param</name><operator>-&gt;</operator><name>wind_type</name></name> <operator>=</operator> <name>NONE</name></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>bool</name></type> <name>window_init</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_buffer_size</name></decl></parameter>, <parameter><decl><type><name>window_param</name> <modifier>*</modifier></type> <name>p_param</name></decl></parameter>,
<parameter><decl><type><name>window_context</name> <modifier>*</modifier></type> <name>p_ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type> <name>pf_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>window_type</name></type> <name>wind_type</name> <init>= <expr><name><name>p_param</name><operator>-&gt;</operator><name>wind_type</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>wind_type</name> <operator>!=</operator> <name>HANN</name> <operator>&amp;&amp;</operator> <name>wind_type</name> <operator>!=</operator> <name>FLATTOP</name>
<operator>&amp;&amp;</operator> <name>wind_type</name> <operator>!=</operator> <name>BLACKMANHARRIS</name>
<operator>&amp;&amp;</operator> <name>wind_type</name> <operator>!=</operator> <name>KAISER</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>i_buffer_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pf_table</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_buffer_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>pf_table</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pf_table</name></expr> )</condition>
<block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_buffer_size_minus_1</name> <init>= <expr><name>i_buffer_size</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name>wind_type</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>HANN</name></expr>:</case>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_buffer_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f_val</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>i</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>i_buffer_size_minus_1</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pf_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>-</operator> <literal type="number">0.5f</literal> <operator>*</operator> <call><name>cosf</name><argument_list>( <argument><expr><literal type="number">2.0f</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>M_PI</name> <operator>*</operator> <name>f_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>FLATTOP</name></expr>:</case>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_buffer_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f_val</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>i</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>i_buffer_size_minus_1</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pf_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>FT_A0</name>
<operator>-</operator> <name>FT_A1</name> <operator>*</operator> <call><name>cosf</name><argument_list>( <argument><expr><literal type="number">2.0f</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>M_PI</name> <operator>*</operator> <name>f_val</name></expr></argument> )</argument_list></call>
<operator>+</operator> <name>FT_A2</name> <operator>*</operator> <call><name>cosf</name><argument_list>( <argument><expr><literal type="number">4.0f</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>M_PI</name> <operator>*</operator> <name>f_val</name></expr></argument> )</argument_list></call>
<operator>-</operator> <name>FT_A3</name> <operator>*</operator> <call><name>cosf</name><argument_list>( <argument><expr><literal type="number">6.0f</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>M_PI</name> <operator>*</operator> <name>f_val</name></expr></argument> )</argument_list></call>
<operator>+</operator> <name>FT_A4</name> <operator>*</operator> <call><name>cosf</name><argument_list>( <argument><expr><literal type="number">8.0f</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>M_PI</name> <operator>*</operator> <name>f_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>BLACKMANHARRIS</name></expr>:</case>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_buffer_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f_val</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>i</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>i_buffer_size_minus_1</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pf_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>BH_A0</name>
<operator>-</operator> <name>BH_A1</name> <operator>*</operator> <call><name>cosf</name><argument_list>( <argument><expr><literal type="number">2.0f</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>M_PI</name> <operator>*</operator> <name>f_val</name></expr></argument> )</argument_list></call>
<operator>+</operator> <name>BH_A2</name> <operator>*</operator> <call><name>cosf</name><argument_list>( <argument><expr><literal type="number">4.0f</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>M_PI</name> <operator>*</operator> <name>f_val</name></expr></argument> )</argument_list></call>
<operator>-</operator> <name>BH_A3</name> <operator>*</operator> <call><name>cosf</name><argument_list>( <argument><expr><literal type="number">6.0f</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>M_PI</name> <operator>*</operator> <name>f_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>KAISER</name></expr>:</case>
<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>f_pialph</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>M_PI</name> <operator>*</operator> <name><name>p_param</name><operator>-&gt;</operator><name>f_kaiser_alpha</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_bessi0_pialph</name> <init>= <expr><call><name>bessi0</name><argument_list>( <argument><expr><name>f_pialph</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_buffer_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f_val</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>i</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>i_buffer_size_minus_1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_term_to_square</name> <init>= <expr><literal type="number">2.0f</literal> <operator>*</operator> <name>f_val</name> <operator>-</operator> <literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_sqd_term</name> <init>= <expr><name>f_term_to_square</name> <operator>*</operator> <name>f_term_to_square</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f_sqr_term</name> <init>= <expr><call><name>sqrtf</name><argument_list>( <argument><expr><literal type="number">1.0f</literal> <operator>-</operator> <name>f_sqd_term</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pf_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>bessi0</name><argument_list>( <argument><expr><name>f_pialph</name> <operator>*</operator> <name>f_sqr_term</name></expr></argument> )</argument_list></call> <operator>/</operator> <name>f_bessi0_pialph</name></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block>
<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<label><name>exit</name>:</label>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>pf_window_table</name></name> <operator>=</operator> <name>pf_table</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>=</operator> <name>i_buffer_size</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>window_scale_in_place</name><parameter_list>( <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type> <name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>window_context</name> <modifier>*</modifier></type> <name>p_ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>pf_window_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>window_close</name><parameter_list>( <parameter><decl><type><name>window_context</name> <modifier>*</modifier></type> <name>p_ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_ctx</name><operator>-&gt;</operator><name>pf_window_table</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>pf_window_table</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>pf_window_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
