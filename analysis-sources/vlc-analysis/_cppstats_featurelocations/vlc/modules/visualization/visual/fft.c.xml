<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\visualization\visual\fft.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>M_PI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>M_PI</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.14159265358979323846</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fft_prepare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sound_sample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type> <name>re</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type> <name>im</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>bitReverse</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fft_calculate</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type> <name>re</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type> <name>im</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>costable</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>sintable</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fft_output</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>re</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>im</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>reverseBits</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>initial</name></decl></parameter>)</parameter_list>;</function_decl>











<function><type><name>fft_state</name> <modifier>*</modifier></type><name>visual_fft_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fft_state</name> <modifier>*</modifier></type><name>p_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_state</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_state</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator> <name>p_state</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FFT_BUFFER_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_state</name><operator>-&gt;</operator><name>bitReverse</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>reverseBits</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FFT_BUFFER_SIZE</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>j</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>PI</name> <operator>*</operator> <name>i</name> <operator>/</operator> <name>FFT_BUFFER_SIZE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_state</name><operator>-&gt;</operator><name>costable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_state</name><operator>-&gt;</operator><name>sintable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>p_state</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>void</name></type> <name>fft_perform</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sound_sample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>fft_state</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>fft_prepare</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>bitReverse</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fft_calculate</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>costable</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>sintable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fft_output</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>imag</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>fft_close</name><parameter_list>(<parameter><decl><type><name>fft_state</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>fft_prepare</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>sound_sample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type> <name>re</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type> <name>im</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>bitReverse</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_real</name> <init>= <expr><name>re</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_imag</name> <init>= <expr><name>im</name></expr></init></decl>;</decl_stmt>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FFT_BUFFER_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_real</name><operator>++</operator> <operator>=</operator> <name><name>input</name><index>[<expr><name><name>bitReverse</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_imag</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>fft_output</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type> <name>re</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type> <name>im</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_output</name> <init>= <expr><name>output</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_real</name> <init>= <expr><name>re</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_imag</name> <init>= <expr><name>im</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><name>output</name> <operator>+</operator> <name>FFT_BUFFER_SIZE</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>p_output</name> <operator>&lt;=</operator> <name>p_end</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_output</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>p_real</name> <operator>*</operator> <operator>*</operator><name>p_real</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>p_imag</name> <operator>*</operator> <operator>*</operator><name>p_imag</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p_output</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>p_real</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>p_imag</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><operator>*</operator><name>output</name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_end</name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>fft_calculate</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type> <name>re</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type> <name>im</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>costable</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>sintable</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>exchanges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>fact_real</name></decl>, <decl><type ref="prev"/><name>fact_imag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tmp_real</name></decl>, <decl><type ref="prev"/><name>tmp_imag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>factfact</name></decl>;</decl_stmt>


<expr_stmt><expr><name>exchanges</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>factfact</name> <operator>=</operator> <name>FFT_BUFFER_SIZE</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>FFT_BUFFER_SIZE_LOG</name></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>




<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>!=</operator> <name>exchanges</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>





<expr_stmt><expr><name>fact_real</name> <operator>=</operator> <name><name>costable</name><index>[<expr><name>j</name> <operator>*</operator> <name>factfact</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_imag</name> <operator>=</operator> <name><name>sintable</name><index>[<expr><name>j</name> <operator>*</operator> <name>factfact</name></expr>]</index></name></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <name>j</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>FFT_BUFFER_SIZE</name></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <name>exchanges</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k1</name> <init>= <expr><name>k</name> <operator>+</operator> <name>exchanges</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp_real</name> <operator>=</operator> <name>fact_real</name> <operator>*</operator> <name><name>re</name><index>[<expr><name>k1</name></expr>]</index></name> <operator>-</operator> <name>fact_imag</name> <operator>*</operator> <name><name>im</name><index>[<expr><name>k1</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_imag</name> <operator>=</operator> <name>fact_real</name> <operator>*</operator> <name><name>im</name><index>[<expr><name>k1</name></expr>]</index></name> <operator>+</operator> <name>fact_imag</name> <operator>*</operator> <name><name>re</name><index>[<expr><name>k1</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>re</name><index>[<expr><name>k1</name></expr>]</index></name> <operator>=</operator> <name><name>re</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name>tmp_real</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>im</name><index>[<expr><name>k1</name></expr>]</index></name> <operator>=</operator> <name><name>im</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name>tmp_imag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>re</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <name>tmp_real</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>im</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <name>tmp_imag</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>exchanges</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>factfact</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>reverseBits</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>initial</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>reversed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>loop</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>loop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>loop</name> <operator>&lt;</operator> <name>FFT_BUFFER_SIZE_LOG</name></expr>;</condition> <incr><expr><name>loop</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>reversed</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>reversed</name> <operator>+=</operator> <operator>(</operator><name>initial</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>initial</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>reversed</name></expr>;</return>
</block_content>}</block></function>
</unit>
