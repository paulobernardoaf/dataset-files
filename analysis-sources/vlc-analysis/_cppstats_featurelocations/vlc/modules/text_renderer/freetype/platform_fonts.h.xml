<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\text_renderer\freetype\platform_fonts.h">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_FONTS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_FONTS_H</name></cpp:macro></cpp:define>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"freetype.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_FONT_FILE</name></cpp:macro> <cpp:value>"/System/Library/Fonts/HelveticaNeue.dfont"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_FAMILY</name></cpp:macro> <cpp:value>"Helvetica Neue"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_MONOSPACE_FONT_FILE</name></cpp:macro> <cpp:value>"/System/Library/Fonts/Monaco.dfont"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_MONOSPACE_FAMILY</name></cpp:macro> <cpp:value>"Monaco"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_FONT_FILE</name></cpp:macro> <cpp:value>"arial.ttf"</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_FAMILY</name></cpp:macro> <cpp:value>"Arial"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_MONOSPACE_FONT_FILE</name></cpp:macro> <cpp:value>"cour.ttf"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_MONOSPACE_FAMILY</name></cpp:macro> <cpp:value>"Courier New"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__OS2__</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_FONT_FILE</name></cpp:macro> <cpp:value>"/psfonts/tnrwt_k.ttf"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_FAMILY</name></cpp:macro> <cpp:value>"Times New Roman WT K"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_MONOSPACE_FONT_FILE</name></cpp:macro> <cpp:value>"/psfonts/mtsansdk.ttf"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_MONOSPACE_FAMILY</name></cpp:macro> <cpp:value>"Monotype Sans Duospace WT K"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__ANDROID__</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_FONT_FILE</name></cpp:macro> <cpp:value>"/system/fonts/Roboto-Regular.ttf"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_FAMILY</name></cpp:macro> <cpp:value>"sans-serif"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_MONOSPACE_FONT_FILE</name></cpp:macro> <cpp:value>"/system/fonts/DroidSansMono.ttf"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_MONOSPACE_FAMILY</name></cpp:macro> <cpp:value>"Monospace"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_FONT_FILE</name></cpp:macro> <cpp:value>"/usr/share/fonts/truetype/freefont/FreeSerifBold.ttf"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_FAMILY</name></cpp:macro> <cpp:value>"Serif Bold"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_MONOSPACE_FONT_FILE</name></cpp:macro> <cpp:value>"/usr/share/fonts/truetype/freefont/FreeMono.ttf"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_DEFAULT_MONOSPACE_FAMILY</name></cpp:macro> <cpp:value>"Monospace"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_FONT_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_FONT_FILE</name></cpp:macro> <cpp:value>SYSTEM_DEFAULT_FONT_FILE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_FAMILY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_FAMILY</name></cpp:macro> <cpp:value>SYSTEM_DEFAULT_FAMILY</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_MONOSPACE_FONT_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MONOSPACE_FONT_FILE</name></cpp:macro> <cpp:value>SYSTEM_DEFAULT_MONOSPACE_FONT_FILE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_MONOSPACE_FAMILY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MONOSPACE_FAMILY</name></cpp:macro> <cpp:value>SYSTEM_DEFAULT_MONOSPACE_FAMILY</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<typedef>typedef <type><name><name>struct</name> <name>vlc_font_t</name></name></type> <name>vlc_font_t</name>;</typedef>
<struct>struct <name>vlc_font_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_font_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt> 




<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fontfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_bold</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_italic</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FT_Face</name></type> <name>p_face</name></decl>;</decl_stmt> 
}</block>;</struct>




<struct>struct <name>vlc_family_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt> 










<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_font_t</name> <modifier>*</modifier></type><name>p_fonts</name></decl>;</decl_stmt> 
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FB_LIST_ATTACHMENTS</name></cpp:macro> <cpp:value>"attachments"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FB_LIST_DEFAULT</name></cpp:macro> <cpp:value>"default"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FB_NAME</name></cpp:macro> <cpp:value>"fallback"</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FONTCONFIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>FontConfig_GetFallbacks</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter>,
<parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>vlc_family_t</name> <modifier>*</modifier></type><name>FontConfig_GetFamily</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>FontConfig_Prepare</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>FontConfig_Unprepare</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>const</specifier> <name>vlc_family_t</name> <modifier>*</modifier></type><name>DWrite_GetFamily</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>DWrite_GetFallbacks</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter>,
<parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>InitDWrite</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ReleaseDWrite</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>DWrite_GetFontStream</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_index</name></decl></parameter>, <parameter><decl><type><name>FT_Stream</name> <modifier>*</modifier></type><name>pp_stream</name></decl></parameter> )</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>
<function_decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>Win32_GetFallbacks</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter>,
<parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>vlc_family_t</name> <modifier>*</modifier></type><name>Win32_GetFamily</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>CoreText_GetFallbacks</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter>, <parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>vlc_family_t</name> <modifier>*</modifier></type><name>CoreText_GetFamily</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>const</specifier> <name>vlc_family_t</name> <modifier>*</modifier></type><name>Android_GetFamily</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>Android_GetFallbacks</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter>,
<parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>Android_Prepare</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><name>char</name><modifier>*</modifier></type> <name>Dummy_Select</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>family</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_bold</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_italic</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_idx</name></decl></parameter>, <parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>File_Select</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Dummy_Select(NULL, a, 0, 0, NULL, 0)</cpp:value></cpp:define>

<function_decl><type><name>char</name><modifier>*</modifier></type> <name>Generic_Select</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>family</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_bold</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_italic</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_idx</name></decl></parameter>, <parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>;</function_decl>
























<function_decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>NewFamily</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter>,
<parameter><decl><type><name>vlc_family_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_list</name></decl></parameter>, <parameter><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type><name>p_dict</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_key</name></decl></parameter> )</parameter_list>;</function_decl>
















<function_decl><type><name>vlc_font_t</name> <modifier>*</modifier></type><name>NewFont</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fontfile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_index</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_bold</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_italic</name></decl></parameter>,
<parameter><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter> )</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>FreeFamiliesAndFonts</name><parameter_list>( <parameter><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name></decl></parameter> )</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>FreeFamilies</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_families</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>;</function_decl>






















<function_decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>InitDefaultList</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ppsz_default</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>;</function_decl>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_PLATFORM_FONTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>DumpFamily</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_dump_fonts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_max_families</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DumpDictionary</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_dictionary_t</name> <modifier>*</modifier></type><name>p_dict</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_dump_fonts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_max_families</name></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><name>char</name><modifier>*</modifier></type> <name>ToLower</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_src</name></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>ConvertToLiveSize</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl></parameter> )</parameter_list>;</function_decl>



<function_decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>SearchFallbacks</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_fallbacks</name></decl></parameter>,
<parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>FT_Face</name></type> <name>GetFace</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>vlc_font_t</name> <modifier>*</modifier></type><name>p_font</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
