<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\text_renderer\freetype\fonts\fontconfig.c">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fontconfig/fontconfig.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../platform_fonts.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>FcConfig</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uintptr_t</name></type> <name>refs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_mutex_t</name></type> <name>lock</name> <init>= <expr><name>VLC_STATIC_MUTEX</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>FontConfig_Prepare</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>refs</name><operator>++</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Building font databases."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>FcInitLoadConfigAndFonts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>config</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>refs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_dialog_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dialog_progress_bar_t</name> <modifier>*</modifier></type><name>p_dialog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>FcInitLoadConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>=
<expr><call><name>vlc_dialog_display_progress</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Building font cache"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Please wait while your font cache is rebuilt.\n"</literal>
<literal type="string">"This should take less than a few minutes."</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_dialog_id</name> <operator>=</operator> <ternary><condition><expr><name>i_ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>i_ret</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FcConfigBuildFonts</name><argument_list>( <argument><expr><name>config</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>FcFalse</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dialog_id</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_dialog_cancel</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_dialog_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Took %"</literal> <name>PRId64</name> <literal type="string">" microseconds"</literal></expr></argument>, <argument><expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name>ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>config</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>FontConfig_Unprepare</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>refs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>--</operator><name>refs</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FcConfigDestroy</name><argument_list>( <argument><expr><name>config</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>vlc_family_t</name> <modifier>*</modifier></type><name>FontConfig_GetFamily</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_lc</name> <init>= <expr><call><name>ToLower</name><argument_list>( <argument><expr><name>psz_family</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>psz_lc</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name> <init>=
<expr><call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_family</name> <operator>!=</operator> <name>kVLCDictionaryNotFound</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_family</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <call><name>NewFamily</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_families</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_family</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> 
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name> <specifier>const</specifier></type> <name>b_bold</name> <init>= <expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name> <specifier>const</specifier></type> <name>b_italic</name> <init>= <expr><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FcResult</name></type> <name>result</name> <init>= <expr><name>FcResultMatch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FcPattern</name> <modifier>*</modifier></type><name>pat</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_pat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FcChar8</name><modifier>*</modifier></type> <name>val_s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FcBool</name></type> <name>val_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fontfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>FcPatternCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pat</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>FcPatternAddString</name><argument_list>( <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>FC_FAMILY</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>FcChar8</name><operator>*</operator><operator>)</operator> <name>psz_family</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FcPatternAddBool</name><argument_list>( <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>FC_OUTLINE</name></expr></argument>, <argument><expr><name>FcTrue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FcPatternAddInteger</name><argument_list>( <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>FC_SLANT</name></expr></argument>, <argument><expr><ternary><condition><expr><name>b_italic</name></expr> ?</condition><then> <expr><name>FC_SLANT_ITALIC</name></expr> </then><else>: <expr><name>FC_SLANT_ROMAN</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FcPatternAddInteger</name><argument_list>( <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>FC_WEIGHT</name></expr></argument>, <argument><expr><ternary><condition><expr><name>b_bold</name></expr> ?</condition><then> <expr><name>FC_WEIGHT_EXTRABOLD</name></expr> </then><else>: <expr><name>FC_WEIGHT_NORMAL</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>FcDefaultSubstitute</name><argument_list>( <argument><expr><name>pat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>FcConfigSubstitute</name><argument_list>( <argument><expr><name>config</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>FcMatchPattern</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FcPatternDestroy</name><argument_list>( <argument><expr><name>pat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_pat</name> <operator>=</operator> <call><name>FcFontMatch</name><argument_list>( <argument><expr><name>config</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FcPatternDestroy</name><argument_list>( <argument><expr><name>pat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pat</name> <operator>||</operator> <name>result</name> <operator>==</operator> <name>FcResultNoMatch</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>FcResultMatch</name> <operator>!=</operator> <call><name>FcPatternGetBool</name><argument_list>( <argument><expr><name>p_pat</name></expr></argument>, <argument><expr><name>FC_OUTLINE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val_b</name></expr></argument> )</argument_list></call> <operator>)</operator>
<operator>||</operator> <operator>(</operator> <name>val_b</name> <operator>!=</operator> <name>FcTrue</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FcPatternDestroy</name><argument_list>( <argument><expr><name>p_pat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>FcResultMatch</name> <operator>!=</operator> <call><name>FcPatternGetInteger</name><argument_list>( <argument><expr><name>p_pat</name></expr></argument>, <argument><expr><name>FC_INDEX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_index</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>FcResultMatch</name> <operator>!=</operator> <call><name>FcPatternGetString</name><argument_list>( <argument><expr><name>p_pat</name></expr></argument>, <argument><expr><name>FC_FAMILY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val_s</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FcPatternDestroy</name><argument_list>( <argument><expr><name>p_pat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>FcResultMatch</name> <operator>==</operator> <call><name>FcPatternGetString</name><argument_list>( <argument><expr><name>p_pat</name></expr></argument>, <argument><expr><name>FC_FILE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val_s</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_fontfile</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>val_s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FcPatternDestroy</name><argument_list>( <argument><expr><name>p_pat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_fontfile</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>NewFont</name><argument_list>( <argument><expr><name>psz_fontfile</name></expr></argument>, <argument><expr><name>i_index</name></expr></argument>, <argument><expr><name>b_bold</name></expr></argument>, <argument><expr><name>b_italic</name></expr></argument>, <argument><expr><name>p_family</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>p_family</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>FontConfig_GetFallbacks</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter>,
<parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>codepoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_lc</name> <init>= <expr><call><name>ToLower</name><argument_list>( <argument><expr><name>psz_family</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>psz_lc</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fallback_map</name></name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_family</name> <operator>!=</operator> <name>kVLCDictionaryNotFound</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_family</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_family</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_last_name</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FcPattern</name> <modifier>*</modifier></type><name>p_pattern</name> <init>= <expr><call><name>FcPatternCreate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FcValue</name></type> <name>family</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>family</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>FcTypeString</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>family</name><operator>.</operator><name>u</name><operator>.</operator><name>s</name></name> <operator>=</operator> <operator>(</operator> <specifier>const</specifier> <name>FcChar8</name><operator>*</operator> <operator>)</operator> <name>psz_family</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FcPatternAdd</name><argument_list>( <argument><expr><name>p_pattern</name></expr></argument>, <argument><expr><name>FC_FAMILY</name></expr></argument>, <argument><expr><name>family</name></expr></argument>, <argument><expr><name>FcFalse</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>FcConfigSubstitute</name><argument_list>( <argument><expr><name>config</name></expr></argument>, <argument><expr><name>p_pattern</name></expr></argument>, <argument><expr><name>FcMatchPattern</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>FcTrue</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FcDefaultSubstitute</name><argument_list>( <argument><expr><name>p_pattern</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FcResult</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FcFontSet</name><modifier>*</modifier></type> <name>p_font_set</name> <init>= <expr><call><name>FcFontSort</name><argument_list>( <argument><expr><name>config</name></expr></argument>, <argument><expr><name>p_pattern</name></expr></argument>, <argument><expr><name>FcTrue</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_font_set</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_font_set</name><operator>-&gt;</operator><name>nfont</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FcPatternGetString</name><argument_list>( <argument><expr><name><name>p_font_set</name><operator>-&gt;</operator><name>fonts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>FC_FAMILY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator> <name>FcChar8</name><operator>*</operator><operator>*</operator> <operator>)</operator><operator>(</operator> <operator>&amp;</operator><name>psz_name</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_last_name</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_temp</name> <init>= <expr><call><name>NewFamily</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>p_family</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_temp</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FcFontSetDestroy</name><argument_list>( <argument><expr><name>p_font_set</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FcPatternDestroy</name><argument_list>( <argument><expr><name>p_pattern</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_family</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FreeFamilies</name><argument_list>( <argument><expr><name>p_family</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_last_name</name> <operator>=</operator> <name><name>p_temp</name><operator>-&gt;</operator><name>psz_name</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>FcFontSetDestroy</name><argument_list>( <argument><expr><name>p_font_set</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>FcPatternDestroy</name><argument_list>( <argument><expr><name>p_pattern</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_family</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fallback_map</name></name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument>, <argument><expr><name>p_family</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_family</name></expr>;</return>
</block_content>}</block></function>
</unit>
