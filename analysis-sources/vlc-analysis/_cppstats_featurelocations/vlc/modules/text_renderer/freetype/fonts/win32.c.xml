<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\text_renderer\freetype\fonts\win32.c">




































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ft2build.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> FT_SFNT_NAMES_H</cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlobj.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;usp10.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_FONTCONFIG</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../platform_fonts.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FONT_DIR_NT</name></cpp:macro> <cpp:value>TEXT("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts")</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>AppendFamily</name><parameter_list>( <parameter><decl><type><name>vlc_family_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_list</name></decl></parameter>, <parameter><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<while>while<condition>( <expr><operator>*</operator><name>pp_list</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pp_list</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator> <operator>*</operator><name>pp_list</name> <operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>pp_list</name> <operator>=</operator> <name>p_family</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>Trim</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_first_char</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_last_char</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_first_char</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_first_char</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_last_char</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>psz_text</name><index>[ <expr><name>i_last_char</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_first_char</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_text</name> <operator>=</operator> <name>psz_text</name> <operator>+</operator> <name>i_first_char</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>psz_text</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ConcatenatedIndex</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_haystack</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_needle</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_family</name> <init>= <expr><name>psz_haystack</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_terminator</name> <init>= <expr><name>psz_haystack</name> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_haystack</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>psz_family</name> <operator>&lt;</operator> <name>psz_terminator</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_amp</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_family</name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_amp</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_amp</name> <operator>=</operator> <name>psz_terminator</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>psz_amp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_family</name> <operator>=</operator> <call><name>Trim</name><argument_list>( <argument><expr><name>psz_family</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_family</name></expr></argument>, <argument><expr><name>psz_needle</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_index</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_family</name> <operator>=</operator> <name>psz_amp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i_index</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GetFileFontByName</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type> <name>font_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>psz_filename</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_index</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>vbuffer</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>dbuffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>FONT_DIR_NT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>KEY_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hKey</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>ERROR_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>font_name_temp</name> <init>= <expr><call><name>FromWide</name><argument_list>( <argument><expr><name>font_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>vbuflen</name> <init>= <expr><name>MAX_PATH</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dbuflen</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>i_result</name> <init>= <expr><call><name>RegEnumValue</name><argument_list>( <argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>vbuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbuflen</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><name>dbuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbuflen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_result</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>font_name_temp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>( <argument><expr><name>hKey</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><call><name>FromWide</name><argument_list>( <argument><expr><name>vbuffer</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>,<argument><expr><literal type="char">'('</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>s</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>!=</operator> <name>psz_value</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_concat_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_concat_idx</name> <operator>=</operator> <call><name>ConcatenatedIndex</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><name>font_name_temp</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>i_index</name> <operator>=</operator> <name>i_concat_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>psz_filename</name> <operator>=</operator> <call><name>FromWide</name><argument_list>( <argument><expr><name>dbuffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>font_name_temp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>( <argument><expr><name>hKey</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>GetWindowsFontPath</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wdir</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>S_OK</name> <operator>!=</operator> <call><name>SHGetFolderPathW</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CSIDL_FONTS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SHGFP_TYPE_CURRENT</name></expr></argument>, <argument><expr><name>wdir</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>GetWindowsDirectoryW</name><argument_list>( <argument><expr><name>wdir</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wcscat</name><argument_list>( <argument><expr><name>wdir</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"\\fonts"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>FromWide</name><argument_list>( <argument><expr><name>wdir</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type> <name>GetSfntNameEntry</name><parameter_list>( <parameter><decl><type><name>FT_Byte</name> <modifier>*</modifier></type><name>p_name_data</name></decl></parameter>, <parameter><decl><type><name>FT_Byte</name> <modifier>*</modifier></type><name>p_storage_start</name></decl></parameter>,
<parameter><decl><type><name>FT_Byte</name> <modifier>*</modifier></type><name>p_table_end</name></decl></parameter>, <parameter><decl><type><name>FT_SfntName</name> <modifier>*</modifier></type><name>p_sfnt_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_string_len</name> <init>= <expr><call><name>U16_AT</name><argument_list>( <argument><expr><name>p_name_data</name> <operator>+</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_string_offset</name> <init>= <expr><call><name>U16_AT</name><argument_list>( <argument><expr><name>p_name_data</name> <operator>+</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_string_len</name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name>p_storage_start</name> <operator>+</operator> <name>i_string_offset</name> <operator>+</operator> <name>i_string_len</name> <operator>&gt;</operator> <name>p_table_end</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sfnt_name</name><operator>-&gt;</operator><name>platform_id</name></name> <operator>=</operator> <call><name>U16_AT</name><argument_list>( <argument><expr><name>p_name_data</name> <operator>+</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sfnt_name</name><operator>-&gt;</operator><name>encoding_id</name></name> <operator>=</operator> <call><name>U16_AT</name><argument_list>( <argument><expr><name>p_name_data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sfnt_name</name><operator>-&gt;</operator><name>language_id</name></name> <operator>=</operator> <call><name>U16_AT</name><argument_list>( <argument><expr><name>p_name_data</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sfnt_name</name><operator>-&gt;</operator><name>name_id</name></name> <operator>=</operator> <call><name>U16_AT</name><argument_list>( <argument><expr><name>p_name_data</name> <operator>+</operator> <literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sfnt_name</name><operator>-&gt;</operator><name>string_len</name></name> <operator>=</operator> <name>i_string_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sfnt_name</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <name>p_storage_start</name> <operator>+</operator> <name>i_string_offset</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>int</name></type> <name>GetSfntNameString</name><parameter_list>( <parameter><decl><type><name>FT_Byte</name> <modifier>*</modifier></type><name>p_table</name></decl></parameter>, <parameter><decl><type><name>FT_UInt</name></type> <name>i_size</name></decl></parameter>, <parameter><decl><type><name>FT_UShort</name></type> <name>i_platform_id</name></decl></parameter>,
<parameter><decl><type><name>FT_UShort</name></type> <name>i_encoding_id</name></decl></parameter>, <parameter><decl><type><name>FT_UShort</name></type> <name>i_name_id</name></decl></parameter>, <parameter><decl><type><name>FT_UShort</name></type> <name>i_language_id</name></decl></parameter>,
<parameter><decl><type><name>FT_Byte</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_name</name></decl></parameter>, <parameter><decl><type><name>FT_UInt</name> <modifier>*</modifier></type><name>i_name_length</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_name_count</name> <init>= <expr><call><name>U16_AT</name><argument_list>( <argument><expr><name>p_table</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_storage_offset</name> <init>= <expr><call><name>U16_AT</name><argument_list>( <argument><expr><name>p_table</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Byte</name> <modifier>*</modifier></type><name>p_storage</name> <init>= <expr><name>p_table</name> <operator>+</operator> <name>i_storage_offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Byte</name> <modifier>*</modifier></type><name>p_names</name> <init>= <expr><name>p_table</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_entry_size</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_name_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>FT_SfntName</name></type> <name>sfnt_name</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>GetSfntNameEntry</name><argument_list>( <argument><expr><name>p_names</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>i_entry_size</name></expr></argument>, <argument><expr><name>p_storage</name></expr></argument>, <argument><expr><name>p_table</name> <operator>+</operator> <name>i_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sfnt_name</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sfnt_name</name><operator>.</operator><name>platform_id</name></name> <operator>==</operator> <name>i_platform_id</name> <operator>&amp;&amp;</operator> <name><name>sfnt_name</name><operator>.</operator><name>encoding_id</name></name> <operator>==</operator> <name>i_encoding_id</name>
<operator>&amp;&amp;</operator> <name><name>sfnt_name</name><operator>.</operator><name>name_id</name></name> <operator>==</operator> <name>i_name_id</name> <operator>&amp;&amp;</operator> <name><name>sfnt_name</name><operator>.</operator><name>language_id</name></name> <operator>==</operator> <name>i_language_id</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>i_name_length</name> <operator>=</operator> <name><name>sfnt_name</name><operator>.</operator><name>string_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_name</name> <operator>=</operator> <name><name>sfnt_name</name><operator>.</operator><name>string</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>GetFullEnglishName</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>ENUMLOGFONTEX</name> <modifier>*</modifier></type><name>lpelfe</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>HFONT</name></type> <name>hFont</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>hDc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Byte</name> <modifier>*</modifier></type><name>p_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>psz_result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hFont</name> <operator>=</operator> <call><name>CreateFontIndirect</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>lpelfe</name><operator>-&gt;</operator><name>elfLogFont</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>hFont</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hDc</name> <operator>=</operator> <call><name>CreateCompatibleDC</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>hDc</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>( <argument><expr><name>hFont</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>HFONT</name></type> <name>hOriginalFont</name> <init>= <expr><operator>(</operator> <name>HFONT</name> <operator>)</operator> <call><name>SelectObject</name><argument_list>( <argument><expr><name>hDc</name></expr></argument>, <argument><expr><name>hFont</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_name_tag</name> <init>= <expr><call><name>ntoh32</name><argument_list>( <argument><expr><operator>(</operator> <name>uint32_t</name> <operator>)</operator> <literal type="char">'n'</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal>
<operator>|</operator> <operator>(</operator> <name>uint32_t</name> <operator>)</operator> <literal type="char">'a'</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal>
<operator>|</operator> <operator>(</operator> <name>uint32_t</name> <operator>)</operator> <literal type="char">'m'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal>
<operator>|</operator> <operator>(</operator> <name>uint32_t</name> <operator>)</operator> <literal type="char">'e'</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><call><name>GetFontData</name><argument_list>( <argument><expr><name>hDc</name></expr></argument>, <argument><expr><name>i_name_tag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_table</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_table</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>GetFontData</name><argument_list>( <argument><expr><name>hDc</name></expr></argument>, <argument><expr><name>i_name_tag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_table</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>FT_Byte</name> <modifier>*</modifier></type><name>p_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_UInt</name></type> <name>i_name_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><call><name>GetSfntNameString</name><argument_list>( <argument><expr><name>p_table</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x409</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_name_length</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_length_in_wchars</name> <init>= <expr><name>i_name_length</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_length_in_wchars</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>psz_name</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_name</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_length_in_wchars</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>psz_name</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <call><name>U16_AT</name><argument_list>( <argument><expr><name>p_name</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>psz_name</name><index>[ <expr><name>i_length_in_wchars</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_result</name> <operator>=</operator> <name>psz_name</name></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_table</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SelectObject</name><argument_list>( <argument><expr><name>hDc</name></expr></argument>, <argument><expr><name>hOriginalFont</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>( <argument><expr><name>hFont</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteDC</name><argument_list>( <argument><expr><name>hDc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>CALLBACK</name></type> <name>EnumFontCallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ENUMLOGFONTEX</name> <modifier>*</modifier></type><name>lpelfe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>NEWTEXTMETRICEX</name> <modifier>*</modifier></type><name>metric</name></decl></parameter>,
<parameter><decl><type><name>DWORD</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>metric</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>RASTER_FONTTYPE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name> <init>= <expr><operator>(</operator> <name>vlc_family_t</name> <operator>*</operator> <operator>)</operator> <name>lParam</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_bold</name> <init>= <expr><operator>(</operator> <name><name>lpelfe</name><operator>-&gt;</operator><name>elfLogFont</name><operator>.</operator><name>lfWeight</name></name> <operator>==</operator> <name>FW_BOLD</name> <operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_italic</name> <init>= <expr><operator>(</operator> <name><name>lpelfe</name><operator>-&gt;</operator><name>elfLogFont</name><operator>.</operator><name>lfItalic</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>






<for>for<control>( <init><decl><type><name>vlc_font_t</name> <modifier>*</modifier></type><name>p_font</name> <init>= <expr><name><name>p_family</name><operator>-&gt;</operator><name>p_fonts</name></name></expr></init></decl>;</init> <condition><expr><name>p_font</name></expr>;</condition> <incr><expr><name>p_font</name> <operator>=</operator> <name><name>p_font</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>!</operator><name><name>p_font</name><operator>-&gt;</operator><name>b_bold</name></name> <operator>==</operator> <operator>!</operator><operator>!</operator><name>b_bold</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>!</operator><name><name>p_font</name><operator>-&gt;</operator><name>b_italic</name></name> <operator>==</operator> <operator>!</operator><operator>!</operator><name>b_italic</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fontfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>GetFileFontByName</name><argument_list>( <argument><expr><name><name>lpelfe</name><operator>-&gt;</operator><name>elfFullName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_index</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>psz_english_name</name> <init>= <expr><call><name>GetFullEnglishName</name><argument_list>( <argument><expr><name>lpelfe</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_english_name</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>GetFileFontByName</name><argument_list>( <argument><expr><name>psz_english_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_index</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_english_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_english_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><name>DIR_SEP_CHAR</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_fontfile</name> <operator>=</operator> <name>psz_filename</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_win_fonts_path</name> <init>= <expr><call><name>GetWindowsFontPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_fontfile</name></expr></argument>, <argument><expr><literal type="string">"%s\\%s"</literal></expr></argument>, <argument><expr><name>psz_win_fonts_path</name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_win_fonts_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_win_fonts_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>NewFont</name><argument_list>( <argument><expr><name>psz_fontfile</name></expr></argument>, <argument><expr><name>i_index</name></expr></argument>, <argument><expr><name>b_bold</name></expr></argument>, <argument><expr><name>b_italic</name></expr></argument>, <argument><expr><name>p_family</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>vlc_family_t</name> <modifier>*</modifier></type><name>Win32_GetFamily</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_lc</name> <init>= <expr><call><name>ToLower</name><argument_list>( <argument><expr><name>psz_family</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>psz_lc</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name> <init>=
<expr><call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_family</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_family</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <call><name>NewFamily</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>psz_family</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_families</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></argument>, <argument><expr><name>psz_family</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_family</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>LOGFONT</name></type> <name>lf</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>lf</name><operator>.</operator><name>lfCharSet</name></name> <operator>=</operator> <name>DEFAULT_CHARSET</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>LPTSTR</name></type> <name>psz_fbuffer</name> <init>= <expr><call><name>ToWide</name><argument_list>( <argument><expr><name>psz_family</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wcsncpy</name><argument_list>( <argument><expr><operator>(</operator><name>LPTSTR</name><operator>)</operator><operator>&amp;</operator><name><name>lf</name><operator>.</operator><name>lfFaceName</name></name></expr></argument>, <argument><expr><name>psz_fbuffer</name></expr></argument>, <argument><expr><name>LF_FACESIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_fbuffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>HDC</name></type> <name>hDC</name> <init>= <expr><call><name>GetDC</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EnumFontFamiliesEx</name><argument_list>(<argument><expr><name>hDC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lf</name></expr></argument>, <argument><expr><operator>(</operator><name>FONTENUMPROC</name><operator>)</operator><operator>&amp;</operator><name>EnumFontCallback</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><name>p_family</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hDC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_family</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>CALLBACK</name></type> <name>MetaFileEnumProc</name><parameter_list>( <parameter><decl><type><name>HDC</name></type> <name>hdc</name></decl></parameter>, <parameter><decl><type><name>HANDLETABLE</name><modifier>*</modifier></type> <name>table</name></decl></parameter>,
<parameter><decl><type><name>CONST</name> <name>ENHMETARECORD</name><modifier>*</modifier></type> <name>record</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>table_entries</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>log_font</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>hdc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>table</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>table_entries</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>record</name><operator>-&gt;</operator><name>iType</name></name> <operator>==</operator> <name>EMR_EXTCREATEFONTINDIRECTW</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>EMREXTCREATEFONTINDIRECTW</name><modifier>*</modifier></type> <name>create_font_record</name> <init>=
<expr><operator>(</operator> <specifier>const</specifier> <name>EMREXTCREATEFONTINDIRECTW</name> <operator>*</operator> <operator>)</operator> <name>record</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator> <operator>(</operator> <name>LOGFONT</name> <operator>*</operator> <operator>)</operator> <name>log_font</name> <operator>)</operator> <operator>=</operator> <name><name>create_font_record</name><operator>-&gt;</operator><name>elfw</name><operator>.</operator><name>elfLogFont</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>UniscribeFallback</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter>, <parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>meta_file_dc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HENHMETAFILE</name></type> <name>meta_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hdc</name> <operator>=</operator> <call><name>CreateCompatibleDC</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>hdc</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>meta_file_dc</name> <operator>=</operator> <call><name>CreateEnhMetaFile</name><argument_list>( <argument><expr><name>hdc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>meta_file_dc</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>LOGFONT</name></type> <name>lf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>lf</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>psz_fbuffer</name> <init>= <expr><call><name>ToWide</name><argument_list>( <argument><expr><name>psz_family</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_fbuffer</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>wcsncpy</name><argument_list>( <argument><expr><operator>(</operator> <name>LPTSTR</name> <operator>)</operator> <operator>&amp;</operator><name><name>lf</name><operator>.</operator><name>lfFaceName</name></name></expr></argument>, <argument><expr><name>psz_fbuffer</name></expr></argument>, <argument><expr><name>LF_FACESIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_fbuffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lf</name><operator>.</operator><name>lfCharSet</name></name> <operator>=</operator> <name>DEFAULT_CHARSET</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>HFONT</name></type> <name>hFont</name> <init>= <expr><call><name>CreateFontIndirect</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lf</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>hFont</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>HFONT</name></type> <name>hOriginalFont</name> <init>= <expr><call><name>SelectObject</name><argument_list>( <argument><expr><name>meta_file_dc</name></expr></argument>, <argument><expr><name>hFont</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name>text</name> <init>= <expr><name>codepoint</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SCRIPT_STRING_ANALYSIS</name></type> <name>script_analysis</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hresult</name> <init>= <expr><call><name>ScriptStringAnalyse</name><argument_list>( <argument><expr><name>meta_file_dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>text</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>SSA_METAFILE</name> <operator>|</operator> <name>SSA_FALLBACK</name> <operator>|</operator> <name>SSA_GLYPHS</name> <operator>|</operator> <name>SSA_LINK</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>script_analysis</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>SUCCEEDED</name><argument_list>( <argument><expr><name>hresult</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>hresult</name> <operator>=</operator> <call><name>ScriptStringOut</name><argument_list>( <argument><expr><name>script_analysis</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ScriptStringFree</name><argument_list>( <argument><expr><operator>&amp;</operator><name>script_analysis</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SelectObject</name><argument_list>( <argument><expr><name>meta_file_dc</name></expr></argument>, <argument><expr><name>hOriginalFont</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>( <argument><expr><name>hFont</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>meta_file</name> <operator>=</operator> <call><name>CloseEnhMetaFile</name><argument_list>( <argument><expr><name>meta_file_dc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>SUCCEEDED</name><argument_list>( <argument><expr><name>hresult</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>LOGFONT</name></type> <name>log_font</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>log_font</name><operator>.</operator><name>lfFaceName</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EnumEnhMetaFile</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>meta_file</name></expr></argument>, <argument><expr><name>MetaFileEnumProc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>log_font</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>log_font</name><operator>.</operator><name>lfFaceName</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_result</name> <operator>=</operator> <call><name>FromWide</name><argument_list>( <argument><expr><name><name>log_font</name><operator>.</operator><name>lfFaceName</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DeleteEnhMetaFile</name><argument_list>(<argument><expr><name>meta_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteDC</name><argument_list>( <argument><expr><name>hdc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>psz_result</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if<condition>( <expr><name>meta_file_dc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DeleteEnhMetaFile</name><argument_list>( <argument><expr><call><name>CloseEnhMetaFile</name><argument_list>( <argument><expr><name>meta_file_dc</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>hdc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DeleteDC</name><argument_list>( <argument><expr><name>hdc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>Win32_GetFallbacks</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter>,
<parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_fallbacks</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uniscribe</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_lc</name> <init>= <expr><call><name>ToLower</name><argument_list>( <argument><expr><name>psz_family</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>psz_lc</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_fallbacks</name> <operator>=</operator> <call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fallback_map</name></name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_fallbacks</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_family</name> <operator>=</operator> <call><name>SearchFallbacks</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_fallbacks</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_family</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_uniscribe</name> <operator>=</operator> <call><name>UniscribeFallback</name><argument_list>( <argument><expr><name>psz_lc</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_uniscribe</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_family_t</name> <modifier>*</modifier></type><name>p_uniscribe</name> <init>= <expr><call><name>Win32_GetFamily</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>psz_uniscribe</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_uniscribe</name> <operator>||</operator> <operator>!</operator><name><name>p_uniscribe</name><operator>-&gt;</operator><name>p_fonts</name></name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>FT_Face</name></type> <name>p_face</name> <init>= <expr><call><name>GetFace</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_uniscribe</name><operator>-&gt;</operator><name>p_fonts</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_face</name> <operator>||</operator> <operator>!</operator><call><name>FT_Get_Char_Index</name><argument_list>( <argument><expr><name>p_face</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <call><name>NewFamily</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>psz_uniscribe</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_family</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_family</name><operator>-&gt;</operator><name>p_fonts</name></name> <operator>=</operator> <name><name>p_uniscribe</name><operator>-&gt;</operator><name>p_fonts</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_fallbacks</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AppendFamily</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_fallbacks</name></expr></argument>, <argument><expr><name>p_family</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fallback_map</name></name></expr></argument>,
<argument><expr><name>psz_lc</name></expr></argument>, <argument><expr><name>p_family</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uniscribe</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_family</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>Dummy_Select</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_font</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_bold</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_italic</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_idx</name></decl></parameter>, <parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>b_bold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>b_italic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fontname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_win_fonts_path</name> <init>= <expr><call><name>GetWindowsFontPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_fontname</name></expr></argument>, <argument><expr><literal type="string">"%s\\%s"</literal></expr></argument>, <argument><expr><name>psz_win_fonts_path</name></expr></argument>, <argument><expr><name>psz_font</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_fontname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_win_fonts_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_fontname</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
