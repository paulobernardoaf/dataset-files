<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\puzzle_lib.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"puzzle_lib.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_shuffle_button</name><index>[<expr><name>SHUFFLE_LINES</name></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo"</literal></expr>,
<expr><literal type="string">"oooooooooooooo oooooooooooooooooooooooooooo oooooooo oooooo ooooooooooooooo"</literal></expr>,
<expr><literal type="string">"oooooooooooooo ooooooooooooooooooooooooooo ooooooooo oooooooo ooooooooooooooo"</literal></expr>,
<expr><literal type="string">"oooooooooooooo ooooooooooooooooooooooooooo ooooooooo oooooooo ooooooooooooooo"</literal></expr>,
<expr><literal type="string">"oo ooooooo o ooooooo oooo oooooo oooooo oooooo oooooooo ooo"</literal></expr>,
<expr><literal type="string">"o oooo oooooo ooo oooooo oooo ooooooo ooooooooo oooooooo ooooooo oo oo"</literal></expr>,
<expr><literal type="string">"o ooooooooooo oooo oooooo oooo ooooooo ooooooooo oooooooo oooooo oooo o"</literal></expr>,
<expr><literal type="string">"o ooooooo oooo oooooo oooo ooooooo ooooooooo oooooooo oooooo o"</literal></expr>,
<expr><literal type="string">"oo oooooo oooo oooooo oooo ooooooo ooooooooo oooooooo oooooo ooooooo"</literal></expr>,
<expr><literal type="string">"oooooo oooooo oooo oooooo oooo ooooooo ooooooooo oooooooo oooooo ooooooo"</literal></expr>,
<expr><literal type="string">"o oooo oooooo oooo oooooo ooo ooooooo ooooooooo oooooooo ooooooo oooo o"</literal></expr>,
<expr><literal type="string">"oo ooooooo oooo ooooooo o ooooooo ooooooooo oooooooo oooooooo oo"</literal></expr>,
<expr><literal type="string">"ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_rot_arrow_sign</name><index>[<expr><name>ARROW_LINES</name></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="string">" .ooo. "</literal></expr>,
<expr><literal type="string">" .o. .oo. "</literal></expr>,
<expr><literal type="string">" .o. .o. "</literal></expr>,
<expr><literal type="string">" .o. .o."</literal></expr>,
<expr><literal type="string">" o. .o"</literal></expr>,
<expr><literal type="string">".o ."</literal></expr>,
<expr><literal type="string">".o . "</literal></expr>,
<expr><literal type="string">" o. .o. "</literal></expr>,
<expr><literal type="string">" .o..o. "</literal></expr>,
<expr><literal type="string">" o..o "</literal></expr>,
<expr><literal type="string">" .o. "</literal></expr>,
<expr><literal type="string">"ooooo. "</literal></expr>,
<expr><literal type="string">" .. "</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_mir_arrow_sign</name><index>[<expr><name>ARROW_LINES</name></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="string">" "</literal></expr>,
<expr><literal type="string">" "</literal></expr>,
<expr><literal type="string">" . . "</literal></expr>,
<expr><literal type="string">" .o. .o. "</literal></expr>,
<expr><literal type="string">" .o. .o. "</literal></expr>,
<expr><literal type="string">".o. .o."</literal></expr>,
<expr><literal type="string">"ooooooooooooo"</literal></expr>,
<expr><literal type="string">".o. .o."</literal></expr>,
<expr><literal type="string">" .o. .o. "</literal></expr>,
<expr><literal type="string">" .o. .o. "</literal></expr>,
<expr><literal type="string">" . . "</literal></expr>,
<expr><literal type="string">" "</literal></expr>,
<expr><literal type="string">" "</literal></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><name>void</name></type> <name>puzzle_preset_desk_background</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>Y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>U</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>V</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_c</name></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i_plane</name> <operator>==</operator> <name>Y_PLANE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_c</name> <operator>=</operator> <name>Y</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i_plane</name> <operator>==</operator> <name>U_PLANE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_c</name> <operator>=</operator> <name>U</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i_plane</name> <operator>==</operator> <name>V_PLANE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_c</name> <operator>=</operator> <name>V</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_dst_pitch</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_dst_lines</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_dst_lines</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>i_dst_pitch</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_c</name></expr></argument>, <argument><expr><name>i_dst_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>puzzle_draw_borders</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_in</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_in_pitch</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_out_pitch</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_lines</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_visible_pitch</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_border_pitch</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_border_width</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_border_lines</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_border_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_border_lines</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>i_out_pitch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_src</name><index>[<expr><name>y</name> <operator>*</operator> <name>i_in_pitch</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_visible_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>y</name> <init>= <expr><name>i_lines</name> <operator>-</operator> <name>i_border_lines</name></expr></init></decl> ;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_lines</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>i_out_pitch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_src</name><index>[<expr><name>y</name> <operator>*</operator> <name>i_in_pitch</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_visible_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>y</name> <init>= <expr><name>i_border_lines</name></expr></init></decl> ;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_lines</name> <operator>-</operator> <name>i_border_lines</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>i_out_pitch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_src</name><index>[<expr><name>y</name> <operator>*</operator> <name>i_in_pitch</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_border_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>i_out_pitch</name> <operator>+</operator> <name>i_visible_pitch</name> <operator>-</operator> <name>i_border_pitch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_src</name><index>[<expr><name>y</name> <operator>*</operator> <name>i_in_pitch</name> <operator>+</operator> <name>i_visible_pitch</name> <operator>-</operator> <name>i_border_pitch</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_border_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>puzzle_draw_preview</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_in</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_preview_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_preview_width</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_preview_size</name></name> <operator>/</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_preview_lines</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_preview_size</name></name> <operator>/</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_pixel_pitch</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_src_pitch</name> <init>= <expr><name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_dst_pitch</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_preview_pos</name></name></expr> )</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>i_preview_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>i_preview_offset</name> <operator>=</operator>
<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i_preview_width</name><operator>)</operator> <operator>*</operator> <name>i_pixel_pitch</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>i_preview_offset</name> <operator>=</operator>
<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i_preview_width</name><operator>)</operator> <operator>*</operator> <name>i_pixel_pitch</name>
<operator>+</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i_preview_lines</name> <operator>)</operator><operator>)</operator> <operator>*</operator> <name>i_dst_pitch</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>i_preview_offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i_preview_lines</name> <operator>)</operator><operator>)</operator> <operator>*</operator> <name>i_dst_pitch</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>i_preview_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_preview_lines</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_preview_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dst</name><index>[ <expr><name>y</name> <operator>*</operator> <name>i_dst_pitch</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>i_pixel_pitch</name> <operator>+</operator> <name>i_preview_offset</name></expr> ]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_src</name><index>[ <expr><operator>(</operator> <name>y</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_preview_size</name></name> <operator>)</operator> <operator>*</operator> <name>i_src_pitch</name>
<operator>+</operator> <operator>(</operator> <name>x</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_preview_size</name></name> <operator>)</operator> <operator>*</operator> <name>i_pixel_pitch</name></expr> ]</index></name></expr></argument>,
<argument><expr><name>i_pixel_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>puzzle_draw_sign</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_y</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_lines</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_sign</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_reverse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_pixel_pitch</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_Y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_Y</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>p_out</name><operator>-&gt;</operator><name>p_pixels</name><index>[ <expr><name>i_y</name> <operator>*</operator> <name><name>p_out</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>i_x</name></expr> ]</index></name> <operator>&gt;=</operator> <literal type="number">0x7F</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x00</literal></expr> </then><else>: <expr><literal type="number">0xFF</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int32_t</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_lines</name></expr> ;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<for>for<control>( <init><decl><type><name>int32_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_dst_x</name> <init>= <expr><operator>(</operator> <name>x</name> <operator>+</operator> <name>i_x</name> <operator>)</operator> <operator>*</operator> <name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_dst_y</name> <init>= <expr><name>y</name> <operator>+</operator> <name>i_y</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name><name>ppsz_sign</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><ternary><condition><expr><name>b_reverse</name></expr>?</condition><then><expr><name>i_width</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>x</name></expr></then><else>:<expr><name>x</name></expr></else></ternary></expr>]</index></name> <operator>==</operator> <literal type="char">'o'</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i_dst_x</name> <operator>&lt;</operator> <name><name>p_out</name><operator>-&gt;</operator><name>i_visible_pitch</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_dst_y</name> <operator>&lt;</operator> <name><name>p_out</name><operator>-&gt;</operator><name>i_visible_lines</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_dst_x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_dst_y</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_out</name><operator>-&gt;</operator><name>p_pixels</name><index>[ <expr><name>i_dst_y</name> <operator>*</operator> <name><name>p_out</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>i_dst_x</name></expr> ]</index></name></expr></argument>, <argument><expr><name>i_Y</name></expr></argument>, <argument><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><name><name>ppsz_sign</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><ternary><condition><expr><name>b_reverse</name></expr>?</condition><then><expr><name>i_width</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>x</name></expr></then><else>:<expr><name>x</name></expr></else></ternary></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i_dst_x</name> <operator>&lt;</operator> <name><name>p_out</name><operator>-&gt;</operator><name>i_visible_pitch</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_dst_y</name> <operator>&lt;</operator> <name><name>p_out</name><operator>-&gt;</operator><name>i_visible_lines</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_dst_x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_dst_y</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>p_pixels</name><index>[ <expr><name>i_dst_y</name> <operator>*</operator> <name><name>p_out</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>i_dst_x</name></expr> ]</index></name> <operator>=</operator> <name><name>p_out</name><operator>-&gt;</operator><name>p_pixels</name><index>[ <expr><name>i_dst_y</name> <operator>*</operator> <name><name>p_out</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>i_dst_x</name></expr> ]</index></name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>i_Y</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for></block_content></block></for>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>puzzle_draw_rectangle</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_y</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_w</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_Y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_U</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_V</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_c</name></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p_oyp</name> <init>= <expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_pixel_pitch</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_plane</name> <operator>==</operator> <name>Y_PLANE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_c</name> <operator>=</operator> <name>i_Y</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i_plane</name> <operator>==</operator> <name>U_PLANE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_c</name> <operator>=</operator> <name>i_U</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i_plane</name> <operator>==</operator> <name>V_PLANE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_c</name> <operator>=</operator> <name>i_V</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_x_min</name> <init>= <expr><operator>(</operator> <name>i_x</name> <operator>*</operator> <name><name>p_oyp</name><operator>-&gt;</operator><name>i_visible_pitch</name></name> <operator>/</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>)</operator> <operator>*</operator> <name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_x_max</name> <init>= <expr><operator>(</operator> <operator>(</operator><name>i_x</name> <operator>+</operator> <name>i_w</name><operator>)</operator> <operator>*</operator> <name><name>p_oyp</name><operator>-&gt;</operator><name>i_visible_pitch</name></name> <operator>/</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>)</operator> <operator>*</operator> <name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_y_min</name> <init>= <expr><name>i_y</name> <operator>*</operator> <name><name>p_oyp</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>/</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_y_max</name> <init>= <expr><operator>(</operator><name>i_y</name> <operator>+</operator> <name>i_h</name><operator>)</operator> <operator>*</operator> <name><name>p_oyp</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>/</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_oyp</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>i_y_min</name> <operator>*</operator> <name><name>p_oyp</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>i_x_min</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_c</name></expr></argument>, <argument><expr><name>i_x_max</name> <operator>-</operator> <name>i_x_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for<control>( <init><decl><type><name>int32_t</name></type> <name>i_dy</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i_dy</name> <operator>&lt;</operator> <name>i_y_max</name> <operator>-</operator> <name>i_y_min</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i_dy</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_oyp</name><operator>-&gt;</operator><name>p_pixels</name><index>[ <expr><operator>(</operator><name>i_y_min</name> <operator>+</operator> <name>i_dy</name><operator>)</operator> <operator>*</operator> <name><name>p_oyp</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>i_x_min</name></expr> ]</index></name></expr></argument>, <argument><expr><name>i_c</name></expr></argument>, <argument><expr><name><name>p_oyp</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_oyp</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><operator>(</operator><name>i_y_min</name> <operator>+</operator> <name>i_dy</name><operator>)</operator> <operator>*</operator> <name><name>p_oyp</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>i_x_max</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_c</name></expr></argument>, <argument><expr><name><name>p_oyp</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_oyp</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><operator>(</operator><name>i_y_max</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>p_oyp</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>i_x_min</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_c</name></expr></argument>, <argument><expr><name>i_x_max</name> <operator>-</operator> <name>i_x_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>puzzle_fill_rectangle</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_y</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_w</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_Y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_U</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_V</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_c</name></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p_oyp</name> <init>= <expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_pixel_pitch</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_plane</name> <operator>==</operator> <name>Y_PLANE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_c</name> <operator>=</operator> <name>i_Y</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i_plane</name> <operator>==</operator> <name>U_PLANE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_c</name> <operator>=</operator> <name>i_U</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i_plane</name> <operator>==</operator> <name>V_PLANE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_c</name> <operator>=</operator> <name>i_V</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_x_min</name> <init>= <expr><operator>(</operator> <name>i_x</name> <operator>*</operator> <name><name>p_oyp</name><operator>-&gt;</operator><name>i_visible_pitch</name></name> <operator>/</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>)</operator> <operator>*</operator> <name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_x_max</name> <init>= <expr><operator>(</operator> <operator>(</operator><name>i_x</name> <operator>+</operator> <name>i_w</name><operator>)</operator> <operator>*</operator> <name><name>p_oyp</name><operator>-&gt;</operator><name>i_visible_pitch</name></name> <operator>/</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>)</operator> <operator>*</operator> <name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_y_min</name> <init>= <expr><name>i_y</name> <operator>*</operator> <name><name>p_oyp</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>/</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_y_max</name> <init>= <expr><operator>(</operator><name>i_y</name> <operator>+</operator> <name>i_h</name><operator>)</operator> <operator>*</operator> <name><name>p_oyp</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>/</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int32_t</name></type> <name>i_dy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_dy</name> <operator>&lt;</operator> <name>i_y_max</name> <operator>-</operator> <name>i_y_min</name></expr>;</condition> <incr><expr><name>i_dy</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_oyp</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><operator>(</operator><name>i_y_min</name> <operator>+</operator> <name>i_dy</name><operator>)</operator> <operator>*</operator> <name><name>p_oyp</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>i_x_min</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_c</name></expr></argument>, <argument><expr><name>i_x_max</name> <operator>-</operator> <name>i_x_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
