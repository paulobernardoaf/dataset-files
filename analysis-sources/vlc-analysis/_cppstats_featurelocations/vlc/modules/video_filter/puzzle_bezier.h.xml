<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\puzzle_bezier.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_LIB_BEZIER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_LIB_BEZIER_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>float</name></type> <name>f_x</name></decl>, <name>f_y</name>;</decl_stmt>
}</block></struct></type> <name>point_t</name>;</typedef>

<function_decl><type><name>point_t</name> <modifier>*</modifier></type><name>puzzle_scale_curve_H</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_lines</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_pts_nbr</name></decl></parameter>, <parameter><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_pt</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_shape_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>point_t</name> <modifier>*</modifier></type><name>puzzle_H_2_scale_curve_V</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_lines</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_pts_nbr</name></decl></parameter>, <parameter><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_pt</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_shape_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>point_t</name> <modifier>*</modifier></type><name>puzzle_curve_H_2_V</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>i_pts_nbr</name></decl></parameter>, <parameter><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_pt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>point_t</name> <modifier>*</modifier></type><name>puzzle_curve_H_2_negative</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>i_pts_nbr</name></decl></parameter>, <parameter><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_pt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>point_t</name> <modifier>*</modifier></type><name>puzzle_curve_V_2_negative</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>i_pts_nbr</name></decl></parameter>, <parameter><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_pt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>point_t</name> <modifier>*</modifier></type><name>puzzle_rand_bezier</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>i_pts_nbr</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bezier_val</name><parameter_list>(<parameter><type><name>ps_pt</name></type></parameter>,<parameter><type><name>f_sub_t</name></type></parameter>,<parameter><type><name>i_main_t</name></type></parameter>,<parameter><type><name>axis</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(( 1 - (f_sub_t)) * ( 1 - (f_sub_t) ) * ( 1 - (f_sub_t) ) * ps_pt[ 3 * (i_main_t) ].f_ ##axis + 3 * (f_sub_t) * ( 1 - (f_sub_t) ) * ( 1 - (f_sub_t) ) * ps_pt[ 3 * (i_main_t) + 1 ].f_ ##axis + 3 * (f_sub_t) * (f_sub_t) * ( 1 - (f_sub_t) ) * ps_pt[ 3 * (i_main_t) + 2 ].f_ ##axis + (f_sub_t) * (f_sub_t) * (f_sub_t) * ps_pt[ 3 * (i_main_t) + 3 ].f_ ##axis )</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
