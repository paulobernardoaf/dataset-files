<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\posterize.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PlanarYUVPosterize</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PackedYUVPosterize</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RVPosterize</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>YuvPosterization</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"level"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTERIZE_LEVEL_TEXT</name></cpp:macro> <cpp:value>N_("Posterize level")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTERIZE_LEVEL_LONGTEXT</name></cpp:macro> <cpp:value>N_("Posterize level ""(number of colors is cube of this value)" )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"posterize-"</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Posterize video filter"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Posterize"</literal> )</argument> )</argument_list></macro>
<macro><name>set_help</name><argument_list>( <argument>N_(<literal type="string">"Posterize video by lowering the number of colors"</literal>)</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"level"</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">256</literal></argument>,
<argument>POSTERIZE_LEVEL_TEXT</argument>, <argument>POSTERIZE_LEVEL_LONGTEXT</argument>,
<argument>false</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Create</argument>, <argument>Destroy</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>FilterCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>atomic_int</name></type> <name>i_level</name></decl>;</decl_stmt>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>






<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<macro><name>CASE_PLANAR_YUV_SQUARE</name></macro>
<break>break;</break>
<macro><name>CASE_PACKED_YUV_422</name></macro>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_RGB24</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_RGB32</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input chroma (%4.4s)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Input and output chromas don't match"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>filter_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_level</name></name></expr></argument>,
<argument><expr><call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"level"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"level"</literal></expr></argument>, <argument><expr><name>FilterCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"level"</literal></expr></argument>, <argument><expr><name>FilterCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_level</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_outpic</name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_outpic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"can't get output picture"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_RGB24</name></expr>:</case>
<expr_stmt><expr><call><name>RVPosterize</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_RGB32</name></expr>:</case>
<expr_stmt><expr><call><name>RVPosterize</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<decl_stmt><decl><type><name>CASE_PLANAR_YUV_SQUARE</name></type>
<name>PlanarYUVPosterize</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>level</name></expr></argument> )</argument_list></decl>;</decl_stmt>
<break>break;</break>
<decl_stmt><decl><type><name>CASE_PACKED_YUV_422</name></type>
<name>PackedYUVPosterize</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>level</name></expr></argument> )</argument_list></decl>;</decl_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTERIZE_PIXEL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>level</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((( x * level ) &gt;&gt; 8 ) * 255 ) / ( level - 1 ))</cpp:value></cpp:define>









<function><type><specifier>static</specifier> <name>void</name></type> <name>PlanarYUVPosterize</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_level</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in_y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_u</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_v</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_end_y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line_end_y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out_y</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>p_out_u</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out_v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_current_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_in_y</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_in_end_y</name> <operator>=</operator> <name>p_in_y</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name>
<operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out_y</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>


<while>while<condition>( <expr><name>p_in_y</name> <operator>&lt;</operator> <name>p_in_end_y</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_line_end_y</name> <operator>=</operator> <name>p_in_y</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_u</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name>
<operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <operator>(</operator> <name>i_current_line</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out_u</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name>
<operator>+</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <operator>(</operator> <name>i_current_line</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_v</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name>
<operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <operator>(</operator> <name>i_current_line</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out_v</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name>
<operator>+</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <operator>(</operator> <name>i_current_line</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_in_y</name> <operator>&lt;</operator> <name>p_line_end_y</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>y1</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>posterized_y1</name></decl>, <decl><type ref="prev"/><name>posterized_y2</name></decl>, <decl><type ref="prev"/><name>posterized_u</name></decl>, <decl><type ref="prev"/><name>posterized_v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y1</name> <operator>=</operator> <operator>*</operator><name>p_in_y</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y2</name> <operator>=</operator> <operator>*</operator><name>p_in_y</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>*</operator><name>p_in_u</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>*</operator><name>p_in_v</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>YuvPosterization</name><argument_list>( <argument><expr><operator>&amp;</operator><name>posterized_y1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>posterized_y2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>posterized_u</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>posterized_v</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>i_level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out_y</name><operator>++</operator> <operator>=</operator> <name>posterized_y1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out_y</name><operator>++</operator> <operator>=</operator> <name>posterized_y2</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out_u</name><operator>++</operator> <operator>=</operator> <name>posterized_u</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out_v</name><operator>++</operator> <operator>=</operator> <name>posterized_v</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>p_in_y</name> <operator>+=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>-</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out_y</name> <operator>+=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>-</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_current_line</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>PackedYUVPosterize</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_level</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>y1</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_in_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_lines</name>
<operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_in</name> <operator>&lt;</operator> <name>p_in_end</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_line_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
<while>while<condition>( <expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>posterized_y1</name></decl>, <decl><type ref="prev"/><name>posterized_y2</name></decl>, <decl><type ref="prev"/><name>posterized_u</name></decl>, <decl><type ref="prev"/><name>posterized_v</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_UYVY</name></expr>:</case>
<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y1</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y2</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_VYUY</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y1</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y2</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_YUYV</name></expr>:</case>
<expr_stmt><expr><name>y1</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y2</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_YVYU</name></expr>:</case>
<expr_stmt><expr><name>y1</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y2</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>YuvPosterization</name><argument_list>( <argument><expr><operator>&amp;</operator><name>posterized_y1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>posterized_y2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>posterized_u</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>posterized_v</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>i_level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_UYVY</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name>posterized_u</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name>posterized_y1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name>posterized_v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name>posterized_y2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_VYUY</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name>posterized_v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name>posterized_y1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name>posterized_u</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name>posterized_y2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_YUYV</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name>posterized_y1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name>posterized_u</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name>posterized_y2</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name>posterized_v</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_YVYU</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name>posterized_y1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name>posterized_v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name>posterized_y2</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name>posterized_u</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>
<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>-</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>-</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>RVPosterize</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>rv32</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out</name></decl>, <decl><type ref="prev"/><name>pixel</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_in_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_lines</name>
<operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_in</name> <operator>&lt;</operator> <name>p_in_end</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_line_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
<while>while<condition>( <expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>pixel</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <call><name>POSTERIZE_PIXEL</name><argument_list>( <argument><expr><name>pixel</name></expr></argument>, <argument><expr><name>level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixel</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <call><name>POSTERIZE_PIXEL</name><argument_list>( <argument><expr><name>pixel</name></expr></argument>, <argument><expr><name>level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixel</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <call><name>POSTERIZE_PIXEL</name><argument_list>( <argument><expr><name>pixel</name></expr></argument>, <argument><expr><name>level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>rv32</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>pixel</name> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <call><name>POSTERIZE_PIXEL</name><argument_list>( <argument><expr><name>pixel</name></expr></argument>, <argument><expr><name>level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>-</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>-</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>YuvPosterization</name><parameter_list>( <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>posterized_y1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>posterized_y2</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>posterized_u</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>posterized_v</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>v</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_level</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r1</name></decl>, <decl><type ref="prev"/><name>g1</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>r2</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>g2</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>r3</name></decl>, <decl><type ref="prev"/><name>g3</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>yuv_to_rgb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yuv_to_rgb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b2</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yuv_to_rgb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b3</name></expr></argument>, <argument><expr><operator>(</operator> <name>y1</name> <operator>+</operator> <name>y2</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>POSTERIZE_PIXEL</name><argument_list>( <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>i_level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g1</name> <operator>=</operator> <call><name>POSTERIZE_PIXEL</name><argument_list>( <argument><expr><name>g1</name></expr></argument>, <argument><expr><name>i_level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>POSTERIZE_PIXEL</name><argument_list>( <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>i_level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>POSTERIZE_PIXEL</name><argument_list>( <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>i_level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g2</name> <operator>=</operator> <call><name>POSTERIZE_PIXEL</name><argument_list>( <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>i_level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>POSTERIZE_PIXEL</name><argument_list>( <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>i_level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r3</name> <operator>=</operator> <call><name>POSTERIZE_PIXEL</name><argument_list>( <argument><expr><name>r3</name></expr></argument>, <argument><expr><name>i_level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g3</name> <operator>=</operator> <call><name>POSTERIZE_PIXEL</name><argument_list>( <argument><expr><name>g3</name></expr></argument>, <argument><expr><name>i_level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>POSTERIZE_PIXEL</name><argument_list>( <argument><expr><name>b3</name></expr></argument>, <argument><expr><name>i_level</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>posterized_y1</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <literal type="number">66</literal> <operator>*</operator> <name>r1</name> <operator>+</operator> <literal type="number">129</literal> <operator>*</operator> <name>g1</name> <operator>+</operator> <literal type="number">25</literal> <operator>*</operator> <name>b1</name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>posterized_y2</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <literal type="number">66</literal> <operator>*</operator> <name>r2</name> <operator>+</operator> <literal type="number">129</literal> <operator>*</operator> <name>g2</name> <operator>+</operator> <literal type="number">25</literal> <operator>*</operator> <name>b2</name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>posterized_u</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <operator>-</operator><literal type="number">38</literal> <operator>*</operator> <name>r3</name> <operator>-</operator> <literal type="number">74</literal> <operator>*</operator> <name>g3</name> <operator>+</operator> <literal type="number">112</literal> <operator>*</operator> <name>b3</name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>posterized_v</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <literal type="number">112</literal> <operator>*</operator> <name>r3</name> <operator>-</operator> <literal type="number">94</literal> <operator>*</operator> <name>g3</name> <operator>-</operator> <literal type="number">18</literal> <operator>*</operator> <name>b3</name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FilterCallback</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p_this</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>oldval</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"level"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_level</name></name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
