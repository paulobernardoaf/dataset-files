<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\vhs.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_tick.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>MOD</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator> <operator>(</operator> <name>a</name> <operator>%</operator> <name>b</name> <operator>)</operator> <operator>+</operator> <name>b</name> <operator>)</operator> <operator>%</operator> <name>b</name></expr>;</return> </block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BLUE_RED_LINES</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_intensity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_blue_red</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_stop_trigger</name></decl>;</decl_stmt>
}</block></struct></type> <name>blue_red_line_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{


<decl_stmt><decl><type><name>bool</name></type> <name>b_init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>i_height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>i_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>i_visible_pitch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_cur_time</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>i_phase_speed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_phase_ofs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_offset_ofs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_sliding_ofs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_sliding_speed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_offset_trigger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_sliding_trigger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_sliding_stop_trig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>i_sliding_type_duplicate</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_BR_line_trigger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>blue_red_line_t</name> <modifier>*</modifier></type><name><name>p_BR_lines</name><index>[<expr><name>MAX_BLUE_RED_LINES</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>





<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vhs_allocate_data</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vhs_free_allocated_data</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vhs_blue_red_line_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vhs_blue_red_dots_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vhs_sliding_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vhs_sliding_effect_apply</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"VHS movie effect video filter"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"VHS movie"</literal> )</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>es_format_IsSimilar</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Input and output format does not match"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name>fourcc</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>p_chroma</name> <init>=
<expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_chroma</name> <operator>||</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>||</operator> <operator>!</operator><call><name>vlc_fourcc_IsYUV</name><argument_list>( <argument><expr><name>fourcc</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported chroma (%4.4s)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_sys</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_start_time</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_last_time</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vhs_free_allocated_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_in</name></decl></parameter> )</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_pic_in</name> <operator>||</operator> <operator>!</operator><name>p_filter</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name> <init>= <expr><call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_pic_out</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_time</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><call><name>vhs_allocate_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>picture_CopyPixels</name><argument_list>(<argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><call><name>vhs_blue_red_line_effect</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><call><name>vhs_sliding_effect</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vhs_blue_red_dots_effect</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>vhs_allocate_data</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_in</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vhs_free_allocated_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>=</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_visible_pitch</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vhs_free_allocated_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_p</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_visible_pitch</name> <index>[<expr><name>i_p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>i_p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name> <index>[<expr><name>i_p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>/</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>vhs_free_allocated_data</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>uint32_t</name></type> <name>i_b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_b</name> <operator>&lt;</operator> <name>MAX_BLUE_RED_LINES</name></expr>;</condition> <incr><expr><name>i_b</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_BR_lines</name><index>[<expr><name>i_b</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>RandomEnd</name><parameter_list>(<parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>modulo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <name>modulo</name> <operator>+</operator> <name>modulo</name> <operator>/</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>vhs_blue_red_line_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_LINES_GENERATOR_PERIOD</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(50)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_LINES_DURATION</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(20)</cpp:value></cpp:define>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_BR_line_trigger</name></name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name></expr> )</condition> <block>{<block_content>
<for>for <control>( <init><decl><type><name>uint32_t</name></type> <name>i_b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_b</name> <operator>&lt;</operator> <name>MAX_BLUE_RED_LINES</name></expr>;</condition> <incr><expr><name>i_b</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_BR_lines</name><index>[<expr><name>i_b</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_BR_lines</name><index>[<expr><name>i_b</name></expr>]</index></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>blue_red_line_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_BR_lines</name><index>[<expr><name>i_b</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_BR_lines</name><index>[<expr><name>i_b</name></expr>]</index></name><operator>-&gt;</operator><name>i_offset</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call>
<operator>%</operator> <call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>-</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call>
<operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_BR_lines</name><index>[<expr><name>i_b</name></expr>]</index></name><operator>-&gt;</operator><name>b_blue_red</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_BR_lines</name><index>[<expr><name>i_b</name></expr>]</index></name><operator>-&gt;</operator><name>i_stop_trigger</name> <operator>=</operator> <call><name>RandomEnd</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>BR_LINES_DURATION</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_BR_line_trigger</name></name> <operator>=</operator> <call><name>RandomEnd</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>BR_LINES_GENERATOR_PERIOD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<for>for <control>( <init><decl><type><name>uint8_t</name></type> <name>i_b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_b</name> <operator>&lt;</operator> <name>MAX_BLUE_RED_LINES</name></expr>;</condition> <incr><expr><name>i_b</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_BR_lines</name><index>[<expr><name>i_b</name></expr>]</index></name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_BR_lines</name><index>[<expr><name>i_b</name></expr>]</index></name><operator>-&gt;</operator><name>i_stop_trigger</name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_BR_lines</name><index>[<expr><name>i_b</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_p</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_p</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_pix_ofs</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_BR_lines</name><index>[<expr><name>i_b</name></expr>]</index></name><operator>-&gt;</operator><name>i_offset</name>
<operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name>
<operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name>
<operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>( <expr><name>i_p</name></expr> )</condition> <block>{<block_content>
<case>case <expr><name>Y_PLANE</name></expr>:</case>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_pix_ofs</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>,
<argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>U_PLANE</name></expr>:</case>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_pix_ofs</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_BR_lines</name><index>[<expr><name>i_b</name></expr>]</index></name><operator>-&gt;</operator><name>b_blue_red</name></expr>?</condition><then><expr><literal type="number">255</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V_PLANE</name></expr>:</case>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_pix_ofs</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_BR_lines</name><index>[<expr><name>i_b</name></expr>]</index></name><operator>-&gt;</operator><name>b_blue_red</name></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">255</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

</block_content>}</block></for>
</block_content>}</block></if></if_stmt></block_content></block></for>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>vhs_blue_red_dots_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter> )</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_DOTS_RATIO</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_dots</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>
<condition><expr><name>i_dots</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>/</operator> <name>BR_DOTS_RATIO</name></expr>;</condition>
<incr><expr><name>i_dots</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_length</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call>
<operator>%</operator> <call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>/</operator> <literal type="number">30</literal></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_x</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call>
<operator>%</operator> <call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>-</operator> <name>i_length</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_y</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_color</name> <init>= <expr><operator>(</operator> <operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_p</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_p</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_pix_ofs</name> <init>= <expr><name>i_y</name>
<operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name>
<operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name>
<operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>+</operator> <name>i_x</name>
<operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_length_in_plane</name> <init>= <expr><name>i_length</name>
<operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name>
<operator>/</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>( <expr><name>i_p</name></expr> )</condition> <block>{<block_content>
<case>case <expr><name>Y_PLANE</name></expr>:</case>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_pix_ofs</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>,
<argument><expr><name>i_length_in_plane</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>U_PLANE</name></expr>:</case>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_pix_ofs</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>b_color</name></expr>?</condition><then><expr><literal type="number">255</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name>i_length_in_plane</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V_PLANE</name></expr>:</case>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_pix_ofs</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>b_color</name></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">255</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name>i_length_in_plane</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>vhs_sliding_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET_AVERAGE_PERIOD</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(10)</cpp:value></cpp:define>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_trigger</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> 


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_trigger</name></name> <operator>=</operator> <call><name>RandomEnd</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>OFFSET_AVERAGE_PERIOD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_ofs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_trigger</name></name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_trigger</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_ofs</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call>
<operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_ofs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PHASE_OFS</name></cpp:macro> <cpp:value>(p_sys-&gt;i_height[Y_PLANE]*100/15)</cpp:value></cpp:define>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_phase_speed</name></name> <operator>+=</operator> <call><name>MOD</name><argument_list>( <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_phase_ofs</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_phase_speed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_phase_ofs</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_phase_ofs</name></name></expr></argument>, <argument><expr><operator>-</operator><name>MAX_PHASE_OFS</name></expr></argument>, <argument><expr><operator>+</operator><name>MAX_PHASE_OFS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>abs</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_phase_ofs</name></name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <name>MAX_PHASE_OFS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_phase_speed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIDING_AVERAGE_PERIOD</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIDING_AVERAGE_DURATION</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(3)</cpp:value></cpp:define>


<if_stmt><if>if <condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_stop_trig</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_trigger</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition> <block>{<block_content>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_trigger</name></name> <operator>=</operator> <call><name>RandomEnd</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>SLIDING_AVERAGE_PERIOD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_stop_trig</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_trigger</name></name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition> <block>{<block_content>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_trigger</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_stop_trig</name></name> <operator>=</operator> <call><name>RandomEnd</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>SLIDING_AVERAGE_DURATION</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_ofs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name> <operator>=</operator> <call><name>MOD</name><argument_list>( <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1001</literal></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">500</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_type_duplicate</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_stop_trig</name></name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name> <operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_trigger</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition> <block>{<block_content>


<if_stmt><if>if <condition>( <expr><call><name>abs</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><call><name>abs</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_ofs</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name>
<operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name>
<operator>*</operator> <call><name>SEC_FROM_VLC_TICK</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_last_time</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call>
<operator>||</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_ofs</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <literal type="number">20</literal></expr> )</condition> <block>{<block_content>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_ofs</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_trigger</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_stop_trig</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_type_duplicate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_ofs</name></name> <operator>=</operator> <call><name>MOD</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_ofs</name></name>
<operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name>
<operator>*</operator> <call><name>SEC_FROM_VLC_TICK</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_last_time</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>*</operator> <literal type="number">100</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vhs_sliding_effect_apply</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>vhs_sliding_effect_apply</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>uint8_t</name></type> <name>i_p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_p</name> <operator>&lt;</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_p</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_temp_buf</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_type_duplicate</name></name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>p_temp_buf</name><operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_lines</name>
<operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_temp_buf</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_temp_buf</name></expr></argument>, <argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>,
<argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_temp_buf</name> <operator>=</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_y</name> <operator>&lt;</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</condition> <incr><expr><name>i_y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_ofs</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_ofs</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_ofs</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_type_duplicate</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_ofs</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_phase_ofs</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ofs</name> <operator>=</operator> <call><name>MOD</name><argument_list>( <argument><expr><name>i_ofs</name> <operator>/</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ofs</name> <operator>*=</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ofs</name> <operator>/=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[ <expr><name>i_y</name> <operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr> ]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_temp_buf</name><index>[ <expr><operator>(</operator> <operator>(</operator> <name>i_y</name> <operator>+</operator> <name>i_ofs</name> <operator>)</operator> <operator>%</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name> <operator>)</operator> <operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr> ]</index></name></expr></argument>,
<argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_type_duplicate</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_temp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
