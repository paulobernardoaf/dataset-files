<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\oldmovie.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_tick.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>MOD</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator> <operator>(</operator> <name>a</name> <operator>%</operator> <name>b</name> <operator>)</operator> <operator>+</operator> <name>b</name> <operator>)</operator> <operator>%</operator> <name>b</name></expr>;</return> </block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB_MIN</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>sub_val</name></type></parameter>, <parameter><type><name>min</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>val = ((val-(int32_t)sub_val)&lt;min?min:val-sub_val)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_MAX</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>add_val</name></type></parameter>, <parameter><type><name>max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>val = ((val+(int32_t)add_val)&gt;max?max:val+add_val)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>PIX_OFS</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_y</name></decl></parameter>, <parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>ps_plane</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>i_x</name> <operator>*</operator> <name><name>ps_plane</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name> <operator>+</operator> <name>i_y</name> <operator>*</operator> <name><name>ps_plane</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</return> </block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_PIX_OFS</name><parameter_list>(<parameter><type><name>i_x</name></type></parameter>, <parameter><type><name>i_y</name></type></parameter>, <parameter><type><name>ps_plane</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (i_x) &gt;= 0 &amp;&amp; (i_y) &gt;= 0 &amp;&amp; (i_x) * ps_plane-&gt;i_pixel_pitch &lt; ps_plane-&gt;i_visible_pitch &amp;&amp; (i_y) &lt; ps_plane-&gt;i_visible_lines )</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>DARKEN_PIXEL</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_y</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name>intensity</name></decl></parameter>, <parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>ps_plane</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>SUB_MIN</name><argument_list>( <argument><expr><name><name>ps_plane</name><operator>-&gt;</operator><name>p_pixels</name><index>[ <expr><call><name>PIX_OFS</name><argument_list>(<argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>ps_plane</name></expr></argument>)</argument_list></call></expr> ]</index></name></expr></argument>,
<argument><expr><name>intensity</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>LIGHTEN_PIXEL</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_y</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name>intensity</name></decl></parameter>, <parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>ps_plane</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>ADD_MAX</name><argument_list>( <argument><expr><name><name>ps_plane</name><operator>-&gt;</operator><name>p_pixels</name><index>[ <expr><call><name>PIX_OFS</name><argument_list>(<argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>ps_plane</name></expr></argument>)</argument_list></call></expr> ]</index></name></expr></argument>,
<argument><expr><name>intensity</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>CHECK_N_DARKEN_PIXEL</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_y</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name>intensity</name></decl></parameter>, <parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>ps_plane</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><call><name>CHECK_PIX_OFS</name><argument_list>(<argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>ps_plane</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DARKEN_PIXEL</name><argument_list>(<argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>ps_plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>CHECK_N_LIGHTEN_PIXEL</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_y</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name>intensity</name></decl></parameter>, <parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>ps_plane</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><call><name>CHECK_PIX_OFS</name><argument_list>(<argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>ps_plane</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LIGHTEN_PIXEL</name><argument_list>(<argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>ps_plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SCRATCH</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HAIR</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DUST</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_intensity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_stop_trigger</name></decl>;</decl_stmt>
}</block></struct></type> <name>scratch_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_x</name></decl>, <name>i_y</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_rotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_curve</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_intensity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_stop_trigger</name></decl>;</decl_stmt>
}</block></struct></type> <name>hair_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_x</name></decl>, <name>i_y</name>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_intensity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_stop_trigger</name></decl>;</decl_stmt>
}</block></struct></type> <name>dust_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{


<decl_stmt><decl><type><name>bool</name></type> <name>b_init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>i_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>i_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>i_visible_pitch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_cur_time</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_offset_trigger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_sliding_trigger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_sliding_stop_trig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_offset_ofs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_sliding_ofs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_sliding_speed</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_scratch_trigger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scratch_t</name> <modifier>*</modifier></type><name><name>p_scratch</name><index>[<expr><name>MAX_SCRATCH</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_hair_trigger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hair_t</name> <modifier>*</modifier></type><name><name>p_hair</name><index>[<expr><name>MAX_HAIR</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_blotch_trigger</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dust_trigger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dust_t</name> <modifier>*</modifier></type><name><name>p_dust</name><index>[<expr><name>MAX_DUST</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>





<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>oldmovie_allocate_data</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>oldmovie_free_allocated_data</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>oldmovie_shutter_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>oldmovie_sliding_offset_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>oldmovie_black_n_white_effect</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>oldmovie_dark_border_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>oldmovie_film_scratch_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>oldmovie_film_blotch_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>oldmovie_film_dust_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>oldmovie_lens_hair_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>oldmovie_lens_dust_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>oldmovie_define_hair_location</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>hair_t</name><modifier>*</modifier></type> <name>ps_hair</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>oldmovie_define_dust_location</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>dust_t</name><modifier>*</modifier></type> <name>ps_dust</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>oldmovie_sliding_offset_apply</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter> )</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Old movie effect video filter"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_( <literal type="string">"Old movie"</literal> )</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>es_format_IsSimilar</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Input and output format does not match"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name>fourcc</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>p_chroma</name> <init>=
<expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_chroma</name> <operator>||</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>||</operator> <operator>!</operator><call><name>vlc_fourcc_IsYUV</name><argument_list>( <argument><expr><name>fourcc</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported chroma (%4.4s)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_sys</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_start_time</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_last_time</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>oldmovie_free_allocated_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_in</name></decl></parameter> )</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_pic_in</name> <operator>||</operator> <operator>!</operator><name>p_filter</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name> <init>= <expr><call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_pic_out</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_time</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><call><name>oldmovie_allocate_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>picture_CopyPixels</name><argument_list>(<argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>oldmovie_black_n_white_effect</name><argument_list>( <argument><expr><name>p_pic_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>oldmovie_shutter_effect</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><call><name>oldmovie_sliding_offset_effect</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>oldmovie_dark_border_effect</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><call><name>oldmovie_film_scratch_effect</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>oldmovie_film_blotch_effect</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><call><name>oldmovie_lens_hair_effect</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><call><name>oldmovie_lens_dust_effect</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>oldmovie_film_dust_effect</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>oldmovie_allocate_data</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_in</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>oldmovie_free_allocated_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>=</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_visible_pitch</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>oldmovie_free_allocated_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_p</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_visible_pitch</name> <index>[<expr><name>i_p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>i_p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name> <index>[<expr><name>i_p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name>
<operator>/</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>oldmovie_free_allocated_data</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>uint32_t</name></type> <name>i_s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_s</name> <operator>&lt;</operator> <name>MAX_SCRATCH</name></expr>;</condition> <incr><expr><name>i_s</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_scratch</name><index>[<expr><name>i_s</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>( <init><decl><type><name>uint32_t</name></type> <name>i_h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_h</name> <operator>&lt;</operator> <name>MAX_HAIR</name></expr>;</condition> <incr><expr><name>i_h</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>( <init><decl><type><name>uint32_t</name></type> <name>i_d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_d</name> <operator>&lt;</operator> <name>MAX_DUST</name></expr>;</condition> <incr><expr><name>i_d</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>oldmovie_shutter_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHUTTER_FREQ</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHUTTER_SPEED</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHUTTER_HEIGHT</name></cpp:macro> <cpp:value>1.5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHUTTER_INTENSITY</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB_FRAME</name></cpp:macro> <cpp:value>(p_sys-&gt;i_cur_time % (CLOCK_FREQ / SHUTTER_FREQ))</cpp:value></cpp:define>




<decl_stmt><decl><type><name>int32_t</name></type> <name>i_shutter_sup</name> <init>= <expr><call><name>VLC_CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>SUB_FRAME</name>
<operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name>
<operator>*</operator> <name>SHUTTER_SPEED</name> <operator>/</operator> <name>CLOCK_FREQ</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_shutter_inf</name> <init>= <expr><call><name>VLC_CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>SUB_FRAME</name>
<operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name>
<operator>*</operator> <name>SHUTTER_SPEED</name> <operator>/</operator> <name>CLOCK_FREQ</name>
<operator>-</operator> <name>SHUTTER_HEIGHT</name> <operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_width</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name>
<operator>/</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>




<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_y</name> <init>= <expr><name>i_shutter_inf</name></expr></init></decl>;</init> <condition><expr><name>i_y</name> <operator>&lt;</operator> <name>i_shutter_sup</name></expr>;</condition> <incr><expr><name>i_y</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_x</name> <operator>&lt;</operator> <name>i_width</name></expr>;</condition> <incr><expr><name>i_x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DARKEN_PIXEL</name><argument_list>( <argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>SHUTTER_INTENSITY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>RandomEnd</name><parameter_list>(<parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>modulo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <name>modulo</name> <operator>+</operator> <name>modulo</name> <operator>/</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>oldmovie_sliding_offset_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET_AVERAGE_PERIOD</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(10)</cpp:value></cpp:define>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_trigger</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_trigger</name></name> <operator>=</operator> <call><name>RandomEnd</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>OFFSET_AVERAGE_PERIOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_ofs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_trigger</name></name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_trigger</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_ofs</name></name> <operator>=</operator> <call><name>MOD</name><argument_list>( <argument><expr><operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>)</operator></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_ofs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIDING_AVERAGE_PERIOD</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIDING_AVERAGE_DURATION</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(3)</cpp:value></cpp:define>


<if_stmt><if>if <condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_stop_trig</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_trigger</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_trigger</name></name> <operator>=</operator> <call><name>RandomEnd</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>SLIDING_AVERAGE_PERIOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_stop_trig</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_trigger</name></name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name> <operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_trigger</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_stop_trig</name></name> <operator>=</operator> <call><name>RandomEnd</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>SLIDING_AVERAGE_DURATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_ofs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name> <operator>=</operator> <call><name>MOD</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>)</operator></expr></argument>, <argument><expr><literal type="number">201</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_stop_trig</name></name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name> <operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_trigger</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition> <block>{<block_content>


<if_stmt><if>if <condition>( <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">50</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><call><name>abs</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_ofs</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name>
<operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name>
<operator>*</operator> <call><name>SEC_FROM_VLC_TICK</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_last_time</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call>
<operator>||</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_ofs</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <literal type="number">20</literal></expr> )</condition> <block>{<block_content>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_ofs</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_trigger</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_stop_trig</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_ofs</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_speed</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name>
<operator>*</operator> <call><name>SEC_FROM_VLC_TICK</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_last_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_ofs</name></name> <operator>=</operator> <call><name>MOD</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_ofs</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>*</operator> <literal type="number">100</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<return>return <expr><call><name>oldmovie_sliding_offset_apply</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>oldmovie_sliding_offset_apply</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>uint8_t</name></type> <name>i_p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_p</name> <operator>&lt;</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_p</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_temp_buf</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_temp_buf</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_temp_buf</name></expr></argument>,<argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>,
<argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_y</name> <operator>&lt;</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</condition> <incr><expr><name>i_y</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_ofs</name> <init>= <expr><call><name>MOD</name><argument_list>( <argument><expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_offset_ofs</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sliding_ofs</name></name> <operator>)</operator>
<operator>/</operator><literal type="number">100</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_ofs</name> <operator>*=</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ofs</name> <operator>/=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[ <expr><name>i_y</name> <operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr> ]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_temp_buf</name><index>[ <expr><operator>(</operator> <operator>(</operator> <name>i_y</name> <operator>+</operator> <name>i_ofs</name> <operator>)</operator> <operator>%</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name> <operator>)</operator> <operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr> ]</index></name></expr></argument>,
<argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_temp_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>oldmovie_black_n_white_effect</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_y</name> <operator>&lt;</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</condition> <incr><expr><name>i_y</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_x</name> <operator>&lt;</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</condition>
<incr><expr><name>i_x</name> <operator>+=</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_pix_ofs</name> <init>= <expr><name>i_x</name><operator>+</operator><name>i_y</name><operator>*</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_pix_ofs</name></expr>]</index></name> <operator>-=</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_pix_ofs</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_pix_ofs</name></expr>]</index></name> <operator>+=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><literal type="number">122</literal></expr></argument>,
<argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><literal type="number">132</literal></expr></argument>,
<argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>oldmovie_dark_border_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BORDER_DIST</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_y</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_y</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_x</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_x</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_x_border_dist</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_x</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>-</operator> <name>i_x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_y_border_dist</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>-</operator> <name>i_y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_border_dist</name> <init>= <expr><call><name>__MAX</name><argument_list>(<argument><expr><name>BORDER_DIST</name> <operator>-</operator> <name>i_x_border_dist</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name>BORDER_DIST</name> <operator>-</operator> <name>i_y_border_dist</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_border_dist</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name>BORDER_DIST</name></expr></argument>, <argument><expr><name>i_border_dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_border_dist</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_pix_ofs</name> <init>= <expr><name>i_x</name> <operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name>
<operator>+</operator> <name>i_y</name> <operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SUB_MIN</name><argument_list>( <argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_pix_ofs</name></expr>]</index></name></expr></argument>,
<argument><expr><name>i_border_dist</name> <operator>*</operator> <literal type="number">255</literal> <operator>/</operator> <name>BORDER_DIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>oldmovie_film_scratch_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRATCH_GENERATOR_PERIOD</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRATCH_DURATION</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(500)</cpp:value></cpp:define>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_scratch_trigger</name></name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name></expr> )</condition> <block>{<block_content>
<for>for <control>( <init><decl><type><name>uint32_t</name></type> <name>i_s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_s</name> <operator>&lt;</operator> <name>MAX_SCRATCH</name></expr>;</condition> <incr><expr><name>i_s</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_scratch</name><index>[<expr><name>i_s</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_scratch</name><index>[<expr><name>i_s</name></expr>]</index></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>scratch_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_scratch</name><index>[<expr><name>i_s</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_scratch</name><index>[<expr><name>i_s</name></expr>]</index></name><operator>-&gt;</operator><name>i_offset</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>)</operator>
<operator>%</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator>
<operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_scratch</name><index>[<expr><name>i_s</name></expr>]</index></name><operator>-&gt;</operator><name>i_width</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>)</operator>
<operator>%</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>/</operator> <literal type="number">500</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator>
<operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_scratch</name><index>[<expr><name>i_s</name></expr>]</index></name><operator>-&gt;</operator><name>i_intensity</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">50</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_scratch</name><index>[<expr><name>i_s</name></expr>]</index></name><operator>-&gt;</operator><name>i_stop_trigger</name> <operator>=</operator> <call><name>RandomEnd</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>SCRATCH_DURATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_scratch_trigger</name></name> <operator>=</operator> <call><name>RandomEnd</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>SCRATCH_GENERATOR_PERIOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>( <init><decl><type><name>uint32_t</name></type> <name>i_s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_s</name> <operator>&lt;</operator> <name>MAX_SCRATCH</name></expr>;</condition> <incr><expr><name>i_s</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_scratch</name><index>[<expr><name>i_s</name></expr>]</index></name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_scratch</name><index>[<expr><name>i_s</name></expr>]</index></name><operator>-&gt;</operator><name>i_stop_trigger</name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_scratch</name><index>[<expr><name>i_s</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_y</name> <operator>&lt;</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</condition> <incr><expr><name>i_y</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_x</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_scratch</name><index>[<expr><name>i_s</name></expr>]</index></name><operator>-&gt;</operator><name>i_offset</name></expr></init></decl>;</init>
<condition><expr><name>i_x</name> <operator>&lt;</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_scratch</name><index>[<expr><name>i_s</name></expr>]</index></name><operator>-&gt;</operator><name>i_offset</name>
<operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_scratch</name><index>[<expr><name>i_s</name></expr>]</index></name><operator>-&gt;</operator><name>i_width</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</condition>
<incr><expr><name>i_x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DARKEN_PIXEL</name><argument_list>( <argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_scratch</name><index>[<expr><name>i_s</name></expr>]</index></name><operator>-&gt;</operator><name>i_intensity</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></if></if_stmt></block_content></block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>oldmovie_film_blotch_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOTCH_GENERATOR_PERIOD</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(5)</cpp:value></cpp:define>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_blotch_trigger</name></name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_bx</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_by</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_width</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>/</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_intensity</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">50</literal> <operator>+</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> )</condition> <block>{<block_content>

<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_y</name> <init>= <expr><operator>-</operator><name>i_width</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i_y</name> <operator>&lt;</operator> <name>i_width</name></expr>;</condition> <incr><expr><name>i_y</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_x</name> <init>= <expr><operator>-</operator><name>i_width</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i_x</name> <operator>&lt;</operator> <name>i_width</name></expr>;</condition> <incr><expr><name>i_x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name>i_x</name> <operator>*</operator> <name>i_x</name> <operator>+</operator> <name>i_y</name> <operator>*</operator> <name>i_y</name> <operator>&lt;=</operator> <name>i_width</name> <operator>*</operator> <name>i_width</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_N_DARKEN_PIXEL</name><argument_list>( <argument><expr><name>i_x</name> <operator>+</operator> <name>i_bx</name></expr></argument>, <argument><expr><name>i_y</name> <operator>+</operator> <name>i_by</name></expr></argument>,
<argument><expr><name>i_intensity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_y</name> <init>= <expr><operator>-</operator><name>i_width</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i_y</name> <operator>&lt;</operator> <name>i_width</name></expr>;</condition> <incr><expr><name>i_y</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_x</name> <init>= <expr><operator>-</operator><name>i_width</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i_x</name> <operator>&lt;</operator> <name>i_width</name></expr>;</condition> <incr><expr><name>i_x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name>i_x</name> <operator>*</operator> <name>i_x</name> <operator>+</operator> <name>i_y</name> <operator>*</operator> <name>i_y</name> <operator>&lt;=</operator> <name>i_width</name> <operator>*</operator> <name>i_width</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_N_LIGHTEN_PIXEL</name><argument_list>( <argument><expr><name>i_x</name> <operator>+</operator> <name>i_bx</name></expr></argument>, <argument><expr><name>i_y</name> <operator>+</operator> <name>i_by</name></expr></argument>,
<argument><expr><name>i_intensity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_blotch_trigger</name></name> <operator>=</operator> <call><name>RandomEnd</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>BLOTCH_GENERATOR_PERIOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>oldmovie_film_dust_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter> )</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONESHOT_DUST_RATIO</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_dust</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>
<condition><expr><name>i_dust</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>/</operator> <name>ONESHOT_DUST_RATIO</name></expr>;</condition>
<incr><expr><name>i_dust</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">5</literal> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DARKEN_PIXEL</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LIGHTEN_PIXEL</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAIR_GENERATOR_PERIOD</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(50)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAIR_DURATION</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(50)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUST_GENERATOR_PERIOD</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(100)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUST_DURATION</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(4)</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>void</name></type> <name>oldmovie_define_hair_location</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>hair_t</name><modifier>*</modifier></type> <name>ps_hair</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ps_hair</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_hair</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_hair</name><operator>-&gt;</operator><name>i_rotation</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">200</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_hair</name><operator>-&gt;</operator><name>i_stop_trigger</name></name> <operator>=</operator> <call><name>RandomEnd</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>HAIR_DURATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>oldmovie_lens_hair_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_hair_trigger</name></name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name></expr> )</condition> <block>{<block_content>
<for>for <control>( <init><decl><type><name>uint32_t</name></type> <name>i_h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_h</name> <operator>&lt;</operator> <name>MAX_HAIR</name></expr>;</condition> <incr><expr><name>i_h</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hair_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name><operator>-&gt;</operator><name>i_length</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call>
<operator>%</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>/</operator> <literal type="number">3</literal> <operator>)</operator> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name><operator>-&gt;</operator><name>i_curve</name> <operator>=</operator> <call><name>MOD</name><argument_list>( <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name><operator>-&gt;</operator><name>i_width</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call>
<operator>%</operator> <call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>/</operator> <literal type="number">1500</literal></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name><operator>-&gt;</operator><name>i_intensity</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">50</literal> <operator>+</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oldmovie_define_hair_location</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_hair_trigger</name></name> <operator>=</operator> <call><name>RandomEnd</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>HAIR_GENERATOR_PERIOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>( <init><decl><type><name>uint32_t</name></type> <name>i_h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_h</name> <operator>&lt;</operator> <name>MAX_HAIR</name></expr>;</condition> <incr><expr><name>i_h</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name><operator>-&gt;</operator><name>i_stop_trigger</name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oldmovie_define_hair_location</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>double</name></type> <name>f_base_x</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name><operator>-&gt;</operator><name>i_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f_base_y</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name><operator>-&gt;</operator><name>i_y</name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_l</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name><operator>-&gt;</operator><name>i_length</name></expr>;</condition> <incr><expr><name>i_l</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_current_rot</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name><operator>-&gt;</operator><name>i_rotation</name>
<operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name><operator>-&gt;</operator><name>i_curve</name> <operator>*</operator> <name>i_l</name> <operator>/</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>f_base_x</name> <operator>+=</operator> <call><name>cos</name><argument_list>( <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>i_current_rot</name> <operator>/</operator> <literal type="number">128.0</literal> <operator>*</operator> <name>M_PI</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f_base_y</name> <operator>+=</operator> <call><name>sin</name><argument_list>( <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>i_current_rot</name> <operator>/</operator> <literal type="number">128.0</literal> <operator>*</operator> <name>M_PI</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f_current_x</name> <init>= <expr><name>f_base_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f_current_y</name> <init>= <expr><name>f_base_y</name></expr></init></decl>;</decl_stmt>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_w</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name><operator>-&gt;</operator><name>i_width</name></expr>;</condition> <incr><expr><name>i_w</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<expr_stmt><expr><name>f_current_x</name> <operator>+=</operator> <call><name>sin</name><argument_list>( <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>i_current_rot</name> <operator>/</operator> <literal type="number">128.0</literal> <operator>*</operator> <name>M_PI</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f_current_y</name> <operator>+=</operator> <call><name>cos</name><argument_list>( <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>i_current_rot</name> <operator>/</operator> <literal type="number">128.0</literal> <operator>*</operator> <name>M_PI</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_N_DARKEN_PIXEL</name><argument_list>( <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <name>f_current_x</name></expr></argument>,
<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <name>f_current_y</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_hair</name><index>[<expr><name>i_h</name></expr>]</index></name><operator>-&gt;</operator><name>i_intensity</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt></block_content></block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>oldmovie_define_dust_location</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>dust_t</name><modifier>*</modifier></type> <name>ps_dust</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ps_dust</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_dust</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_dust</name><operator>-&gt;</operator><name>i_stop_trigger</name></name> <operator>=</operator> <call><name>RandomEnd</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>HAIR_DURATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ps_dust</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <call><name>MOD</name><argument_list>( <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_dust</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <call><name>MOD</name><argument_list>( <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_dust</name><operator>-&gt;</operator><name>i_stop_trigger</name></name> <operator>=</operator> <call><name>RandomEnd</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>DUST_DURATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>oldmovie_lens_dust_effect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dust_trigger</name></name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name></expr> )</condition> <block>{<block_content>
<for>for <control>( <init><decl><type><name>uint32_t</name></type> <name>i_d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_d</name> <operator>&lt;</operator> <name>MAX_DUST</name></expr>;</condition> <incr><expr><name>i_d</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dust_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>oldmovie_define_dust_location</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name><operator>-&gt;</operator><name>i_width</name> <operator>=</operator> <call><name>MOD</name><argument_list>( <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name><operator>-&gt;</operator><name>i_intensity</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dust_trigger</name></name> <operator>=</operator> <call><name>RandomEnd</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>DUST_GENERATOR_PERIOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>( <init><decl><type><name>uint32_t</name></type> <name>i_d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_d</name> <operator>&lt;</operator> <name>MAX_DUST</name></expr>;</condition> <incr><expr><name>i_d</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name><operator>-&gt;</operator><name>i_stop_trigger</name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_time</name></name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oldmovie_define_dust_location</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_y</name> <init>= <expr><operator>-</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name><operator>-&gt;</operator><name>i_width</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i_y</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name><operator>-&gt;</operator><name>i_width</name></expr>;</condition> <incr><expr><name>i_y</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_x</name> <init>= <expr><operator>-</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name><operator>-&gt;</operator><name>i_width</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i_x</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name><operator>-&gt;</operator><name>i_width</name></expr>;</condition> <incr><expr><name>i_x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name>i_x</name> <operator>*</operator> <name>i_x</name> <operator>+</operator> <name>i_y</name> <operator>*</operator> <name>i_y</name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name><operator>-&gt;</operator><name>i_width</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name><operator>-&gt;</operator><name>i_width</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_N_DARKEN_PIXEL</name><argument_list>( <argument><expr><name>i_x</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name><operator>-&gt;</operator><name>i_x</name></expr></argument>,
<argument><expr><name>i_y</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name><operator>-&gt;</operator><name>i_y</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dust</name><index>[<expr><name>i_d</name></expr>]</index></name><operator>-&gt;</operator><name>i_intensity</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></if></if_stmt></block_content></block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
