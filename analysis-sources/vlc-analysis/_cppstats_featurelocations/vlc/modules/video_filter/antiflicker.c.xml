<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\antiflicker.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetLuminanceAvg</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>p_pic</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AntiFlickerCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINDOW_TEXT</name></cpp:macro> <cpp:value>N_("Window size")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINDOW_LONGTEXT</name></cpp:macro> <cpp:value>N_("Number of frames (0 to 100)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFTN_TEXT</name></cpp:macro> <cpp:value>N_("Softening value")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFTN_LONGTEXT</name></cpp:macro> <cpp:value>N_("Number of frames consider for smoothening (0 to 30)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_PREFIX</name></cpp:macro> <cpp:value>"antiflicker-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_WINDOW_SZ</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SOFTENING_SZ</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCENE_CHANGE_THRESHOLD</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>




<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Antiflicker video filter"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_( <literal type="string">"antiflicker"</literal> )</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>FILTER_PREFIX <literal type="string">"window-size"</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>MAX_WINDOW_SZ</argument>,
<argument>WINDOW_TEXT</argument>, <argument>WINDOW_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>FILTER_PREFIX <literal type="string">"softening-size"</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>MAX_SOFTENING_SZ</argument>,
<argument>SFTN_TEXT</argument>, <argument>SFTN_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"antiflicker"</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Create</argument>, <argument>Destroy</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>







<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>atomic_int</name></type> <name>i_window_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_int</name></type> <name>i_softening</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ia_luminance_data</name><index>[<expr><name>MAX_WINDOW_SZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_old_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>






<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>CASE_PLANAR_YUV</name></type>
<name>assert</name><argument_list>(<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_in</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input chroma (%4.4s)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>


<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>filter_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_window_size</name></name></expr></argument>,
<argument><expr><call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,
<argument><expr><name>FILTER_PREFIX</name><literal type="string">"window-size"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_softening</name></name></expr></argument>,
<argument><expr><call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,
<argument><expr><name>FILTER_PREFIX</name><literal type="string">"softening-size"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_old_data</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>*</operator>
<operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_old_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_old_data</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ia_luminance_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ia_luminance_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ia_luminance_data</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_window_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>,<argument><expr><name>FILTER_PREFIX</name> <literal type="string">"window-size"</literal></expr></argument>,
<argument><expr><name>AntiFlickerCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>,<argument><expr><name>FILTER_PREFIX</name> <literal type="string">"softening-size"</literal></expr></argument>,
<argument><expr><name>AntiFlickerCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>,<argument><expr><name>FILTER_PREFIX</name> <literal type="string">"window-size"</literal></expr></argument>,
<argument><expr><name>AntiFlickerCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>,<argument><expr><name>FILTER_PREFIX</name> <literal type="string">"softening-size"</literal></expr></argument>,
<argument><expr><name>AntiFlickerCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_old_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>GetLuminanceAvg</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_yplane_out</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_num_lines</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_num_cols</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_in_pitch</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_num_lines</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_num_cols</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>lum_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i_line</name> <operator>&lt;</operator> <name>i_num_lines</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i_line</name></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i_col</name> <operator>&lt;</operator> <name>i_num_cols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i_col</name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>lum_sum</name> <operator>+=</operator> <name><name>p_yplane_out</name><index>[<expr><name>i_line</name><operator>*</operator><name>i_in_pitch</name><operator>+</operator><name>i_col</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<decl_stmt><decl><type><name>unsigned</name></type> <name>div</name> <init>= <expr><name>i_num_lines</name> <operator>*</operator> <name>i_num_cols</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>lum_sum</name> <operator>+</operator> <operator>(</operator><name>div</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>div</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name> <init>= <expr><call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_outpic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_window_size</name> <init>= <expr><call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_window_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_softening</name> <init>= <expr><call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_softening</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_yplane_in</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_yplane_out</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>scene_changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_num_lines</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_num_cols</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_in_pitch</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_out_pitch</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>lum_avg</name> <init>= <expr><call><name>GetLuminanceAvg</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if<condition>( <expr><call><name>abs</name><argument_list>(<argument><expr><name>lum_avg</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator>
<name>ia_luminance_data</name><index>[<expr><name>i_window_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>SCENE_CHANGE_THRESHOLD</name>
<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ia_luminance_data</name><index>[<expr><name>i_window_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>scene_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>scene_changed</name></expr> )</condition>
<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_window_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ia_luminance_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lum_avg</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_window_size</name><operator>-</operator><literal type="number">1</literal></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ia_luminance_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>ia_luminance_data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ia_luminance_data</name><index>[<expr><name>i_window_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lum_avg</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lum_avg</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>filt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_window_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>filt</name> <operator>+=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ia_luminance_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <name>filt</name><operator>/</operator><operator>(</operator><name>i_window_size</name><operator>*</operator><name>lum_avg</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name>shift</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scale_num</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><name>scale</name></expr></argument>,<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name> <operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i_line</name> <operator>&lt;</operator> <name>i_num_lines</name></expr> ;</condition> <incr><expr><name>i_line</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_col</name> <operator>&lt;</operator> <name>i_num_cols</name></expr> ;</condition> <incr><expr><name>i_col</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>pixel_data</name> <init>= <expr><name><name>p_yplane_in</name><index>[<expr><name>i_line</name><operator>*</operator><name>i_in_pitch</name><operator>+</operator><name>i_col</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pixel_val</name> <init>= <expr><operator>(</operator> <name>scale_num</name> <operator>*</operator> <name>pixel_data</name> <operator>+</operator>
<operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>shift</name> <operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_yplane_out</name><index>[<expr><name>i_line</name><operator>*</operator><name>i_out_pitch</name><operator>+</operator><name>i_col</name></expr>]</index></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><name>pixel_val</name><operator>&gt;</operator><literal type="number">255</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">255</literal></expr></then><else>:<expr><name>pixel_val</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scene_changed</name> <operator>||</operator> <name>i_softening</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_yplane_out_old</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_old_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_video_width</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i_line</name> <operator>&lt;</operator> <name>i_num_lines</name></expr> ;</condition> <incr><expr><name>i_line</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_col</name> <operator>&lt;</operator> <name>i_num_cols</name></expr> ;</condition> <incr><expr><name>i_col</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>pixel_data</name> <init>= <expr><name><name>p_yplane_out</name><index>[<expr><name>i_line</name><operator>*</operator><name>i_out_pitch</name><operator>+</operator><name>i_col</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>pixel_old</name> <init>= <expr><name><name>p_yplane_out_old</name><index>[<expr><name>i_line</name><operator>*</operator><name>i_video_width</name><operator>+</operator><name>i_col</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>pixel_data</name> <operator>-</operator> <name>pixel_old</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>i_softening</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <operator>(</operator><name>i_softening</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_yplane_out_old</name><index>[<expr><name>i_line</name><operator>*</operator><name>i_video_width</name><operator>+</operator><name>i_col</name></expr>]</index></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><name>pixel_data</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>pixel_old</name><operator>)</operator> <operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_yplane_out_old</name><index>[<expr><name>i_line</name><operator>*</operator><name>i_video_width</name><operator>+</operator><name>i_col</name></expr>]</index></name> <operator>=</operator> <name>pixel_data</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_yplane_out</name><index>[<expr><name>i_line</name><operator>*</operator><name>i_out_pitch</name><operator>+</operator><name>i_col</name></expr>]</index></name> <operator>=</operator>
<name><name>p_yplane_out_old</name><index>[<expr><name>i_line</name><operator>*</operator><name>i_video_width</name><operator>+</operator><name>i_col</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>AntiFlickerCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>filter_sys_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"window-size"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_window_size</name></name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"softening-size"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_softening</name></name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
