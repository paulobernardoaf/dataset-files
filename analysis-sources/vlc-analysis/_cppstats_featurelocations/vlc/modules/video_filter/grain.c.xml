<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\grain.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BANK_SIZE</name></cpp:macro> <cpp:value>(64)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"grain-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARIANCE_MIN</name></cpp:macro> <cpp:value>(0.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARIANCE_MAX</name></cpp:macro> <cpp:value>(10.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARIANCE_TEXT</name></cpp:macro> <cpp:value>N_("Variance")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARIANCE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Variance of the gaussian noise")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERIOD_MIN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERIOD_MAX</name></cpp:macro> <cpp:value>BANK_SIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERIOD_MIN_TEXT</name></cpp:macro> <cpp:value>N_("Minimal period")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERIOD_MIN_LONGTEXT</name></cpp:macro> <cpp:value>N_("Minimal period of the noise grain in pixel")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERIOD_MAX_TEXT</name></cpp:macro> <cpp:value>N_("Maximal period")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERIOD_MAX_LONGTEXT</name></cpp:macro> <cpp:value>N_("Maximal period of the noise grain in pixel")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Grain video filter"</literal>)</argument>)</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Grain"</literal>)</argument>)</argument_list></macro>
<macro><name>set_help</name><argument_list>(<argument>N_(<literal type="string">"Adds filtered gaussian noise"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VFILTER</argument>)</argument_list></macro>
<macro><name>add_float_with_range</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"variance"</literal></argument>, <argument><literal type="number">2.0</literal></argument>, <argument>VARIANCE_MIN</argument>, <argument>VARIANCE_MAX</argument>,
<argument>VARIANCE_TEXT</argument>, <argument>VARIANCE_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"period-min"</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>PERIOD_MIN</argument>, <argument>PERIOD_MAX</argument>,
<argument>PERIOD_MIN_TEXT</argument>, <argument>PERIOD_MIN_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"period-max"</literal></argument>, <argument><literal type="number">3</literal>*PERIOD_MAX/<literal type="number">4</literal></argument>, <argument>PERIOD_MIN</argument>, <argument>PERIOD_MAX</argument>,
<argument>PERIOD_MAX_TEXT</argument>, <argument>PERIOD_MAX_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLEND_SIZE</name></cpp:macro> <cpp:value>(8)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>is_uv_filtered</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>seed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>bank</name><index>[<expr><name>BANK_SIZE</name> <operator>*</operator> <name>BANK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>bank_y</name><index>[<expr><name>BANK_SIZE</name> <operator>*</operator> <name>BANK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>bank_uv</name><index>[<expr><name>BANK_SIZE</name> <operator>*</operator> <name>BANK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>blend</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>noise</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>emms</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <block>{
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>variance</name></decl>;</decl_stmt>
}</block> <decl><name>cfg</name></decl>;</struct>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URAND_SEED</name></cpp:macro> <cpp:value>(2463534242)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>urand</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>s</name> <init>= <expr><operator>*</operator><name>seed</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> <operator>^=</operator> <name>s</name> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>^=</operator> <name>s</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>^=</operator> <name>s</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>seed</name> <operator>=</operator> <name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>drand</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>urand</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>UINT32_MAX</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>grand</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>r1</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>r2</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>u1</name></decl>, <decl><type ref="prev"/><name>u2</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>u1</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>drand</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u2</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>drand</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>u1</name> <operator>*</operator> <name>u1</name> <operator>+</operator> <name>u2</name> <operator>*</operator> <name>u2</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>s</name> <operator>&gt;=</operator> <literal type="number">1.0</literal></expr>)</condition>;</do>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>r1</name> <operator>=</operator> <name>u1</name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>r2</name> <operator>=</operator> <name>u2</name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>BlockBlend</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>noise</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>dst_pitch</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator>
<call><name>clip_uint8_vlc</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>y</name> <operator>*</operator> <name>src_pitch</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>+</operator> <name><name>noise</name><index>[<expr><name>y</name> <operator>*</operator> <name>BANK_SIZE</name> <operator>+</operator><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>BlockBlendC</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>noise</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BlockBlend</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_pitch</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_pitch</name></expr></argument>, <argument><expr><name>noise</name></expr></argument>,
<argument><expr><name>BLEND_SIZE</name></expr></argument>, <argument><expr><name>BLEND_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_EXPAND</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STRING_EXPAND(x)</cpp:value></cpp:define>
<function><type><name>VLC_SSE</name>
<specifier>static</specifier> <name>void</name></type> <name>BlockBlendSse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>noise</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BLEND_SIZE</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>



<asm>asm <specifier>volatile</specifier> ("pxor %%xmm0, %%xmm0\n" : :);</asm>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<asm>asm <specifier>volatile</specifier> (
"movq (%[src1]), %%xmm1\n"
"movq (%[src2]), %%xmm3\n"
"movdqu (%[noise]), %%xmm2\n"
"movdqu 2*"STRING(BANK_SIZE)"(%[noise]), %%xmm4\n"

"punpcklbw %%xmm0, %%xmm1\n"
"punpcklbw %%xmm0, %%xmm3\n"

"paddsw %%xmm2, %%xmm1\n"
"paddsw %%xmm4, %%xmm3\n"
"packuswb %%xmm1, %%xmm1\n"
"packuswb %%xmm3, %%xmm3\n"
"movq %%xmm1, (%[dst1])\n"
"movq %%xmm3, (%[dst2])\n"
: : [dst1]"r"(&amp;dst[(2*i+0) * dst_pitch]),
[dst2]"r"(&amp;dst[(2*i+1) * dst_pitch]),
[src1]"r"(&amp;src[(2*i+0) * src_pitch]),
[src2]"r"(&amp;src[(2*i+1) * src_pitch]),
[noise]"r"(&amp;noise[2*i * BANK_SIZE])
: "xmm0", "xmm1", "xmm2", "xmm3", "xmm4", "memory");</asm>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"BLEND_SIZE unsupported"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>Emms</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<asm>asm <specifier>volatile</specifier> ("emms");</asm>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Scale</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><name>BANK_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><name><name>src</name><index>[<expr><name>y</name> <operator>*</operator> <name>N</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vq</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vq</name> <operator>=</operator> <operator>(</operator> <name>v</name> <operator>*</operator> <name>scale</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>vq</name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><operator>-</operator><name>v</name> <operator>*</operator> <name>scale</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>N</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>vq</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlaneFilter</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
<parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>bank</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>BLEND_SIZE</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>BLEND_SIZE</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bx</name> <init>= <expr><call><name>urand</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call> <operator>%</operator> <operator>(</operator><name>BANK_SIZE</name> <operator>-</operator> <name>BLEND_SIZE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>by</name> <init>= <expr><call><name>urand</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call> <operator>%</operator> <operator>(</operator><name>BANK_SIZE</name> <operator>-</operator> <name>BLEND_SIZE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>noise</name> <init>= <expr><operator>&amp;</operator><name><name>bank</name><index>[<expr><name>by</name> <operator>*</operator> <name>BANK_SIZE</name> <operator>+</operator> <name>bx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>i_visible_pitch</name></name> <operator>-</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>-</operator> <name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp</name> <init>= <expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>src</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name> <init>= <expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>dst</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;=</operator> <name>BLEND_SIZE</name> <operator>&amp;&amp;</operator> <name>h</name> <operator>&gt;=</operator> <name>BLEND_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>sys</name><operator>-&gt;</operator><name>blend</name></name><argument_list>(<argument><expr><name>dstp</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>, <argument><expr><name>srcp</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>, <argument><expr><name>noise</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BlockBlend</name><argument_list>(<argument><expr><name>dstp</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>, <argument><expr><name>srcp</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>, <argument><expr><name>noise</name></expr></argument>,
<argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>BLEND_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>BLEND_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>emms</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>sys</name><operator>-&gt;</operator><name>emms</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>filter_NewPicture</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>variance</name> <init>= <expr><call><name>VLC_CLIP</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>variance</name></name></expr></argument>, <argument><expr><name>VARIANCE_MIN</name></expr></argument>, <argument><expr><name>VARIANCE_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>scale</name> <init>= <expr><literal type="number">256</literal> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>variance</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>!=</operator> <name><name>sys</name><operator>-&gt;</operator><name>scale</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Scale</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>bank_y</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>bank</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Scale</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>bank_uv</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>bank</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>scale</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>srcp</name> <init>= <expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>dstp</name> <init>= <expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>is_uv_filtered</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>bank</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>sys</name><operator>-&gt;</operator><name>bank_y</name></name></expr> </then><else>:
<expr><name><name>sys</name><operator>-&gt;</operator><name>bank_uv</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PlaneFilter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>dstp</name></expr></argument>, <argument><expr><name>srcp</name></expr></argument>, <argument><expr><name>bank</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>(<argument><expr><name>dstp</name></expr></argument>, <argument><expr><name>srcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Generate</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>bank</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h_min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h_max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v_min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v_max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><name>BANK_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>workspace</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>N</name> <operator>*</operator> <name>N</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>workspace</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>workspace</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>gn</name> <init>= <expr><operator>&amp;</operator><name><name>workspace</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>N</name> <operator>*</operator> <name>N</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>cij</name> <init>= <expr><operator>&amp;</operator><name><name>workspace</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>N</name> <operator>*</operator> <name>N</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>&amp;</operator><name><name>workspace</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>N</name> <operator>*</operator> <name>N</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>N</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>seed</name> <init>= <expr><name>URAND_SEED</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>N</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>grand</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gn</name><index>[<expr><name>y</name> <operator>*</operator> <name>N</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gn</name><index>[<expr><name>y</name> <operator>*</operator> <name>N</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>



<decl_stmt><decl><type><name>int</name></type> <name>zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <name>h_min</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>v_min</name><operator>)</operator> <operator>||</operator> <name>x</name> <operator>&gt;</operator> <name>h_max</name> <operator>||</operator> <name>y</name> <operator>&gt;</operator> <name>v_max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>gn</name><index>[<expr><name>y</name> <operator>*</operator> <name>N</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>zero</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>correction</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>N</name> <operator>*</operator> <name>N</name> <operator>/</operator> <operator>(</operator><name>N</name> <operator>*</operator> <name>N</name> <operator>-</operator> <name>zero</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cij</name><index>[<expr><name>i</name> <operator>*</operator> <name>N</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <name>N</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">2.0f</literal> <operator>/</operator> <name>N</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>i</name> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">2</literal> <operator>/</operator> <name>N</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>gn</name><index>[<expr><name>i</name> <operator>*</operator> <name>N</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>*</operator> <name><name>cij</name><index>[<expr><name>k</name> <operator>*</operator> <name>N</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <name>N</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>cij</name><index>[<expr><name>k</name> <operator>*</operator> <name>N</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>*</operator> <name><name>tmp</name><index>[<expr><name>k</name> <operator>*</operator> <name>N</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>int</name></type> <name>vq</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vq</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <name>v</name> <operator>*</operator> <name>correction</name> <operator>*</operator> <literal type="number">127</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>vq</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>-</operator><name>v</name> <operator>*</operator> <name>correction</name> <operator>*</operator> <literal type="number">127</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>bank</name><index>[<expr><name>i</name> <operator>*</operator> <name>N</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>(<argument><expr><name>vq</name></expr></argument>, <argument><expr><name>INT16_MIN</name></expr></argument>, <argument><expr><name>INT16_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>



<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>workspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Callback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>variance</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>f_float</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>chroma</name> <init>=
<expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chroma</name> <operator>||</operator> <name><name>chroma</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>chroma</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported chroma (%4.4s)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>is_uv_filtered</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <name>URAND_SEED</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cutoff_low</name> <init>= <expr><name>BANK_SIZE</name> <operator>-</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"period-max"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cutoff_high</name><init>= <expr><name>BANK_SIZE</name> <operator>-</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"period-min"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cutoff_low</name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>(<argument><expr><name>cutoff_low</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>BANK_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cutoff_high</name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>(<argument><expr><name>cutoff_high</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>BANK_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Generate</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>bank</name></name></expr></argument>, <argument><expr><name>cutoff_low</name></expr></argument>, <argument><expr><name>cutoff_high</name></expr></argument>, <argument><expr><name>cutoff_low</name></expr></argument>, <argument><expr><name>cutoff_high</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>blend</name></name> <operator>=</operator> <name>BlockBlendC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>emms</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="number">1</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>vlc_CPU_SSE2</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>blend</name></name> <operator>=</operator> <name>BlockBlendSse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>emms</name></name> <operator>=</operator> <name>Emms</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>variance</name></name> <operator>=</operator> <call><name>var_CreateGetFloatCommand</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"variance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"variance"</literal></expr></argument>, <argument><expr><name>Callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"variance"</literal></expr></argument>, <argument><expr><name>Callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
