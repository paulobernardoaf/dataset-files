<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\gradient.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<enum>enum <block>{ <decl><name>GRADIENT</name></decl>, <decl><name>EDGE</name></decl>, <decl><name>HOUGH</name></decl> }</block>;</enum>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GradientCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FilterGradient</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FilterEdge</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FilterHough</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_TEXT</name></cpp:macro> <cpp:value>N_("Distort mode")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Distort mode, one of \"gradient\", \"edge\" and \"hough\".")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRADIENT_TEXT</name></cpp:macro> <cpp:value>N_("Gradient image type")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRADIENT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Gradient image type (0 or 1). 0 will " "turn the image to white while 1 will keep colors." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CARTOON_TEXT</name></cpp:macro> <cpp:value>N_("Apply cartoon effect")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CARTOON_LONGTEXT</name></cpp:macro> <cpp:value>N_("Apply cartoon effect. It is only used by " "\"gradient\" and \"edge\".")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRADIENT_HELP</name></cpp:macro> <cpp:value>N_("Apply color gradient or edge detection effects")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>mode_list</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"gradient"</literal></expr>, <expr><literal type="string">"edge"</literal></expr>, <expr><literal type="string">"hough"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>mode_list_text</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Gradient"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Edge"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Hough"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_PREFIX</name></cpp:macro> <cpp:value>"gradient-"</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Gradient video filter"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_( <literal type="string">"Gradient"</literal> )</argument>)</argument_list></macro>
<macro><name>set_help</name><argument_list>(<argument>GRADIENT_HELP</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>FILTER_PREFIX <literal type="string">"mode"</literal></argument>, <argument><literal type="string">"gradient"</literal></argument>,
<argument>MODE_TEXT</argument>, <argument>MODE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_string_list</name><argument_list>( <argument>mode_list</argument>, <argument>mode_list_text</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>FILTER_PREFIX <literal type="string">"type"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>,
<argument>GRADIENT_TEXT</argument>, <argument>GRADIENT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>FILTER_PREFIX <literal type="string">"cartoon"</literal></argument>, <argument>true</argument>,
<argument>CARTOON_TEXT</argument>, <argument>CARTOON_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"gradient"</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Create</argument>, <argument>Destroy</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"type"</literal></expr>, <expr><literal type="string">"cartoon"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>







<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_mode</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_gradient_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_cartoon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_buf32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_buf32_bis</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buf8</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p_pre_hough</name></decl>;</decl_stmt>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>






<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_method</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<macro><name>CASE_PLANAR_YUV</name></macro>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input chroma (%4.4s)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>


<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>filter_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pre_hough</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>psz_method</name> <operator>=</operator>
<call><name>var_CreateGetNonEmptyStringCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"mode"</literal></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"configuration variable "</literal>
<name>FILTER_PREFIX</name> <literal type="string">"mode empty"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name>GRADIENT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_method</name></expr></argument>, <argument><expr><literal type="string">"gradient"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name>GRADIENT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_method</name></expr></argument>, <argument><expr><literal type="string">"edge"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name>EDGE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_method</name></expr></argument>, <argument><expr><literal type="string">"hough"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name>HOUGH</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"no valid gradient mode provided (%s)"</literal></expr></argument>, <argument><expr><name>psz_method</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name>GRADIENT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_method</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_gradient_type</name></name> <operator>=</operator>
<call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"type"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_cartoon</name></name> <operator>=</operator>
<call><name>var_CreateGetBoolCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"cartoon"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"mode"</literal></expr></argument>,
<argument><expr><name>GradientCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"type"</literal></expr></argument>,
<argument><expr><name>GradientCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"cartoon"</literal></expr></argument>,
<argument><expr><name>GradientCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf32</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf32_bis</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf8</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"mode"</literal></expr></argument>,
<argument><expr><name>GradientCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"type"</literal></expr></argument>,
<argument><expr><name>GradientCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"cartoon"</literal></expr></argument>,
<argument><expr><name>GradientCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf32</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf32_bis</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf8</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pre_hough</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_outpic</name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_outpic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>EDGE</name></expr>:</case>
<expr_stmt><expr><call><name>FilterEdge</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>GRADIENT</name></expr>:</case>
<expr_stmt><expr><call><name>FilterGradient</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>HOUGH</name></expr>:</case>
<expr_stmt><expr><call><name>FilterHough</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>void</name></type> <name>GaussianConvolution</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_inpic</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_smooth</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_inpix</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_pitch</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_visible</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_num_lines</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_num_lines</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_src_visible</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_smooth</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator>

<operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>
<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name>
<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>
<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name>
<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>
<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>)</operator>
<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>
<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name>
<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>)</operator>
<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">2</literal> <operator>)</operator>
<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>)</operator>
<operator>+</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name>
<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>
<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>)</operator>
<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>
<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>
<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name>
<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>
<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>)</operator>
<operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr> ;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>FilterGradient</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_inpic</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_pitch</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_visible</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_pitch</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_num_lines</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_inpix</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_outpix</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_smooth</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf32</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf32</name></name> <operator>=</operator>
<call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_num_lines</name> <operator>*</operator> <name>i_src_visible</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_smooth</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_buf32</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_smooth</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_cartoon</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>,
<argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>,
<argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>GaussianConvolution</name><argument_list>( <argument><expr><name>p_inpic</name></expr></argument>, <argument><expr><name>p_smooth</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name></cpp:macro> <cpp:value>for( int y = 1; y &lt; i_num_lines - 1; y++ ) { for( int x = 1; x &lt; i_src_visible - 1; x++ ) { const uint32_t a = abs(((int)p_smooth[(y - 1) * i_src_visible + x - 1] - (int)p_smooth[(y + 1) * i_src_visible + x - 1]) + (((int)p_smooth[(y - 1) * i_src_visible + x] - (int)p_smooth[(y + 1) * i_src_visible + x]) * 2) + ((int)p_smooth[(y - 1) * i_src_visible + x + 1] - (int)p_smooth[(y + 1) * i_src_visible + x + 1])) + abs(((int)p_smooth[(y - 1) * i_src_visible + x - 1] - (int)p_smooth[(y - 1) * i_src_visible + x + 1]) + (((int)p_smooth[y * i_src_visible + x - 1] - (int)p_smooth[y * i_src_visible + x + 1]) * 2) + ((int)p_smooth[(y + 1) * i_src_visible + x - 1] - (int)p_smooth[(y + 1) * i_src_visible + x + 1]));</cpp:value></cpp:define>


















<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_gradient_type</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_cartoon</name></name></expr> )</condition>
<block>{<block_content>
<macro><name>FOR</name></macro>
<if_stmt><if>if<condition>( <expr><name>a</name> <operator>&gt;</operator> <literal type="number">60</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_outpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_dst_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_smooth</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0xa0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_outpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_dst_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator>
<literal type="number">0xff</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><literal type="number">0xff</literal> <operator>-</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_smooth</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x70</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_outpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_dst_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator>
<literal type="number">0xa0</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><literal type="number">0xa0</literal> <operator>-</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_smooth</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x28</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_outpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_dst_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator>
<literal type="number">0x70</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><literal type="number">0x70</literal> <operator>-</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_outpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_dst_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator>
<literal type="number">0x28</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><literal type="number">0x28</literal> <operator>-</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<if_stmt><else>else
<block>{<block_content>
<decl_stmt><decl><type><name>FOR</name></type>
<name><name>p_outpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_dst_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <init>= <expr><call><name>clip_uint8_vlc</name><argument_list>( <argument><expr><name>a</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
</block_content>}</block></else></if_stmt>}
}
}
else
<block>{<block_content>
<macro><name>FOR</name></macro>
<if_stmt><if>if<condition>( <expr><name>a</name><operator>&gt;&gt;</operator><literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_outpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_dst_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_outpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_dst_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal><operator>-</operator><operator>(</operator><name>uint8_t</name><operator>)</operator><name>a</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>}
}
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FOR</name></cpp:undef>
}









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THETA_Y</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THETA_X</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THETA_P</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THETA_M</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
static <function><type><name>void</name></type> <name>FilterEdge</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_inpic</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_pitch</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_visible</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_pitch</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_num_lines</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_inpix</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_outpix</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_smooth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_grad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_theta</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf32</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf32</name></name> <operator>=</operator>
<call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_num_lines</name> <operator>*</operator> <name>i_src_visible</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_smooth</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_buf32</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf32_bis</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf32_bis</name></name> <operator>=</operator>
<call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_num_lines</name> <operator>*</operator> <name>i_src_visible</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_grad</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_buf32_bis</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf8</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf8</name></name> <operator>=</operator>
<call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_num_lines</name> <operator>*</operator> <name>i_src_visible</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_theta</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_buf8</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_smooth</name> <operator>||</operator> <operator>!</operator><name>p_grad</name> <operator>||</operator> <operator>!</operator><name>p_theta</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_cartoon</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>,
<argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>,
<argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>,
<argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>GaussianConvolution</name><argument_list>( <argument><expr><name>p_inpic</name></expr></argument>, <argument><expr><name>p_smooth</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>







<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_num_lines</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_src_visible</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>gradx</name> <init>=
<expr><operator>(</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>
<operator>-</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>)</operator>
<operator>+</operator> <operator>(</operator> <operator>(</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name>
<operator>-</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>)</operator> <operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>
<operator>+</operator> <operator>(</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name>
<operator>-</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>grady</name> <init>=
<expr><operator>(</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>
<operator>-</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>)</operator>
<operator>+</operator> <operator>(</operator> <operator>(</operator> <name><name>p_smooth</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>
<operator>-</operator> <name><name>p_smooth</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>)</operator> <operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>
<operator>+</operator> <operator>(</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>
<operator>-</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_grad</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><call><name>abs</name><argument_list>( <argument><expr><name>gradx</name></expr></argument> )</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>( <argument><expr><name>grady</name></expr></argument> )</argument_list></call><operator>)</operator></expr>;</expr_stmt>





<if_stmt><if>if<condition>( <expr><operator>(</operator><name>grady</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <name>gradx</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_theta</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <name>THETA_P</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator><name>grady</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <operator>-</operator><name>gradx</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_theta</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <name>THETA_M</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><name>gradx</name> <operator>||</operator> <call><name>abs</name><argument_list>(<argument><expr><name>grady</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>gradx</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_theta</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <name>THETA_Y</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_theta</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <name>THETA_X</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_num_lines</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_src_visible</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_grad</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">40</literal></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_theta</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>THETA_Y</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_grad</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name><name>p_grad</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name>
<operator>&amp;&amp;</operator> <name><name>p_grad</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name><name>p_grad</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_outpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_dst_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <goto>goto <name>colorize</name>;</goto></block_content></block></else></if_stmt>
<case>case <expr><name>THETA_P</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_grad</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name><name>p_grad</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>
<operator>&amp;&amp;</operator> <name><name>p_grad</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name><name>p_grad</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_outpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_dst_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <goto>goto <name>colorize</name>;</goto></block_content></block></else></if_stmt>
<case>case <expr><name>THETA_M</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_grad</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name><name>p_grad</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name>
<operator>&amp;&amp;</operator> <name><name>p_grad</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name><name>p_grad</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_outpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_dst_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <goto>goto <name>colorize</name>;</goto></block_content></block></else></if_stmt>
<case>case <expr><name>THETA_X</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_grad</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name><name>p_grad</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>
<operator>&amp;&amp;</operator> <name><name>p_grad</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name><name>p_grad</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_outpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_dst_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <goto>goto <name>colorize</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<label><name>colorize</name>:</label>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_cartoon</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_smooth</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0xa0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_outpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_dst_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator>
<literal type="number">0xff</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><literal type="number">0xff</literal> <operator>-</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_smooth</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x70</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_outpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_dst_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator><operator>(</operator><name>uint8_t</name><operator>)</operator>
<literal type="number">0xa0</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><literal type="number">0xa0</literal> <operator>-</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_smooth</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x28</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_outpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_dst_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator><operator>(</operator><name>uint8_t</name><operator>)</operator>
<literal type="number">0x70</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><literal type="number">0x70</literal> <operator>-</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_outpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_dst_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator><operator>(</operator><name>uint8_t</name><operator>)</operator>
<literal type="number">0x28</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><literal type="number">0x28</literal> <operator>-</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p_pre_hough</name></cpp:macro> <cpp:value>p_sys-&gt;p_pre_hough</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FilterHough</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_inpic</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_src_visible</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_dst_pitch</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_num_lines</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_outpix</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_diag</name> <init>= <expr><call><name>sqrt</name><argument_list>( <argument><expr><name>i_num_lines</name> <operator>*</operator> <name>i_num_lines</name> <operator>+</operator>
<name>i_src_visible</name> <operator>*</operator> <name>i_src_visible</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_max</name></decl>, <decl><type ref="prev"/><name>i_phi_max</name></decl>, <decl><type ref="prev"/><name>i_rho</name></decl>, <decl><type ref="prev"/><name>i_rho_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_nb_steps</name> <init>= <expr><literal type="number">90</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d_step</name> <init>= <expr><name>M_PI</name> <operator>/</operator> <name>i_nb_steps</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d_sin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d_cos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_smooth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p_hough</name> <init>= <expr><call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_diag</name> <operator>*</operator> <name>i_nb_steps</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>p_hough</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_smooth</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_num_lines</name> <operator>*</operator> <name>i_src_visible</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_smooth</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_hough</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>p_pre_hough</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Starting precalculation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_pre_hough</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_num_lines</name><operator>*</operator><name>i_src_visible</name><operator>*</operator><name>i_nb_steps</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>p_pre_hough</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_smooth</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_hough</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb_steps</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>d_sin</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>d_step</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d_cos</name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>d_step</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_num_lines</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_src_visible</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_pre_hough</name><index>[<expr><operator>(</operator><name>i</name><operator>*</operator><name>i_num_lines</name><operator>+</operator><name>y</name><operator>)</operator><operator>*</operator><name>i_src_visible</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator>
<call><name>ceil</name><argument_list>(<argument><expr><name>x</name><operator>*</operator><name>d_sin</name> <operator>+</operator> <name>y</name><operator>*</operator><name>d_cos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Precalculation done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_hough</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_diag</name> <operator>*</operator> <name>i_nb_steps</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GaussianConvolution</name><argument_list>( <argument><expr><name>p_inpic</name></expr></argument>, <argument><expr><name>p_smooth</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>i_max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_rho_max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_phi_max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_num_lines</name> <operator>-</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_src_visible</name> <operator>-</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>=
<expr><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>i_src_visible</name> <operator>+</operator> <name>x</name></expr>]</index></name>
<operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>i_src_visible</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>i_src_visible</name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>i_src_visible</name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>i_src_visible</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>i_src_visible</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>p_smooth</name><index>[<expr><name>y</name> <operator>*</operator> <name>i_src_visible</name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_smooth</name><index>[<expr><name>y</name> <operator>*</operator> <name>i_src_visible</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>i_src_visible</name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>i_src_visible</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>i_src_visible</name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_smooth</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>i_src_visible</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>a</name><operator>&gt;&gt;</operator><literal type="number">8</literal></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb_steps</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>i_rho</name> <operator>=</operator> <name><name>p_pre_hough</name><index>[<expr><operator>(</operator><name>i</name><operator>*</operator><name>i_num_lines</name><operator>+</operator><name>y</name><operator>)</operator><operator>*</operator><name>i_src_visible</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_hough</name><index>[<expr><name>i_rho</name> <operator>+</operator> <name>i_diag</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <name>i_diag</name></expr>]</index></name><operator>++</operator> <operator>&gt;</operator> <name>i_max</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_max</name> <operator>=</operator> <name><name>p_hough</name><index>[<expr><name>i_rho</name> <operator>+</operator> <name>i_diag</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <name>i_diag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_rho_max</name> <operator>=</operator> <name>i_rho</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_phi_max</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>d_sin</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>i_phi_max</name><operator>*</operator><name>d_step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d_cos</name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>i_phi_max</name><operator>*</operator><name>d_step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>d_cos</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_src_visible</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>i_rho_max</name> <operator>-</operator> <name>x</name> <operator>*</operator> <name>d_sin</name><operator>)</operator> <operator>/</operator> <name>d_cos</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>i_num_lines</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_outpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_dst_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_hough</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_smooth</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>p_pre_hough</name></cpp:undef>


<function><type><specifier>static</specifier> <name>int</name></type> <name>GradientCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>filter_sys_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"mode"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"gradient"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name>GRADIENT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"edge"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name>EDGE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="string">"hough"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name>HOUGH</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"no valid gradient mode provided (%s)"</literal></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name>GRADIENT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"type"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_gradient_type</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"cartoon"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_cartoon</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>b_bool</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
