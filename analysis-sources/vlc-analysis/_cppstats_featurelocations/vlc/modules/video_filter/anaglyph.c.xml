<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\anaglyph.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>combine_side_by_side_yuv420</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCHEME_TEXT</name></cpp:macro> <cpp:value>N_("Color scheme")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCHEME_LONGTEXT</name></cpp:macro> <cpp:value>N_("Define the glasses' color scheme")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_PREFIX</name></cpp:macro> <cpp:value>"anaglyph-"</cpp:value></cpp:define>



<enum>enum <name>scheme_e</name>
<block>{
<decl><name>red_green</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>red_blue</name></decl>,
<decl><name>red_cyan</name></decl>,
<decl><name>trioscopic</name></decl>,
<decl><name>magenta_cyan</name></decl>,
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_scheme_values</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"red-green"</literal></expr>,
<expr><literal type="string">"red-blue"</literal></expr>,
<expr><literal type="string">"red-cyan"</literal></expr>,
<expr><literal type="string">"trioscopic"</literal></expr>,
<expr><literal type="string">"magenta-cyan"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_scheme_descriptions</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"pure red (left) pure green (right)"</literal></expr>,
<expr><literal type="string">"pure red (left) pure blue (right)"</literal></expr>,
<expr><literal type="string">"pure red (left) pure cyan (right)"</literal></expr>,
<expr><literal type="string">"pure green (left) pure magenta (right)"</literal></expr>,
<expr><literal type="string">"magenta (left) cyan (right)"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<expr_stmt><expr><call><name>set_description</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Convert 3D picture to anaglyph image video filter"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"Anaglyph"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VFILTER</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>(<argument>FILTER_PREFIX <literal type="string">"scheme"</literal></argument>, <argument><literal type="string">"red-cyan"</literal></argument>, <argument>SCHEME_TEXT</argument>, <argument>SCHEME_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_string_list</name><argument_list>(<argument>ppsz_scheme_values</argument>, <argument>ppsz_scheme_descriptions</argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Create</argument>, <argument>Destroy</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"scheme"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>, <name>right</name>;</decl_stmt>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>


<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_J420</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_YV12</name></expr>:</case>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input chroma (%4.4s)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filter_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_scheme</name> <init>= <expr><call><name>var_CreateGetStringCommand</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>,
<argument><expr><name>FILTER_PREFIX</name> <literal type="string">"scheme"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>scheme_e</name></name></type> <name>scheme</name> <init>= <expr><name>red_cyan</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_scheme</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_scheme</name></expr></argument>, <argument><expr><literal type="string">"red-green"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scheme</name> <operator>=</operator> <name>red_green</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_scheme</name></expr></argument>, <argument><expr><literal type="string">"red-blue"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scheme</name> <operator>=</operator> <name>red_blue</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_scheme</name></expr></argument>, <argument><expr><literal type="string">"red-cyan"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scheme</name> <operator>=</operator> <name>red_cyan</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_scheme</name></expr></argument>, <argument><expr><literal type="string">"trioscopic"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scheme</name> <operator>=</operator> <name>trioscopic</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_scheme</name></expr></argument>, <argument><expr><literal type="string">"magenta-cyan"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scheme</name> <operator>=</operator> <name>magenta_cyan</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unknown anaglyph color scheme '%s'"</literal></expr></argument>, <argument><expr><name>psz_scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>scheme</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>red_green</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <literal type="number">0xff0000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <literal type="number">0x00ff00</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>red_blue</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <literal type="number">0xff0000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <literal type="number">0x0000ff</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>red_cyan</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <literal type="number">0xff0000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <literal type="number">0x00ffff</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>trioscopic</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <literal type="number">0x00ff00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <literal type="number">0xff00ff</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>magenta_cyan</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <literal type="number">0xff00ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <literal type="number">0x00ffff</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_pic</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name> <init>= <expr><call><name>filter_NewPicture</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_outpic</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_J420</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_YV12</name></expr>:</case>
<expr_stmt><expr><call><name>combine_side_by_side_yuv420</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input chroma (%4.4s)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>(<argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>combine_side_by_side_yuv420</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_inpic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>y1inl</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>y2inl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>uinl</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vinl</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>y1out</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>y2out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>uout</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>in_pitch</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>out_pitch</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>visible_pitch</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>visible_lines</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>uv_visible_pitch</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>yend</name> <init>= <expr><name>y1inl</name> <operator>+</operator> <name>visible_lines</name> <operator>*</operator> <name>in_pitch</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>y1inl</name> <operator>&lt;</operator> <name>yend</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>y1inr</name> <init>= <expr><name>y1inl</name> <operator>+</operator> <name>visible_pitch</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>y2inr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>uinr</name> <init>= <expr><name>uinl</name> <operator>+</operator> <name>uv_visible_pitch</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vinr</name> <init>= <expr><name>vinl</name> <operator>+</operator> <name>uv_visible_pitch</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>y1end</name> <init>= <expr><name>y1inr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>y2inl</name> <operator>=</operator> <name>y1inl</name> <operator>+</operator> <name>in_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y2inr</name> <operator>=</operator> <name>y1inr</name> <operator>+</operator> <name>in_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y2out</name> <operator>=</operator> <name>y1out</name> <operator>+</operator> <name>out_pitch</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>y1inl</name> <operator>&lt;</operator> <name>y1end</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rl</name></decl>, <decl><type ref="prev"/><name>gl</name></decl>, <decl><type ref="prev"/><name>bl</name></decl>, <decl><type ref="prev"/><name>rr</name></decl>, <decl><type ref="prev"/><name>gr</name></decl>, <decl><type ref="prev"/><name>br</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rshift</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">0xff0000</literal><operator>&amp;</operator><name>left</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0xff0000</literal><operator>&amp;</operator><name>right</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gshift</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">0x00ff00</literal><operator>&amp;</operator><name>left</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0x00ff00</literal><operator>&amp;</operator><name>right</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bshift</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">0x0000ff</literal><operator>&amp;</operator><name>left</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0x0000ff</literal><operator>&amp;</operator><name>right</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yuv_to_rgb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bl</name></expr></argument>, <argument><expr><operator>*</operator><name>y1inl</name></expr></argument>, <argument><expr><operator>*</operator><name>uinl</name></expr></argument>, <argument><expr><operator>*</operator><name>vinl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yuv_to_rgb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br</name></expr></argument>, <argument><expr><operator>*</operator><name>y1inr</name></expr></argument>, <argument><expr><operator>*</operator><name>uinr</name></expr></argument>, <argument><expr><operator>*</operator><name>vinr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0xff0000</literal><operator>&amp;</operator><name>left</name><operator>)</operator><operator>)</operator><operator>*</operator><name>rl</name> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0xff0000</literal><operator>&amp;</operator><name>right</name><operator>)</operator><operator>)</operator><operator>*</operator><name>rr</name><operator>)</operator><operator>&gt;&gt;</operator><name>rshift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0x00ff00</literal><operator>&amp;</operator><name>left</name><operator>)</operator><operator>)</operator><operator>*</operator><name>gl</name> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0x00ff00</literal><operator>&amp;</operator><name>right</name><operator>)</operator><operator>)</operator><operator>*</operator><name>gr</name><operator>)</operator><operator>&gt;&gt;</operator><name>gshift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0x0000ff</literal><operator>&amp;</operator><name>left</name><operator>)</operator><operator>)</operator><operator>*</operator><name>bl</name> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0x0000ff</literal><operator>&amp;</operator><name>right</name><operator>)</operator><operator>)</operator><operator>*</operator><name>br</name><operator>)</operator><operator>&gt;&gt;</operator><name>bshift</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rgb_to_yuv</name><argument_list>(<argument><expr><name>y1out</name></expr></argument>, <argument><expr><name>uout</name><operator>++</operator></expr></argument>, <argument><expr><name>vout</name><operator>++</operator></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y1out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>y1out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y1out</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y1inl</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y1inr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yuv_to_rgb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bl</name></expr></argument>, <argument><expr><operator>*</operator><name>y1inl</name></expr></argument>, <argument><expr><operator>*</operator><name>uinl</name></expr></argument>, <argument><expr><operator>*</operator><name>vinl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yuv_to_rgb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br</name></expr></argument>, <argument><expr><operator>*</operator><name>y1inr</name></expr></argument>, <argument><expr><operator>*</operator><name>uinr</name></expr></argument>, <argument><expr><operator>*</operator><name>vinr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0xff0000</literal><operator>&amp;</operator><name>left</name><operator>)</operator><operator>)</operator><operator>*</operator><name>rl</name> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0xff0000</literal><operator>&amp;</operator><name>right</name><operator>)</operator><operator>)</operator><operator>*</operator><name>rr</name><operator>)</operator><operator>&gt;&gt;</operator><name>rshift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0x00ff00</literal><operator>&amp;</operator><name>left</name><operator>)</operator><operator>)</operator><operator>*</operator><name>gl</name> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0x00ff00</literal><operator>&amp;</operator><name>right</name><operator>)</operator><operator>)</operator><operator>*</operator><name>gr</name><operator>)</operator><operator>&gt;&gt;</operator><name>gshift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0x0000ff</literal><operator>&amp;</operator><name>left</name><operator>)</operator><operator>)</operator><operator>*</operator><name>bl</name> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0x0000ff</literal><operator>&amp;</operator><name>right</name><operator>)</operator><operator>)</operator><operator>*</operator><name>br</name><operator>)</operator><operator>&gt;&gt;</operator><name>bshift</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rgb_to_yuv</name><argument_list>(<argument><expr><name>y1out</name></expr></argument>, <argument><expr><name>uout</name><operator>++</operator></expr></argument>, <argument><expr><name>vout</name><operator>++</operator></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y1out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>y1out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y1out</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y1inl</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y1inr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yuv_to_rgb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bl</name></expr></argument>, <argument><expr><operator>*</operator><name>y2inl</name></expr></argument>, <argument><expr><operator>*</operator><name>uinl</name></expr></argument>, <argument><expr><operator>*</operator><name>vinl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yuv_to_rgb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br</name></expr></argument>, <argument><expr><operator>*</operator><name>y2inr</name></expr></argument>, <argument><expr><operator>*</operator><name>uinr</name></expr></argument>, <argument><expr><operator>*</operator><name>vinr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0xff0000</literal><operator>&amp;</operator><name>left</name><operator>)</operator><operator>)</operator><operator>*</operator><name>rl</name> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0xff0000</literal><operator>&amp;</operator><name>right</name><operator>)</operator><operator>)</operator><operator>*</operator><name>rr</name><operator>)</operator><operator>&gt;&gt;</operator><name>rshift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0x00ff00</literal><operator>&amp;</operator><name>left</name><operator>)</operator><operator>)</operator><operator>*</operator><name>gl</name> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0x00ff00</literal><operator>&amp;</operator><name>right</name><operator>)</operator><operator>)</operator><operator>*</operator><name>gr</name><operator>)</operator><operator>&gt;&gt;</operator><name>gshift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0x0000ff</literal><operator>&amp;</operator><name>left</name><operator>)</operator><operator>)</operator><operator>*</operator><name>bl</name> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0x0000ff</literal><operator>&amp;</operator><name>right</name><operator>)</operator><operator>)</operator><operator>*</operator><name>br</name><operator>)</operator><operator>&gt;&gt;</operator><name>bshift</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rgb_to_yuv</name><argument_list>(<argument><expr><name>y2out</name></expr></argument>, <argument><expr><name>uout</name></expr></argument>, <argument><expr><name>vout</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y2out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>y2out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y2out</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y2inl</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y2inr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yuv_to_rgb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bl</name></expr></argument>, <argument><expr><operator>*</operator><name>y2inl</name></expr></argument>, <argument><expr><operator>*</operator><name>uinl</name></expr></argument>, <argument><expr><operator>*</operator><name>vinl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yuv_to_rgb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br</name></expr></argument>, <argument><expr><operator>*</operator><name>y2inr</name></expr></argument>, <argument><expr><operator>*</operator><name>uinr</name></expr></argument>, <argument><expr><operator>*</operator><name>vinr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0xff0000</literal><operator>&amp;</operator><name>left</name><operator>)</operator><operator>)</operator><operator>*</operator><name>rl</name> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0xff0000</literal><operator>&amp;</operator><name>right</name><operator>)</operator><operator>)</operator><operator>*</operator><name>rr</name><operator>)</operator><operator>&gt;&gt;</operator><name>rshift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0x00ff00</literal><operator>&amp;</operator><name>left</name><operator>)</operator><operator>)</operator><operator>*</operator><name>gl</name> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0x00ff00</literal><operator>&amp;</operator><name>right</name><operator>)</operator><operator>)</operator><operator>*</operator><name>gr</name><operator>)</operator><operator>&gt;&gt;</operator><name>gshift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0x0000ff</literal><operator>&amp;</operator><name>left</name><operator>)</operator><operator>)</operator><operator>*</operator><name>bl</name> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><literal type="number">0x0000ff</literal><operator>&amp;</operator><name>right</name><operator>)</operator><operator>)</operator><operator>*</operator><name>br</name><operator>)</operator><operator>&gt;&gt;</operator><name>bshift</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rgb_to_yuv</name><argument_list>(<argument><expr><name>y2out</name></expr></argument>, <argument><expr><name>uout</name></expr></argument>, <argument><expr><name>vout</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y2out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>y2out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y2out</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y2inl</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y2inr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>uinl</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>vinl</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>uinr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>vinr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>y1inl</name> <operator>=</operator> <name>y1inr</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>in_pitch</name> <operator>-</operator> <name>visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y1out</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>out_pitch</name> <operator>-</operator> <name>visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uinl</name> <operator>=</operator> <name>uinr</name> <operator>+</operator> <name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>-</operator> <name>uv_visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vinl</name> <operator>=</operator> <name>vinr</name> <operator>+</operator> <name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>-</operator> <name>uv_visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uout</name> <operator>+=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>-</operator> <name>uv_visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vout</name> <operator>+=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>-</operator> <name>uv_visible_pitch</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

</unit>
