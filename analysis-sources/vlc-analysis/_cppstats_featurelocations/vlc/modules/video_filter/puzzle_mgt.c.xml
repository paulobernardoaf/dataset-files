<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\puzzle_mgt.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"puzzle_bezier.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"puzzle_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"puzzle_pce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"puzzle_mgt.h"</cpp:file></cpp:include>




<function><type><name>int</name></type> <name>puzzle_bake</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>puzzle_free_ps_puzzle_array</name> <argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puzzle_free_ps_pieces_shapes</name> <argument_list>( <argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puzzle_free_ps_pieces</name> <argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_rows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_cols</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_planes</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_planes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_piece_types</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_advanced</name></name><operator>)</operator></expr>?</condition><then><expr><name>PIECE_TYPE_NBR</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>b_preview</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_preview</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_preview_size</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_preview_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_border</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_border</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>b_blackslot</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_blackslot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>b_near</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_near</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_shape_size</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_shape_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>b_advanced</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_advanced</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_auto_shuffle_speed</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_auto_shuffle_speed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_auto_solve_speed</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_auto_solve_speed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rotate</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_rotate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>puzzle_array_t</name><operator>*</operator><operator>*</operator></expr></argument> )</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>puzzle_array_t</name><operator>*</operator></expr></argument> )</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>puzzle_array_t</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_planes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>puzzle_plane_t</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_planes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>puzzle_plane_t</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_planes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>=</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>=</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>=</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name> <operator>=</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>=</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>/</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_preview_width</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_preview_size</name></name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_preview_lines</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_preview_size</name></name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_border_width</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_border</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_border_lines</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_border</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pce_max_width</name> <operator>=</operator> <operator>(</operator><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name>
<operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_border_width</name> <operator>)</operator> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pce_max_lines</name> <operator>=</operator> <operator>(</operator><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name>
<operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_border_lines</name> <operator>)</operator> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>=</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>=</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>=</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name> <operator>=</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>=</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>/</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_preview_width</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_preview_size</name></name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_preview_lines</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_preview_size</name></name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_border_width</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_border</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_border_lines</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_border</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pce_max_width</name> <operator>=</operator> <operator>(</operator><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name>
<operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_border_width</name> <operator>)</operator> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pce_max_lines</name> <operator>=</operator> <operator>(</operator><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name>
<operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_border_lines</name> <operator>)</operator> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_y</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_border_lines</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_x</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_border_width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>=</operator>
<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_border_width</name>
<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_x</name><operator>)</operator> <operator>/</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name> <operator>-</operator> <name>c</name> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>=</operator>
<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_border_lines</name>
<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_y</name><operator>)</operator> <operator>/</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name> <operator>-</operator> <name>r</name> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_x</name> <operator>=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_x</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_y</name> <operator>=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_y</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name> <operator>=</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_pict_width</name></name> <operator>/</operator> <literal type="number">50</literal><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_advanced</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_shape_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_bake_pieces_shapes</name> <argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_bake_piece</name> <argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_advanced</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_shape_size</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>puzzle_free_ps_puzzle_array</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>puzzle_bake_piece</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>puzzle_allocate_ps_pieces</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_shuffle</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>orow</name> <init>= <expr><name>row</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ocol</name> <init>= <expr><name>col</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>orow</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ocol</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>=</operator> <name>orow</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>=</operator> <name>ocol</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_left_shape</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_top_shape</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_btm_shape</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_right_shape</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_shape_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>orow</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_btm_shape</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><operator>(</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <name>SHAPES_QTY</name> <operator>)</operator> <operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ocol</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_right_shape</name> <operator>=</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><operator>(</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <name>SHAPES_QTY</name> <operator>)</operator> <operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_actual_angle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_overlap</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_actual_mirror</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_finished</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ocol</name> <operator>==</operator> <name>col</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>orow</name> <operator>==</operator> <name>row</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>i_rand_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_rand_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_advanced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i_rand_x</name> <operator>=</operator> <operator>(</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pce_max_width</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>-</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pce_max_width</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_rand_y</name> <operator>=</operator> <operator>(</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pce_max_lines</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>-</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pce_max_lines</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_original_x</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>orow</name></expr>]</index><index>[<expr><name>ocol</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_original_y</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>orow</name></expr>]</index><index>[<expr><name>ocol</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_actual_x</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_x</name> <operator>+</operator> <name>i_rand_x</name> <operator>*</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_actual_y</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_y</name> <operator>+</operator> <name>i_rand_y</name> <operator>*</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_plane</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_OLx</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_original_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_OTy</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_original_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_ORx</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_original_x</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_OBy</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_original_y</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>puzzle_calculate_corners</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><call><name>puzzle_set_left_top_shapes</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>puzzle_random_rotate</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>puzzle_set_left_top_shapes</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint16_t</name></type> <name>i_pce_B</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_pce_B</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i_pce_B</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><decl><type><name>uint16_t</name></type> <name>i_pce_A</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_pce_A</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i_pce_A</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_A</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_B</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_A</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_B</name></expr>]</index></name><operator>.</operator><name>i_original_col</name><operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_B</name></expr>]</index></name><operator>.</operator><name>i_left_shape</name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_A</name></expr>]</index></name><operator>.</operator><name>i_right_shape</name> <operator>-</operator> <literal type="number">6</literal> <operator>)</operator> <operator>^</operator> <literal type="number">0x01</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_A</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_B</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_A</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_B</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>




<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_B</name></expr>]</index></name><operator>.</operator><name>i_top_shape</name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_A</name></expr>]</index></name><operator>.</operator><name>i_btm_shape</name> <operator>-</operator> <literal type="number">2</literal> <operator>)</operator> <operator>^</operator> <literal type="number">0x01</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>puzzle_random_rotate</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_actual_angle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_actual_mirror</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_rotate</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>puzzle_rotate_pce</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <literal type="number">2</literal> <operator>)</operator> <operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_center_x</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_center_y</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>puzzle_rotate_pce</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <literal type="number">4</literal> <operator>)</operator> <operator>)</operator></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_center_x</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_center_y</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>puzzle_rotate_pce</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <literal type="number">8</literal> <operator>)</operator> <operator>)</operator></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_center_x</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_center_y</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>puzzle_calculate_corners</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>puzzle_free_ps_pieces</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i_pce</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_pce</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i_pce</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>ps_piece_in_plane</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_tmp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_tmp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_group_qty</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_group_qty</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>puzzle_allocate_ps_pieces</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>puzzle_free_ps_pieces</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>piece_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>ps_piece_in_plane</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>piece_in_plane_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_planes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>ps_piece_in_plane</name></expr> )</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>p</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ps_piece_in_plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_tmp</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>piece_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_tmp</name></name></expr> )</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ps_piece_in_plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_group_qty</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>int32_t</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pi_group_qty</name></name></expr> )</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ps_piece_in_plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_tmp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>puzzle_is_valid</name><parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pi_pce_lst</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_count</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_blackslot</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>pi_pce_lst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>i_count</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <name>i</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<for>for<control>( <init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>pi_pce_lst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>i_count</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>pi_pce_lst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>pi_pce_lst</name><index>[<expr><name>j</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>d</name><operator>%</operator><literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>puzzle_shuffle</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_pieces_nbr</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr></init></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>puzzle_generate_rand_pce_list</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block> while<condition>( <expr><call><name>puzzle_is_finished</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name></name></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>puzzle_is_valid</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name></name></expr></argument> )</argument_list></call></expr> )</condition>;</do>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_blackslot</name></name></expr> )</condition> <block>{<block_content>
<for>for<control>( <init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_pieces_nbr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>i_pieces_nbr</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>=</operator> <name>NO_PCE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_shuffle_rqst</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_finished</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>puzzle_generate_rand_pce_list</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pi_pce_lst</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_pieces_nbr</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name>pi_pce_lst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_pce_lst</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_pieces_nbr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>pi_pce_lst</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>pi_pce_lst</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_pieces_nbr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_pce_lst</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>NO_PCE</name></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>i_pieces_nbr</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <name>i_pieces_nbr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><name>pi_pce_lst</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <name>NO_PCE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_pce_lst</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>c</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>puzzle_is_finished</name><parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pi_pce_lst</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>i</name> <operator>!=</operator> <name><name>pi_pce_lst</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>puzzle_piece_foreground</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_piece</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>piece_t</name> <modifier>*</modifier></type><name>ps_pieces_tmp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_group_ID</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_piece</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ps_pieces_tmp</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>piece_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ps_pieces_tmp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ps_pieces_tmp</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_piece</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>piece_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name> <operator>==</operator> <name>i_group_ID</name> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>i</name> <operator>!=</operator> <name>i_piece</name> <operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ps_pieces_tmp</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>piece_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name> <operator>!=</operator> <name>i_group_ID</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ps_pieces_tmp</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>piece_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name> <operator>=</operator> <name>ps_pieces_tmp</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>puzzle_count_pce_group</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>)</parameter_list> <block>{<block_content> 
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_group_qty</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>int32_t</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i_pce</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_pce</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i_pce</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_group_qty</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>puzzle_solve_pces_group</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_dx</name></decl>, <decl><type ref="prev"/><name>i_dy</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_solve_grp_loop</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_solve_grp_loop</name></name> <operator>%=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_piece_A</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_solve_grp_loop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>piece_t</name> <modifier>*</modifier></type><name>ps_piece_A</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_piece_A</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i_piece_B</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_piece_B</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i_piece_B</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>piece_t</name> <modifier>*</modifier></type><name>ps_piece_B</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_piece_B</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_actual_angle</name></name> <operator>!=</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_actual_angle</name></name> <operator>||</operator> <name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_actual_mirror</name></name> <operator>!=</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_actual_mirror</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_group_ID</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_piece_A</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_OTy</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_OTy</name></name></expr></argument> )</argument_list></call><operator>&lt;</operator><literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_ORx</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_OLx</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_TRx</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_TLx</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_TRy</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_TLy</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_BRx</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_BLx</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_BRy</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_BLy</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_dx</name> <operator>=</operator> <name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_TRx</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_TLx</name></name> <operator>+</operator> <name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_step_x_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dy</name> <operator>=</operator> <name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_TRy</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_TLy</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps_piece_B</name><operator>-&gt;</operator><name>b_finished</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puzzle_move_group</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_piece_B</name></expr></argument>, <argument><expr><name>i_dx</name></expr></argument>, <argument><expr><name>i_dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puzzle_move_group</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_piece_A</name></expr></argument>, <argument><expr><operator>-</operator><name>i_dx</name></expr></argument>, <argument><expr><operator>-</operator><name>i_dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_group_ID</name> <init>= <expr><name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_group_ID</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i_for</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_for</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i_for</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_for</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name> <operator>==</operator> <name>i_group_ID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_for</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_piece_A</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_OLx</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_OLx</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_OBy</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_OTy</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_TLx</name></name> <operator>-</operator> <name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_BLx</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_TLy</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_BLy</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_TRx</name></name> <operator>-</operator> <name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_BRx</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_TRy</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_BRy</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>i_dx</name> <operator>=</operator> <name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_BLx</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_TLx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dy</name> <operator>=</operator> <name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_BLy</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_TLy</name></name> <operator>+</operator> <name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_step_y_y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps_piece_B</name><operator>-&gt;</operator><name>b_finished</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puzzle_move_group</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_piece_B</name></expr></argument>, <argument><expr><name>i_dx</name></expr></argument>, <argument><expr><name>i_dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puzzle_move_group</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_piece_A</name></expr></argument>, <argument><expr><operator>-</operator><name>i_dx</name></expr></argument>, <argument><expr><operator>-</operator><name>i_dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_group_ID</name> <init>= <expr><name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_group_ID</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i_for</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_for</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i_for</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_for</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name> <operator>==</operator> <name>i_group_ID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_for</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_piece_A</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_OTy</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_OTy</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_ORx</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_OLx</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_TRx</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_TLx</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_TRy</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_TLy</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_BRx</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_BLx</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_BRy</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_BLy</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_left_shape</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_right_shape</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_OLx</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_OLx</name></name></expr></argument> )</argument_list></call><operator>&lt;</operator><literal type="number">3</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_OBy</name></name> <operator>-</operator> <name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_OTy</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call><operator>&lt;</operator><literal type="number">3</literal>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_TLx</name></name> <operator>-</operator> <name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_BLx</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_TLy</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_BLy</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_TRx</name></name> <operator>-</operator> <name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_BRx</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_TRy</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_BRy</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ps_piece_B</name><operator>-&gt;</operator><name>i_top_shape</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_piece_A</name><operator>-&gt;</operator><name>i_btm_shape</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>puzzle_solve_pces_accuracy</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_solve_acc_loop</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_solve_acc_loop</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_done_count</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tmp_done_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tmp_done_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_solve_acc_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_finished</name></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_done_count</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>piece_t</name> <modifier>*</modifier></type><name>ps_piece</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_solve_acc_loop</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>b_finished</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_actual_mirror</name></name> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_TRx</name></name> <operator>-</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_ORx</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_TRy</name></name> <operator>-</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_OTy</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_TLx</name></name> <operator>-</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_OLx</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name>
<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_TLy</name></name> <operator>-</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_OTy</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_group_ID</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_group_ID</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tmp_done_count</name></name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ps_piece</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_group_ID</name></name> <operator>==</operator> <name>i_group_ID</name> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>!</operator><name><name>ps_piece</name><operator>-&gt;</operator><name>b_finished</name></name> <operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_x</name> <operator>=</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_OLx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_y</name> <operator>=</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_OTy</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_actual_mirror</name></name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puzzle_calculate_corners</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>b_finished</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>puzzle_sort_layers</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i_qty</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i_qty</name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i_qty</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i_pce_loop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_pce_loop</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i_pce_loop</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_grp</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_loop</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_group_qty</name><index>[<expr><name>i_grp</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>i_qty</name></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_check_ok</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_pce_check</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_pce_check</name> <operator>&lt;</operator> <name>i_idx</name></expr>;</condition> <incr><expr><name>i_pce_check</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_tmp</name><index>[<expr><name>i_pce_check</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name> <operator>==</operator> <name>i_grp</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_check_ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>( <expr><name>b_check_ok</name></expr> )</condition><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i_pce</name> <init>= <expr><name>i_pce_loop</name></expr></init></decl>;</init> <condition><expr><name>i_pce</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i_pce</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name> <operator>==</operator> <name>i_grp</name> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>b_finished</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_tmp</name><index>[<expr><name>i_idx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>piece_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_idx</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i_pce_loop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_pce_loop</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i_pce_loop</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_grp</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_loop</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_group_qty</name><index>[<expr><name>i_grp</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>i_qty</name></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_check_ok</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_pce_check</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_pce_check</name> <operator>&lt;</operator> <name>i_idx</name></expr>;</condition> <incr><expr><name>i_pce_check</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_tmp</name><index>[<expr><name>i_pce_check</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name> <operator>==</operator> <name>i_grp</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_tmp</name><index>[<expr><name>i_pce_check</name></expr>]</index></name><operator>.</operator><name>b_finished</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_check_ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>( <expr><name>b_check_ok</name></expr> )</condition><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i_pce</name> <init>= <expr><name>i_pce_loop</name></expr></init></decl>;</init> <condition><expr><name>i_pce</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i_pce</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name> <operator>==</operator> <name>i_grp</name> <operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>b_finished</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_tmp</name><index>[<expr><name>i_idx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>piece_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_idx</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_tmp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_tmp</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>piece_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_tmp</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>puzzle_auto_solve</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_auto_solve_speed</name></name> <operator>&lt;</operator> <literal type="number">500</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>--</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_auto_solve_countdown_val</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_auto_solve_countdown_val</name></name> <operator>=</operator> <call><name>init_countdown</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_auto_solve_speed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>i_start</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i_l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_l</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i_l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><operator>(</operator> <name>i_l</name> <operator>+</operator> <name>i_start</name> <operator>)</operator> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_finished</name></expr> )</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_actual_angle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_actual_mirror</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_x</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_original_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_y</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_original_y</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puzzle_calculate_corners</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>j</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>puzzle_auto_shuffle</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_auto_shuffle_speed</name></name> <operator>&lt;</operator> <literal type="number">500</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>--</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_auto_shuffle_countdown_val</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_auto_shuffle_countdown_val</name></name> <operator>=</operator> <call><name>init_countdown</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_auto_shuffle_speed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>i_start</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i_l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_l</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i_l</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><operator>(</operator> <name>i_l</name> <operator>+</operator> <name>i_start</name> <operator>)</operator> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_group_qty</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_new_group</name></decl>;</decl_stmt>
<for>for <control>( <init><expr><name>i_new_group</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i_new_group</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr> ;</condition> <incr><expr><name>i_new_group</name> <operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_group_qty</name><index>[<expr><name>i_new_group</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name> <operator>=</operator> <name>i_new_group</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_finished</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<switch>switch <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_rotate</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>puzzle_rotate_pce</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <literal type="number">2</literal> <operator>)</operator> <operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_center_x</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_center_y</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>puzzle_rotate_pce</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <literal type="number">4</literal> <operator>)</operator> <operator>)</operator></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_center_x</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_center_y</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>puzzle_rotate_pce</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <literal type="number">8</literal> <operator>)</operator> <operator>)</operator></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_center_x</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_center_y</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_x</name> <operator>=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_border_width</name>
<operator>+</operator> <operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_border_width</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_width</name><operator>)</operator>
<operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_step_x_x</name> <operator>)</operator>
<operator>-</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_step_y_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_y</name> <operator>=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_border_lines</name>
<operator>+</operator> <operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_border_lines</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name><operator>)</operator>
<operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_step_y_y</name> <operator>)</operator>
<operator>-</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_step_x_y</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_left_pce</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_right_pce</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_top_pce</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_btm_pce</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_pce</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_row</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name></expr>;</condition> <incr><expr><name>i_row</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_col</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name></expr>;</condition> <incr><expr><name>i_col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_row</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_right_pce</name> <operator>=</operator> <name>i_pce</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_left_pce</name> <operator>=</operator> <name>i_pce</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_col</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_btm_pce</name> <operator>=</operator> <name>i_pce</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_top_pce</name> <operator>=</operator> <name>i_pce</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_pce</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_left_shape</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_left_pce</name></expr>]</index></name><operator>.</operator><name>i_right_shape</name> <operator>=</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><operator>(</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <name>SHAPES_QTY</name> <operator>)</operator> <operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_left_shape</name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_left_pce</name></expr>]</index></name><operator>.</operator><name>i_right_shape</name> <operator>-</operator> <literal type="number">6</literal> <operator>)</operator> <operator>^</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_right_shape</name> <operator>==</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_right_shape</name> <operator>=</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><operator>(</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <name>SHAPES_QTY</name> <operator>)</operator> <operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_right_pce</name></expr>]</index></name><operator>.</operator><name>i_left_shape</name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_right_shape</name> <operator>-</operator> <literal type="number">6</literal> <operator>)</operator> <operator>^</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_top_shape</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_top_pce</name></expr>]</index></name><operator>.</operator><name>i_btm_shape</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><operator>(</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <name>SHAPES_QTY</name> <operator>)</operator> <operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_top_shape</name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_top_pce</name></expr>]</index></name><operator>.</operator><name>i_btm_shape</name> <operator>-</operator> <literal type="number">2</literal> <operator>)</operator> <operator>^</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_btm_shape</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_btm_shape</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><operator>(</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <name>SHAPES_QTY</name> <operator>)</operator> <operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_btm_pce</name></expr>]</index></name><operator>.</operator><name>i_top_shape</name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_btm_shape</name> <operator>-</operator> <literal type="number">2</literal> <operator>)</operator> <operator>^</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>puzzle_calculate_corners</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>save_game_t</name><modifier>*</modifier></type> <name>puzzle_save</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>save_game_t</name> <modifier>*</modifier></type><name>ps_save_game</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ps_save_game</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ps_save_game</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ps_save_game</name><operator>-&gt;</operator><name>i_cols</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_save_game</name><operator>-&gt;</operator><name>i_rows</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_save_game</name><operator>-&gt;</operator><name>i_rotate</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rotate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>ps_save_game</name><operator>-&gt;</operator><name>i_cols</name></name> <operator>*</operator> <name><name>ps_save_game</name><operator>-&gt;</operator><name>i_rows</name></name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps_save_game</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_border_width</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_border_width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_border_lines</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_border_lines</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_pce</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_pce</name> <operator>&lt;</operator> <name><name>ps_save_game</name><operator>-&gt;</operator><name>i_cols</name></name> <operator>*</operator> <name><name>ps_save_game</name><operator>-&gt;</operator><name>i_rows</name></name></expr>;</condition> <incr><expr><name>i_pce</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_top_shape</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_top_shape</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_btm_shape</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_btm_shape</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_right_shape</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_right_shape</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_left_shape</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_left_shape</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>f_pos_x</name> <operator>=</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_x</name> <operator>-</operator> <name>i_border_width</name> <operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>i_border_width</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>f_pos_y</name> <operator>=</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_y</name> <operator>-</operator> <name>i_border_lines</name> <operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>i_border_lines</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_actual_angle</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_actual_angle</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_actual_mirror</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_actual_mirror</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>ps_save_game</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>puzzle_load</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>save_game_t</name> <modifier>*</modifier></type><name>ps_save_game</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_cols</name></name> <operator>!=</operator> <name><name>ps_save_game</name><operator>-&gt;</operator><name>i_cols</name></name>
<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name> <operator>!=</operator> <name><name>ps_save_game</name><operator>-&gt;</operator><name>i_rows</name></name>
<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rotate</name></name> <operator>!=</operator> <name><name>ps_save_game</name><operator>-&gt;</operator><name>i_rotate</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_border_width</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_border_width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_border_lines</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_border_lines</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i_pce</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_pce</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i_pce</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>==</operator> <name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_row</name>
<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>==</operator> <name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_col</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_x</name> <operator>=</operator> <name>i_border_width</name>
<operator>+</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_border_width</name><operator>)</operator>
<operator>*</operator> <name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>f_pos_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_y</name> <operator>=</operator> <name>i_border_lines</name>
<operator>+</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_border_lines</name><operator>)</operator>
<operator>*</operator> <name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>f_pos_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_top_shape</name> <operator>=</operator> <name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_top_shape</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_btm_shape</name> <operator>=</operator> <name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_btm_shape</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_right_shape</name> <operator>=</operator> <name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_right_shape</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_left_shape</name> <operator>=</operator> <name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_left_shape</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_actual_angle</name> <operator>=</operator> <name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_actual_angle</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_actual_mirror</name> <operator>=</operator> <name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_actual_mirror</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name> <operator>=</operator> <name>i_pce</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_finished</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_x</name> <operator>=</operator> <name>i_border_width</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_width</name>
<operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>i_border_width</name><operator>)</operator> <operator>*</operator> <name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>f_pos_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_y</name> <operator>=</operator> <name>i_border_lines</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name>
<operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>i_border_lines</name><operator>)</operator> <operator>*</operator> <name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>f_pos_y</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puzzle_calculate_corners</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i_pce</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_pce</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i_pce</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_left_pce</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_right_pce</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_top_pce</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_btm_pce</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_pce_pair</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_row</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name></expr>;</condition> <incr><expr><name>i_row</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_col</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name></expr>;</condition> <incr><expr><name>i_col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_pair</name></expr>]</index></name><operator>.</operator><name>i_original_row</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_pair</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_right_pce</name> <operator>=</operator> <name>i_pce_pair</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_pair</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_left_pce</name> <operator>=</operator> <name>i_pce_pair</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_pair</name></expr>]</index></name><operator>.</operator><name>i_original_col</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_pair</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_btm_pce</name> <operator>=</operator> <name>i_pce_pair</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce_pair</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_top_pce</name> <operator>=</operator> <name>i_pce_pair</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_pce_pair</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_left_shape</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_left_pce</name></expr>]</index></name><operator>.</operator><name>i_right_shape</name> <operator>=</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><operator>(</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <name>SHAPES_QTY</name> <operator>)</operator> <operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_left_shape</name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_left_pce</name></expr>]</index></name><operator>.</operator><name>i_right_shape</name> <operator>-</operator> <literal type="number">6</literal> <operator>)</operator> <operator>^</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_right_shape</name> <operator>==</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_right_shape</name> <operator>=</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><operator>(</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <name>SHAPES_QTY</name> <operator>)</operator> <operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_right_pce</name></expr>]</index></name><operator>.</operator><name>i_left_shape</name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_right_shape</name> <operator>-</operator> <literal type="number">6</literal> <operator>)</operator> <operator>^</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_top_shape</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_top_pce</name></expr>]</index></name><operator>.</operator><name>i_btm_shape</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><operator>(</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <name>SHAPES_QTY</name> <operator>)</operator> <operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_top_shape</name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_top_pce</name></expr>]</index></name><operator>.</operator><name>i_btm_shape</name> <operator>-</operator> <literal type="number">2</literal> <operator>)</operator> <operator>^</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_btm_shape</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_btm_shape</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><operator>(</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <operator>(</operator> <name>SHAPES_QTY</name> <operator>)</operator> <operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_btm_pce</name></expr>]</index></name><operator>.</operator><name>i_top_shape</name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_pce</name></expr>]</index></name><operator>.</operator><name>i_btm_shape</name> <operator>-</operator> <literal type="number">2</literal> <operator>)</operator> <operator>^</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>
</block_content>}</block></function>
</unit>
