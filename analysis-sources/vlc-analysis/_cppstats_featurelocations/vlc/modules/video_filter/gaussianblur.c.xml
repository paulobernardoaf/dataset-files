<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\gaussianblur.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGMA_MIN</name></cpp:macro> <cpp:value>(0.01)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGMA_MAX</name></cpp:macro> <cpp:value>(4096.0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGMA_TEXT</name></cpp:macro> <cpp:value>N_("Gaussian's std deviation")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGMA_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Gaussian's standard deviation. The blurring will take " "into account pixels up to 3*sigma away in any direction.")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAUSSIAN_HELP</name></cpp:macro> <cpp:value>N_("Add a blurring effect")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_PREFIX</name></cpp:macro> <cpp:value>"gaussianblur-"</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Gaussian blur video filter"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_( <literal type="string">"Gaussian Blur"</literal> )</argument>)</argument_list></macro>
<macro><name>set_help</name><argument_list>(<argument>GAUSSIAN_HELP</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument>FILTER_PREFIX <literal type="string">"sigma"</literal></argument>, <argument><literal type="number">2.</literal></argument>, <argument>SIGMA_MIN</argument>, <argument>SIGMA_MAX</argument>,
<argument>SIGMA_TEXT</argument>, <argument>SIGMA_LONGTEXT</argument>,
<argument>false</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Create</argument>, <argument>Destroy</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"sigma"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DONT_USE_FLOATS</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DONT_USE_FLOATS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>type_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>type_t</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>double</name></type> <name>f_sigma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_dim</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>type_t</name> <modifier>*</modifier></type><name>pt_distribution</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>type_t</name> <modifier>*</modifier></type><name>pt_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>type_t</name> <modifier>*</modifier></type><name>pt_scale</name></decl>;</decl_stmt>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gaussianblur_InitDistribution</name><parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>f_sigma</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sigma</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_dim</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">3.</literal><operator>*</operator><name>f_sigma</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>type_t</name> <modifier>*</modifier></type><name>pt_distribution</name> <init>= <expr><call><name>xmalloc</name><argument_list>( <argument><expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i_dim</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>type_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>-</operator><name>i_dim</name></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>i_dim</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>f_distribution</name> <init>= <expr><call><name>sqrt</name><argument_list>( <argument><expr><call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator><operator>/</operator><operator>(</operator><name>f_sigma</name><operator>*</operator><name>f_sigma</name><operator>)</operator></expr></argument> )</argument_list></call> <operator>/</operator> <operator>(</operator><literal type="number">2.</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>f_sigma</name><operator>*</operator><name>f_sigma</name><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DONT_USE_FLOATS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>f_factor</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>f_factor</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>pt_distribution</name><index>[<expr><name>i_dim</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>type_t</name><operator>)</operator><operator>(</operator> <name>f_distribution</name> <operator>*</operator> <name>f_factor</name> <operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dim</name></name> <operator>=</operator> <name>i_dim</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pt_distribution</name></name> <operator>=</operator> <name>pt_distribution</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_I420</name>
<operator>&amp;&amp;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_J420</name>
<operator>&amp;&amp;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_YV12</name>

<operator>&amp;&amp;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_I422</name>
<operator>&amp;&amp;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_J422</name></expr>
)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input chroma (%4.4s)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Input and output chromas don't match"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>filter_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sigma</name></name> <operator>=</operator>
<call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"sigma"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_sigma</name></name> <operator>&lt;=</operator> <literal type="number">0.</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"sigma must be greater than zero"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gaussianblur_InitDistribution</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"gaussian distribution is %d pixels wide"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dim</name></name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pt_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pt_scale</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pt_distribution</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pt_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pt_scale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dim</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dim</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>type_t</name> <modifier>*</modifier></type><name>pt_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>type_t</name> <modifier>*</modifier></type><name>pt_scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>type_t</name> <modifier>*</modifier></type><name>pt_distribution</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pt_distribution</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_outpic</name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_outpic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pt_buffer</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pt_buffer</name></name> <operator>=</operator> <call><name>realloc_or_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pt_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name> <operator>*</operator>
<name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>type_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pt_buffer</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pt_buffer</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pt_scale</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_visible_lines</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_visible_pitch</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_pitch</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pt_scale</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><name>i_visible_lines</name> <operator>*</operator> <name>i_pitch</name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>type_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pt_scale</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pt_scale</name></name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_line</name> <operator>&lt;</operator> <name>i_visible_lines</name></expr>;</condition> <incr><expr><name>i_line</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_col</name> <operator>&lt;</operator> <name>i_visible_pitch</name></expr>;</condition> <incr><expr><name>i_col</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>type_t</name></type> <name>t_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>__MAX</name><argument_list>( <argument><expr><operator>-</operator><name>i_dim</name></expr></argument>, <argument><expr><operator>-</operator><name>i_line</name></expr></argument> )</argument_list></call></expr></init></decl>;</init>
<condition><expr><name>y</name> <operator>&lt;=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_dim</name></expr></argument>, <argument><expr><name>i_visible_lines</name> <operator>-</operator> <name>i_line</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</condition>
<incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>__MAX</name><argument_list>( <argument><expr><operator>-</operator><name>i_dim</name></expr></argument>, <argument><expr><operator>-</operator><name>i_col</name></expr></argument> )</argument_list></call></expr></init></decl>;</init>
<condition><expr><name>x</name> <operator>&lt;=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_dim</name></expr></argument>, <argument><expr><name>i_visible_pitch</name> <operator>-</operator> <name>i_col</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</condition>
<incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>t_value</name> <operator>+=</operator> <name><name>pt_distribution</name><index>[<expr><name>y</name><operator>+</operator><name>i_dim</name></expr>]</index></name> <operator>*</operator>
<name><name>pt_distribution</name><index>[<expr><name>x</name><operator>+</operator><name>i_dim</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>pt_scale</name><index>[<expr><name>i_line</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>i_col</name></expr>]</index></name> <operator>=</operator> <name>t_value</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pt_scale</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pt_scale</name></name></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr> ;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_visible_lines</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_visible_pitch</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_in_pitch</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x_factor</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name><operator>/</operator><name>i_visible_pitch</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y_factor</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name><operator>/</operator><name>i_visible_lines</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_line</name> <operator>&lt;</operator> <name>i_visible_lines</name></expr>;</condition> <incr><expr><name>i_line</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_col</name> <operator>&lt;</operator> <name>i_visible_pitch</name></expr>;</condition> <incr><expr><name>i_col</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>type_t</name></type> <name>t_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name> <init>= <expr><name>i_line</name><operator>*</operator><name>i_in_pitch</name><operator>+</operator><name>i_col</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>__MAX</name><argument_list>( <argument><expr><operator>-</operator><name>i_dim</name></expr></argument>, <argument><expr><operator>-</operator><name>i_col</name><operator>*</operator><operator>(</operator><name>x_factor</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</init>
<condition><expr><name>x</name> <operator>&lt;=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_dim</name></expr></argument>, <argument><expr><operator>(</operator><name>i_visible_pitch</name> <operator>-</operator> <name>i_col</name><operator>)</operator><operator>*</operator><operator>(</operator><name>x_factor</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</condition>
<incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>t_value</name> <operator>+=</operator> <name><name>pt_distribution</name><index>[<expr><name>x</name><operator>+</operator><name>i_dim</name></expr>]</index></name> <operator>*</operator>
<name><name>p_in</name><index>[<expr><name>c</name><operator>+</operator><operator>(</operator><name>x</name><operator>&gt;&gt;</operator><name>x_factor</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>pt_buffer</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>t_value</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_line</name> <operator>&lt;</operator> <name>i_visible_lines</name></expr>;</condition> <incr><expr><name>i_line</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_col</name> <operator>&lt;</operator> <name>i_visible_pitch</name></expr>;</condition> <incr><expr><name>i_col</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>type_t</name></type> <name>t_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name> <init>= <expr><name>i_line</name><operator>*</operator><name>i_in_pitch</name><operator>+</operator><name>i_col</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>__MAX</name><argument_list>( <argument><expr><operator>-</operator><name>i_dim</name></expr></argument>, <argument><expr><operator>(</operator><operator>-</operator><name>i_line</name><operator>)</operator><operator>*</operator><operator>(</operator><name>y_factor</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</init>
<condition><expr><name>y</name> <operator>&lt;=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_dim</name></expr></argument>, <argument><expr><operator>(</operator><name>i_visible_lines</name> <operator>-</operator> <name>i_line</name><operator>)</operator><operator>*</operator><operator>(</operator><name>y_factor</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</condition>
<incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>t_value</name> <operator>+=</operator> <name><name>pt_distribution</name><index>[<expr><name>y</name><operator>+</operator><name>i_dim</name></expr>]</index></name> <operator>*</operator>
<name><name>pt_buffer</name><index>[<expr><name>c</name><operator>+</operator><operator>(</operator><name>y</name><operator>&gt;&gt;</operator><name>y_factor</name><operator>)</operator><operator>*</operator><name>i_in_pitch</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>type_t</name></type> <name>t_scale</name> <init>= <expr><name><name>pt_scale</name><index>[<expr><operator>(</operator><name>i_line</name><operator>&lt;&lt;</operator><name>y_factor</name><operator>)</operator><operator>*</operator><operator>(</operator><name>i_in_pitch</name><operator>&lt;&lt;</operator><name>x_factor</name><operator>)</operator><operator>+</operator><operator>(</operator><name>i_col</name><operator>&lt;&lt;</operator><name>x_factor</name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i_line</name> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator> <name>i_col</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>t_value</name> <operator>/</operator> <name>t_scale</name><operator>)</operator></expr>;</expr_stmt> 
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
