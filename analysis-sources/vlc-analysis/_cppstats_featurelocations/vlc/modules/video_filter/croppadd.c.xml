<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\croppadd.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenFilter</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseFilter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CROPTOP_TEXT</name></cpp:macro> <cpp:value>N_( "Pixels to crop from top" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CROPTOP_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Number of pixels to crop from the top of the image." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CROPBOTTOM_TEXT</name></cpp:macro> <cpp:value>N_( "Pixels to crop from bottom" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CROPBOTTOM_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Number of pixels to crop from the bottom of the image." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CROPLEFT_TEXT</name></cpp:macro> <cpp:value>N_( "Pixels to crop from left" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CROPLEFT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Number of pixels to crop from the left of the image." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CROPRIGHT_TEXT</name></cpp:macro> <cpp:value>N_( "Pixels to crop from right" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CROPRIGHT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Number of pixels to crop from the right of the image." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PADDTOP_TEXT</name></cpp:macro> <cpp:value>N_( "Pixels to padd to top" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PADDTOP_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Number of pixels to padd to the top of the image after cropping." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PADDBOTTOM_TEXT</name></cpp:macro> <cpp:value>N_( "Pixels to padd to bottom" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PADDBOTTOM_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Number of pixels to padd to the bottom of the image after cropping." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PADDLEFT_TEXT</name></cpp:macro> <cpp:value>N_( "Pixels to padd to left" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PADDLEFT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Number of pixels to padd to the left of the image after cropping." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PADDRIGHT_TEXT</name></cpp:macro> <cpp:value>N_( "Pixels to padd to right" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PADDRIGHT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Number of pixels to padd to the right of the image after cropping." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"croppadd-"</cpp:value></cpp:define>




<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Croppadd"</literal>)</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Video cropping filter"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OpenFilter</argument>, <argument>CloseFilter</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>
<expr_stmt><expr><call><name>set_subcategory</name><argument_list>( <argument><expr><name>SUBCAT_VIDEO_VFILTER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Crop"</literal>)</argument>, <argument>NULL</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"croptop"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>INT_MAX</argument>,
<argument>CROPTOP_TEXT</argument>, <argument>CROPTOP_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"cropbottom"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>INT_MAX</argument>,
<argument>CROPBOTTOM_TEXT</argument>, <argument>CROPBOTTOM_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"cropleft"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>INT_MAX</argument>,
<argument>CROPLEFT_TEXT</argument>, <argument>CROPLEFT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"cropright"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>INT_MAX</argument>,
<argument>CROPRIGHT_TEXT</argument>, <argument>CROPRIGHT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Padd"</literal>)</argument>, <argument>NULL</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"paddtop"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>INT_MAX</argument>,
<argument>PADDTOP_TEXT</argument>, <argument>PADDTOP_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"paddbottom"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>INT_MAX</argument>,
<argument>PADDBOTTOM_TEXT</argument>, <argument>PADDBOTTOM_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"paddleft"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>INT_MAX</argument>,
<argument>PADDLEFT_TEXT</argument>, <argument>PADDLEFT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"paddright"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>INT_MAX</argument>,
<argument>PADDRIGHT_TEXT</argument>, <argument>PADDRIGHT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"croptop"</literal></expr>, <expr><literal type="string">"cropbottom"</literal></expr>, <expr><literal type="string">"cropleft"</literal></expr>, <expr><literal type="string">"cropright"</literal></expr>,
<expr><literal type="string">"paddtop"</literal></expr>, <expr><literal type="string">"paddbottom"</literal></expr>, <expr><literal type="string">"paddleft"</literal></expr>, <expr><literal type="string">"paddright"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_croptop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_cropbottom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_cropleft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_cropright</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_paddtop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_paddbottom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_paddleft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_paddright</name></decl>;</decl_stmt>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>




<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenFilter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_filter</name><operator>-&gt;</operator><name>b_allow_fmt_out_change</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Picture format change isn't allowed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Input and output chromas don't match"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>p_chroma</name> <init>=
<expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_chroma</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unknown input chroma %4.4s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr>?</condition><then>
<expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> </then><else>: <expr><literal type="string">"xxxx"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <operator>(</operator><name>filter_sys_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>filter_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OPTION</name><parameter_list>( <parameter><type><name>name</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>p_sys-&gt;i_ ##name = var_CreateGetInteger( p_filter, CFG_PREFIX #name ); if( p_sys-&gt;i_ ##name &amp; 1 ) msg_Warn( p_filter, "Using even values for `" #name "' is recommended" );</cpp:value></cpp:define>



<macro><name>GET_OPTION</name><argument_list>( <argument>croptop</argument> )</argument_list></macro>
<macro><name>GET_OPTION</name><argument_list>( <argument>cropbottom</argument> )</argument_list></macro>
<macro><name>GET_OPTION</name><argument_list>( <argument>cropleft</argument> )</argument_list></macro>
<macro><name>GET_OPTION</name><argument_list>( <argument>cropright</argument> )</argument_list></macro>
<macro><name>GET_OPTION</name><argument_list>( <argument>paddtop</argument> )</argument_list></macro>
<macro><name>GET_OPTION</name><argument_list>( <argument>paddbottom</argument> )</argument_list></macro>
<macro><name>GET_OPTION</name><argument_list>( <argument>paddleft</argument> )</argument_list></macro>
<macro><name>GET_OPTION</name><argument_list>( <argument>paddright</argument> )</argument_list></macro>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator>
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator>
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name>
<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_croptop</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cropbottom</name></name>
<operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_paddtop</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_paddbottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator>
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator>
<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name>
<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cropleft</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cropright</name></name>
<operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_paddleft</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_paddright</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Crop: Top: %d, Bottom: %d, Left: %d, Right: %d"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_croptop</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cropbottom</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cropleft</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cropright</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Padd: Top: %d, Bottom: %d, Left: %d, Right: %d"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_paddtop</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_paddbottom</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_paddleft</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_paddright</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"%dx%d -&gt; %dx%d"</literal></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseFilter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_width</name></decl>, <decl><type ref="prev"/><name>i_height</name></decl>, <decl><type ref="prev"/><name>i_xcrop</name></decl>, <decl><type ref="prev"/><name>i_ycrop</name></decl>,
<decl><type ref="prev"/><name>i_outwidth</name></decl>, <decl><type ref="prev"/><name>i_outheight</name></decl>, <decl><type ref="prev"/><name>i_xpadd</name></decl>, <decl><type ref="prev"/><name>i_ypadd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>p_padd_color</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>p_outpic</name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_outpic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>


<block>{<block_content>
<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p_plane</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name></name><operator>+</operator><name>i_plane</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p_outplane</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name></name><operator>+</operator><name>i_plane</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name> <init>= <expr><name><name>p_plane</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><name><name>p_outplane</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pixel_pitch</name> <init>= <expr><name><name>p_plane</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_padd_color</name> <init>= <expr><ternary><condition><expr><name>i_plane</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>p_padd_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>
</then><else>: <expr><name><name>p_padd_color</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>i_width</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name>
<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cropleft</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cropright</name></name> <operator>)</operator>
<operator>*</operator> <name><name>p_plane</name><operator>-&gt;</operator><name>i_visible_pitch</name></name> <operator>)</operator>
<operator>/</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_height</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name>
<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_croptop</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cropbottom</name></name> <operator>)</operator>
<operator>*</operator> <name><name>p_plane</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>)</operator>
<operator>/</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_xcrop</name> <operator>=</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cropleft</name></name> <operator>*</operator> <name><name>p_plane</name><operator>-&gt;</operator><name>i_visible_pitch</name></name><operator>)</operator>
<operator>/</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ycrop</name> <operator>=</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_croptop</name></name> <operator>*</operator> <name><name>p_plane</name><operator>-&gt;</operator><name>i_visible_lines</name></name><operator>)</operator>
<operator>/</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_outwidth</name> <operator>=</operator> <operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name>
<operator>*</operator> <name><name>p_outplane</name><operator>-&gt;</operator><name>i_visible_pitch</name></name> <operator>)</operator>
<operator>/</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_outheight</name> <operator>=</operator> <operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name>
<operator>*</operator> <name><name>p_outplane</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>)</operator>
<operator>/</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_xpadd</name> <operator>=</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_paddleft</name></name> <operator>*</operator> <name><name>p_outplane</name><operator>-&gt;</operator><name>i_visible_pitch</name></name> <operator>)</operator>
<operator>/</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ypadd</name> <operator>=</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_paddtop</name></name> <operator>*</operator> <name><name>p_outplane</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>)</operator>
<operator>/</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name>i_ycrop</name> <operator>*</operator> <name><name>p_plane</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>i_padd_color</name></expr></argument>, <argument><expr><name>i_ypadd</name> <operator>*</operator> <name><name>p_outplane</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name>i_ypadd</name> <operator>*</operator> <name><name>p_outplane</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_line</name> <operator>&lt;</operator> <name>i_height</name></expr>;</condition> <incr><expr><name>i_line</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in_next</name> <init>= <expr><name>p_in</name> <operator>+</operator> <name><name>p_plane</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out_next</name> <init>= <expr><name>p_out</name> <operator>+</operator> <name><name>p_outplane</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name>i_xcrop</name> <operator>*</operator> <name>i_pixel_pitch</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>i_padd_color</name></expr></argument>, <argument><expr><name>i_xpadd</name> <operator>*</operator> <name>i_pixel_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name>i_xpadd</name> <operator>*</operator> <name>i_pixel_pitch</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>p_in</name></expr></argument>, <argument><expr><name>i_width</name> <operator>*</operator> <name>i_pixel_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name>i_width</name> <operator>*</operator> <name>i_pixel_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name>i_width</name> <operator>*</operator> <name>i_pixel_pitch</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>i_padd_color</name></expr></argument>,
<argument><expr><operator>(</operator> <name>i_outwidth</name> <operator>-</operator> <name>i_xpadd</name> <operator>-</operator> <name>i_width</name> <operator>)</operator> <operator>*</operator> <name>i_pixel_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p_in</name> <operator>=</operator> <name>p_in_next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name>p_out_next</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>i_padd_color</name></expr></argument>,
<argument><expr><operator>(</operator> <name>i_outheight</name> <operator>-</operator> <name>i_ypadd</name> <operator>-</operator> <name>i_height</name> <operator>)</operator> <operator>*</operator> <name><name>p_outplane</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
