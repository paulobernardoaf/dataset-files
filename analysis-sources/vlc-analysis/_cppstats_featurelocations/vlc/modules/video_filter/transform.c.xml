<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\transform.c">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_mouse.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"transform-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_TEXT</name></cpp:macro> <cpp:value>N_("Transform type")</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>type_list</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"90"</literal></expr>, <expr><literal type="string">"180"</literal></expr>, <expr><literal type="string">"270"</literal></expr>,
<expr><literal type="string">"hflip"</literal></expr>, <expr><literal type="string">"vflip"</literal></expr>, <expr><literal type="string">"transpose"</literal></expr>, <expr><literal type="string">"antitranspose"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>type_list_text</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Rotate by 90 degrees"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Rotate by 180 degrees"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Rotate by 270 degrees"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Flip horizontally"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Flip vertically"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Transpose"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Anti-transpose"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Video transformation filter"</literal>)</argument>)</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"Transformation"</literal>)</argument>)</argument_list></macro>
<macro><name>set_help</name><argument_list>(<argument>N_(<literal type="string">"Rotate or flip the video"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VFILTER</argument>)</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"type"</literal></argument>, <argument><literal type="string">"90"</literal></argument>, <argument>TYPE_TEXT</argument>, <argument>TYPE_TEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_string_list</name><argument_list>(<argument>type_list</argument>, <argument>type_list_text</argument>)</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"transform"</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>




<function><type><specifier>static</specifier> <name>void</name></type> <name>HFlip</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sx</name> <operator>=</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sy</name> <operator>=</operator> <name>dy</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>VFlip</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sx</name> <operator>=</operator> <name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sy</name> <operator>=</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>dy</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>Transpose</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sx</name> <operator>=</operator> <name>dy</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sy</name> <operator>=</operator> <name>dx</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>AntiTranspose</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sx</name> <operator>=</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>dy</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sy</name> <operator>=</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>dx</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>R90</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sx</name> <operator>=</operator> <name>dy</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sy</name> <operator>=</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>dx</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>R180</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sx</name> <operator>=</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sy</name> <operator>=</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>dy</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>R270</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sx</name> <operator>=</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>dy</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sy</name> <operator>=</operator> <name>dx</name></expr>;</expr_stmt>
</block_content>}</block></function>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>convert_t</name>)<parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLANE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void Plane##bits##_##f(plane_t *restrict dst, const plane_t *restrict src) { const uint##bits##_t *src_pixels = (const void *)src-&gt;p_pixels; uint##bits##_t *restrict dst_pixels = (void *)dst-&gt;p_pixels; const unsigned src_width = src-&gt;i_pitch / sizeof (*src_pixels); const unsigned dst_width = dst-&gt;i_pitch / sizeof (*dst_pixels); const unsigned dst_visible_width = dst-&gt;i_visible_pitch / sizeof (*dst_pixels); for (int y = 0; y &lt; dst-&gt;i_visible_lines; y++) { for (unsigned x = 0; x &lt; dst_visible_width; x++) { int sx, sy; (f)(&amp;sx, &amp;sy, dst_visible_width, dst-&gt;i_visible_lines, x, y); dst_pixels[y * dst_width + x] = src_pixels[sy * src_width + sx]; } } }</cpp:value></cpp:define>


















<function><type><specifier>static</specifier> <name>void</name></type> <name>Plane_VFlip</name><parameter_list>(<parameter><decl><type><name>plane_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_pixels</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>dst_pixels</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst_pixels</name> <operator>+=</operator> <name><name>dst</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>*</operator> <name><name>dst</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst_pixels</name> <operator>-=</operator> <name><name>dst</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst_pixels</name></expr></argument>, <argument><expr><name>src_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_pixels</name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I422</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void Plane422_##f(plane_t *restrict dst, const plane_t *restrict src) { for (int y = 0; y &lt; dst-&gt;i_visible_lines; y += 2) { for (int x = 0; x &lt; dst-&gt;i_visible_pitch; x++) { int sx, sy, uv; (f)(&amp;sx, &amp;sy, dst-&gt;i_visible_pitch, dst-&gt;i_visible_lines / 2, x, y / 2); uv = (1 + src-&gt;p_pixels[2 * sy * src-&gt;i_pitch + sx] + src-&gt;p_pixels[(2 * sy + 1) * src-&gt;i_pitch + sx]) / 2; dst-&gt;p_pixels[y * dst-&gt;i_pitch + x] = uv; dst-&gt;p_pixels[(y + 1) * dst-&gt;i_pitch + x] = uv; } } }</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUY2</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void PlaneYUY2_##f(plane_t *restrict dst, const plane_t *restrict src) { unsigned dst_visible_width = dst-&gt;i_visible_pitch / 2; for (int y = 0; y &lt; dst-&gt;i_visible_lines; y += 2) { for (unsigned x = 0; x &lt; dst_visible_width; x+= 2) { int sx0, sy0, sx1, sy1; (f)(&amp;sx0, &amp;sy0, dst_visible_width, dst-&gt;i_visible_lines, x, y); (f)(&amp;sx1, &amp;sy1, dst_visible_width, dst-&gt;i_visible_lines, x + 1, y + 1); dst-&gt;p_pixels[(y + 0) * dst-&gt;i_pitch + 2 * (x + 0)] = src-&gt;p_pixels[sy0 * src-&gt;i_pitch + 2 * sx0]; dst-&gt;p_pixels[(y + 0) * dst-&gt;i_pitch + 2 * (x + 1)] = src-&gt;p_pixels[sy1 * src-&gt;i_pitch + 2 * sx0]; dst-&gt;p_pixels[(y + 1) * dst-&gt;i_pitch + 2 * (x + 0)] = src-&gt;p_pixels[sy0 * src-&gt;i_pitch + 2 * sx1]; dst-&gt;p_pixels[(y + 1) * dst-&gt;i_pitch + 2 * (x + 1)] = src-&gt;p_pixels[sy1 * src-&gt;i_pitch + 2 * sx1]; int sx, sy, u, v; (f)(&amp;sx, &amp;sy, dst_visible_width / 2, dst-&gt;i_visible_lines / 2, x / 2, y / 2); u = (1 + src-&gt;p_pixels[2 * sy * src-&gt;i_pitch + 4 * sx + 1] + src-&gt;p_pixels[(2 * sy + 1) * src-&gt;i_pitch + 4 * sx + 1]) / 2; v = (1 + src-&gt;p_pixels[2 * sy * src-&gt;i_pitch + 4 * sx + 3] + src-&gt;p_pixels[(2 * sy + 1) * src-&gt;i_pitch + 4 * sx + 3]) / 2; dst-&gt;p_pixels[(y + 0) * dst-&gt;i_pitch + 2 * x + 1] = u; dst-&gt;p_pixels[(y + 0) * dst-&gt;i_pitch + 2 * x + 3] = v; dst-&gt;p_pixels[(y + 1) * dst-&gt;i_pitch + 2 * x + 1] = u; dst-&gt;p_pixels[(y + 1) * dst-&gt;i_pitch + 2 * x + 3] = v; } } }</cpp:value></cpp:define>


































<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PLANES</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLANES</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PLANE(f,8) PLANE(f,16) PLANE(f,32)</cpp:value></cpp:define>


<macro><name>PLANES</name><argument_list>(<argument>HFlip</argument>)</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Plane8_VFlip</name></cpp:macro> <cpp:value>Plane_VFlip</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Plane16_VFlip</name></cpp:macro> <cpp:value>Plane_VFlip</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Plane32_VFlip</name></cpp:macro> <cpp:value>Plane_VFlip</cpp:value></cpp:define>
<macro><name>PLANES</name><argument_list>(<argument>Transpose</argument>)</argument_list></macro>
<macro><name>PLANES</name><argument_list>(<argument>AntiTranspose</argument>)</argument_list></macro>
<macro><name>PLANES</name><argument_list>(<argument>R90</argument>)</argument_list></macro>
<macro><name>PLANES</name><argument_list>(<argument>R180</argument>)</argument_list></macro>
<macro><name>PLANES</name><argument_list>(<argument>R270</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Plane422_HFlip</name></cpp:macro> <cpp:value>Plane16_HFlip</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Plane422_VFlip</name></cpp:macro> <cpp:value>Plane_VFlip</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Plane422_R180</name></cpp:macro> <cpp:value>Plane16_R180</cpp:value></cpp:define>
<macro><name>I422</name><argument_list>(<argument>Transpose</argument>)</argument_list></macro>
<macro><name>I422</name><argument_list>(<argument>AntiTranspose</argument>)</argument_list></macro>
<macro><name>I422</name><argument_list>(<argument>R90</argument>)</argument_list></macro>
<macro><name>I422</name><argument_list>(<argument>R270</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PlaneYUY2_HFlip</name></cpp:macro> <cpp:value>Plane32_HFlip</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PlaneYUY2_VFlip</name></cpp:macro> <cpp:value>Plane_VFlip</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PlaneYUY2_R180</name></cpp:macro> <cpp:value>Plane32_R180</cpp:value></cpp:define>
<macro><name>YUY2</name><argument_list>(<argument>Transpose</argument>)</argument_list></macro>
<macro><name>YUY2</name><argument_list>(<argument>AntiTranspose</argument>)</argument_list></macro>
<macro><name>YUY2</name><argument_list>(<argument>R90</argument>)</argument_list></macro>
<macro><name>YUY2</name><argument_list>(<argument>R270</argument>)</argument_list></macro>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>convert_t</name></type> <name>convert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>convert_t</name></type> <name>iconvert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_transform_t</name></type> <name>operation</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>plane8</name>) <parameter_list>(<parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>plane16</name>)<parameter_list>(<parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>plane32</name>)<parameter_list>(<parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>i422</name>)<parameter_list>(<parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>yuyv</name>)<parameter_list>(<parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>transform_description_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESC</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>invf</name></type></parameter>, <parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ str, f, invf, op, Plane8_##f, Plane16_##f, Plane32_##f, Plane422_##f, PlaneYUY2_##f }</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>transform_description_t</name></type> <name><name>descriptions</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>DESC</name><argument_list>(<argument><expr><literal type="string">"90"</literal></expr></argument>, <argument><expr><name>R90</name></expr></argument>, <argument><expr><name>R270</name></expr></argument>, <argument><expr><name>TRANSFORM_R90</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DESC</name><argument_list>(<argument><expr><literal type="string">"180"</literal></expr></argument>, <argument><expr><name>R180</name></expr></argument>, <argument><expr><name>R180</name></expr></argument>, <argument><expr><name>TRANSFORM_R180</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DESC</name><argument_list>(<argument><expr><literal type="string">"270"</literal></expr></argument>, <argument><expr><name>R270</name></expr></argument>, <argument><expr><name>R90</name></expr></argument>, <argument><expr><name>TRANSFORM_R270</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DESC</name><argument_list>(<argument><expr><literal type="string">"hflip"</literal></expr></argument>, <argument><expr><name>HFlip</name></expr></argument>, <argument><expr><name>HFlip</name></expr></argument>, <argument><expr><name>TRANSFORM_HFLIP</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DESC</name><argument_list>(<argument><expr><literal type="string">"vflip"</literal></expr></argument>, <argument><expr><name>VFlip</name></expr></argument>, <argument><expr><name>VFlip</name></expr></argument>, <argument><expr><name>TRANSFORM_VFLIP</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DESC</name><argument_list>(<argument><expr><literal type="string">"transpose"</literal></expr></argument>, <argument><expr><name>Transpose</name></expr></argument>, <argument><expr><name>Transpose</name></expr></argument>, <argument><expr><name>TRANSFORM_TRANSPOSE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DESC</name><argument_list>(<argument><expr><literal type="string">"antitranspose"</literal></expr></argument>, <argument><expr><name>AntiTranspose</name></expr></argument>, <argument><expr><name>AntiTranspose</name></expr></argument>, <argument><expr><name>TRANSFORM_ANTI_TRANSPOSE</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>dsc_is_rotated</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>transform_description_t</name> <modifier>*</modifier></type><name>dsc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>dsc</name><operator>-&gt;</operator><name>plane32</name></name> <operator>!=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>yuyv</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>n_transforms</name> <init>=
<expr><sizeof>sizeof <argument_list>(<argument><expr><name>descriptions</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>descriptions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>chroma</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>plane</name><index>[<expr><name>PICTURE_PLANE_MAX</name></expr>]</index>)<parameter_list>(<parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>convert_t</name></type> <name>convert</name></decl>;</decl_stmt>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>filter_NewPicture</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>chroma</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>chroma</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chroma</name><operator>-&gt;</operator><name>plane_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>,</operator> <operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mouse</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type><name>mouse</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>mold</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>mnew</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>mold</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>mouse</name> <operator>=</operator> <operator>*</operator><name>mnew</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>sys</name><operator>-&gt;</operator><name>convert</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mouse</name><operator>-&gt;</operator><name>i_x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mouse</name><operator>-&gt;</operator><name>i_y</name></name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>,
<argument><expr><name><name>mouse</name><operator>-&gt;</operator><name>i_x</name></name></expr></argument>, <argument><expr><name><name>mouse</name><operator>-&gt;</operator><name>i_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>chroma</name> <init>=
<expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>chroma</name></name> <operator>=</operator> <name>chroma</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"type"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,
<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type_name</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>transform_description_t</name> <modifier>*</modifier></type><name>dsc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_transforms</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>type_name</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>descriptions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>type_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dsc</name> <operator>=</operator> <operator>&amp;</operator><name><name>descriptions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>dsc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dsc</name> <operator>=</operator> <operator>&amp;</operator><name><name>descriptions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"No valid transform mode provided, using '%s'"</literal></expr></argument>,
<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>type_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>chroma</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>plane8</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>plane16</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>plane32</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported pixel size %u (chroma %4.4s)"</literal></expr></argument>,
<argument><expr><name><name>chroma</name><operator>-&gt;</operator><name>pixel_size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></switch>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PICTURE_PLANE_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>convert</name></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>convert</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dsc_is_rotated</name><argument_list>(<argument><expr><name>dsc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>i_chroma</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VLC_CODEC_I422</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_J422</name></expr>:</case>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>i422</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chroma</name><operator>-&gt;</operator><name>plane_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>num</name></name> <operator>*</operator> <name><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name>
<operator>!=</operator> <name><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>num</name></name> <operator>*</operator> <name><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>den</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"Format rotation not possible "</literal>
<literal type="string">"(chroma %4.4s)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>







<decl_stmt><decl><type><name>video_format_t</name></type> <name>src_trans</name> <init>= <expr><operator>*</operator><name>src</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>video_format_TransformBy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_trans</name></expr></argument>, <argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>operation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>b_allow_fmt_out_change</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>i_width</name></name> <operator>!=</operator> <name><name>src_trans</name><operator>.</operator><name>i_width</name></name> <operator>||</operator>
<name><name>dst</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>!=</operator> <name><name>src_trans</name><operator>.</operator><name>i_visible_width</name></name> <operator>||</operator>
<name><name>dst</name><operator>-&gt;</operator><name>i_height</name></name> <operator>!=</operator> <name><name>src_trans</name><operator>.</operator><name>i_height</name></name> <operator>||</operator>
<name><name>dst</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>!=</operator> <name><name>src_trans</name><operator>.</operator><name>i_visible_height</name></name> <operator>||</operator>
<name><name>dst</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>!=</operator> <name><name>src_trans</name><operator>.</operator><name>i_sar_num</name></name> <operator>||</operator>
<name><name>dst</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>!=</operator> <name><name>src_trans</name><operator>.</operator><name>i_sar_den</name></name> <operator>||</operator>
<name><name>dst</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>!=</operator> <name><name>src_trans</name><operator>.</operator><name>i_x_offset</name></name> <operator>||</operator>
<name><name>dst</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>!=</operator> <name><name>src_trans</name><operator>.</operator><name>i_y_offset</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"Format change is not allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>b_allow_fmt_out_change</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name><name>src_trans</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>src_trans</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name><name>src_trans</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>src_trans</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>src_trans</name><operator>.</operator><name>i_sar_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>src_trans</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>src_trans</name><operator>.</operator><name>i_x_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>=</operator> <name><name>src_trans</name><operator>.</operator><name>i_y_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>i_chroma</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VLC_CODEC_UYVY</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_VYUY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>dsc_is_rotated</name><argument_list>(<argument><expr><name>dsc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"Format rotation not possible (chroma %4.4s)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>VLC_CODEC_YUYV</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_YVYU</name></expr>:</case>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dsc</name><operator>-&gt;</operator><name>yuyv</name></name></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>VLC_CODEC_NV12</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_NV21</name></expr>:</case>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>pf_video_mouse</name></name> <operator>=</operator> <name>Mouse</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
