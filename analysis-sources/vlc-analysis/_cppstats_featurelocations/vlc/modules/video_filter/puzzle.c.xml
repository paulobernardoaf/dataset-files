<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\puzzle.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_mouse.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"puzzle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"puzzle_bezier.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"puzzle_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"puzzle_pce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"puzzle_mgt.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROWS_TEXT</name></cpp:macro> <cpp:value>N_("Number of puzzle rows")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROWS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Number of puzzle rows")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLS_TEXT</name></cpp:macro> <cpp:value>N_("Number of puzzle columns")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Number of puzzle columns")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_TEXT</name></cpp:macro> <cpp:value>N_("Game mode")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select game mode variation from jigsaw puzzle to sliding puzzle.")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BORDER_TEXT</name></cpp:macro> <cpp:value>N_("Border")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BORDER_LONGTEXT</name></cpp:macro> <cpp:value>N_("Unshuffled Border width.")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREVIEW_TEXT</name></cpp:macro> <cpp:value>N_("Small preview")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREVIEW_LONGTEXT</name></cpp:macro> <cpp:value>N_("Show small preview.")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREVIEWSIZE_TEXT</name></cpp:macro> <cpp:value>N_("Small preview size")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREVIEWSIZE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Show small preview size (percent of source).")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHAPE_SIZE_TEXT</name></cpp:macro> <cpp:value>N_("Piece edge shape size")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHAPE_SIZE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Size of the curve along the piece's edge")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTO_SHUFFLE_TEXT</name></cpp:macro> <cpp:value>N_("Auto shuffle")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTO_SHUFFLE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Auto shuffle delay during game")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTO_SOLVE_TEXT</name></cpp:macro> <cpp:value>N_("Auto solve")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTO_SOLVE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Auto solve delay during game")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATION_TEXT</name></cpp:macro> <cpp:value>N_("Rotation")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATION_LONGTEXT</name></cpp:macro> <cpp:value>N_("Rotation parameter: none;180;90-270;mirror")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_mode_values</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">0</literal></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">1</literal></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">2</literal></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_mode_descriptions</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"jigsaw puzzle"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"sliding puzzle"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"swap puzzle"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"exchange puzzle"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_rotation_values</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">0</literal></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">1</literal></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">2</literal></expr>, <expr><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_rotation_descriptions</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"0/180"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"0/90/180/270"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"0/90/180/270/mirror"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"puzzle-"</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Puzzle interactive game video filter"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_( <literal type="string">"Puzzle"</literal> )</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"rows"</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">42</literal></argument>,
<argument>ROWS_TEXT</argument>, <argument>ROWS_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"cols"</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">42</literal></argument>,
<argument>COLS_TEXT</argument>, <argument>COLS_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"border"</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">40</literal></argument>,
<argument>BORDER_TEXT</argument>, <argument>BORDER_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"preview"</literal></argument>, <argument>false</argument>,
<argument>PREVIEW_TEXT</argument>, <argument>PREVIEW_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"preview-size"</literal></argument>, <argument><literal type="number">15</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">100</literal></argument>,
<argument>PREVIEWSIZE_TEXT</argument>, <argument>PREVIEWSIZE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"shape-size"</literal></argument>, <argument><literal type="number">90</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">100</literal></argument>,
<argument>SHAPE_SIZE_TEXT</argument>, <argument>SHAPE_SIZE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"auto-shuffle"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">30000</literal></argument>,
<argument>AUTO_SHUFFLE_TEXT</argument>, <argument>AUTO_SHUFFLE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"auto-solve"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">30000</literal></argument>,
<argument>AUTO_SOLVE_TEXT</argument>, <argument>AUTO_SOLVE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"rotation"</literal></argument>, <argument><literal type="number">0</literal></argument>,
<argument>ROTATION_TEXT</argument>, <argument>ROTATION_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>(<argument>pi_rotation_values</argument>, <argument>ppsz_rotation_descriptions</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"mode"</literal></argument>, <argument><literal type="number">0</literal></argument>,
<argument>MODE_TEXT</argument>, <argument>MODE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>(<argument>pi_mode_values</argument>, <argument>ppsz_mode_descriptions</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>





<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"rows"</literal></expr>, <expr><literal type="string">"cols"</literal></expr>,<expr><literal type="string">"border"</literal></expr>, <expr><literal type="string">"preview"</literal></expr>, <expr><literal type="string">"preview-size"</literal></expr>, <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"shape-size"</literal></expr>, <expr><literal type="string">"auto-shuffle"</literal></expr>, <expr><literal type="string">"auto-solve"</literal></expr>, <expr><literal type="string">"rotation"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>es_format_IsSimilar</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Input and output format does not match"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>p_chroma</name> <init>=
<expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_chroma</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_shuffle_rqst</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_change_param</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_drag_pce</name></name> <operator>=</operator> <name>NO_PCE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pointed_pce</name></name> <operator>=</operator> <name>NO_PCE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_magnet_accuracy</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_bezier_pts_H</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>SHAPES_QTY</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>point_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_bezier_pts_H</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_shape</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_shape</name><operator>&lt;</operator><name>SHAPES_QTY</name></expr>;</condition> <incr><expr><name>i_shape</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_bezier_pts_H</name><index>[<expr><name>i_shape</name></expr>]</index></name> <operator>=</operator> <call><name>puzzle_rand_bezier</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pce_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_rows</name></name> <operator>=</operator>
<call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"rows"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_cols</name></name> <operator>=</operator>
<call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"cols"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_border</name></name> <operator>=</operator>
<call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"border"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_preview</name></name> <operator>=</operator>
<call><name>var_CreateGetBoolCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"preview"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_preview_size</name></name> <operator>=</operator>
<call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"preview-size"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_shape_size</name></name> <operator>=</operator>
<call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"shape-size"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_auto_shuffle_speed</name></name> <operator>=</operator>
<call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"auto-shuffle"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_auto_solve_speed</name></name> <operator>=</operator>
<call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"auto-solve"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_rotate</name></name> <operator>=</operator>
<call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"rotation"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_mode</name></name> <operator>=</operator>
<call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"mode"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"rows"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"cols"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"border"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"preview"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"preview-size"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"shape-size"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"auto-shuffle"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"auto-solve"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"rotation"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"mode"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_mouse</name></name> <operator>=</operator> <name>puzzle_mouse</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"rows"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"cols"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"border"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"preview"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"preview-size"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"shape-size"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"auto-shuffle"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"auto-solve"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"rotation"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"mode"</literal></expr></argument>, <argument><expr><name>puzzle_Callback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>puzzle_free_ps_puzzle_array</name> <argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puzzle_free_ps_pieces_shapes</name> <argument_list>( <argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puzzle_free_ps_pieces</name> <argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_shape</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_shape</name><operator>&lt;</operator><name>SHAPES_QTY</name></expr>;</condition> <incr><expr><name>i_shape</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_bezier_pts_H</name><index>[<expr><name>i_shape</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_bezier_pts_H</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_in</name></decl></parameter> )</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic_in</name> <operator>||</operator> <operator>!</operator><name>p_filter</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_in</name> <init>= <expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name> <init>= <expr><call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic_out</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_bake_request</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_advanced</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_shape_size</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_planes</name></name> <operator>!=</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>i_planes</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_planes</name></name> <operator>=</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>!=</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>!=</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>/</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>!=</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>!=</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>/</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_pict_width</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>/</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_pict_height</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_desk_width</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>/</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_desk_height</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_pict_width</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_desk_width</name></name>
<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_pict_height</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_desk_height</name></name>
<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_pict_width</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_visible_width</name></name>
<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_pict_height</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>p_pic_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>p_pic_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_change_param</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_bake_request</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_rows</name></name>
<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_cols</name></name>
<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rotate</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_rotate</name></name>
<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_mode</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_mode</name></name>
<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_bake_request</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_bake_request</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_shuffle_rqst</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_shape_init</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_border</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_border</name></name>
<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_shape_size</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_shape_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_bake_request</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_shape_init</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_mode</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_advanced</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_blackslot</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_near</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_advanced</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_blackslot</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_near</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_advanced</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_blackslot</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_near</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_advanced</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_blackslot</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_near</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_mode</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_mode</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_blackslot</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_blackslot</name></name>
<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>==</operator> <name>NO_PCE</name>
<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_blackslot</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_auto_shuffle_speed</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_auto_shuffle_speed</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_auto_shuffle_countdown_val</name></name> <operator>=</operator> <call><name>init_countdown</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_auto_shuffle_speed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_auto_solve_speed</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_auto_solve_speed</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_auto_solve_countdown_val</name></name> <operator>=</operator> <call><name>init_countdown</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_auto_solve_speed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_rows</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_rows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_cols</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_cols</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_pieces_nbr</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_rows</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_cols</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_advanced</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_advanced</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_advanced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_blackslot</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_blackslot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_near</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_near</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_blackslot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_border</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_preview</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_preview_size</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_shape_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_auto_shuffle_speed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_auto_solve_speed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_rotate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_blackslot</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_near</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_border</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_border</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_preview</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_preview</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_preview_size</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_preview_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_shape_size</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_shape_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_auto_shuffle_speed</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_auto_shuffle_speed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_auto_solve_speed</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_auto_solve_speed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_rotate</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_rotate</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_change_param</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_bake_request</name></name></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_shuffle_rqst</name></name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>save_game_t</name> <modifier>*</modifier></type><name>ps_save_game</name> <init>= <expr><call><name>puzzle_save</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ps_save_game</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_bake</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps_save_game</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>puzzle_load</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>ps_save_game</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ps_save_game</name><operator>-&gt;</operator><name>ps_pieces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps_save_game</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_bake</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_shuffle_rqst</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_bake_piece</name> <argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_bake_request</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_shuffle_rqst</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_finished</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puzzle_preset_desk_background</name><argument_list>(<argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>,
<argument><expr><name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pce_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name> <operator>/</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_bake_request</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_drag</name></name>
<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_advanced</name></name> <operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>puzzle_solve_pces_accuracy</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name> <operator>/</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_bake_request</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_drag</name></name>
<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_advanced</name></name> <operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>puzzle_solve_pces_group</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_bake_request</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_drag</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name>
<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_advanced</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puzzle_count_pce_group</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_bake_request</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_drag</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name>
<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_advanced</name></name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_sort_layers</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pce_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name> <operator>/</operator> <literal type="number">24</literal></expr></argument> )</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_bake_request</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_drag</name></name>
<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_advanced</name></name> <operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_calc_corn_loop</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_calc_corn_loop</name></name> <operator>%=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puzzle_calculate_corners</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_calc_corn_loop</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_bake_request</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_drag</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name>
<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_advanced</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>puzzle_auto_shuffle</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puzzle_auto_solve</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pce_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_bake_request</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>puzzle_draw_borders</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pointed_pce</name></name> <operator>=</operator> <name>NO_PCE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puzzle_draw_pieces</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pointed_pce</name></name> <operator>==</operator> <name>NO_PCE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_drag_pce</name></name> <operator>=</operator> <call><name>puzzle_find_piece</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_x</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_y</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_drag_pce</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pointed_pce</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_preview</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puzzle_draw_preview</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>!=</operator> <name>NO_PCE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_blackslot</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_advanced</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>puzzle_draw_rectangle</name><argument_list>(<argument><expr><name>p_pic_out</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_x</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_y</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_width</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></argument>,
<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>!=</operator> <name>NO_PCE</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_blackslot</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_advanced</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>puzzle_fill_rectangle</name><argument_list>(<argument><expr><name>p_pic_out</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_x</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_y</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_width</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_finished</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puzzle_draw_sign</name><argument_list>(<argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SHUFFLE_WIDTH</name></expr></argument>, <argument><expr><name>SHUFFLE_LINES</name></expr></argument>, <argument><expr><name>ppsz_shuffle_button</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_drag_pce</name></name> <operator>!=</operator> <name>NO_PCE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_drag</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_finished</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_advanced</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pce_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_delta_x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_rotate</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_delta_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_drag_pce</name></name></expr>]</index></name><operator>.</operator><name>i_actual_angle</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_delta_x</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pce_max_width</name> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_delta_x</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pce_max_lines</name> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_rotate</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_action</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_rotate</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_action</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_x</name></name> <operator>&gt;=</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_drag_pce</name></name></expr>]</index></name><operator>.</operator><name>i_center_x</name> <operator>+</operator> <name>i_delta_x</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_action</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_x</name></name> <operator>&lt;=</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_drag_pce</name></name></expr>]</index></name><operator>.</operator><name>i_center_x</name> <operator>-</operator> <name>i_delta_x</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_action</name></name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_action</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_action</name></name> <operator>==</operator> <operator>+</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puzzle_draw_sign</name><argument_list>(<argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_x</name></name> <operator>-</operator> <name>ARROW_WIDTH</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_y</name></name></expr></argument>, <argument><expr><name>ARROW_WIDTH</name></expr></argument>, <argument><expr><name>ARROW_LINES</name></expr></argument>, <argument><expr><name>ppsz_rot_arrow_sign</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_action</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puzzle_draw_sign</name><argument_list>(<argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_x</name></name> <operator>-</operator> <name>ARROW_WIDTH</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_y</name></name></expr></argument>, <argument><expr><name>ARROW_WIDTH</name></expr></argument>, <argument><expr><name>ARROW_LINES</name></expr></argument>, <argument><expr><name>ppsz_rot_arrow_sign</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_action</name></name> <operator>==</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puzzle_draw_sign</name><argument_list>(<argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_x</name></name> <operator>-</operator> <name>ARROW_WIDTH</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_y</name></name></expr></argument>, <argument><expr><name>ARROW_WIDTH</name></expr></argument>, <argument><expr><name>ARROW_LINES</name></expr></argument>, <argument><expr><name>ppsz_mir_arrow_sign</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pce_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>puzzle_Callback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,
<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>filter_sys_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"rows"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_rows</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"cols"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_cols</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"border"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_border</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"preview"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>b_preview</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>b_bool</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"preview-size"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_preview_size</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"shape-size"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_shape_size</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"auto-shuffle"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_auto_shuffle_speed</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"auto-solve"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_auto_solve_speed</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"rotation"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_rotate</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"mode"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_new_param</name><operator>.</operator><name>i_mode</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_change_param</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>puzzle_mouse</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_mouse</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_old</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_new</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_in</name> <init>= <expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_width</name></name> <operator>||</operator>
<name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_height</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_change_param</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_mouse</name> <operator>=</operator> <operator>*</operator><name>p_new</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_x</name></name> <operator>=</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_y</name></name> <operator>=</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_finished</name></name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_drag</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_mvt</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_mouse_HasPressed</name><argument_list>( <argument><expr><name>p_old</name></expr></argument>, <argument><expr><name>p_new</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_LEFT</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&lt;</operator> <name>SHUFFLE_WIDTH</name> <operator>&amp;&amp;</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&lt;</operator> <name>SHUFFLE_LINES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_shuffle_rqst</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_mouse</name> <operator>=</operator> <operator>*</operator><name>p_new</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_advanced</name></name></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_clicked</name> <init>= <expr><call><name>vlc_mouse_HasPressed</name><argument_list>( <argument><expr><name>p_old</name></expr></argument>, <argument><expr><name>p_new</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_LEFT</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_clicked</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_border_width</name> <init>= <expr><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_width</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_border</name></name> <operator>/</operator> <literal type="number">100</literal> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_border_height</name> <init>= <expr><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_height</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_border</name></name> <operator>/</operator> <literal type="number">100</literal> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_pos_x</name> <init>= <expr><operator>(</operator><name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>-</operator> <name>i_border_width</name><operator>)</operator> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name> <operator>/</operator> <operator>(</operator><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>i_border_width</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_pos_y</name> <init>= <expr><operator>(</operator><name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>-</operator> <name>i_border_height</name><operator>)</operator> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name> <operator>/</operator> <operator>(</operator><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>i_border_height</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_pos</name> <init>= <expr><name>i_pos_y</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name> <operator>+</operator> <name>i_pos_x</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_drag_pce</name></name> <operator>=</operator> <name>i_pos</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&lt;=</operator> <name>i_border_width</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&lt;=</operator> <name>i_border_height</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_width</name></name> <operator>-</operator> <name>i_border_width</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_height</name></name> <operator>-</operator> <name>i_border_height</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_mouse</name> <operator>=</operator> <operator>*</operator><name>p_new</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>==</operator> <name>NO_PCE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>=</operator> <name>i_pos</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>==</operator> <name>i_pos</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_blackslot</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>==</operator> <name>i_pos</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name><operator>%</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator>
<operator>||</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>==</operator> <name>i_pos</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_pos</name> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator>
<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>==</operator> <name>i_pos</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name>
<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>==</operator> <name>i_pos</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name>
<operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_near</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>a</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name><index>[ <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name><index>[ <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name></expr> ]</index></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name><index>[ <expr><name>i_pos</name></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name><index>[ <expr><name>i_pos</name></expr> ]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_rows</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>orow</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ocol</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_cols</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_original_row</name> <operator>=</operator> <name>orow</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_original_col</name> <operator>=</operator> <name>ocol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_top_shape</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_btm_shape</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_right_shape</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_left_shape</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_actual_angle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_actual_mirror</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_overlap</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_finished</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_original_x</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>orow</name></expr>]</index><index>[<expr><name>ocol</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_original_y</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>orow</name></expr>]</index><index>[<expr><name>ocol</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_actual_x</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_actual_y</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_y</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_blackslot</name></name></expr> ?</condition><then> <expr><name>i_pos</name></expr> </then><else>: <expr><name>NO_PCE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_finished</name></name> <operator>=</operator> <call><name>puzzle_is_finished</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_order</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pict_planes</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_mouse</name> <operator>=</operator> <operator>*</operator><name>p_new</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_mouse_HasPressed</name><argument_list>( <argument><expr><name>p_old</name></expr></argument>, <argument><expr><name>p_new</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_LEFT</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pce_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_drag_pce</name></name> <operator>!=</operator> <name>NO_PCE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>puzzle_piece_foreground</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_drag_pce</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pce_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_drag_pce</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_group_ID</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_group_ID</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>i_group_ID</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_finished</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_drag</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_mvt</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_drag</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_overlap</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>puzzle_move_group</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_center_x</name></expr></argument>, <argument><expr><name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_center_y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_overlap</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_drag</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pce_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>vlc_mouse_HasReleased</name><argument_list>( <argument><expr><name>p_old</name></expr></argument>, <argument><expr><name>p_new</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_LEFT</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_mvt</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_drag</name></name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_rotate</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pce_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_group_ID</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_group_ID</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name>i_group_ID</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>puzzle_rotate_pce</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_action</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_center_x</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_center_y</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_action</name></name> <operator>!=</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pce_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_drag</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_mvt</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>

<switch>switch <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_preview_pos</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_height</name></name> <operator>/</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_preview_pos</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_height</name></name> <operator>/</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_preview_pos</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_height</name></name> <operator>/</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_preview_pos</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_height</name></name> <operator>/</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_preview_pos</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_preview_pos</name></name> <operator>%=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>vlc_mouse_IsLeftPressed</name><argument_list>( <argument><expr><name>p_new</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_drag</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_dx</name></decl>, <decl><type ref="prev"/><name>i_dy</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mouse_GetMotion</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_dx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dy</name></expr></argument>, <argument><expr><name>p_old</name></expr></argument>, <argument><expr><name>p_new</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_dx</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_dy</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_mvt</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_drag</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>||</operator> <operator>(</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>||</operator> <operator>(</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_width</name></name> <operator>)</operator>
<operator>||</operator> <operator>(</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_height</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_drag</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mouse_mvt</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><name>i_dx</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_dy</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pce_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>puzzle_move_group</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_drag_pce</name></name></expr></argument>, <argument><expr><name>i_dx</name></expr></argument>, <argument><expr><name>i_dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pce_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>
</unit>
