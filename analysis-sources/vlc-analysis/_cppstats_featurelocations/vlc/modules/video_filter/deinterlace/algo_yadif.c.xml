<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\deinterlace\algo_yadif.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"deinterlace.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"algo_yadif.h"</cpp:file></cpp:include>







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yadif.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>RenderYadifSingle</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RenderYadif</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>RenderYadif</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_field</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_order</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_order</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_field</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_field</name> <operator>==</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_prev</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_cur</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
































<decl_stmt><decl><type><name>int</name></type> <name>yadif_parity</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_cur</name> <operator>&amp;&amp;</operator> <name><name>p_cur</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>yadif_parity</name> <operator>=</operator> <operator>(</operator><name>i_order</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>yadif_parity</name> <operator>=</operator> <operator>(</operator><name>i_order</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 


<if_stmt><if>if<condition>( <expr><name>p_prev</name> <operator>&amp;&amp;</operator> <name>p_cur</name> <operator>&amp;&amp;</operator> <name>p_next</name></expr> )</condition>
<block>{<block_content>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>filter</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>next</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X86ASM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><call><name>vlc_CPU_SSSE3</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name>vlcpriv_yadif_filter_line_ssse3</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if<condition>( <expr><call><name>vlc_CPU_SSE2</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name>vlcpriv_yadif_filter_line_sse2</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
if<condition>( <expr><call><name>vlc_CPU_MMXEXT</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name>vlcpriv_yadif_filter_line_mmxext</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name>yadif_filter_line_c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>chroma</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name>yadif_filter_line_c_16bit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>prevp</name> <init>= <expr><operator>&amp;</operator><name><name>p_prev</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>curp</name> <init>= <expr><operator>&amp;</operator><name><name>p_cur</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>nextp</name> <init>= <expr><operator>&amp;</operator><name><name>p_next</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>dstp</name> <init>= <expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>dstp</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>y</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <name>i_field</name> <operator>||</operator> <name>yadif_parity</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>dstp</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>dstp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>curp</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>curp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstp</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>y</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name><name>dstp</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>prevp</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>==</operator> <name><name>curp</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>&amp;&amp;</operator> <name><name>curp</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>==</operator> <name><name>nextp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>filter</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>dstp</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>dstp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>prevp</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>prevp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>curp</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>curp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>nextp</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>nextp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dstp</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>y</name> <operator>&lt;</operator> <name><name>dstp</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>-</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>curp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr> </then><else>: <expr><operator>-</operator><name><name>curp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><name><name>curp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr> </then><else>: <expr><name><name>curp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></else></ternary></expr></argument>,
<argument><expr><name>yadif_parity</name></expr></argument>,
<argument><expr><name>mode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><name>y</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dstp</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>dstp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>dstp</name><operator>-&gt;</operator><name>p_pixels</name><index>[ <expr><name>y</name> <operator>*</operator> <name><name>dstp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dstp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>y</name> <operator>==</operator> <name><name>dstp</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>-</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dstp</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>dstp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>dstp</name><operator>-&gt;</operator><name>p_pixels</name><index>[ <expr><name>y</name> <operator>*</operator> <name><name>dstp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dstp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_frame_offset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><name>p_prev</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_cur</name> <operator>&amp;&amp;</operator> <name>p_next</name></expr> )</condition>
<block>{<block_content>




<expr_stmt><expr><call><name>RenderX</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>i_frame_offset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
