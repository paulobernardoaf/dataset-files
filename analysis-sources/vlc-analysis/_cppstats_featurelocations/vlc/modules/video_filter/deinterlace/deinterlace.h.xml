<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\deinterlace\deinterlace.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_DEINTERLACE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_DEINTERLACE_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<struct_decl>struct <name>filter_t</name>;</struct_decl>
<struct_decl>struct <name>picture_t</name>;</struct_decl>
<struct_decl>struct <name>vlc_object_t</name>;</struct_decl>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_mouse.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"algo_basic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"algo_x.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"algo_yadif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"algo_phosphor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"algo_ivtc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>






<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>mode_list</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"discard"</literal></expr>, <expr><literal type="string">"blend"</literal></expr>, <expr><literal type="string">"mean"</literal></expr>, <expr><literal type="string">"bob"</literal></expr>, <expr><literal type="string">"linear"</literal></expr>, <expr><literal type="string">"x"</literal></expr>,
<expr><literal type="string">"yadif"</literal></expr>, <expr><literal type="string">"yadif2x"</literal></expr>, <expr><literal type="string">"phosphor"</literal></expr>, <expr><literal type="string">"ivtc"</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>mode_list_text</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Discard"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Blend"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Mean"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bob"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Linear"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"X"</literal></expr>,
<expr><literal type="string">"Yadif"</literal></expr>, <expr><literal type="string">"Yadif (2x)"</literal></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Phosphor"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Film NTSC (IVTC)"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>








<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>chroma</name></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_merge</name>) <parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_end_merge</name>) <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>deinterlace_ctx</name></name></type> <name>context</name></decl>;</decl_stmt>


<union>union <block>{
<decl_stmt><decl><type><name>phosphor_sys_t</name></type> <name>phosphor</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ivtc_sys_t</name></type> <name>ivtc</name></decl>;</decl_stmt> 
}</block>;</union>
}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
