<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\deinterlace\algo_phosphor.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mmx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdalign.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"deinterlace.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"helpers.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"algo_phosphor.h"</cpp:file></cpp:include>



























<function><type><specifier>static</specifier> <name>void</name></type> <name>DarkenField</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_field</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_strength</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>process_chroma</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_dst</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_field</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_field</name> <operator>==</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_strength</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_strength</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>remove_high_u8</name> <init>= <expr><literal type="number">0xFF</literal> <operator>&gt;&gt;</operator> <name>i_strength</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>remove_high_u64</name> <init>= <expr><name>remove_high_u8</name> <operator>*</operator>
<call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">0x0101010101010101</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>








<decl_stmt><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><name>Y_PLANE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out_end</name> <operator>=</operator> <name>p_out</name> <operator>+</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>*</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>i_field</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wm8</name> <init>= <expr><name>w</name> <operator>%</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>w8</name> <init>= <expr><name>w</name> <operator>-</operator> <name>wm8</name></expr></init></decl>;</decl_stmt> 
<for>for<control>( <init>;</init> <condition><expr><name>p_out</name> <operator>&lt;</operator> <name>p_out_end</name></expr> ;</condition> <incr><expr><name>p_out</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>po</name> <init>= <expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>p_out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w8</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><operator>++</operator><name>po</name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>po</name><operator>)</operator> <operator>=</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>po</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>i_strength</name><operator>)</operator> <operator>&amp;</operator> <name>remove_high_u64</name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>po_temp</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>po</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr><operator>,</operator> <expr><operator>++</operator><name>po_temp</name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>po_temp</name><operator>)</operator> <operator>=</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>po_temp</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>i_strength</name><operator>)</operator> <operator>&amp;</operator> <name>remove_high_u8</name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>







<if_stmt><if>if<condition>( <expr><name>process_chroma</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><expr><name>i_plane</name><operator>++</operator></expr> ;</init>
<condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition>
<incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out_end</name> <operator>=</operator> <name>p_out</name> <operator>+</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>*</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>i_field</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_out</name> <operator>&lt;</operator> <name>p_out_end</name></expr> ;</condition> <incr><expr><name>p_out</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></incr> )</control>
<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>po</name> <init>= <expr><name>p_out</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr><operator>,</operator> <expr><operator>++</operator><name>po</name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>po</name><operator>)</operator> <operator>=</operator> <literal type="number">128</literal> <operator>+</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>po</name><operator>)</operator> <operator>-</operator> <literal type="number">128</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i_strength</name><operator>)</operator> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for> 
</block_content>}</block></for> 
</block_content>}</block></if></if_stmt> 
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>VLC_MMX</name>
<specifier>static</specifier> <name>void</name></type> <name>DarkenFieldMMX</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_field</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_strength</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>process_chroma</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_dst</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_field</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_field</name> <operator>==</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_strength</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_strength</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_strength_u64</name> <init>= <expr><name>i_strength</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>remove_high_u8</name> <init>= <expr><literal type="number">0xFF</literal> <operator>&gt;&gt;</operator> <name>i_strength</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>remove_high_u64</name> <init>= <expr><name>remove_high_u8</name> <operator>*</operator>
<call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">0x0101010101010101</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><name>Y_PLANE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out_end</name> <operator>=</operator> <name>p_out</name> <operator>+</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>*</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>i_field</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wm8</name> <init>= <expr><name>w</name> <operator>%</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>w8</name> <init>= <expr><name>w</name> <operator>-</operator> <name>wm8</name></expr></init></decl>;</decl_stmt> 
<for>for<control>( <init>;</init> <condition><expr><name>p_out</name> <operator>&lt;</operator> <name>p_out_end</name></expr> ;</condition> <incr><expr><name>p_out</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>po</name> <init>= <expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>p_out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><name>i_strength_u64</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><name>remove_high_u64</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w8</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><operator>(</operator><operator>*</operator><name>po</name><operator>)</operator></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psrlq_r2r</name><argument_list>( <argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pand_r2r</name><argument_list>( <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movq_r2m</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>po</name><operator>++</operator><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>po_temp</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>po</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr><operator>,</operator> <expr><operator>++</operator><name>po_temp</name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>po_temp</name><operator>)</operator> <operator>=</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>po_temp</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>i_strength</name><operator>)</operator> <operator>&amp;</operator> <name>remove_high_u8</name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>







<if_stmt><if>if<condition>( <expr><name>process_chroma</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><expr><name>i_plane</name><operator>++</operator></expr> ;</init>
<condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition>
<incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wm8</name> <operator>=</operator> <name>w</name> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>w8</name> <operator>=</operator> <name>w</name> <operator>-</operator> <name>wm8</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out_end</name> <operator>=</operator> <name>p_out</name> <operator>+</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>*</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>i_field</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_out</name> <operator>&lt;</operator> <name>p_out_end</name></expr> ;</condition> <incr><expr><name>p_out</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><specifier>static</specifier> <macro><name>alignas</name> <argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro> <specifier>const</specifier> <name>mmx_t</name> <name>b128</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>uq</name> <operator>=</operator> <literal type="number">0x8080808080808080ULL</literal></expr>
}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><name>b128</name></expr></argument>, <argument><expr><name>mm5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><name>i_strength_u64</name></expr></argument>, <argument><expr><name>mm6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><name>remove_high_u64</name></expr></argument>, <argument><expr><name>mm7</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>po8</name> <init>= <expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>p_out</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w8</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><operator>(</operator><operator>*</operator><name>po8</name><operator>)</operator></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movq_r2r</name><argument_list>( <argument><expr><name>mm5</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>movq_r2r</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>psubusb_r2r</name><argument_list>( <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>psubusb_r2r</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>psrlq_r2r</name><argument_list>( <argument><expr><name>mm6</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>psrlq_r2r</name><argument_list>( <argument><expr><name>mm6</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pand_r2r</name><argument_list>( <argument><expr><name>mm7</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pand_r2r</name><argument_list>( <argument><expr><name>mm7</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>psubb_r2r</name><argument_list>( <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paddb_r2r</name><argument_list>( <argument><expr><name>mm5</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movq_r2m</name><argument_list>( <argument><expr><name>mm1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>po8</name><operator>++</operator><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>po</name> <init>= <expr><name>p_out</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr><operator>,</operator> <expr><operator>++</operator><name>po</name></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>po</name><operator>)</operator> <operator>=</operator> <literal type="number">128</literal> <operator>+</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>po</name><operator>)</operator> <operator>-</operator> <literal type="number">128</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i_strength</name><operator>)</operator> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for> 
</block_content>}</block></for> 
</block_content>}</block></if></if_stmt> 

<expr_stmt><expr><call><name>emms</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>int</name></type> <name>RenderPhosphor</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,
<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_field</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_filter</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_dst</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_order</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_order</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_field</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_field</name> <operator>==</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_in</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><name>HISTORY_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_old</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><name>HISTORY_SIZE</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_old</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_old</name> <operator>=</operator> <name>p_in</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_in</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_old</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_in</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_in_top</name> <init>= <expr><name>p_in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_in_bottom</name> <init>= <expr><name>p_in</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>i_order</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_field</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>p_in_bottom</name> <operator>=</operator> <name>p_old</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>p_in_top</name> <operator>=</operator> <name>p_old</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>compose_chroma_t</name></type> <name>cc</name> <init>= <expr><name>CC_ALTLINE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><literal type="number">2</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>num</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name> <operator>&amp;&amp;</operator>
<literal type="number">2</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>num</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name></expr> )</condition>
<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>phosphor</name><operator>.</operator><name>i_chroma_for_420</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>PC_BLEND</name></expr>:</case>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>CC_MERGE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PC_LATEST</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name>i_field</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>CC_SOURCE_TOP</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>CC_SOURCE_BOTTOM</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>PC_ALTLINE</name></expr>:</case>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>CC_ALTLINE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PC_UPCONVERT</name></expr>:</case>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>CC_UPCONVERT</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ComposeFrame</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_in_top</name></expr></argument>, <argument><expr><name>p_in_bottom</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_YV12</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>










<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>phosphor</name><operator>.</operator><name>i_dimmer_strength</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><call><name>vlc_CPU_MMXEXT</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DarkenFieldMMX</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><operator>!</operator><name>i_field</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>phosphor</name><operator>.</operator><name>i_dimmer_strength</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>num</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>num</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>DarkenField</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><operator>!</operator><name>i_field</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>phosphor</name><operator>.</operator><name>i_dimmer_strength</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>num</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>num</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
