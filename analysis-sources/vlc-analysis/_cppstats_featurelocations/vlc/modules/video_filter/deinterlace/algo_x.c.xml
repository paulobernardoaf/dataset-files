<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\deinterlace\algo_x.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mmx.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"deinterlace.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"algo_x.h"</cpp:file></cpp:include>












<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ssd</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter> )</parameter_list> <block>{<block_content> <return>return <expr><name>a</name><operator>*</operator><name>a</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>XDeint8x8DetectC</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ff</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fc</name></decl>;</decl_stmt>


<expr_stmt><expr><name>fc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>ff</name> <operator>=</operator> <name>fr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>fr</name> <operator>+=</operator> <call><name>ssd</name><argument_list>(<argument><expr><name><name>src</name><index>[ <expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>i_src</name><operator>+</operator><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>ssd</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i_src</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name><operator>+</operator><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ff</name> <operator>+=</operator> <call><name>ssd</name><argument_list>(<argument><expr><name><name>src</name><index>[ <expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name><operator>+</operator><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>ssd</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i_src</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i_src</name><operator>+</operator><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name><name>ff</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">6</literal><operator>*</operator><name>fr</name><operator>/</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>fr</name></expr></argument> &gt;</argument_list></name> <literal type="number">32</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>i_src</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><ternary><condition><expr><name>fc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>VLC_MMX</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>XDeint8x8DetectMMXEXT</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ff</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fc</name></decl>;</decl_stmt>


<expr_stmt><expr><name>fc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pxor_r2r</name><argument_list>( <argument><expr><name>mm7</name></expr></argument>, <argument><expr><name>mm7</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>ff</name> <operator>=</operator> <name>fr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pxor_r2r</name><argument_list>( <argument><expr><name>mm5</name></expr></argument>, <argument><expr><name>mm5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pxor_r2r</name><argument_list>( <argument><expr><name>mm6</name></expr></argument>, <argument><expr><name>mm6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">4</literal></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>movd_m2r</name><argument_list>( <argument><expr><name><name>src</name><index>[ <expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>movd_m2r</name><argument_list>( <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>i_src</name><operator>+</operator><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>movd_m2r</name><argument_list>( <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name><operator>+</operator><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>movd_m2r</name><argument_list>( <argument><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i_src</name><operator>+</operator><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>mm3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>punpcklbw_r2r</name><argument_list>( <argument><expr><name>mm7</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>punpcklbw_r2r</name><argument_list>( <argument><expr><name>mm7</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>punpcklbw_r2r</name><argument_list>( <argument><expr><name>mm7</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>punpcklbw_r2r</name><argument_list>( <argument><expr><name>mm7</name></expr></argument>, <argument><expr><name>mm3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movq_r2r</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psubw_r2r</name><argument_list>( <argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>psubw_r2r</name><argument_list>( <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>mm4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psubw_r2r</name><argument_list>( <argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>psubw_r2r</name><argument_list>( <argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pmaddwd_r2r</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pmaddwd_r2r</name><argument_list>( <argument><expr><name>mm4</name></expr></argument>, <argument><expr><name>mm4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pmaddwd_r2r</name><argument_list>( <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pmaddwd_r2r</name><argument_list>( <argument><expr><name>mm3</name></expr></argument>, <argument><expr><name>mm3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paddd_r2r</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paddd_r2r</name><argument_list>( <argument><expr><name>mm4</name></expr></argument>, <argument><expr><name>mm3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paddd_r2r</name><argument_list>( <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>mm5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paddd_r2r</name><argument_list>( <argument><expr><name>mm3</name></expr></argument>, <argument><expr><name>mm6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>movq_r2r</name><argument_list>( <argument><expr><name>mm5</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>psrlq_i2r</name><argument_list>( <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paddd_r2r</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>movd_r2m</name><argument_list>( <argument><expr><name>mm5</name></expr></argument>, <argument><expr><name>fr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movq_r2r</name><argument_list>( <argument><expr><name>mm6</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>psrlq_i2r</name><argument_list>( <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paddd_r2r</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>movd_r2m</name><argument_list>( <argument><expr><name>mm6</name></expr></argument>, <argument><expr><name>ff</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ff</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">6</literal><operator>*</operator><name>fr</name><operator>/</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>fr</name></expr></argument> &gt;</argument_list></name> <literal type="number">32</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>i_src</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>fc</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>XDeint8x8MergeC</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dst</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src1</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>


<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>i_dst</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>src1</name><index>[<expr><name>i_src1</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>i_dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src1</name> <operator>+=</operator> <name>i_src1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>i_src2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>VLC_MMX</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>XDeint8x8MergeMMXEXT</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dst</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src1</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name>m_4</name> <init>= <expr><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">0x0004000400040004</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>pxor_r2r</name><argument_list>( <argument><expr><name>mm7</name></expr></argument>, <argument><expr><name>mm7</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator><literal type="number">4</literal></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>movd_m2r</name><argument_list>( <argument><expr><name><name>src1</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>movd_r2m</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movd_m2r</name><argument_list>( <argument><expr><name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>movd_m2r</name><argument_list>( <argument><expr><name><name>src1</name><index>[<expr><name>i_src1</name><operator>+</operator><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>punpcklbw_r2r</name><argument_list>( <argument><expr><name>mm7</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>punpcklbw_r2r</name><argument_list>( <argument><expr><name>mm7</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>punpcklbw_r2r</name><argument_list>( <argument><expr><name>mm7</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paddw_r2r</name><argument_list>( <argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>movq_r2r</name><argument_list>( <argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paddw_r2r</name><argument_list>( <argument><expr><name>mm3</name></expr></argument>, <argument><expr><name>mm3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paddw_r2r</name><argument_list>( <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paddw_r2r</name><argument_list>( <argument><expr><name>mm3</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paddw_m2r</name><argument_list>( <argument><expr><name>m_4</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paddw_r2r</name><argument_list>( <argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>psraw_i2r</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packuswb_r2r</name><argument_list>( <argument><expr><name>mm7</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>movd_r2m</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><name>i_dst</name><operator>+</operator><name>x</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>i_dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>+=</operator> <name>i_src1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>i_src2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>XDeint8x8FieldEC</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dst</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>


<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>i_dst</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>i_dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>i_src</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>VLC_MMX</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>XDeint8x8FieldEMMXEXT</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dst</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>


<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>movq_r2m</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>i_dst</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name></expr>]</index></name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pavgb_r2r</name><argument_list>( <argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movq_r2m</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>i_dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>i_src</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>XDeint8x8FieldC</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dst</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>


<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>i_dst</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name> <init>= <expr><operator>&amp;</operator><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>-</operator><name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>c0</name> <operator>&lt;</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <name>c2</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>c2</name> <operator>&lt;</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <name>c0</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>i_dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>i_src</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>VLC_MMX</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>XDeint8x8FieldMMXEXT</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dst</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>


<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>i_dst</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name> <init>= <expr><operator>&amp;</operator><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psadbw_m2r</name><argument_list>( <argument><expr><name><name>src2</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>psadbw_m2r</name><argument_list>( <argument><expr><name><name>src2</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>psadbw_m2r</name><argument_list>( <argument><expr><name><name>src2</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movd_r2m</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>c2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>movd_r2m</name><argument_list>( <argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>c1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>movd_r2m</name><argument_list>( <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>c0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>c0</name> <operator>&lt;</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <name>c2</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>c2</name> <operator>&lt;</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <name>c0</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>i_dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>i_src</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>XDeintNxNDetect</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ff</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fc</name></decl>;</decl_stmt>




<expr_stmt><expr><name>ff</name> <operator>=</operator> <name>fr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_height</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>y</name><operator>*</operator><name>i_src</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>fr</name> <operator>+=</operator> <call><name>ssd</name><argument_list>(<argument><expr><name><name>s</name><index>[ <expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>i_src</name><operator>+</operator><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ff</name> <operator>+=</operator> <call><name>ssd</name><argument_list>(<argument><expr><name><name>s</name><index>[ <expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name><operator>+</operator><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name><name>ff</name> <argument_list type="generic">&lt; <argument><expr><name>fr</name> <operator>&amp;&amp;</operator> <name>fr</name></expr></argument> &gt;</argument_list></name> <name>i_width</name> <operator>/</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><ternary><condition><expr><name>fc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>XDeintNxNFrame</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dst</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_height</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>


<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>i_width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>i_dst</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>y</name> <operator>&lt;</operator> <name>i_height</name> <operator>-</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>i_src</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>i_src</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>i_dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>i_src</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>XDeintNxNField</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dst</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_height</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>


<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>i_width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>i_dst</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>y</name> <operator>&lt;</operator> <name>i_height</name> <operator>-</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i_src</name><operator>+</operator><name>x</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>i_dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>i_src</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>XDeintNxN</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_height</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>XDeintNxNDetect</name><argument_list>( <argument><expr><name>src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument>, <argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>i_height</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XDeintNxNField</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>i_dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument>, <argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>i_height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XDeintNxNFrame</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>i_dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument>, <argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>i_height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>XDeintBand8x8C</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dst</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_mbx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_modx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_mbx</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>s</name> <operator>=</operator> <call><name>XDeint8x8DetectC</name><argument_list>( <argument><expr><name>src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>x</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>==</operator> <name>i_mbx</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XDeint8x8FieldEC</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>i_dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XDeint8x8FieldC</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>i_dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>XDeint8x8MergeC</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>i_dst</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>i_src</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>i_src</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>i_src</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>i_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_modx</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XDeintNxN</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>i_dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument>, <argument><expr><name>i_modx</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>VLC_MMX</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>XDeintBand8x8MMXEXT</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dst</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_mbx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_modx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>


<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_mbx</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>s</name> <operator>=</operator> <call><name>XDeint8x8DetectMMXEXT</name><argument_list>( <argument><expr><name>src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>x</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>==</operator> <name>i_mbx</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XDeint8x8FieldEMMXEXT</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>i_dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XDeint8x8FieldMMXEXT</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>i_dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>XDeint8x8MergeMMXEXT</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>i_dst</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>i_src</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>i_src</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>i_src</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>i_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_modx</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XDeintNxN</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>i_dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument>, <argument><expr><name>i_modx</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>int</name></type> <name>RenderX</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_plane</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>mmxext</name> <init>= <expr><call><name>vlc_CPU_MMXEXT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<for>for<control>( <init><expr><name>i_plane</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr> ;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_mby</name> <init>= <expr><operator>(</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name> <operator>+</operator> <literal type="number">7</literal> <operator>)</operator><operator>/</operator><literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_mbx</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name><operator>/</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_mody</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name> <operator>-</operator> <literal type="number">8</literal><operator>*</operator><name>i_mby</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_modx</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>-</operator> <literal type="number">8</literal><operator>*</operator><name>i_mbx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_mby</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>y</name><operator>*</operator><name>i_dst</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>y</name><operator>*</operator><name>i_src</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name>mmxext</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XDeintBand8x8MMXEXT</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>i_dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument>, <argument><expr><name>i_mbx</name></expr></argument>, <argument><expr><name>i_modx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>XDeintBand8x8C</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>i_dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument>, <argument><expr><name>i_mbx</name></expr></argument>, <argument><expr><name>i_modx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if<condition>( <expr><name>i_mody</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>y</name><operator>*</operator><name>i_dst</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>y</name><operator>*</operator><name>i_src</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_mbx</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>XDeintNxN</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>i_dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>i_mody</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_modx</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XDeintNxN</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>i_dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument>, <argument><expr><name>i_modx</name></expr></argument>, <argument><expr><name>i_mody</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name>mmxext</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emms</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
