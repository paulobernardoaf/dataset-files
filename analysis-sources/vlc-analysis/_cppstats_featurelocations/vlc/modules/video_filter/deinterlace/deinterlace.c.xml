<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\deinterlace\deinterlace.c">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_mouse.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"deinterlace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"merge.h"</cpp:file></cpp:include>














































<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Deinterlace</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>;</function_decl>






















<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>
















<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>;</function_decl>




















<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Mouse</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,
<parameter><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_mouse</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_old</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_new</name></decl></parameter> )</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>


























































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_TEXT</name></cpp:macro> <cpp:value>N_("Deinterlace mode")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_MODE_TEXT</name></cpp:macro> <cpp:value>N_("Streaming deinterlace mode")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_MODE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Deinterlace method to use for streaming.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-deinterlace-"</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PHOSPHOR_CHROMA_TEXT</name></cpp:macro> <cpp:value>N_("Phosphor chroma mode for 4:2:0 input")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PHOSPHOR_CHROMA_LONGTEXT</name></cpp:macro> <cpp:value>N_("Choose handling for colours in those ""output frames that fall across input ""frame boundaries. \n""\n""Latest: take chroma from new (bright) ""field only. Good for interlaced input, ""such as videos from a camcorder. \n""\n""AltLine: take chroma line 1 from top ""field, line 2 from bottom field, etc. \n""Default, good for NTSC telecined input ""(anime DVDs, etc.). \n""\n""Blend: average input field chromas. ""May distort the colours of the new ""(bright) field, too. \n""\n""Upconvert: output in 4:2:2 format ""(independent chroma for each field). ""Best simulation, but requires more CPU ""and memory bandwidth.")</cpp:value></cpp:define>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PHOSPHOR_DIMMER_TEXT</name></cpp:macro> <cpp:value>N_("Phosphor old field dimmer strength")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PHOSPHOR_DIMMER_LONGTEXT</name></cpp:macro> <cpp:value>N_("This controls the strength of the ""darkening filter that simulates CRT TV ""phosphor light decay for the old field ""in the Phosphor framerate doubler. ""Default: Low.")</cpp:value></cpp:define>





<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Deinterlacing video filter"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Deinterlace"</literal> )</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>FILTER_CFG_PREFIX <literal type="string">"mode"</literal></argument>, <argument><literal type="string">"blend"</literal></argument>, <argument>SOUT_MODE_TEXT</argument>,
<argument>SOUT_MODE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_string_list</name><argument_list>( <argument>mode_list</argument>, <argument>mode_list_text</argument> )</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>FILTER_CFG_PREFIX <literal type="string">"phosphor-chroma"</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument>PHOSPHOR_CHROMA_TEXT</argument>,
<argument>PHOSPHOR_CHROMA_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>phosphor_chroma_list</argument>, <argument>phosphor_chroma_list_text</argument> )</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>FILTER_CFG_PREFIX <literal type="string">"phosphor-dimmer"</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument>PHOSPHOR_DIMMER_TEXT</argument>,
<argument>PHOSPHOR_DIMMER_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>phosphor_dimmer_list</argument>, <argument>phosphor_dimmer_list_text</argument> )</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"deinterlace"</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>











<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"phosphor-chroma"</literal></expr>, <expr><literal type="string">"phosphor-dimmer"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>





<struct>struct <name>filter_mode_t</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mode</name></decl>;</decl_stmt>
<union>union <block>{
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_render_ordered</name>)<parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_field</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_render_single_pic</name>)<parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</union>
<decl_stmt><decl><type><name>deinterlace_algo</name></type> <name>settings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>can_pack</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_high_bit_depth</name></decl>;</decl_stmt> 
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>filter_mode_t</name></name></type> <name><name>filter_mode</name> <index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"discard"</literal></expr>, <expr><operator>.</operator><name>pf_render_single_pic</name> <operator>=</operator> <name>RenderDiscard</name></expr>,
<expr><block>{ <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr> }</block></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bob"</literal></expr>, <expr><operator>.</operator><name>pf_render_ordered</name> <operator>=</operator> <name>RenderBob</name></expr>,
<expr><block>{ <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"progressive-scan"</literal></expr>, <expr><operator>.</operator><name>pf_render_ordered</name> <operator>=</operator> <name>RenderBob</name></expr>,
<expr><block>{ <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"linear"</literal></expr>, <expr><operator>.</operator><name>pf_render_ordered</name> <operator>=</operator> <name>RenderLinear</name></expr>,
<expr><block>{ <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mean"</literal></expr>, <expr><operator>.</operator><name>pf_render_single_pic</name> <operator>=</operator> <name>RenderMean</name></expr>,
<expr><block>{ <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr> }</block></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"blend"</literal></expr>, <expr><operator>.</operator><name>pf_render_single_pic</name> <operator>=</operator> <name>RenderBlend</name></expr>,
<expr><block>{ <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"yadif"</literal></expr>, <expr><operator>.</operator><name>pf_render_single_pic</name> <operator>=</operator> <name>RenderYadifSingle</name></expr>,
<expr><block>{ <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"yadif2x"</literal></expr>, <expr><operator>.</operator><name>pf_render_ordered</name> <operator>=</operator> <name>RenderYadif</name></expr>,
<expr><block>{ <expr><name>true</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"x"</literal></expr>, <expr><operator>.</operator><name>pf_render_single_pic</name> <operator>=</operator> <name>RenderX</name></expr>,
<expr><block>{ <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"phosphor"</literal></expr>, <expr><operator>.</operator><name>pf_render_ordered</name> <operator>=</operator> <name>RenderPhosphor</name></expr>,
<expr><block>{ <expr><name>true</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ivtc"</literal></expr>, <expr><operator>.</operator><name>pf_render_single_pic</name> <operator>=</operator> <name>RenderIVTC</name></expr>,
<expr><block>{ <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr> }</block></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>










<function><type><specifier>static</specifier> <name>void</name></type> <name>SetFilterMethod</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pack</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>mode</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>filter_mode</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>filter_mode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_mode</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>pack</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>filter_mode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>can_pack</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"unknown or incompatible deinterlace mode \"%s\""</literal>
<literal type="string">" for packed format"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetFilterMethod</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"blend"</literal></expr></argument>, <argument><expr><name>pack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>chroma</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>filter_mode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_high_bit_depth</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"unknown or incompatible deinterlace mode \"%s\""</literal>
<literal type="string">" for high depth format"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetFilterMethod</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"blend"</literal></expr></argument>, <argument><expr><name>pack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"using %s deinterlace method"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name> <operator>=</operator> <name><name>filter_mode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>settings</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pf_render_ordered</name></name> <operator>=</operator> <name><name>filter_mode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pf_render_ordered</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"unknown deinterlace mode \"%s\""</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>void</name></type> <name>GetOutputFormat</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,
<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetDeinterlacingOutput</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>picture_t</name> <modifier>*</modifier></type><name>AllocPicture</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>filter</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>picture_t</name> <modifier>*</modifier></type><name>Deinterlace</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>DoDeinterlacing</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FlushDeinterlacing</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IVTCClearState</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>Mouse</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,
<parameter><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_mouse</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_old</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_new</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_mouse</name> <operator>=</operator> <operator>*</operator><name>p_new</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name><operator>.</operator><name>b_half_height</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_mouse</name><operator>-&gt;</operator><name>i_y</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name>fourcc</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>chroma</name> <init>= <expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>( <argument><expr><name>fourcc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>chroma</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>chroma</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<label><name>notsupp</name>:</label>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"unsupported chroma %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>pixel_size</name> <init>= <expr><name><name>chroma</name><operator>-&gt;</operator><name>pixel_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>packed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>chroma</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>!=</operator> <literal type="number">3</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>packed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<switch>switch<condition>( <expr><name>fourcc</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_YUYV</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_UYVY</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_YVYU</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_VYUY</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_NV12</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_NV21</name></expr>:</case>
<expr_stmt><expr><name>pixel_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<goto>goto <name>notsupp</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>vlc_fourcc_IsYUV</name><argument_list>( <argument><expr><name>fourcc</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chroma</name></name> <operator>=</operator> <name>chroma</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitDeinterlacingContext</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,
<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mode</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_CFG_PREFIX</name> <literal type="string">"mode"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetFilterMethod</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>psz_mode</name></expr></argument>, <argument><expr><name>packed</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IVTCClearState</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_C_ALTIVEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name>pixel_size</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>vlc_CPU_ALTIVEC</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_merge</name></name> <operator>=</operator> <name>MergeAltivec</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
if<condition>( <expr><call><name>vlc_CPU_SSE2</name><argument_list>()</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_merge</name></name> <operator>=</operator> <ternary><condition><expr><name>pixel_size</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>Merge8BitSSE2</name></expr> </then><else>: <expr><name>Merge16BitSSE2</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_end_merge</name></name> <operator>=</operator> <name>EndMMX</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
if<condition>( <expr><name>pixel_size</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>vlc_CPU_MMXEXT</name><argument_list>()</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_merge</name></name> <operator>=</operator> <name>MergeMMXEXT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_end_merge</name></name> <operator>=</operator> <name>EndMMX</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_3DNOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
if<condition>( <expr><name>pixel_size</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>vlc_CPU_3dNOW</name><argument_list>()</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_merge</name></name> <operator>=</operator> <name>Merge3DNow</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_end_merge</name></name> <operator>=</operator> <name>End3DNow</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_ARM</name></expr></argument>)</argument_list></call></expr></cpp:if>
if<condition>( <expr><call><name>vlc_CPU_ARM_NEON</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_merge</name></name> <operator>=</operator> <ternary><condition><expr><name>pixel_size</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>merge8_arm_neon</name></expr> </then><else>: <expr><name>merge16_arm_neon</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if<condition>( <expr><call><name>vlc_CPU_ARMv6</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_merge</name></name> <operator>=</operator> <ternary><condition><expr><name>pixel_size</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>merge8_armv6</name></expr> </then><else>: <expr><name>merge16_armv6</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
if<condition>( <expr><call><name>vlc_CPU_ARM_SVE</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_merge</name></name> <operator>=</operator> <ternary><condition><expr><name>pixel_size</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>merge8_arm_sve</name></expr> </then><else>: <expr><name>merge16_arm_sve</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_ARM64</name></expr></argument>)</argument_list></call></expr></cpp:if>
if<condition>( <expr><call><name>vlc_CPU_ARM_NEON</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_merge</name></name> <operator>=</operator> <ternary><condition><expr><name>pixel_size</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>merge8_arm64_neon</name></expr> </then><else>: <expr><name>merge16_arm64_neon</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_merge</name></name> <operator>=</operator> <ternary><condition><expr><name>pixel_size</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>Merge8BitGeneric</name></expr> </then><else>: <expr><name>Merge16BitGeneric</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_end_merge</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>


<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetOutputFormat</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_mode</name></expr></argument>, <argument><expr><literal type="string">"phosphor"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_c420</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,
<argument><expr><name>FILTER_CFG_PREFIX</name> <literal type="string">"phosphor-chroma"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_c420</name> <operator>!=</operator> <name>PC_LATEST</name> <operator>&amp;&amp;</operator> <name>i_c420</name> <operator>!=</operator> <name>PC_ALTLINE</name> <operator>&amp;&amp;</operator>
<name>i_c420</name> <operator>!=</operator> <name>PC_BLEND</name> <operator>&amp;&amp;</operator> <name>i_c420</name> <operator>!=</operator> <name>PC_UPCONVERT</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Phosphor 4:2:0 input chroma mode not set"</literal>\
<literal type="string">"or out of range (valid: 1, 2, 3 or 4), "</literal>\
<literal type="string">"using default"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_c420</name> <operator>=</operator> <name>PC_ALTLINE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"using Phosphor 4:2:0 input chroma mode %d"</literal></expr></argument>,
<argument><expr><name>i_c420</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>phosphor</name><operator>.</operator><name>i_chroma_for_420</name></name> <operator>=</operator> <name>i_c420</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_dimmer</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,
<argument><expr><name>FILTER_CFG_PREFIX</name> <literal type="string">"phosphor-dimmer"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>i_dimmer</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>i_dimmer</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Phosphor dimmer strength not set "</literal>\
<literal type="string">"or out of range (valid: 1, 2, 3 or 4), "</literal>\
<literal type="string">"using default"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dimmer</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"using Phosphor dimmer strength %d"</literal></expr></argument>, <argument><expr><name>i_dimmer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>phosphor</name><operator>.</operator><name>i_dimmer_strength</name></name> <operator>=</operator> <name>i_dimmer</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">2</literal> <operator>*</operator> <name><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>num</name></name> <operator>==</operator> <name><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name> <operator>&amp;&amp;</operator>
<literal type="number">2</literal> <operator>*</operator> <name><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>num</name></name> <operator>==</operator> <name><name>chroma</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name> <operator>&amp;&amp;</operator>
<name>i_c420</name> <operator>==</operator> <name>PC_UPCONVERT</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_J420</name></expr> ?</condition><then>
<expr><name>VLC_CODEC_J422</name></expr> </then><else>: <expr><name>VLC_CODEC_I422</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_mode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_filter</name><operator>-&gt;</operator><name>b_allow_fmt_out_change</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>||</operator>
<name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Deinterlace</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_mouse</name></name> <operator>=</operator> <name>Mouse</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"deinterlacing"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Flush</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
