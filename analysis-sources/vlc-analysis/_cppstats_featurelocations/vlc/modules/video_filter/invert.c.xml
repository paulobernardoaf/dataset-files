<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\invert.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>




<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Invert video filter"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Color inversion"</literal> )</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"invert"</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Create</argument>, <argument>Destroy</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>






<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>fourcc</name> <operator>==</operator> <name>VLC_CODEC_YUVP</name> <operator>||</operator> <name>fourcc</name> <operator>==</operator> <name>VLC_CODEC_RGBP</name>
<operator>||</operator> <name>fourcc</name> <operator>==</operator> <name>VLC_CODEC_RGBA</name> <operator>||</operator> <name>fourcc</name> <operator>==</operator> <name>VLC_CODEC_ARGB</name>
<operator>||</operator> <name>fourcc</name> <operator>==</operator> <name>VLC_CODEC_BGRA</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>p_chroma</name> <init>=
<expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>( <argument><expr><name>fourcc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_chroma</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>!=</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>pixel_bits</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p_this</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_planes</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_outpic</name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_outpic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"can't get output picture"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_YUVA</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>i_planes</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(
<argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>A_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>A_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>,
<argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>A_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>A_PLANE</name></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_planes</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <name>i_planes</name></expr> ;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_in_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name>
<operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_in</name> <operator>&lt;</operator> <name>p_in_end</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>p_in64</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out64</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_line_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>-</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in64</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>p_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out64</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>p_out</name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_in64</name> <operator>&lt;</operator> <operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>p_line_end</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_out64</name><operator>++</operator> <operator>=</operator> <operator>~</operator><operator>*</operator><name>p_in64</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out64</name><operator>++</operator> <operator>=</operator> <operator>~</operator><operator>*</operator><name>p_in64</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out64</name><operator>++</operator> <operator>=</operator> <operator>~</operator><operator>*</operator><name>p_in64</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out64</name><operator>++</operator> <operator>=</operator> <operator>~</operator><operator>*</operator><name>p_in64</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out64</name><operator>++</operator> <operator>=</operator> <operator>~</operator><operator>*</operator><name>p_in64</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out64</name><operator>++</operator> <operator>=</operator> <operator>~</operator><operator>*</operator><name>p_in64</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_out64</name><operator>++</operator> <operator>=</operator> <operator>~</operator><operator>*</operator><name>p_in64</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out64</name><operator>++</operator> <operator>=</operator> <operator>~</operator><operator>*</operator><name>p_in64</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>p_in64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>p_out64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_line_end</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <operator>~</operator><operator>(</operator> <operator>*</operator><name>p_in</name><operator>++</operator> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>-</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>-</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
