<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\video_filter\freeze.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_mouse.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((a)%(b)) + (b))%(b))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_init</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>i_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>i_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>i_visible_pitch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>pi_freezed_picture</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pi_freezing_countdown</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier><modifier>*</modifier></type><name>pb_update_cache</name></decl>;</decl_stmt> 

}</block></struct></type> <name>filter_sys_t</name>;</typedef>





<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>freeze_mouse</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>freeze_allocate_data</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>freeze_free_allocated_data</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"freeze-"</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Freezing interactive video filter"</literal>)</argument> )</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Freeze"</literal> )</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>








<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>es_format_IsSimilar</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Input and output format does not match"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name>fourcc</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>p_chroma</name>
<init>= <expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_chroma</name> <operator>||</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>||</operator> <operator>!</operator><call><name>vlc_fourcc_IsYUV</name><argument_list>( <argument><expr><name>fourcc</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported chroma (%4.4s)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_sys</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_mouse</name></name> <operator>=</operator> <name>freeze_mouse</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>freeze_free_allocated_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_in</name></decl></parameter> )</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic_in</name> <operator>||</operator> <operator>!</operator><name>p_filter</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name> <init>= <expr><call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_pic_out</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>freeze_allocate_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>picture_CopyPixels</name><argument_list>(<argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_p</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_p</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_r</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>i_p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_r</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_c</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>i_p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_c</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_Yr</name> <init>= <expr><name>i_r</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name>
<operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>i_p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_Yc</name> <init>= <expr><name>i_c</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name>
<operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>i_p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pb_update_cache</name><index>[<expr><name>i_Yr</name></expr>]</index><index>[<expr><name>i_Yc</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezed_picture</name><index>[<expr><name>i_p</name></expr>]</index><index>[<expr><name>i_r</name></expr>]</index><index>[<expr><name>i_c</name></expr>]</index></name>
<operator>=</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_r</name><operator>*</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>+</operator> <name>i_c</name><operator>*</operator><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for></block_content></block></for></block_content></block></for>




<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_Yr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_Yr</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_Yr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_Yc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_Yc</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_Yc</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezing_countdown</name><index>[<expr><name>i_Yr</name></expr>]</index><index>[<expr><name>i_Yc</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezing_countdown</name><index>[<expr><name>i_Yr</name></expr>]</index><index>[<expr><name>i_Yc</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pb_update_cache</name><index>[<expr><name>i_Yr</name></expr>]</index><index>[<expr><name>i_Yc</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>




<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_p</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_p</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_r</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>i_p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_r</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_c</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>i_p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_c</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_Yr</name> <init>= <expr><name>i_r</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name>
<operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>i_p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_Yc</name> <init>= <expr><name>i_c</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name>
<operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>i_p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezing_countdown</name><index>[<expr><name>i_Yr</name></expr>]</index><index>[<expr><name>i_Yc</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_r</name> <operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>
<operator>+</operator> <name>i_c</name> <operator>*</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr>]</index></name>
<operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezed_picture</name><index>[<expr><name>i_p</name></expr>]</index><index>[<expr><name>i_r</name></expr>]</index><index>[<expr><name>i_c</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for></block_content></block></for></block_content></block></for>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>freeze_mouse</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_mouse</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_old</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_new</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_in</name> <init>= <expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_width</name></name> <operator>||</operator>
<name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_height</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_init</name></name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_mouse</name> <operator>=</operator> <operator>*</operator><name>p_new</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_base_timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_mouse_HasPressed</name><argument_list>( <argument><expr><name>p_old</name></expr></argument>, <argument><expr><name>p_new</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_LEFT</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_base_timeout</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><call><name>vlc_mouse_IsLeftPressed</name><argument_list>( <argument><expr><name>p_new</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_base_timeout</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_base_timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>



<decl_stmt><decl><type><name>int32_t</name></type> <name>i_min_sq_radius</name> <init>= <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>/</operator> <literal type="number">15</literal><operator>)</operator>
<operator>*</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name> <operator>/</operator> <literal type="number">15</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_r</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_r</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_c</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_c</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_sq_dist</name> <init>= <expr><operator>(</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>-</operator> <name>i_c</name> <operator>)</operator>
<operator>*</operator> <operator>(</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>-</operator> <name>i_c</name> <operator>)</operator>
<operator>+</operator> <operator>(</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>-</operator> <name>i_r</name> <operator>)</operator>
<operator>*</operator> <operator>(</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>-</operator> <name>i_r</name> <operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_sq_dist</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_sq_dist</name> <operator>-</operator> <name>i_min_sq_radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_timeout</name> <init>= <expr><call><name>__MAX</name><argument_list>(<argument><expr><name>i_base_timeout</name> <operator>-</operator> <name>i_sq_dist</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezing_countdown</name><index>[<expr><name>i_r</name></expr>]</index><index>[<expr><name>i_c</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pb_update_cache</name><index>[<expr><name>i_r</name></expr>]</index><index>[<expr><name>i_c</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezing_countdown</name><index>[<expr><name>i_r</name></expr>]</index><index>[<expr><name>i_c</name></expr>]</index></name> <operator>&lt;</operator> <name>i_timeout</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezing_countdown</name><index>[<expr><name>i_r</name></expr>]</index><index>[<expr><name>i_c</name></expr>]</index></name> <operator>=</operator> <name>i_timeout</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for></block_content></block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>freeze_allocate_data</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>freeze_free_allocated_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>=</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_visible_pitch</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>freeze_free_allocated_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_p</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_p</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_visible_pitch</name> <index>[<expr><name>i_p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>i_p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>i_p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name>
<operator>/</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezing_countdown</name></name>
<operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezing_countdown</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>freeze_free_allocated_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_r</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_r</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezing_countdown</name><index>[<expr><name>i_r</name></expr>]</index></name>
<operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezing_countdown</name><index>[<expr><name>i_r</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>freeze_free_allocated_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezed_picture</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name><operator>*</operator><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezed_picture</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>freeze_free_allocated_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_p</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_p</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezed_picture</name><index>[<expr><name>i_p</name></expr>]</index></name>
<operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>i_p</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezed_picture</name><index>[<expr><name>i_p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>freeze_free_allocated_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_r</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>i_p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_r</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezed_picture</name><index>[<expr><name>i_p</name></expr>]</index><index>[<expr><name>i_r</name></expr>]</index></name>
<operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>i_p</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezed_picture</name><index>[<expr><name>i_p</name></expr>]</index><index>[<expr><name>i_r</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>freeze_free_allocated_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pb_update_cache</name></name>
<operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pb_update_cache</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>freeze_free_allocated_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_r</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_r</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pb_update_cache</name><index>[<expr><name>i_r</name></expr>]</index></name>
<operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pb_update_cache</name><index>[<expr><name>i_r</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>freeze_free_allocated_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>freeze_free_allocated_data</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezing_countdown</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_r</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_r</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezing_countdown</name><index>[<expr><name>i_r</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezing_countdown</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pb_update_cache</name></name></expr> )</condition><block type="pseudo"><block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_r</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_r</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pb_update_cache</name><index>[<expr><name>i_r</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pb_update_cache</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezed_picture</name></name></expr> )</condition><block type="pseudo"><block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_p</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_p</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i_r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_r</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name><index>[<expr><name>i_p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i_r</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezed_picture</name><index>[<expr><name>i_p</name></expr>]</index><index>[<expr><name>i_r</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezed_picture</name><index>[<expr><name>i_p</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_freezed_picture</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
