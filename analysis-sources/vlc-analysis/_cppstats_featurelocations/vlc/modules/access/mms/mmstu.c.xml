<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\mms\mmstu.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mmstu.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MMS_DEBUG</name></cpp:undef>









<function_decl><type><name>int</name></type> <name>MMSTUOpen</name> <parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MMSTUClose</name> <parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Block</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Seek</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MMSOpen</name> <parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_url_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MMSStart</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MMSStop</name> <parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MMSClose</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mms_CommandRead</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_command1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_command2</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mms_CommandSend</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mms_HeaderMediaRead</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mms_ReceivePacket</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>KeepAliveStart</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>KeepAliveStop</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>MMSTUOpen</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_proto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_status</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_read</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_block</name></name> <operator>=</operator> <name>Block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>Seek</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>access_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timeout</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"mms-timeout"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_netwrite</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_UrlParse</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>psz_host</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>psz_host</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"invalid server name"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>i_port</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>i_port</name></name> <operator>=</operator> <literal type="number">1755</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>i_proto</name> <operator>=</operator> <name>MMS_PROTO_AUTO</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"mmsu"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_proto</name> <operator>=</operator> <name>MMS_PROTO_UDP</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"mmst"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_proto</name> <operator>=</operator> <name>MMS_PROTO_TCP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>i_proto</name> <operator>==</operator> <name>MMS_PROTO_AUTO</name></expr> )</condition>
<block>{<block_content> 
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <call><name>MMSOpen</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>MMS_PROTO_TCP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_status</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <call><name>MMSOpen</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>MMS_PROTO_UDP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <call><name>MMSOpen</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>i_proto</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_status</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot connect to server"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"connected to %s:%d"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>i_port</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>i_data_packets_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_count</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>i_data_packets_count</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_flags_broadcast</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0x02</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name> <operator>+</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_count</name></name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_keep_alive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><call><name>MMSStart</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot start stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MMSTUClose</name> <argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>MMSTUClose</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>KeepAliveStop</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>MMSClose</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_bool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_bool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_int</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>STREAM_CAN_SEEK</name></expr>:</case>
<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_CAN_FASTSEEK</name></expr>:</case>
<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_CAN_PAUSE</name></expr>:</case>
<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_CAN_CONTROL_PACE</name></expr>:</case>
<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

*pb_bool = false;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_GET_SIZE</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_GET_PTS_DELAY</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator>
<call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"network-caching"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_GET_PRIVATE_ID_STATE</name></expr>:</case>
<expr_stmt><expr><name>i_int</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>i_int</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>i_int</name></expr></argument> &gt;</argument_list></name> <literal type="number">127</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i_int</name></expr>]</index></name><operator>.</operator><name>i_selected</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_SET_PRIVATE_ID_STATE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>i_int</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_bool</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_cat</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_int</name> <operator>&gt;</operator> <literal type="number">127</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name>i_int</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name>b_bool</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>i_int</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_cat</name> <operator>&gt;</operator> <name>ES_CATEGORY_COUNT</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>b_bool</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i_int</name></expr>]</index></name><operator>.</operator><name>i_cat</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_cat</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_cat</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_selected</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name>i_int</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i_int</name></expr>]</index></name><operator>.</operator><name>i_selected</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MMSStop</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Seek</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>STREAM_SET_PAUSE_STATE</name></expr>:</case>
<expr_stmt><expr><name>b_bool</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_bool</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>MMSStop</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>KeepAliveStart</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>KeepAliveStop</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Seek</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Seek</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type> <name>p_access</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>var_buffer_t</name></type> <name>buffer</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pos</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name> <operator>=</operator> <name>i_pos</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_packet</name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_packet</name> <operator>=</operator> <operator>(</operator> <name>i_pos</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name> <operator>)</operator> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <operator>(</operator> <name>i_pos</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name> <operator>)</operator> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name> <operator>&amp;&amp;</operator> <name>i_packet</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_count</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"seeking to %"</literal><name>PRIu64</name> <literal type="string">" (packet:%u)"</literal></expr></argument>, <argument><expr><name>i_pos</name></expr></argument>, <argument><expr><name>i_packet</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MMSStop</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"stream stopped (seek)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>var_buffer_initwrite</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>i_packet</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_buffer_add8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_buffer_add8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_buffer_add8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_buffer_add8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media_packet_id_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mms_CommandSend</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="number">0x07</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command_level</name></name></expr></argument>, <argument><expr><literal type="number">0x0001ffff</literal></expr></argument>,
<argument><expr><name><name>buffer</name><operator>.</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>buffer</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_buffer_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>mms_HeaderMediaRead</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>MMS_PACKET_CMD</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name> <operator>==</operator> <literal type="number">0x1e</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"received 0x1e (seek)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>mms_HeaderMediaRead</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>MMS_PACKET_CMD</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name> <operator>==</operator> <literal type="number">0x05</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"received 0x05 (seek)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if<condition>( <expr><call><name>mms_HeaderMediaRead</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>MMS_PACKET_MEDIA</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Streaming restarted"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media_used</name></name> <operator>+=</operator> <name>i_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name> <operator>=</operator> <name>i_pos</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Block</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>eof</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_copy</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_copy</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>i_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name> <operator>+=</operator> <name>i_copy</name></expr>;</expr_stmt>
<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_media</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_media_used</name></name> <operator>&lt;</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_copy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_padding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media_used</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_media</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_copy</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_media</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_media_used</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media_used</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_padding</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name> <operator>-</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media_used</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_copy</name> <operator>+</operator> <name>i_padding</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_copy</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_media</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media_used</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>i_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_padding</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_copy</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_padding</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media_used</name></name> <operator>+=</operator> <name>i_copy</name> <operator>+</operator> <name>i_padding</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name> <operator>+=</operator> <name>i_copy</name> <operator>+</operator> <name>i_padding</name></expr>;</expr_stmt>
<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mms_HeaderMediaRead</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>MMS_PACKET_MEDIA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>MMSOpen</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>vlc_url_t</name> <modifier>*</modifier></type><name>p_url</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_proto</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_udp</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name>i_proto</name> <operator>==</operator> <name>MMS_PROTO_UDP</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>var_buffer_t</name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_cmdend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_server_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_tool_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_update_player_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_encryption_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mediapath</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"waiting for connection..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle_tcp</name></name> <operator>=</operator> <call><name>net_Connect</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>p_url</name><operator>-&gt;</operator><name>i_port</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle_tcp</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"failed to open a connection (tcp)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="string">"connection(tcp) with \"%s:%d\" successful"</literal></expr></argument>,
<argument><expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_host</name></name></expr></argument>,
<argument><expr><name><name>p_url</name><operator>-&gt;</operator><name>i_port</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>b_udp</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>net_GetSockAddress</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle_tcp</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sz_bind_addr</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle_tcp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle_udp</name></name> <operator>=</operator> <call><name>net_ListenUDP1</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name> <operator>*</operator><operator>)</operator><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sz_bind_addr</name></name></expr></argument>,
<argument><expr><literal type="number">7000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle_udp</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"failed to open a connection (udp)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle_tcp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="string">"connection(udp) at \"%s:%d\" successful"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sz_bind_addr</name></name></expr></argument>, <argument><expr><literal type="number">7000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>GenerateGuid</name> <argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>guid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="string">"generated guid: "</literal><name>GUID_FMT</name></expr></argument>,
<argument><expr><call><name>GUID_PRINT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>guid</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command_level</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media_packet_id_type</name></name> <operator>=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_packet_id_type</name></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_proto</name></name> <operator>=</operator> <name>i_proto</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_seq_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_media</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_tcp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_udp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cmd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>var_buffer_initwrite</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0x001c</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0x0003</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>,
<argument><expr><literal type="string">"NSPlayer/7.0.0.1956; {"</literal><name>GUID_FMT</name><literal type="string">"}; Host: %s"</literal></expr></argument>,
<argument><expr><call><name>GUID_PRINT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>guid</name></name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_host</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_buffer_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle_tcp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>var_buffer_addUTF16</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mms_CommandSend</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="number">0x01</literal></expr></argument>, 
<argument><expr><literal type="number">0x00000000</literal></expr></argument>, 
<argument><expr><literal type="number">0x0004000b</literal></expr></argument>, 
<argument><expr><name><name>buffer</name><operator>.</operator><name>p_data</name></name></expr></argument>,
<argument><expr><name><name>buffer</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>mms_CommandRead</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cmd</name></name> <operator>&lt;</operator> <name>MMS_CMD_HEADERSIZE</name> <operator>+</operator> <literal type="number">48</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_buffer_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MMSClose</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_server_version</name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name></name> <operator>+</operator> <name>MMS_CMD_HEADERSIZE</name> <operator>+</operator> <literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_tool_version</name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name></name> <operator>+</operator> <name>MMS_CMD_HEADERSIZE</name> <operator>+</operator> <literal type="number">36</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_update_player_url</name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name></name> <operator>+</operator> <name>MMS_CMD_HEADERSIZE</name> <operator>+</operator> <literal type="number">40</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_encryption_type</name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name></name> <operator>+</operator> <name>MMS_CMD_HEADERSIZE</name> <operator>+</operator> <literal type="number">44</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name></name> <operator>+</operator> <name>MMS_CMD_HEADERSIZE</name> <operator>+</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_cmdend</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cmd</name></name></expr>]</index></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETUTF16</name><parameter_list>( <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>size</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { if( (p_cmdend - p) / 2u &lt; (size) ) {var_buffer_free( &amp;buffer );MMSClose( p_access );return VLC_EBADVAR;}char *str = FromCharset( "UTF-16LE", p, (size) * 2 ); p += (size) * 2; if( str != NULL ) { msg_Dbg( p_access, fmt " %s", str ); free( str ); } } while (0)</cpp:value></cpp:define>

















<expr_stmt><expr><call><name>GETUTF16</name><argument_list>( <argument><expr><literal type="string">"server version: "</literal></expr></argument>, <argument><expr><name>i_server_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GETUTF16</name><argument_list>( <argument><expr><literal type="string">"tool version: "</literal></expr></argument>, <argument><expr><name>i_tool_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GETUTF16</name><argument_list>( <argument><expr><literal type="string">"update player URL:"</literal></expr></argument>, <argument><expr><name>i_update_player_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GETUTF16</name><argument_list>( <argument><expr><literal type="string">"encryption type: "</literal></expr></argument>, <argument><expr><name>i_encryption_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GETUTF16</name></cpp:undef>




<expr_stmt><expr><call><name>var_buffer_reinitwrite</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0x00000000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0x000a0000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0x00000002</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_udp</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>,
<argument><expr><literal type="string">"\\\\%s\\UDP\\%d"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sz_bind_addr</name></name></expr></argument>,
<argument><expr><literal type="number">7000</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>var_buffer_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MMSClose</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"\\\\192.168.0.1\\TCP\\1242"</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_buffer_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MMSClose</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>var_buffer_addUTF16</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mms_CommandSend</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="number">0x02</literal></expr></argument>, 
<argument><expr><literal type="number">0x00000000</literal></expr></argument>, 
<argument><expr><literal type="number">0xffffffff</literal></expr></argument>, 
<argument><expr><name><name>buffer</name><operator>.</operator><name>p_data</name></name></expr></argument>,
<argument><expr><name><name>buffer</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mms_CommandRead</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name> <operator>==</operator> <literal type="number">0x03</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="string">"%s protocol selection failed"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>b_udp</name></expr> ?</condition><then> <expr><literal type="string">"UDP"</literal></expr> </then><else>: <expr><literal type="string">"TCP"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MMSClose</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name> <operator>!=</operator> <literal type="number">0x02</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"received command isn't 0x02 in response to 0x02"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>var_buffer_reinitwrite</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>mediapath</name> <operator>=</operator> <name><name>p_url</name><operator>-&gt;</operator><name>psz_path</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>mediapath</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>mediapath</name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>mediapath</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>var_buffer_addUTF16</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>mediapath</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mms_CommandSend</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="number">0x05</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command_level</name></name></expr></argument>,
<argument><expr><literal type="number">0xffffffff</literal></expr></argument>,
<argument><expr><name><name>buffer</name><operator>.</operator><name>p_data</name></name></expr></argument>,
<argument><expr><name><name>buffer</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mms_CommandRead</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="number">0x1a</literal></expr></argument>, <argument><expr><literal type="number">0x06</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name> <operator>==</operator> <literal type="number">0x1A</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"id/password requested (not yet supported)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_buffer_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MMSClose</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name> <operator>!=</operator> <literal type="number">0x06</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="string">"unknown answer (0x%x instead of 0x06)"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MMSClose</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cmd</name></name> <operator>&lt;</operator> <name>MMS_CMD_HEADERSIZE</name> <operator>+</operator> <literal type="number">64</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_buffer_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MMSClose</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EBADVAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<switch>switch<condition>( <expr><call><name>GetDWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name></name> <operator>+</operator> <name>MMS_CMD_HEADERSIZE</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x0001</literal></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"media file name/path accepted"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x0002</literal></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"authentication accepted"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"error while asking for file %d"</literal></expr></argument>,
<argument><expr><call><name>GetDWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name></name> <operator>+</operator> <name>MMS_CMD_HEADERSIZE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MMSClose</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_flags_broadcast</name></name> <operator>=</operator>
<call><name>GetDWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name></name> <operator>+</operator> <name>MMS_CMD_HEADERSIZE</name> <operator>+</operator> <literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media_length</name></name> <operator>=</operator>
<call><name>GetDWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name></name> <operator>+</operator> <name>MMS_CMD_HEADERSIZE</name> <operator>+</operator> <literal type="number">24</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name> <operator>=</operator>
<call><name>GetDWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name></name> <operator>+</operator> <name>MMS_CMD_HEADERSIZE</name> <operator>+</operator> <literal type="number">44</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_count</name></name> <operator>=</operator>
<call><name>GetDWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name></name> <operator>+</operator> <name>MMS_CMD_HEADERSIZE</name> <operator>+</operator> <literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_bit_rate</name></name> <operator>=</operator>
<call><name>GetDWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name></name> <operator>+</operator> <name>MMS_CMD_HEADERSIZE</name> <operator>+</operator> <literal type="number">56</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name> <operator>=</operator>
<call><name>GetDWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name></name> <operator>+</operator> <name>MMS_CMD_HEADERSIZE</name> <operator>+</operator> <literal type="number">60</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="string">"answer 0x06 flags:0x%8.8"</literal><name>PRIx32</name><literal type="string">" media_length:%"</literal><name>PRIu32</name><literal type="string">"s "</literal>
<literal type="string">"packet_length:%zu packet_count:%"</literal><name>PRIu32</name><literal type="string">" max_bit_rate:%"</literal><name>PRIu32</name>
<literal type="string">"header_size:%zu"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_flags_broadcast</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media_length</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_count</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_bit_rate</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>var_buffer_reinitwrite</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0x8000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x40ac2000</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_packet_id_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mms_CommandSend</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="number">0x15</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command_level</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>,
<argument><expr><name><name>buffer</name><operator>.</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>buffer</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
mms_CommandRead( p_access, 0x11, 0 );

if( p_sys-&gt;i_command != 0x11 )
{
msg_Err( p_access,
"unknown answer (0x%x instead of 0x11)",
p_sys-&gt;i_command );
var_buffer_free( &amp;buffer );
MMSClose( p_access );
return( -1 );
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"reading header"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>mms_HeaderMediaRead</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>MMS_PACKET_HEADER</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot receive header"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MMSClose</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="string">"header complete(%zu)"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="string">"header incomplete (%zu/%zu), reading more"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>






<expr_stmt><expr><call><name>asf_HeaderParse</name> <argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>asf_StreamSelect</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name></name></expr></argument>,
<argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"mms-maxbitrate"</literal></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"mms-all"</literal></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"video"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>i_streams</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_first</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_reinitwrite</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_cat</name> <operator>!=</operator> <name>ASF_CODEC_TYPE_UNKNOWN</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_streams</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_first</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_buffer_add16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_first</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_selected</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_buffer_add16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="string">"selecting stream[0x%x] %s (%d Kib/s)"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_cat</name> <operator>==</operator> <name>ASF_CODEC_TYPE_AUDIO</name> <operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"audio"</literal></expr> </then><else>: <expr><literal type="string">"video"</literal></expr></else></ternary></expr></argument> ,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>var_buffer_add16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0x0002</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="string">"ignoring stream[0x%x] %s (%d Kib/s)"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_cat</name> <operator>==</operator> <name>ASF_CODEC_TYPE_AUDIO</name> <operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"audio"</literal></expr> </then><else>: <expr><literal type="string">"video"</literal></expr></else></ternary></expr></argument> ,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_streams</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot find any stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MMSClose</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mms_CommandSend</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="number">0x33</literal></expr></argument>,
<argument><expr><name>i_streams</name></expr></argument>,
<argument><expr><literal type="number">0xffff</literal> <operator>|</operator> <operator>(</operator> <name>i_first</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator></expr></argument>,
<argument><expr><name><name>buffer</name><operator>.</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>buffer</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mms_CommandRead</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="number">0x21</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name> <operator>!=</operator> <literal type="number">0x21</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="string">"unknown answer (0x%x instead of 0x21)"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MMSClose</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>var_buffer_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"connection successful"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>MMSStart</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_packet</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>var_buffer_t</name></type> <name>buffer</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>var_buffer_initwrite</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>i_packet</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_buffer_add8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_buffer_add8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_buffer_add8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_buffer_add8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media_packet_id_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mms_CommandSend</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="number">0x07</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command_level</name></name></expr></argument>, <argument><expr><literal type="number">0x0001ffff</literal></expr></argument>,
<argument><expr><name><name>buffer</name><operator>.</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>buffer</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_buffer_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mms_CommandRead</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name> <operator>!=</operator> <literal type="number">0x05</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="string">"unknown answer (0x%x instead of 0x05)"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>mms_HeaderMediaRead</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>MMS_PACKET_MEDIA</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"streaming started"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>MMSStop</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>mms_CommandSend</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="number">0x09</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command_level</name></name></expr></argument>,
<argument><expr><literal type="number">0x001fffff</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>MMSClose</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Connection closed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mms_CommandSend</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="number">0x0d</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command_level</name></name></expr></argument>,
<argument><expr><literal type="number">0x00000001</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle_tcp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_proto</name></name> <operator>==</operator> <name>MMS_PROTO_UDP</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle_udp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_media</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>mms_CommandSend</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_command</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>i_prefix1</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_prefix2</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_data_old</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>var_buffer_t</name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_data_by8</name></decl>, <decl><type ref="prev"/><name>i_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_data</name> <init>= <expr><name>i_data_old</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>i_data</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_data</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>i_data_by8</name> <operator>=</operator> <name>i_data</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>var_buffer_initwrite</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0x00000001</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0xB00BFACE</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>i_data</name> <operator>+</operator> <name>MMS_CMD_HEADERSIZE</name> <operator>-</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0x20534d4d</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>i_data_by8</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_num</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq_num</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>i_data_by8</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0x00030000</literal> <operator>|</operator> <name>i_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>i_prefix1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>var_buffer_add32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>i_prefix2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if<condition>( <expr><name>p_data</name> <operator>&amp;&amp;</operator> <name>i_data</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_buffer_addmemory</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data_old</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>var_buffer_add64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_netwrite</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>net_Write</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle_tcp</name></name></expr></argument>, <argument><expr><name><name>buffer</name><operator>.</operator><name>p_data</name></name></expr></argument>,
<argument><expr><name><name>buffer</name><operator>.</operator><name>i_data</name></name> <operator>-</operator> <operator>(</operator> <literal type="number">8</literal> <operator>-</operator> <operator>(</operator> <name>i_data</name> <operator>-</operator> <name>i_data_old</name> <operator>)</operator> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_netwrite</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <name><name>buffer</name><operator>.</operator><name>i_data</name></name> <operator>-</operator> <operator>(</operator> <literal type="number">8</literal> <operator>-</operator> <operator>(</operator> <name>i_data</name> <operator>-</operator> <name>i_data_old</name> <operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_buffer_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"failed to send command"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>var_buffer_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>NetFillBuffer</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>ufd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>timeout</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timeout</name></name></expr></init></decl>, <decl><type ref="prev"/><name>nfd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_tcp</name></decl>, <decl><type ref="prev"/><name>i_udp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_tcp_read</name></decl>, <decl><type ref="prev"/><name>i_udp_read</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_tcp</name> <operator>=</operator> <name>MMS_BUFFER_SIZE</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_tcp</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_proto</name></name> <operator>==</operator> <name>MMS_PROTO_UDP</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_udp</name> <operator>=</operator> <name>MMS_BUFFER_SIZE</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_udp</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_udp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_udp</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_tcp</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"nothing to read %d:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i_tcp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i_udp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>

</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><name>i_tcp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ufd</name><index>[<expr><name>nfd</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_handle_tcp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ufd</name><index>[<expr><name>nfd</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nfd</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_udp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ufd</name><index>[<expr><name>nfd</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_handle_udp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ufd</name><index>[<expr><name>nfd</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nfd</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_tcp</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_udp</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">2000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>vlc_killed</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_poll_i11e</name><argument_list>(<argument><expr><name>ufd</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr> )</condition>;</do> 

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"no data received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"network poll error: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_tcp_read</name> <operator>=</operator> <name>i_udp_read</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_tcp</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ufd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_tcp_read</name> <operator>=</operator>
<call><name>recv</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle_tcp</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_tcp</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_tcp</name></name></expr></argument>,
<argument><expr><name>i_tcp</name> <operator>+</operator> <name>MMS_BUFFER_SIZE</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_udp</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ufd</name><index>[<expr><name>i_tcp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_udp_read</name> <operator>=</operator> <call><name>recv</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle_udp</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_udp</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_udp</name></name></expr></argument>,
<argument><expr><name>i_udp</name> <operator>+</operator> <name>MMS_BUFFER_SIZE</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MMS_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_proto</name></name> <operator>==</operator> <name>MMS_PROTO_UDP</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"filling buffer TCP:%d+%d UDP:%d+%d"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_tcp</name></name></expr></argument>, <argument><expr><name>i_tcp_read</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_udp</name></name></expr></argument>, <argument><expr><name>i_udp_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"filling buffer TCP:%d+%d"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_tcp</name></name></expr></argument>, <argument><expr><name>i_tcp_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name>i_tcp_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_tcp</name></name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>i_tcp_read</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_udp_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_udp</name></name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>i_udp_read</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_tcp_read</name> <operator>+</operator> <name>i_udp_read</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mms_ParseCommand</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_used</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET32</name><parameter_list>( <parameter><type><name>i_pos</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( p_sys-&gt;p_cmd[i_pos] + ( p_sys-&gt;p_cmd[i_pos +1] &lt;&lt; 8 ) + ( p_sys-&gt;p_cmd[i_pos + 2] &lt;&lt; 16 ) + ( p_sys-&gt;p_cmd[i_pos + 3] &lt;&lt; 24 ) )</cpp:value></cpp:define>




<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_id</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_data</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cmd</name></name> <operator>=</operator> <name>i_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cmd</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_used</name> <operator>=</operator> <name>i_data</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_used</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cmd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <name>MMS_CMD_HEADERSIZE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"truncated command (header incomplete)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_id</name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_data</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_length</name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_data</name> <operator>+</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_id</name> <operator>!=</operator> <literal type="number">0xb00bface</literal> <operator>||</operator> <name>i_length</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="string">"incorrect command header (0x%"</literal><name>PRIx32</name><literal type="string">")"</literal></expr></argument>, <argument><expr><name>i_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cmd</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="string">"truncated command (missing %zu bytes)"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i_length</name> <operator>-</operator> <name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_length</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cmd</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cmd</name></name> <operator>=</operator> <name>i_length</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_used</name> <operator>=</operator> <name>i_length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="string">"recv command start_sequence:0x%8.8x command_id:0x%8.8x length:%d len8:%d sequence 0x%8.8x len8_II:%d dir_comm:0x%8.8x"</literal></expr></argument>,
<argument><expr><call><name>GET32</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>GET32</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>GET32</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><call><name>GET32</name><argument_list>( <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>GET32</name><argument_list>( <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr></argument>,


<argument><expr><call><name>GET32</name><argument_list>( <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>GET32</name><argument_list>( <argument><expr><literal type="number">36</literal></expr></argument> )</argument_list></call></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name> <operator>=</operator> <call><name>GET32</name><argument_list>( <argument><expr><literal type="number">36</literal></expr></argument> )</argument_list></call> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET32</name></cpp:undef>

<return>return <expr><name>MMS_PACKET_CMD</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mms_ParsePacket</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_used</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_packet_seq_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_packet_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_packet_id</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_used</name> <operator>=</operator> <name>i_data</name></expr>;</expr_stmt> 
<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"truncated packet (header incomplete)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_packet_id</name> <operator>=</operator> <name><name>p_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_packet_seq_num</name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_packet_length</name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><name>p_data</name> <operator>+</operator> <literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>( <expr><name>i_packet_length</name> <operator>&gt;</operator> <name>i_data</name> <operator>||</operator> <name>i_packet_length</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>pi_used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_packet_length</name> <operator>&lt;</operator> <name>i_data</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_used</name> <operator>=</operator> <name>i_packet_length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_packet_id</name> <operator>==</operator> <literal type="number">0xff</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="string">"receive MMS UDP pair timing"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <name>MMS_PACKET_UDP_TIMING</name> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_packet_id</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header_packet_id_type</name></name> <operator>&amp;&amp;</operator>
<name>i_packet_id</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_media_packet_id_type</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"incorrect Packet Id Type (0x%x)"</literal></expr></argument>, <argument><expr><name>i_packet_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>i_packet_seq_num</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_seq_num</name></name></expr> )</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

msg_Warn( p_access,
"detected packet lost (%d != %d)",
i_packet_seq_num,
p_sys-&gt;i_packet_seq_num );
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_seq_num</name></name> <operator>=</operator> <name>i_packet_seq_num</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_packet_id</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header_packet_id_type</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_reaced</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name> <operator>+</operator> <name>i_packet_length</name> <operator>-</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_reaced</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_reaced</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>i_packet_length</name> <operator>-</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name> <operator>=</operator> <name>p_reaced</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name> <operator>+=</operator> <name>i_packet_length</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>





<return>return <expr><name>MMS_PACKET_HEADER</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_media</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_media</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_packet_length</name> <operator>-</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_media</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media</name></name> <operator>=</operator> <name>i_packet_length</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_media</name></name></expr></argument>, <argument><expr><name>p_data</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_media</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>




<return>return <expr><name>MMS_PACKET_MEDIA</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mms_ReceivePacket</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_packet_tcp_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_packet_udp_type</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_refill</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_tcp</name></name> <operator>&gt;=</operator> <name>MMS_CMD_HEADERSIZE</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>GetDWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_tcp</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0xb00bface</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>GetDWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_tcp</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">16</literal> <operator>&lt;=</operator>
<operator>(</operator><name>size_t</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_tcp</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_refill</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>GetWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_tcp</name></name> <operator>+</operator> <literal type="number">6</literal></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_tcp</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_refill</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_proto</name></name> <operator>==</operator> <name>MMS_PROTO_UDP</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_udp</name></name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator>
<call><name>GetWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_udp</name></name> <operator>+</operator> <literal type="number">6</literal></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_udp</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_refill</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_refill</name> <operator>&amp;&amp;</operator> <call><name>NetFillBuffer</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot fill buffer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_packet_tcp_type</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_packet_udp_type</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_tcp</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_used</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>GetDWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_tcp</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0xb00bface</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_packet_tcp_type</name> <operator>=</operator>
<call><name>mms_ParseCommand</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_tcp</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_tcp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_used</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_packet_tcp_type</name> <operator>=</operator>
<call><name>mms_ParsePacket</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_tcp</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_tcp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_used</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_used</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_used</name> <operator>&lt;</operator> <name>MMS_BUFFER_SIZE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_tcp</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_tcp</name></name> <operator>+</operator> <name>i_used</name></expr></argument>,
<argument><expr><name>MMS_BUFFER_SIZE</name> <operator>-</operator> <name>i_used</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_tcp</name></name> <operator>-=</operator> <name>i_used</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_udp</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_used</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_packet_udp_type</name> <operator>=</operator>
<call><name>mms_ParsePacket</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_udp</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_udp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_used</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_used</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_used</name> <operator>&lt;</operator> <name>MMS_BUFFER_SIZE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_udp</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_udp</name></name> <operator>+</operator> <name>i_used</name></expr></argument>,
<argument><expr><name>MMS_BUFFER_SIZE</name> <operator>-</operator> <name>i_used</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_udp</name></name> <operator>-=</operator> <name>i_used</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_packet_tcp_type</name> <operator>==</operator> <name>MMS_PACKET_CMD</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name> <operator>==</operator> <literal type="number">0x1b</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mms_CommandSend</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="number">0x1b</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_packet_tcp_type</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_packet_tcp_type</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>i_packet_tcp_type</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_packet_udp_type</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>i_packet_udp_type</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mms_ReceiveCommand</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_status</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>NetFillBuffer</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot fill buffer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_tcp</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <call><name>mms_ParseCommand</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_tcp</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_tcp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_used</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_used</name> <operator>&lt;</operator> <name>MMS_BUFFER_SIZE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_tcp</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_tcp</name></name> <operator>+</operator> <name>i_used</name></expr></argument>,
<argument><expr><name>MMS_BUFFER_SIZE</name> <operator>-</operator> <name>i_used</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_tcp</name></name> <operator>-=</operator> <name>i_used</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name> <operator>==</operator> <literal type="number">0x1b</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mms_CommandSend</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="number">0x1b</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMS_RETRY_MAX</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mms_CommandRead</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_command1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_command2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_status</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_count</name> <operator>&lt;</operator> <name>MMS_RETRY_MAX</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i_status</name> <operator>=</operator> <call><name>mms_ReceiveCommand</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_status</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_command1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_command2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name> <operator>==</operator> <name>i_command1</name> <operator>||</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name> <operator>==</operator> <name>i_command2</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x03</literal></expr>:</case>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"socket closed by server"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
<case>case <expr><literal type="number">0x1e</literal></expr>:</case>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"end of media stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"failed to receive command (aborting)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>mms_HeaderMediaRead</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_count</name> <operator>&lt;</operator> <name>MMS_RETRY_MAX</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_status</name> <operator>=</operator> <call><name>mms_ReceivePacket</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot receive header (%d/%d)"</literal></expr></argument>,
<argument><expr><name>i_count</name></expr></argument>, <argument><expr><name>MMS_RETRY_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_status</name> <operator>==</operator> <name>i_type</name> <operator>||</operator> <name>i_type</name> <operator>==</operator> <name>MMS_PACKET_ANY</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>i_type</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_status</name> <operator>==</operator> <name>MMS_PACKET_CMD</name></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_command</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x03</literal></expr>:</case>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"socket closed by server"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">0x1e</literal></expr>:</case>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"end of media stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">0x20</literal></expr>:</case>



<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><literal type="string">"reinitialization needed --&gt; unsupported"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot receive %s (aborting)"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator> <name>i_type</name> <operator>==</operator> <name>MMS_PACKET_HEADER</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"header"</literal></expr> </then><else>: <expr><literal type="string">"media data"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>KeepAliveThread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<do>do<block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>mms_CommandSend</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="number">0x1b</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block>
while <condition>(<expr><call><name>vlc_sem_timedwait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>keep_alive</name><operator>.</operator><name>sem</name></name></expr></argument>,
<argument><expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>)</condition>;</do>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>KeepAliveStart</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_keep_alive</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_sem_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>keep_alive</name><operator>.</operator><name>sem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_keep_alive</name></name> <operator>=</operator> <operator>!</operator><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>keep_alive</name><operator>.</operator><name>thread</name></name></expr></argument>,
<argument><expr><name>KeepAliveThread</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>,
<argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>KeepAliveStop</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_keep_alive</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_sem_post</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>keep_alive</name><operator>.</operator><name>sem</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>keep_alive</name><operator>.</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_keep_alive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
