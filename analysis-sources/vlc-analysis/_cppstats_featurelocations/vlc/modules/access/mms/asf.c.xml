<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\mms\asf.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../demux/asf/libasf_guid.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GenerateGuid</name> <parameter_list>( <parameter><decl><type><name>vlc_guid_t</name> <modifier>*</modifier></type><name>p_guid</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_guid</name><operator>-&gt;</operator><name>Data1</name></name> <operator>=</operator> <literal type="number">0xbabac001</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_rand_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_guid</name><operator>-&gt;</operator><name>Data2</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_guid</name><operator>-&gt;</operator><name>Data2</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_rand_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_guid</name><operator>-&gt;</operator><name>Data3</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_guid</name><operator>-&gt;</operator><name>Data3</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_rand_bytes</name><argument_list>(<argument><expr><name><name>p_guid</name><operator>-&gt;</operator><name>Data4</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_guid</name><operator>-&gt;</operator><name>Data4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>asf_HeaderParse</name> <parameter_list>( <parameter><decl><type><name>asf_header_t</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_header</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>var_buffer_t</name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_guid_t</name></type> <name>guid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>i_file_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>i_data_packets_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>i_min_data_packet_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_cat</name> <operator>=</operator> <name>ASF_CODEC_TYPE_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_selected</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>var_buffer_initread</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>, <argument><expr><name>i_header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_getguid</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>guidcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_header_guid</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>var_buffer_getmemory</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">30</literal> <operator>-</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>var_buffer_getguid</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_size</name> <operator>=</operator> <call><name>var_buffer_get64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_file_properties_guid</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_buffer_getmemory</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>i_file_size</name></name> <operator>=</operator> <call><name>var_buffer_get64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_getmemory</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>i_data_packets_count</name></name> <operator>=</operator> <call><name>var_buffer_get64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_getmemory</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>+</operator><literal type="number">8</literal><operator>+</operator><literal type="number">8</literal><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>i_min_data_packet_size</name></name> <operator>=</operator> <call><name>var_buffer_get32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_buffer_getmemory</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_size</name> <operator>-</operator> <literal type="number">24</literal> <operator>-</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">8</literal><operator>-</operator><literal type="number">8</literal><operator>-</operator><literal type="number">8</literal><operator>-</operator><literal type="number">4</literal> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_header_extension_guid</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>var_buffer_getmemory</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">46</literal> <operator>-</operator> <literal type="number">24</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_extended_stream_properties_guid</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_count1</name></decl>, <decl><type ref="prev"/><name>i_count2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_subsize</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_buffer_getmemory</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">84</literal> <operator>-</operator> <literal type="number">24</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_count1</name> <operator>=</operator> <call><name>var_buffer_get16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_count2</name> <operator>=</operator> <call><name>var_buffer_get16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_subsize</name> <operator>=</operator> <literal type="number">88</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_buffer_get16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>var_buffer_get16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_getmemory</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_subsize</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <name>i_len</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>var_buffer_getmemory</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>var_buffer_get32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_getmemory</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_subsize</name> <operator>+=</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>i_len</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>-</operator> <name>i_subsize</name> <operator>&lt;=</operator> <literal type="number">24</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_buffer_getmemory</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_size</name> <operator>-</operator> <name>i_subsize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_stream_properties_guid</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_stream_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_guid_t</name></type> <name>stream_type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_buffer_getguid</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_getmemory</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_stream_id</name> <operator>=</operator> <call><name>var_buffer_get8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_buffer_getmemory</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_size</name> <operator>-</operator> <literal type="number">24</literal> <operator>-</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_stream_type_video</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_stream_id</name></expr>]</index></name><operator>.</operator><name>i_cat</name> <operator>=</operator> <name>ASF_CODEC_TYPE_VIDEO</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_stream_type_audio</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_stream_id</name></expr>]</index></name><operator>.</operator><name>i_cat</name> <operator>=</operator> <name>ASF_CODEC_TYPE_AUDIO</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_stream_id</name></expr>]</index></name><operator>.</operator><name>i_cat</name> <operator>=</operator> <name>ASF_CODEC_TYPE_UNKNOWN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_stream_bitrate_properties</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_stream_id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_count</name> <operator>=</operator> <call><name>var_buffer_get16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_size</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while<condition>( <expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_stream_id</name> <operator>=</operator> <call><name>var_buffer_get16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call><operator>&amp;</operator><literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_stream_id</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name> <operator>=</operator> <call><name>var_buffer_get32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_count</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i_size</name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>var_buffer_getmemory</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_size</name> <operator>-</operator> <literal type="number">24</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>var_buffer_getmemory</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_size</name> <operator>-</operator> <literal type="number">24</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_buffer_readempty</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>asf_StreamSelect</name> <parameter_list>( <parameter><decl><type><name>asf_header_t</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_bitrate_max</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_all</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_audio</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_video</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_audio</name></decl>, <decl><type ref="prev"/><name>i_video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_bitrate_total</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
char *psz_stream;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i_audio</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_video</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_bitrate_total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_all</name></expr> )</condition>
<block>{<block_content>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_cat</name> <operator>!=</operator> <name>ASF_CODEC_TYPE_UNKNOWN</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_selected</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_selected</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>














<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_cat</name> <operator>==</operator> <name>ASF_CODEC_TYPE_UNKNOWN</name></expr> )</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_cat</name> <operator>==</operator> <name>ASF_CODEC_TYPE_AUDIO</name> <operator>&amp;&amp;</operator> <name>b_audio</name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name>i_audio</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator> <operator>(</operator> <operator>(</operator> <name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name> <operator>&gt;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_audio</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name>i_bitrate_total</name> <operator>+</operator> <name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name> <operator>-</operator> <name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_audio</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name>
<operator>&lt;</operator> <name>i_bitrate_max</name> <operator>||</operator> <operator>!</operator><name>i_bitrate_max</name><operator>)</operator> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name> <operator>&lt;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_audio</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name> <operator>&amp;&amp;</operator>
<name>i_bitrate_max</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_bitrate_total</name> <operator>&gt;</operator> <name>i_bitrate_max</name> <operator>)</operator>
<operator>)</operator> <operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_audio</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_audio</name></expr>]</index></name><operator>.</operator><name>i_selected</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_audio</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name><operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_bitrate_total</name> <operator>-=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_audio</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_selected</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name><operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_bitrate_total</name> <operator>+=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_audio</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_cat</name> <operator>==</operator> <name>ASF_CODEC_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <name>b_video</name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name>i_video</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator>
<operator>(</operator> <operator>(</operator> <name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name> <operator>&gt;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_video</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name>i_bitrate_total</name> <operator>+</operator> <name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name> <operator>-</operator> <name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_video</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name>
<operator>&lt;</operator> <name>i_bitrate_max</name> <operator>||</operator> <operator>!</operator><name>i_bitrate_max</name><operator>)</operator> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name> <operator>&lt;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_video</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name> <operator>&amp;&amp;</operator>
<name>i_bitrate_max</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_bitrate_total</name> <operator>&gt;</operator> <name>i_bitrate_max</name> <operator>)</operator>
<operator>)</operator> <operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_video</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_video</name></expr>]</index></name><operator>.</operator><name>i_selected</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_video</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name><operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_bitrate_total</name> <operator>-=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i_video</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_selected</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name><operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_bitrate_total</name> <operator>+=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bitrate</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_video</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>
</block_content>}</block></function>
</unit>
