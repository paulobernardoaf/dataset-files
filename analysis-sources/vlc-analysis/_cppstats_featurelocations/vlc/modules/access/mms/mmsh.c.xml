<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\mms\mmsh.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_tls.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mmsh.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"assert.h"</cpp:file></cpp:include>







<function_decl><type><name>int</name></type> <name>MMSHOpen</name> <parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>MMSHClose</name> <parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Block</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Seek</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Describe</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_location</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Start</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Stop</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetPacket</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chunk_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GetHeader</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_content_length</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Restart</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Reset</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMSH_USER_AGENT</name></cpp:macro> <cpp:value>"NSPlayer/7.10.0.3059"</cpp:value></cpp:define>




<function><type><name>int</name></type> <name>MMSHOpen</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_location</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_proto</name></name><operator>=</operator> <name>MMS_PROTO_HTTP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_proxy</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_proxy</name> <init>= <expr><call><name>vlc_getProxyUrl</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_proxy</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_proxy</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_UrlParse</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>proxy</name></name></expr></argument>, <argument><expr><name>psz_proxy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_proxy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>psz_host</name></name> <operator>==</operator> <name>NULL</name> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>psz_host</name></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"invalid proxy host"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>proxy</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>i_port</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>i_port</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Using http proxy %s:%d"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>i_port</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>vlc_UrlParse</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>psz_host</name></name> <operator>==</operator> <name>NULL</name> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>psz_host</name></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"invalid host"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>i_port</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>i_port</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>Describe</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_location</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>psz_location</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"redirection to %s"</literal></expr></argument>, <argument><expr><name>psz_location</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>=</operator> <name>psz_location</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>proxy</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ACCESS_REDIRECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>Start</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot start stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ACCESS_SET_CALLBACKS</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Block</name></expr></argument>, <argument><expr><name>Control</name></expr></argument>, <argument><expr><name>Seek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_proxy</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>proxy</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>MMSHClose</name> <parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Stop</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_proxy</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>proxy</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_bool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_bool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_int</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>STREAM_CAN_SEEK</name></expr>:</case>
<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_broadcast</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_CAN_FASTSEEK</name></expr>:</case>
<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_CONTROL_PACE</name></expr>:</case>
<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_GET_SIZE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_broadcast</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>i_file_size</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>STREAM_GET_PTS_DELAY</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator>
<call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"network-caching"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_GET_PRIVATE_ID_STATE</name></expr>:</case>
<expr_stmt><expr><name>i_int</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_int</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i_int</name> <operator>&gt;</operator> <literal type="number">127</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i_int</name></expr>]</index></name><operator>.</operator><name>i_selected</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_SET_PRIVATE_ID_STATE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>i_int</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_bool</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_cat</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_int</name> <operator>&gt;</operator> <literal type="number">127</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name>i_int</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name>b_bool</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>i_int</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>i_cat</name> <operator>&gt;</operator> <name>ES_CATEGORY_COUNT</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>b_bool</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i_int</name></expr>]</index></name><operator>.</operator><name>i_cat</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_cat</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_cat</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_selected</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name>i_int</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i_int</name></expr>]</index></name><operator>.</operator><name>i_selected</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Stop</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Seek</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>STREAM_SET_PAUSE_STATE</name></expr>:</case>
<expr_stmt><expr><name>b_bool</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_bool</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Stop</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Seek</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Seek</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chunk_t</name></type> <name>ck</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_packet</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"seeking to %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_packet</name> <operator>=</operator> <operator>(</operator> <name>i_pos</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name> <operator>)</operator> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>i_min_data_packet_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <operator>(</operator> <name>i_pos</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name> <operator>)</operator> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>i_min_data_packet_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Stop</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Start</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>i_packet</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>i_min_data_packet_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>GetPacket</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ck</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>ck</name><operator>.</operator><name>i_type</name></name> <operator>!=</operator> <literal type="number">0x4824</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"skipping header"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name> <operator>=</operator> <name>i_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_used</name></name> <operator>+=</operator> <name>i_offset</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Block</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>eof</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_packet_min</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>i_min_data_packet_size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_start</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_offset</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_start</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_copy</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name> <operator>-</operator> <name>i_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_copy</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name><index>[<expr><name>i_offset</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name> <operator>+=</operator> <name>i_copy</name></expr>;</expr_stmt>
<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_used</name></name> <operator>&lt;</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name></expr></argument>, <argument><expr><name>i_packet_min</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_copy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_padding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_used</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_copy</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_used</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_used</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>i_packet_min</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_padding</name> <operator>=</operator> <name>i_packet_min</name> <operator>-</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_used</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_copy</name> <operator>+</operator> <name>i_padding</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_copy</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_packet</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_used</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>i_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_padding</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_copy</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_padding</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_used</name></name> <operator>+=</operator> <name>i_copy</name> <operator>+</operator> <name>i_padding</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name> <operator>+=</operator> <name>i_copy</name> <operator>+</operator> <name>i_padding</name></expr>;</expr_stmt>
<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>chunk_t</name></type> <name>ck</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>GetPacket</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ck</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_broadcast</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>ck</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <literal type="number">0x4524</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ck</name><operator>.</operator><name>i_sequence</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>Restart</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>ck</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <literal type="number">0x4324</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>Reset</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>ck</name><operator>.</operator><name>i_type</name></name> <operator>!=</operator> <literal type="number">0x4424</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>Restart</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_location</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Restart the stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"stopping the stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Stop</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"describe the stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>Describe</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_location</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"describe failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_location</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><call><name>Start</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Start failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>Reset</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asf_header_t</name></type> <name>old_asfh</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Reset the stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_position</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_sequence</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packet</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>GetHeader</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>asf_HeaderParse</name> <argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"packet count=%"</literal><name>PRId64</name><literal type="string">" packet size=%d"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>i_data_packets_count</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>i_min_data_packet_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>asf_StreamSelect</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name></name></expr></argument>,
<argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"mms-maxbitrate"</literal></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"mms-all"</literal></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"video"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>asf_stream_t</name> <modifier>*</modifier></type><name>p_old</name> <init>= <expr><operator>&amp;</operator><name><name>old_asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>asf_stream_t</name> <modifier>*</modifier></type><name>p_new</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_old</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>||</operator> <name><name>p_old</name><operator>-&gt;</operator><name>i_selected</name></name> <operator>!=</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_selected</name></name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"incompatible asf header, restart"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>Restart</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>WriteRequestLine</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_memstream</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>stream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_open</name><argument_list>( <argument><expr><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"GET "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>b_proxy</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"http://%s:%d"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>i_port</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>psz_path</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>psz_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>( <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>psz_path</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>psz_option</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"?%s"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>psz_option</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">" HTTP/1.0\r\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"Host: %s:%d\r\n"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>i_port</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_url_t</name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>proxy</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>b_proxy</name></name> <operator>&amp;&amp;</operator> <name><name>proxy</name><operator>-&gt;</operator><name>psz_username</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pw</name> <init>= <expr><ternary><condition><expr><name><name>proxy</name><operator>-&gt;</operator><name>psz_password</name></name></expr> ?</condition><then> <expr><name><name>proxy</name><operator>-&gt;</operator><name>psz_password</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>psz_username</name></name></expr></argument>, <argument><expr><name>pw</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b64</name> <init>= <expr><call><name>vlc_b64_encode</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b64</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"Proxy-Authorization: "</literal>
<literal type="string">"Basic %s\r\n"</literal></expr></argument>, <argument><expr><name>b64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>b64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"Accept: */*\r\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"User-Agent: %s\r\n"</literal></expr></argument>, <argument><expr><name>MMSH_USER_AGENT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenConnection</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_memstream</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>stream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_url_t</name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_proxy</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>proxy</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>url</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"Connection: Close\r\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><call><name>vlc_memstream_close</name><argument_list>( <argument><expr><name>stream</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>vlc_tls_SocketOpenTCP</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>i_port</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>sock</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"sending request:\n%s"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name> <init>= <expr><call><name>vlc_tls_Write</name><argument_list>( <argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>length</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>val</name> <operator>&lt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>stream</name><operator>-&gt;</operator><name>length</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"failed to send request"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_tls_Close</name><argument_list>( <argument><expr><name>sock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>sock</name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>sock</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Describe</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_location</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_location</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_content_length</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_keepalive</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>stream</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_broadcast</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_request_context</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_sequence</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packet</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GenerateGuid</name> <argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>guid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WriteRequestLine</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"Pragma: no-cache,rate=1.000000,"</literal>
<literal type="string">"stream-time=0,stream-offset=0:0,"</literal>
<literal type="string">"request-context=%d,max-duration=0\r\n"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_request_context</name></name><operator>++</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"Pragma: xClientGUID={"</literal><name>GUID_FMT</name><literal type="string">"}\r\n"</literal></expr></argument>,
<argument><expr><call><name>GUID_PRINT</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>OpenConnection</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name>vlc_tls_GetLine</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"failed to read answer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strncmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"HTTP/1."</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"invalid HTTP reply '%s'"</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_code</name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_code</name> <operator>&gt;=</operator> <literal type="number">400</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"error: %s"</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"HTTP reply '%s'"</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>vlc_tls_GetLine</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"failed to read answer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_location</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"malformed header line: %s"</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_location</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<while>while<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>



<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"Pragma"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>strstr</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"features"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>strstr</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"broadcast"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"stream type = broadcast"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_broadcast</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>strstr</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"seekable"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"stream type = seekable"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_broadcast</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"unknown stream types (%s)"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_broadcast</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"Location"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_location</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_location</name> <operator>=</operator> <call><name>vlc_uri_resolve</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_content_length</name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"content-length = %d"</literal></expr></argument>, <argument><expr><name>i_content_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>strcasestr</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Keep-Alive"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Keep-Alive header found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_keepalive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>(</operator><name>i_code</name> <operator>==</operator> <literal type="number">301</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i_code</name> <operator>==</operator> <literal type="number">302</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>i_code</name> <operator>==</operator> <literal type="number">303</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i_code</name> <operator>==</operator> <literal type="number">307</literal><operator>)</operator> <operator>)</operator> <operator>&amp;&amp;</operator>
<name>psz_location</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"redirection to %s"</literal></expr></argument>, <argument><expr><name>psz_location</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_tls_Close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppsz_location</name> <operator>=</operator> <name>psz_location</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_location</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>GetHeader</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><ternary><condition><expr><name>b_keepalive</name></expr> ?</condition><then> <expr><name>i_content_length</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"header size == 0"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_tls_Close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>






<expr_stmt><expr><call><name>asf_HeaderParse</name> <argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"packet count=%"</literal><name>PRId64</name><literal type="string">" packet size=%d"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>i_data_packets_count</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>i_min_data_packet_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>i_min_data_packet_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>asf_StreamSelect</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name></name></expr></argument>,
<argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"mms-maxbitrate"</literal></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"mms-all"</literal></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"video"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_tls_Close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetHeader</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_content_length</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_read_content</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>chunk_t</name></type> <name>ck</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_content_length</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_read_content</name> <operator>&gt;=</operator> <name>i_content_length</name><operator>)</operator> <operator>||</operator> <call><name>GetPacket</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ck</name></expr></argument> )</argument_list></call> <operator>||</operator> <name><name>ck</name><operator>.</operator><name>i_type</name></name> <operator>!=</operator> <literal type="number">0x4824</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_read_content</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal><operator>+</operator><name><name>ck</name><operator>.</operator><name>i_size</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ck</name><operator>.</operator><name>i_data</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name> <operator>+=</operator> <name><name>ck</name><operator>.</operator><name>i_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name> <operator>-</operator> <name><name>ck</name><operator>.</operator><name>i_data</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>ck</name><operator>.</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>ck</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"complete header size=%d"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>Start</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_streams</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_streams_selected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>stream</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"starting stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_cat</name> <operator>==</operator> <name>ASF_CODEC_TYPE_UNKNOWN</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_streams</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_selected</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_streams_selected</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>i_streams_selected</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"no stream selected"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>WriteRequestLine</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"Pragma: no-cache,rate=1.000000"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_broadcast</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">",stream-time=0,stream-offset="</literal>
<literal type="string">"%"</literal><name>PRIu32</name><literal type="string">":%"</literal><name>PRIu32</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>i_pos</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">",request-context=%d"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_request_context</name></name><operator>++</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_broadcast</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">",max-duration=0"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"Pragma: xPlayStrm=1\r\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"Pragma: xClientGUID={"</literal><name>GUID_FMT</name><literal type="string">"}\r\n"</literal></expr></argument>,
<argument><expr><call><name>GUID_PRINT</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"Pragma: stream-switch-count=%d\r\n"</literal></expr></argument>,
<argument><expr><name>i_streams</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"Pragma: stream-switch-entry="</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_cat</name> <operator>!=</operator> <name>ASF_CODEC_TYPE_UNKNOWN</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_select</name> <init>= <expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>asfh</name><operator>.</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_selected</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"ffff:%x:%d "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i_select</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>OpenConnection</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name>vlc_tls_GetLine</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot read data 0"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>atoi</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">400</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"error: %s"</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"HTTP reply '%s'"</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>vlc_tls_GetLine</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot read data 1"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Stop</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"closing stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_tls_Close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>GetPacket</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type> <name>p_access</name></decl></parameter>, <parameter><decl><type><name>chunk_t</name> <modifier>*</modifier></type><name>p_ck</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>restsize</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_ck</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>chunk_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>







<if_stmt><if>if<condition>( <expr><call><name>vlc_tls_Read</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot read data 2"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_ck</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ck</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>restsize</name> <operator>=</operator> <name><name>p_ck</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>restsize</name> <operator>&gt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>restsize</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_tls_Read</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>restsize</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>restsize</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot read data 3"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_ck</name><operator>-&gt;</operator><name>i_sequence</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ck</name><operator>-&gt;</operator><name>i_unknown</name></name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if<condition>( <expr><name>restsize</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_ck</name><operator>-&gt;</operator><name>i_size2</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_ck</name><operator>-&gt;</operator><name>i_size2</name></name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_ck</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_ck</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <name><name>p_ck</name><operator>-&gt;</operator><name>i_size2</name></name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ck</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <literal type="number">0x4524</literal></expr> )</condition> 
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_ck</name><operator>-&gt;</operator><name>i_sequence</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"EOF"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"next stream following"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_ck</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <literal type="number">0x4324</literal></expr> )</condition> 
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"next stream following (reset) seq=%d"</literal></expr></argument>, <argument><expr><name><name>p_ck</name><operator>-&gt;</operator><name>i_sequence</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator><name><name>p_ck</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <literal type="number">0x4824</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_ck</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <literal type="number">0x4424</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>





<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"unrecognized chunk FATAL (0x%x)"</literal></expr></argument>, <argument><expr><name><name>p_ck</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_ck</name><operator>-&gt;</operator><name>i_data</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>vlc_tls_Read</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_ck</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument>,
<argument><expr><name>true</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_ck</name><operator>-&gt;</operator><name>i_data</name></name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot read data 4"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if( (p_sys-&gt;i_packet_sequence != 0) &amp;&amp;
(p_ck-&gt;i_sequence != p_sys-&gt;i_packet_sequence) )
{
msg_Warn( p_access, "packet lost ? (%d != %d)", p_ck-&gt;i_sequence, p_sys-&gt;i_packet_sequence );
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_sequence</name></name> <operator>=</operator> <name><name>p_ck</name><operator>-&gt;</operator><name>i_sequence</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_length</name></name> <operator>=</operator> <name><name>p_ck</name><operator>-&gt;</operator><name>i_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packet</name></name> <operator>=</operator> <name><name>p_ck</name><operator>-&gt;</operator><name>p_data</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
