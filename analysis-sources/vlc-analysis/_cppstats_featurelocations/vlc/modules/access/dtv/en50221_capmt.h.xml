<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\dtv\en50221_capmt.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EN50221_CAPMT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EN50221_CAPMT_H</name></cpp:macro></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_stream_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_es_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_descriptors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_descriptors</name></decl>;</decl_stmt>
}</block></struct></type> <name>en50221_capmt_es_info_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>en50221_capmt_info_s</name>
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_program_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_program_descriptors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_program_descriptors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_es_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>en50221_capmt_es_info_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>
}</block></struct></type> <name>en50221_capmt_info_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>en50221_capmt_CADescriptorAppend</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_desc</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_desc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><operator>*</operator><name>p_desc</name></expr></argument>, <argument><expr><operator>*</operator><name>pi_desc</name> <operator>+</operator> <name>i_data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_realloc</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_desc</name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_realloc</name><index>[<expr><operator>*</operator><name>pi_desc</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x09</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_realloc</name><index>[<expr><operator>*</operator><name>pi_desc</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_realloc</name><index>[<expr><operator>*</operator><name>pi_desc</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_desc</name> <operator>=</operator> <operator>*</operator><name>pi_desc</name> <operator>+</operator> <name>i_data</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>en50221_capmt_es_info_t</name> <modifier>*</modifier></type><name>en50221_capmt_EsAdd</name><parameter_list>( <parameter><decl><type><name>en50221_capmt_info_t</name> <modifier>*</modifier></type><name>p_en</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>i_stream_type</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>i_es_pid</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>en50221_capmt_es_info_t</name> <modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_en</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>en50221_capmt_es_info_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<operator>(</operator><name><name>p_en</name><operator>-&gt;</operator><name>i_es_count</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_realloc</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_en</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>en50221_capmt_es_info_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><operator>&amp;</operator><name><name>p_en</name><operator>-&gt;</operator><name>p_es</name><index>[ <expr><name><name>p_en</name><operator>-&gt;</operator><name>i_es_count</name></name><operator>++</operator></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_es_pid</name></name> <operator>=</operator> <name>i_es_pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <name>i_stream_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_descriptors</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_descriptors</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>p_es</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>en50221_capmt_AddESCADescriptor</name><parameter_list>( <parameter><decl><type><name>en50221_capmt_es_info_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>en50221_capmt_CADescriptorAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>p_descriptors</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>i_descriptors</name></name></expr></argument>,
<argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>en50221_capmt_AddCADescriptor</name><parameter_list>( <parameter><decl><type><name>en50221_capmt_info_t</name> <modifier>*</modifier></type><name>p_en</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>en50221_capmt_CADescriptorAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_en</name><operator>-&gt;</operator><name>p_program_descriptors</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_en</name><operator>-&gt;</operator><name>i_program_descriptors</name></name></expr></argument>,
<argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>en50221_capmt_Delete</name><parameter_list>( <parameter><decl><type><name>en50221_capmt_info_t</name> <modifier>*</modifier></type><name>p_en</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_en</name><operator>-&gt;</operator><name>p_program_descriptors</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_en</name><operator>-&gt;</operator><name>i_es_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_en</name><operator>-&gt;</operator><name>p_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_descriptors</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_en</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_en</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>en50221_capmt_info_t</name> <modifier>*</modifier></type> <name>en50221_capmt_New</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>i_version</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_program</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>en50221_capmt_info_t</name> <modifier>*</modifier></type><name>p_en</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_en</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_en</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_en</name><operator>-&gt;</operator><name>i_version</name></name> <operator>=</operator> <name>i_version</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_en</name><operator>-&gt;</operator><name>i_program_number</name></name> <operator>=</operator> <name>i_program</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_en</name><operator>-&gt;</operator><name>i_program_descriptors</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_en</name><operator>-&gt;</operator><name>p_program_descriptors</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_en</name><operator>-&gt;</operator><name>i_es_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_en</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_en</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
