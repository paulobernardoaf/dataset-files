<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\dtv\access.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SEARCH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;search.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dtv.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADAPTER_TEXT</name></cpp:macro> <cpp:value>N_("DVB adapter")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADAPTER_LONGTEXT</name></cpp:macro> <cpp:value>N_( "If there is more than one digital broadcasting adapter, " "the adapter number must be selected. Numbering starts from zero.")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEVICE_TEXT</name></cpp:macro> <cpp:value>N_("DVB device")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEVICE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "If the adapter provides multiple independent tuner devices, " "the device number must be selected. Numbering starts from zero.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUDGET_TEXT</name></cpp:macro> <cpp:value>N_("Do not demultiplex")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUDGET_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Only useful programs are normally demultiplexed from the transponder. " "This option will disable demultiplexing and receive all programs.")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_TEXT</name></cpp:macro> <cpp:value>N_("Network name")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_LONGTEXT</name></cpp:macro> <cpp:value>N_("Unique network name in the System Tuning Spaces")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE_TEXT</name></cpp:macro> <cpp:value>N_("Network name to create")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Create unique name in the System Tuning Spaces")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREQ_TEXT</name></cpp:macro> <cpp:value>N_("Frequency (Hz)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREQ_LONGTEXT</name></cpp:macro> <cpp:value>N_( "TV channels are grouped by transponder (a.k.a. multiplex) " "on a given frequency. This is required to tune the receiver.")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULATION_TEXT</name></cpp:macro> <cpp:value>N_("Modulation / Constellation")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULATION_A_TEXT</name></cpp:macro> <cpp:value>N_("Layer A modulation")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULATION_B_TEXT</name></cpp:macro> <cpp:value>N_("Layer B modulation")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULATION_C_TEXT</name></cpp:macro> <cpp:value>N_("Layer C modulation")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULATION_LONGTEXT</name></cpp:macro> <cpp:value>N_( "The digital signal can be modulated according with different " "constellations (depending on the delivery system). " "If the demodulator cannot detect the constellation automatically, " "it needs to be configured manually.")</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>modulation_vlc</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"QAM"</literal></expr>, <expr><literal type="string">"16QAM"</literal></expr>, <expr><literal type="string">"32QAM"</literal></expr>, <expr><literal type="string">"64QAM"</literal></expr>, <expr><literal type="string">"128QAM"</literal></expr>, <expr><literal type="string">"256QAM"</literal></expr>,
<expr><literal type="string">"8VSB"</literal></expr>, <expr><literal type="string">"16VSB"</literal></expr>,
<expr><literal type="string">"QPSK"</literal></expr>, <expr><literal type="string">"DQPSK"</literal></expr>, <expr><literal type="string">"8PSK"</literal></expr>, <expr><literal type="string">"16APSK"</literal></expr>, <expr><literal type="string">"32APSK"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>modulation_user</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Undefined"</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"Auto QAM"</literal></expr>, <expr><literal type="string">"16-QAM"</literal></expr>, <expr><literal type="string">"32-QAM"</literal></expr>, <expr><literal type="string">"64-QAM"</literal></expr>, <expr><literal type="string">"128-QAM"</literal></expr>, <expr><literal type="string">"256-QAM"</literal></expr>,
<expr><literal type="string">"8-VSB"</literal></expr>, <expr><literal type="string">"16-VSB"</literal></expr>,
<expr><literal type="string">"QPSK"</literal></expr>, <expr><literal type="string">"DQPSK"</literal></expr>, <expr><literal type="string">"8-PSK"</literal></expr>, <expr><literal type="string">"16-APSK"</literal></expr>, <expr><literal type="string">"32-APSK"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRATE_TEXT</name></cpp:macro> <cpp:value>N_("Symbol rate (bauds)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRATE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "The symbol rate must be specified manually for some systems, " "notably DVB-C, DVB-S and DVB-S2.")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVERSION_TEXT</name></cpp:macro> <cpp:value>N_("Spectrum inversion")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVERSION_LONGTEXT</name></cpp:macro> <cpp:value>N_( "If the demodulator cannot detect spectral inversion correctly, " "it needs to be configured manually.")</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>auto_off_on_vlc</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>auto_off_on_user</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Automatic"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Off"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"On"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODE_RATE_TEXT</name></cpp:macro> <cpp:value>N_("FEC code rate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODE_RATE_HP_TEXT</name></cpp:macro> <cpp:value>N_("High-priority code rate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODE_RATE_LP_TEXT</name></cpp:macro> <cpp:value>N_("Low-priority code rate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODE_RATE_A_TEXT</name></cpp:macro> <cpp:value>N_("Layer A code rate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODE_RATE_B_TEXT</name></cpp:macro> <cpp:value>N_("Layer B code rate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODE_RATE_C_TEXT</name></cpp:macro> <cpp:value>N_("Layer C code rate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODE_RATE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "The code rate for Forward Error Correction can be specified.")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>code_rate_vlc</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"0"</literal></expr>, <expr><literal type="string">"1/2"</literal></expr>, <expr><literal type="string">"3/5"</literal></expr>, <expr><literal type="string">"2/3"</literal></expr>, <expr><literal type="string">"3/4"</literal></expr>,
<expr><literal type="string">"4/5"</literal></expr>, <expr><literal type="string">"5/6"</literal></expr>, <expr><literal type="string">"6/7"</literal></expr>, <expr><literal type="string">"7/8"</literal></expr>, <expr><literal type="string">"8/9"</literal></expr>, <expr><literal type="string">"9/10"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>code_rate_user</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Automatic"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"None"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"1/2"</literal></expr>, <expr><literal type="string">"3/5"</literal></expr>, <expr><literal type="string">"2/3"</literal></expr>, <expr><literal type="string">"3/4"</literal></expr>,
<expr><literal type="string">"4/5"</literal></expr>, <expr><literal type="string">"5/6"</literal></expr>, <expr><literal type="string">"6/7"</literal></expr>, <expr><literal type="string">"7/8"</literal></expr>, <expr><literal type="string">"8/9"</literal></expr>, <expr><literal type="string">"9/10"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSMISSION_TEXT</name></cpp:macro> <cpp:value>N_("Transmission mode")</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>transmission_vlc</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>transmission_user</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Automatic"</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"1k"</literal></expr>, <expr><literal type="string">"2k"</literal></expr>, <expr><literal type="string">"4k"</literal></expr>, <expr><literal type="string">"8k"</literal></expr>, <expr><literal type="string">"16k"</literal></expr>, <expr><literal type="string">"32k"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BANDWIDTH_TEXT</name></cpp:macro> <cpp:value>N_("Bandwidth (MHz)")</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>bandwidth_vlc</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>bandwidth_user</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Automatic"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"10 MHz"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"8 MHz"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"7 MHz"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"6 MHz"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"5 MHz"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"1.712 MHz"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUARD_TEXT</name></cpp:macro> <cpp:value>N_("Guard interval")</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>guard_vlc</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"1/128"</literal></expr>, <expr><literal type="string">"1/32"</literal></expr>, <expr><literal type="string">"1/16"</literal></expr>, <expr><literal type="string">"19/256"</literal></expr>, <expr><literal type="string">"1/8"</literal></expr>, <expr><literal type="string">"19/128"</literal></expr>, <expr><literal type="string">"1/4"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>guard_user</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Automatic"</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"1/128"</literal></expr>, <expr><literal type="string">"1/32"</literal></expr>, <expr><literal type="string">"1/16"</literal></expr>, <expr><literal type="string">"19/256"</literal></expr>, <expr><literal type="string">"1/8"</literal></expr>, <expr><literal type="string">"19/128"</literal></expr>, <expr><literal type="string">"1/4"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIERARCHY_TEXT</name></cpp:macro> <cpp:value>N_("Hierarchy mode")</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>hierarchy_vlc</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>hierarchy_user</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Automatic"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"None"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"4"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLP_ID_TEXT</name></cpp:macro> <cpp:value>N_("DVB-T2 Physical Layer Pipe")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEGMENT_COUNT_A_TEXT</name></cpp:macro> <cpp:value>N_("Layer A segments count")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEGMENT_COUNT_B_TEXT</name></cpp:macro> <cpp:value>N_("Layer B segments count")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEGMENT_COUNT_C_TEXT</name></cpp:macro> <cpp:value>N_("Layer C segments count")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_INTERLEAVING_A_TEXT</name></cpp:macro> <cpp:value>N_("Layer A time interleaving")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_INTERLEAVING_B_TEXT</name></cpp:macro> <cpp:value>N_("Layer B time interleaving")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_INTERLEAVING_C_TEXT</name></cpp:macro> <cpp:value>N_("Layer C time interleaving")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_ID_TEXT</name></cpp:macro> <cpp:value>N_("Stream identifier")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PILOT_TEXT</name></cpp:macro> <cpp:value>N_("Pilot")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROLLOFF_TEXT</name></cpp:macro> <cpp:value>N_("Roll-off factor")</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>rolloff_vlc</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">35</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">25</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>rolloff_user</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Automatic"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"0.35 (same as DVB-S)"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"0.20"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"0.25"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_ID_TEXT</name></cpp:macro> <cpp:value>N_("Transport stream ID")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLARIZATION_TEXT</name></cpp:macro> <cpp:value>N_("Polarization (Voltage)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLARIZATION_LONGTEXT</name></cpp:macro> <cpp:value>N_( "To select the polarization of the transponder, a different voltage " "is normally applied to the low noise block-downconverter (LNB).")</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>polarization_vlc</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"V"</literal></expr>, <expr><literal type="string">"H"</literal></expr>, <expr><literal type="string">"R"</literal></expr>, <expr><literal type="string">"L"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>polarization_user</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Unspecified (0V)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Vertical (13V)"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Horizontal (18V)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Circular Right Hand (13V)"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Circular Left Hand (18V)"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIGH_VOLTAGE_TEXT</name></cpp:macro> <cpp:value>N_("High LNB voltage")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIGH_VOLTAGE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "If the cables between the satellilte low noise block-downconverter and " "the receiver are long, higher voltage may be required.\n" "Not all receivers support this.")</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LNB_LOW_TEXT</name></cpp:macro> <cpp:value>N_("Local oscillator low frequency (kHz)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LNB_HIGH_TEXT</name></cpp:macro> <cpp:value>N_("Local oscillator high frequency (kHz)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LNB_LONGTEXT</name></cpp:macro> <cpp:value>N_( "The downconverter (LNB) will subtract the local oscillator frequency " "from the satellite transmission frequency. " "The intermediate frequency (IF) on the RF cable is the result.")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LNB_SWITCH_TEXT</name></cpp:macro> <cpp:value>N_("Universal LNB switch frequency (kHz)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LNB_SWITCH_LONGTEXT</name></cpp:macro> <cpp:value>N_( "If the satellite transmission frequency exceeds the switch frequency, " "the oscillator high frequency will be used as reference. " "Furthermore the automatic continuous 22kHz tone will be sent.")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TONE_TEXT</name></cpp:macro> <cpp:value>N_("Continuous 22kHz tone")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TONE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "A continuous tone at 22kHz can be sent on the cable. " "This normally selects the higher frequency band from a universal LNB.")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SATNO_TEXT</name></cpp:macro> <cpp:value>N_("DiSEqC LNB number")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SATNO_LONGTEXT</name></cpp:macro> <cpp:value>N_( "If the satellite receiver is connected to multiple " "low noise block-downconverters (LNB) through a DiSEqC 1.0 switch, " "the correct LNB can be selected (1 to 4). " "If there is no switch, this parameter should be 0.")</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_DVB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>satno_vlc</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>satno_user</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Unspecified"</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"A/1"</literal></expr>, <expr><literal type="string">"B/2"</literal></expr>, <expr><literal type="string">"C/3"</literal></expr>, <expr><literal type="string">"D/4"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNCOMMITTED_TEXT</name></cpp:macro> <cpp:value>N_("Uncommitted DiSEqC LNB number")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNCOMMITTED_LONGTEXT</name></cpp:macro> <cpp:value>N_( "If the satellite receiver is connected to multiple " "low noise block-downconverters (LNB) through a cascade formed from " "DiSEqC 1.1 uncommitted switch and DiSEqC 1.0 committed switch, " "the correct uncommitted LNB can be selected (1 to 4). " "If there is no uncommitted switch, this parameter should be 0.")</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETID_TEXT</name></cpp:macro> <cpp:value>N_("Network identifier")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AZIMUTH_TEXT</name></cpp:macro> <cpp:value>N_("Satellite azimuth")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AZIMUTH_LONGTEXT</name></cpp:macro> <cpp:value>N_("Satellite azimuth in tenths of degree")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELEVATION_TEXT</name></cpp:macro> <cpp:value>N_("Satellite elevation")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELEVATION_LONGTEXT</name></cpp:macro> <cpp:value>N_("Satellite elevation in tenths of degree")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONGITUDE_TEXT</name></cpp:macro> <cpp:value>N_("Satellite longitude")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONGITUDE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Satellite longitude in tenths of degree. West is negative.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGE_TEXT</name></cpp:macro> <cpp:value>N_("Satellite range code")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Satellite range code as defined by manufacturer " "e.g. DISEqC switch code")</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAJOR_CHANNEL_TEXT</name></cpp:macro> <cpp:value>N_("Major channel")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINOR_CHANNEL_TEXT</name></cpp:macro> <cpp:value>N_("ATSC minor channel")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PHYSICAL_CHANNEL_TEXT</name></cpp:macro> <cpp:value>N_("Physical channel")</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name> <argument_list>(<argument>N_(<literal type="string">"DTV"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name> <argument_list>(<argument>N_(<literal type="string">"Digital Television and Radio"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name> <argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name> <argument_list>(<argument>SUBCAT_INPUT_ACCESS</argument>)</argument_list></macro>
<macro><name>set_capability</name> <argument_list>(<argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name> <argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>add_shortcut</name> <argument_list>(<argument><literal type="string">"dtv"</literal></argument>, <argument><literal type="string">"tv"</literal></argument>, <argument><literal type="string">"dvb"</literal></argument>, 
<argument><literal type="string">"cable"</literal></argument>, <argument><literal type="string">"dvb-c"</literal></argument>, <argument><literal type="string">"cqam"</literal></argument>, <argument><literal type="string">"isdb-c"</literal></argument>,
<argument><literal type="string">"satellite"</literal></argument>, <argument><literal type="string">"dvb-s"</literal></argument>, <argument><literal type="string">"dvb-s2"</literal></argument>, <argument><literal type="string">"isdb-s"</literal></argument>,
<argument><literal type="string">"terrestrial"</literal></argument>, <argument><literal type="string">"dvb-t"</literal></argument>, <argument><literal type="string">"dvb-t2"</literal></argument>, <argument><literal type="string">"isdb-t"</literal></argument>, <argument><literal type="string">"atsc"</literal></argument>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
,<argument><literal type="string">"dvbt"</literal></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_DVB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-adapter"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ADAPTER_TEXT</argument>, <argument>ADAPTER_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-device"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>DEVICE_TEXT</argument>, <argument>DEVICE_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_bool</name> <argument_list>(<argument><literal type="string">"dvb-budget-mode"</literal></argument>, <argument>false</argument>, <argument>BUDGET_TEXT</argument>, <argument>BUDGET_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-adapter"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>ADAPTER_TEXT</argument>, <argument>ADAPTER_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_string</name> <argument_list>(<argument><literal type="string">"dvb-network-name"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>NAME_TEXT</argument>, <argument>NAME_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_string</name> <argument_list>(<argument><literal type="string">"dvb-create-name"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>CREATE_TEXT</argument>, <argument>CREATE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_private</name> <argument_list>()</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-frequency"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>FREQ_TEXT</argument>, <argument>FREQ_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">107999999</literal></argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-inversion"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>INVERSION_TEXT</argument>, <argument>INVERSION_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_list</name> <argument_list>(<argument>auto_off_on_vlc</argument>, <argument>auto_off_on_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>

<macro><name>set_section</name> <argument_list>(<argument>N_(<literal type="string">"Terrestrial reception parameters"</literal>)</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-bandwidth"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>BANDWIDTH_TEXT</argument>, <argument>BANDWIDTH_TEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_list</name> <argument_list>(<argument>bandwidth_vlc</argument>, <argument>bandwidth_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-transmission"</literal></argument>, <argument><literal type="number">0</literal></argument>,
<argument>TRANSMISSION_TEXT</argument>, <argument>TRANSMISSION_TEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_list</name> <argument_list>(<argument>transmission_vlc</argument>, <argument>transmission_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_string</name> <argument_list>(<argument><literal type="string">"dvb-guard"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>GUARD_TEXT</argument>, <argument>GUARD_TEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_string_list</name> <argument_list>(<argument>guard_vlc</argument>, <argument>guard_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>

<macro><name>set_section</name> <argument_list>(<argument>N_(<literal type="string">"DVB-T reception parameters"</literal>)</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>add_string</name> <argument_list>(<argument><literal type="string">"dvb-code-rate-hp"</literal></argument>, <argument><literal type="string">""</literal></argument>,
<argument>CODE_RATE_HP_TEXT</argument>, <argument>CODE_RATE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_string_list</name> <argument_list>(<argument>code_rate_vlc</argument>, <argument>code_rate_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_string</name> <argument_list>(<argument><literal type="string">"dvb-code-rate-lp"</literal></argument>, <argument><literal type="string">""</literal></argument>,
<argument>CODE_RATE_LP_TEXT</argument>, <argument>CODE_RATE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_string_list</name> <argument_list>(<argument>code_rate_vlc</argument>, <argument>code_rate_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-hierarchy"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>HIERARCHY_TEXT</argument>, <argument>HIERARCHY_TEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_list</name> <argument_list>(<argument>hierarchy_vlc</argument>, <argument>hierarchy_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-plp-id"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>PLP_ID_TEXT</argument>, <argument>PLP_ID_TEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>

<macro><name>set_section</name> <argument_list>(<argument>N_(<literal type="string">"ISDB-T reception parameters"</literal>)</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>add_string</name> <argument_list>(<argument><literal type="string">"dvb-a-modulation"</literal></argument>, <argument>NULL</argument>,
<argument>MODULATION_A_TEXT</argument>, <argument>MODULATION_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_string_list</name> <argument_list>(<argument>modulation_vlc</argument>, <argument>modulation_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_string</name> <argument_list>(<argument><literal type="string">"dvb-a-fec"</literal></argument>, <argument>NULL</argument>, <argument>CODE_RATE_A_TEXT</argument>, <argument>CODE_RATE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_string_list</name> <argument_list>(<argument>code_rate_vlc</argument>, <argument>code_rate_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-a-count"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>SEGMENT_COUNT_A_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">13</literal></argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-a-interleaving"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>TIME_INTERLEAVING_A_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_string</name> <argument_list>(<argument><literal type="string">"dvb-b-modulation"</literal></argument>, <argument>NULL</argument>,
<argument>MODULATION_B_TEXT</argument>, <argument>MODULATION_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_string_list</name> <argument_list>(<argument>modulation_vlc</argument>, <argument>modulation_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_string</name> <argument_list>(<argument><literal type="string">"dvb-b-fec"</literal></argument>, <argument>NULL</argument>, <argument>CODE_RATE_B_TEXT</argument>, <argument>CODE_RATE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_string_list</name> <argument_list>(<argument>code_rate_vlc</argument>, <argument>code_rate_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-b-count"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>SEGMENT_COUNT_B_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">13</literal></argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-b-interleaving"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>TIME_INTERLEAVING_B_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_string</name> <argument_list>(<argument><literal type="string">"dvb-c-modulation"</literal></argument>, <argument>NULL</argument>,
<argument>MODULATION_C_TEXT</argument>, <argument>MODULATION_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_string_list</name> <argument_list>(<argument>modulation_vlc</argument>, <argument>modulation_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_string</name> <argument_list>(<argument><literal type="string">"dvb-c-fec"</literal></argument>, <argument>NULL</argument>, <argument>CODE_RATE_C_TEXT</argument>, <argument>CODE_RATE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_string_list</name> <argument_list>(<argument>code_rate_vlc</argument>, <argument>code_rate_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-c-count"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>SEGMENT_COUNT_C_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">13</literal></argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-c-interleaving"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>TIME_INTERLEAVING_C_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>

<macro><name>set_section</name> <argument_list>(<argument>N_(<literal type="string">"Cable and satellite reception parameters"</literal>)</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>add_string</name> <argument_list>(<argument><literal type="string">"dvb-modulation"</literal></argument>, <argument>NULL</argument>,
<argument>MODULATION_TEXT</argument>, <argument>MODULATION_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_string_list</name> <argument_list>(<argument>modulation_vlc</argument>, <argument>modulation_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-srate"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>SRATE_TEXT</argument>, <argument>SRATE_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument>UINT64_C(<literal type="number">0xffffffff</literal>)</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_string</name> <argument_list>(<argument><literal type="string">"dvb-fec"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>CODE_RATE_TEXT</argument>, <argument>CODE_RATE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_string_list</name> <argument_list>(<argument>code_rate_vlc</argument>, <argument>code_rate_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>

<macro><name>set_section</name> <argument_list>(<argument>N_(<literal type="string">"DVB-S2 parameters"</literal>)</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-stream"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>STREAM_ID_TEXT</argument>, <argument>STREAM_ID_TEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-pilot"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>PILOT_TEXT</argument>, <argument>PILOT_TEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_list</name> <argument_list>(<argument>auto_off_on_vlc</argument>, <argument>auto_off_on_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-rolloff"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>ROLLOFF_TEXT</argument>, <argument>ROLLOFF_TEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_list</name> <argument_list>(<argument>rolloff_vlc</argument>, <argument>rolloff_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>

<macro><name>set_section</name> <argument_list>(<argument>N_(<literal type="string">"ISDB-S parameters"</literal>)</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-ts-id"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>TS_ID_TEXT</argument>, <argument>TS_ID_TEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">0xffff</literal></argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>

<macro><name>set_section</name> <argument_list>(<argument>N_(<literal type="string">"Satellite equipment control"</literal>)</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>add_string</name> <argument_list>(<argument><literal type="string">"dvb-polarization"</literal></argument>, <argument><literal type="string">""</literal></argument>,
<argument>POLARIZATION_TEXT</argument>, <argument>POLARIZATION_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>change_string_list</name> <argument_list>(<argument>polarization_vlc</argument>, <argument>polarization_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-voltage"</literal></argument>, <argument><literal type="number">13</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">18</literal></argument>)</argument_list></macro>
<macro><name>change_private</name> <argument_list>()</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_DVB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_bool</name> <argument_list>(<argument><literal type="string">"dvb-high-voltage"</literal></argument>, <argument>false</argument>,
<argument>HIGH_VOLTAGE_TEXT</argument>, <argument>HIGH_VOLTAGE_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-lnb-low"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>LNB_LOW_TEXT</argument>, <argument>LNB_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x7fffffff</literal></argument>)</argument_list></macro>
<macro><name>add_obsolete_integer</name> <argument_list>(<argument><literal type="string">"dvb-lnb-lof1"</literal></argument>)</argument_list></macro> 
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-lnb-high"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>LNB_HIGH_TEXT</argument>, <argument>LNB_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x7fffffff</literal></argument>)</argument_list></macro>
<macro><name>add_obsolete_integer</name> <argument_list>(<argument><literal type="string">"dvb-lnb-lof2"</literal></argument>)</argument_list></macro> 
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-lnb-switch"</literal></argument>, <argument><literal type="number">11700000</literal></argument>,
<argument>LNB_SWITCH_TEXT</argument>, <argument>LNB_SWITCH_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x7fffffff</literal></argument>)</argument_list></macro>
<macro><name>add_obsolete_integer</name> <argument_list>(<argument><literal type="string">"dvb-lnb-slof"</literal></argument>)</argument_list></macro> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_DVB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-satno"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>SATNO_TEXT</argument>, <argument>SATNO_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_list</name> <argument_list>(<argument>satno_vlc</argument>, <argument>satno_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-uncommitted"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>UNCOMMITTED_TEXT</argument>, <argument>UNCOMMITTED_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_list</name> <argument_list>(<argument>satno_vlc</argument>, <argument>satno_user</argument>)</argument_list></macro>
<macro><name>change_safe</name> <argument_list>()</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-tone"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>TONE_TEXT</argument>, <argument>TONE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_list</name> <argument_list>(<argument>auto_off_on_vlc</argument>, <argument>auto_off_on_user</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-network-id"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>NETID_TEXT</argument>, <argument>NETID_TEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-azimuth"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>AZIMUTH_TEXT</argument>, <argument>AZIMUTH_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-elevation"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ELEVATION_TEXT</argument>, <argument>ELEVATION_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-longitude"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>LONGITUDE_TEXT</argument>, <argument>LONGITUDE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_string</name> <argument_list>(<argument><literal type="string">"dvb-range"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>RANGE_TEXT</argument>, <argument>RANGE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>



<macro><name>set_section</name> <argument_list>(<argument>N_(<literal type="string">"ATSC reception parameters"</literal>)</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-major-channel"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>MAJOR_CHANNEL_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-minor-channel"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>MINOR_CHANNEL_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"dvb-physical-channel"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>PHYSICAL_CHANNEL_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>signal_poll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tuner_setup_t</name></type> <name>pf_setup</name></decl>;</decl_stmt>
}</block></struct></type> <name>access_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Read</name> <parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name> <parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>dtv_delivery_t</name></type> <name>GuessSystem</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>dtv_delivery_t</name></type> <name>GetDeliveryByScheme</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_scheme</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Tune</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>tuner_setup_t</name></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>var_InheritFrequency</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>tuner_setup_t</name></type> <name>dtv_get_delivery_tuner_setup</name><parameter_list>( <parameter><decl><type><name>dtv_delivery_t</name></type> <name>d</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>var_LocationParse</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>access</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument>, <argument><expr><literal type="string">"dvb-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><call><name>dvb_open</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dev</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dev</name></name> <operator>=</operator> <name>dev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>signal_poll</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pf_setup</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>freq</name> <init>= <expr><call><name>var_InheritFrequency</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>freq</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>dtv_delivery_t</name></type> <name>d</name> <init>= <expr><call><name>GuessSystem</name> <argument_list>(<argument><expr><name><name>access</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>d</name> <operator>!=</operator> <name>DTV_DELIVERY_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pf_setup</name></name> <operator>=</operator> <call><name>dtv_get_delivery_tuner_setup</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>pf_setup</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>Tune</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pf_setup</name></name></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"tuning to %"</literal><name>PRIu64</name><literal type="string">" Hz failed"</literal></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_dialog_display_error</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Digital broadcasting"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"The selected digital tuner does not support "</literal>
<literal type="string">"the specified parameters.\n"</literal>
<literal type="string">"Please check the preferences."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dvb_add_pid</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_block</name></name> <operator>=</operator> <name>Read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>Close</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dvb_close</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Read</name> <parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>eof</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFSIZE</name></cpp:macro> <cpp:value>(20*188)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_Alloc</name> <argument_list>(<argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>block</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name> <init>= <expr><call><name>dvb_read</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<return>return <expr><name>block</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name> <parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>dev</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>STREAM_CAN_SEEK</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_FASTSEEK</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_CONTROL_PACE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_GET_PTS_DELAY</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator>
<call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"live-caching"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>STREAM_GET_CONTENT_TYPE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><literal type="string">"video/MP2T"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_GET_SIGNAL</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>signal_poll</name></name><operator>++</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dvb_get_snr</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dvb_get_signal_strength</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>STREAM_SET_PRIVATE_ID_STATE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>pid</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>add</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pid</name> <operator>&gt;</operator> <literal type="number">0x1FFF</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>add</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dvb_add_pid</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dvb_remove_pid</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>STREAM_SET_PRIVATE_ID_CA</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>en50221_capmt_info_t</name> <modifier>*</modifier></type><name>pmt</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dvb_set_ca_pmt</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>pmt</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>STREAM_GET_PRIVATE_ID_STATE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>pid</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>on</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>on</name> <operator>=</operator> <ternary><condition><expr><call><name>likely</name><argument_list>(<argument><expr><name>pid</name> <operator>&lt;=</operator> <literal type="number">0x1FFF</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>dvb_get_pid_state</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Tune</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>tuner_setup_t</name></type> <name>pf_setup</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pf_setup</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>dvb_set_inversion</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-inversion"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>dvb_tune</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>var_InheritFrequency</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>freq</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-frequency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>freq</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>freq</name> <operator>&lt;</operator> <literal type="number">30000000</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name><literal type="string">" Hz carrier frequency is too low."</literal></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>freq</name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Info</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Assuming %"</literal><name>PRIu64</name><literal type="string">" Hz frequency instead."</literal></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>freq</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>var_InheritCodeRate</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>code_rate</name> <init>= <expr><call><name>var_InheritString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>code_rate</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_FEC_AUTO</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>code_rate</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>SCNu16</name><literal type="string">"/%"</literal><name>SCNu16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>code_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>v</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<return>return <expr><call><name>VLC_FEC</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"\"%s=%"</literal><name>PRIu16</name><literal type="string">"\" option is obsolete. "</literal>
<literal type="string">"Use \"%s=%"</literal><name>PRIu16</name><literal type="string">"/%"</literal><name>PRIu16</name><literal type="string">"\" instead."</literal></expr></argument>,
<argument><expr><name>varname</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>varname</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>VLC_FEC</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"\"fec=9\" option is obsolete."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></switch>
<return>return <expr><name>VLC_FEC_AUTO</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>modcmp</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strcasecmp</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var_InheritModulation</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mod</name> <init>= <expr><call><name>var_InheritString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>modulation_vlc</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>modulation_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lfind</name> <argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>modulation_vlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>modcmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>p</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>atoi</name> <argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"QPSK"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"QAM"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"8VSB"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"16QAM"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"32QAM"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">64</literal></expr>:</case> <expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"64QAM"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">128</literal></expr>:</case> <expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"128QAM"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">256</literal></expr>:</case> <expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"256QAM"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"\"modulation=%s\" option is obsolete. "</literal>
<literal type="string">"Use \"modulation=%s\" instead."</literal></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>var_InheritGuardInterval</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>guard</name> <init>= <expr><call><name>var_InheritString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-guard"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>guard</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_GUARD_AUTO</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>guard</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>SCNu16</name><literal type="string">"/%"</literal><name>SCNu16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>guard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>v</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"\"guard=%"</literal><name>PRIu16</name><literal type="string">"\" option is obsolete. "</literal>
<literal type="string">"Use \"guard=1/%"</literal><name>PRIu16</name><literal type="string">" instead."</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case>
<return>return <expr><call><name>VLC_GUARD</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>VLC_GUARD_AUTO</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>atsc_setup</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mod</name> <init>= <expr><call><name>var_InheritModulation</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-modulation"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>dvb_set_atsc</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cqam_setup</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mod</name> <init>= <expr><call><name>var_InheritModulation</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-modulation"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>dvb_set_cqam</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>dvbc_setup</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mod</name> <init>= <expr><call><name>var_InheritModulation</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-modulation"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fec</name> <init>= <expr><call><name>var_InheritCodeRate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-fec"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>srate</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-srate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>dvb_set_dvbc</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>srate</name></expr></argument>, <argument><expr><name>fec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name></type> <name>var_InheritPolarization</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>pol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>polstr</name> <init>= <expr><call><name>var_InheritString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-polarization"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>polstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pol</name> <operator>=</operator> <operator>*</operator><name>polstr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>polstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pol</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>pol</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pol</name> <operator>-=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>pol</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>voltage</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-voltage"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>voltage</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name>pol</name> <operator>=</operator> <literal type="char">'V'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">18</literal></expr>:</case> <expr_stmt><expr><name>pol</name> <operator>=</operator> <literal type="char">'H'</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"\"voltage=%u\" option is obsolete. "</literal>
<literal type="string">"Use \"polarization=%c\" instead."</literal></expr></argument>, <argument><expr><name>voltage</name></expr></argument>, <argument><expr><name>pol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pol</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sec_setup</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>pol</name> <init>= <expr><call><name>var_InheritPolarization</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>lowf</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-lnb-low"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>highf</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-lnb-high"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>switchf</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-lnb-switch"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dvb_set_sec</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>pol</name></expr></argument>, <argument><expr><name>lowf</name></expr></argument>, <argument><expr><name>highf</name></expr></argument>, <argument><expr><name>switchf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvbs_setup</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fec</name> <init>= <expr><call><name>var_InheritCodeRate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-fec"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>srate</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-srate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>dvb_set_dvbs</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>srate</name></expr></argument>, <argument><expr><name>fec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sec_setup</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvbs2_setup</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mod</name> <init>= <expr><call><name>var_InheritModulation</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-modulation"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fec</name> <init>= <expr><call><name>var_InheritCodeRate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-fec"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>srate</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-srate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pilot</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-pilot"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rolloff</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-rolloff"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>sid</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-stream"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>dvb_set_dvbs2</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>srate</name></expr></argument>, <argument><expr><name>fec</name></expr></argument>, <argument><expr><name>pilot</name></expr></argument>, <argument><expr><name>rolloff</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sec_setup</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>dvbt_setup</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mod</name> <init>= <expr><call><name>var_InheritModulation</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-modulation"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fec_hp</name> <init>= <expr><call><name>var_InheritCodeRate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-code-rate-hp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fec_lp</name> <init>= <expr><call><name>var_InheritCodeRate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-code-rate-lp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>guard</name> <init>= <expr><call><name>var_InheritGuardInterval</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bw</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-bandwidth"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tx</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-transmission"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-hierarchy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>dvb_set_dvbt</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>fec_hp</name></expr></argument>, <argument><expr><name>fec_lp</name></expr></argument>, <argument><expr><name>bw</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>guard</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvbt2_setup</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mod</name> <init>= <expr><call><name>var_InheritModulation</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-modulation"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fec</name> <init>= <expr><call><name>var_InheritCodeRate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-fec"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>guard</name> <init>= <expr><call><name>var_InheritGuardInterval</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bw</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-bandwidth"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>plp</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-plp-id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tx</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-transmission"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>dvb_set_dvbt2</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>fec</name></expr></argument>, <argument><expr><name>bw</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>guard</name></expr></argument>, <argument><expr><name>plp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>isdbc_setup</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mod</name> <init>= <expr><call><name>var_InheritModulation</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-modulation"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fec</name> <init>= <expr><call><name>var_InheritCodeRate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-fec"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>srate</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-srate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>dvb_set_isdbc</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>srate</name></expr></argument>, <argument><expr><name>fec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>isdbs_setup</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>ts_id</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-ts-id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>dvb_set_isdbs</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>ts_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sec_setup</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>isdbt_setup</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>isdbt_layer_t</name></type> <name><name>layers</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>guard</name> <init>= <expr><call><name>var_InheritGuardInterval</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bw</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-bandwidth"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tx</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"dvb-transmission"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>varname</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><literal type="string">"dvb-X-interleaving"</literal></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><literal type="string">"dvb-X-"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>varname</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'a'</literal> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>varname</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"modulation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>modulation</name> <operator>=</operator> <call><name>var_InheritModulation</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>varname</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"fec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code_rate</name> <operator>=</operator> <call><name>var_InheritCodeRate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>varname</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>segment_count</name> <operator>=</operator> <call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>varname</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"interleaving"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time_interleaving</name> <operator>=</operator> <call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>dvb_set_isdbt</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>bw</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>guard</name></expr></argument>, <argument><expr><name>layers</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>dtv_delivery_t</name></type> <name>delivery</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tuner_setup_t</name> <specifier>const</specifier></type> <name>pf_setup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_scheme</name></decl>;</decl_stmt>
}</block> <decl><name><name>delsys_mappings</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>DTV_DELIVERY_ATSC</name></expr>, <expr><name>atsc_setup</name></expr>, <expr><literal type="string">"atsc"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTV_DELIVERY_CQAM</name></expr>, <expr><name>cqam_setup</name></expr>, <expr><literal type="string">"cqam"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTV_DELIVERY_DVB_C</name></expr>, <expr><name>dvbc_setup</name></expr>, <expr><literal type="string">"dvb-c"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTV_DELIVERY_DVB_C2</name></expr>, <expr><name>dvbc_setup</name></expr>, <expr><literal type="string">"dvb-c2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTV_DELIVERY_DVB_S</name></expr>, <expr><name>dvbs_setup</name></expr>, <expr><literal type="string">"dvb-s"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTV_DELIVERY_DVB_S2</name></expr>, <expr><name>dvbs2_setup</name></expr>, <expr><literal type="string">"dvb-s2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTV_DELIVERY_DVB_T</name></expr>, <expr><name>dvbt_setup</name></expr>, <expr><literal type="string">"dvb-t"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTV_DELIVERY_DVB_T2</name></expr>, <expr><name>dvbt2_setup</name></expr>, <expr><literal type="string">"dvb-t2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTV_DELIVERY_ISDB_C</name></expr>, <expr><name>isdbc_setup</name></expr>, <expr><literal type="string">"isdb-c"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTV_DELIVERY_ISDB_S</name></expr>, <expr><name>isdbs_setup</name></expr>, <expr><literal type="string">"isdb-s"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>DTV_DELIVERY_ISDB_T</name></expr>, <expr><name>isdbt_setup</name></expr>, <expr><literal type="string">"isdb-t"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><name>tuner_setup_t</name></type> <name>dtv_get_delivery_tuner_setup</name><parameter_list>( <parameter><decl><type><name>dtv_delivery_t</name></type> <name>d</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>delsys_mappings</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>delsys_mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delivery</name> <operator>==</operator> <name>d</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>delsys_mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pf_setup</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>dtv_delivery_t</name></type> <name>GetDeliveryByScheme</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_scheme</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>delsys_mappings</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>psz_scheme</name></expr></argument>, <argument><expr><name><name>delsys_mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_scheme</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>delsys_mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delivery</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>DTV_DELIVERY_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>dtv_delivery_t</name></type> <name>GetSingleDelivery</name><parameter_list>( <parameter><decl><type><name>dtv_delivery_t</name></type> <name>d</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>DTV_DELIVERY_NONE</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>ctz</name><argument_list>( <argument><expr><name>d</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>dtv_delivery_t</name></type> <name>GuessSystem</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scheme</name></decl></parameter>, <parameter><decl><type><name>dvb_device_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>dtv_delivery_t</name></type> <name>d</name> <init>= <expr><call><name>GetDeliveryByScheme</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>d</name> <operator>!=</operator> <name>DTV_DELIVERY_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>d</name></expr>;</return></block_content></block></if></if_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>systems</name> <init>= <expr><call><name>dvb_enum_systems</name> <argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>systems</name> <operator>&amp;=</operator> <operator>~</operator><name>DTV_DELGROUP_G2</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>systems</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><literal type="string">"cable"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return <expr><call><name>GetSingleDelivery</name><argument_list>(<argument><expr><name>systems</name> <operator>&amp;</operator> <name>DTV_DELGROUP_CABLE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><literal type="string">"satellite"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return <expr><call><name>GetSingleDelivery</name><argument_list>(<argument><expr><name>systems</name> <operator>&amp;</operator> <name>DTV_DELGROUP_SAT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><literal type="string">"terrestrial"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return <expr><call><name>GetSingleDelivery</name><argument_list>(<argument><expr><name>systems</name> <operator>&amp;</operator> <name>DTV_DELGROUP_TERRES</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<return>return <expr><call><name>GetSingleDelivery</name><argument_list>(<argument><expr><name>systems</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>DTV_DELIVERY_NONE</name></expr>;</return>
</block_content>}</block></function>
</unit>
