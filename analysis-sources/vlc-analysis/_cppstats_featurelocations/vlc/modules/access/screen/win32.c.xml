<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\screen\win32.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screen.h"</cpp:file></cpp:include>

<struct>struct <name>screen_data_t</name>
<block>{
<decl_stmt><decl><type><name>HDC</name></type> <name>hdc_src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>hdc_dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BITMAPINFO</name></type> <name>bmi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HGDIOBJ</name></type> <name>hgdi_backup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POINT</name></type> <name>ptl</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>i_fragment_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_fragment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>
}</block>;</struct>

















<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>FromScreenCoordinates</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>POINT</name> <modifier>*</modifier></type><name>p_point</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>screen_data_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_point</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>ptl</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_point</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>ptl</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ToScreenCoordinates</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>POINT</name> <modifier>*</modifier></type><name>p_point</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>screen_data_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_point</name><operator>-&gt;</operator><name>x</name></name> <operator>-=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>ptl</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_point</name><operator>-&gt;</operator><name>y</name></name> <operator>-=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>ptl</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>screen_InitCapture</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>screen_data_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_chroma</name></decl>, <decl><type ref="prev"/><name>i_bits_per_pixel</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <name>p_data</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>screen_data_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_data</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>hdc_src</name></name> <operator>=</operator> <call><name>CreateDC</name><argument_list>( <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"DISPLAY"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_data</name><operator>-&gt;</operator><name>hdc_src</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot get device context"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>hdc_dst</name></name> <operator>=</operator> <call><name>CreateCompatibleDC</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>hdc_src</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_data</name><operator>-&gt;</operator><name>hdc_dst</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot get compat device context"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>hdc_src</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_bits_per_pixel</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>hdc_src</name></name></expr></argument>, <argument><expr><name>BITSPIXEL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>( <expr><name>i_bits_per_pixel</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case> 
<expr_stmt><expr><name>i_chroma</name> <operator>=</operator> <name>VLC_CODEC_RGB8</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<case>case <expr><literal type="number">16</literal></expr>:</case> 
<expr_stmt><expr><name>i_chroma</name> <operator>=</operator> <name>VLC_CODEC_RGB15</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<expr_stmt><expr><name>i_chroma</name> <operator>=</operator> <name>VLC_CODEC_RGB24</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">32</literal></expr>:</case>
<expr_stmt><expr><name>i_chroma</name> <operator>=</operator> <name>VLC_CODEC_RGB32</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unknown screen depth %i"</literal></expr></argument>, <argument><expr><name>i_bits_per_pixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteDC</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>hdc_dst</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>hdc_src</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>i_chroma</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>( <argument><expr><name>SM_CXVIRTUALSCREEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>( <argument><expr><name>SM_CYVIRTUALSCREEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <name>i_bits_per_pixel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>i_chroma</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_SRGB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>color_range</name></name> <operator>=</operator> <name>COLOR_RANGE_FULL</name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name>i_chroma</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_RGB15</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_rmask</name></name> <operator>=</operator> <literal type="number">0x7c00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_gmask</name></name> <operator>=</operator> <literal type="number">0x03e0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bmask</name></name> <operator>=</operator> <literal type="number">0x001f</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_RGB24</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_rmask</name></name> <operator>=</operator> <literal type="number">0x00ff0000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_gmask</name></name> <operator>=</operator> <literal type="number">0x0000ff00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bmask</name></name> <operator>=</operator> <literal type="number">0x000000ff</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_RGB32</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_rmask</name></name> <operator>=</operator> <literal type="number">0x00ff0000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_gmask</name></name> <operator>=</operator> <literal type="number">0x0000ff00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bmask</name></name> <operator>=</operator> <literal type="number">0x000000ff</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unknown RGB masks"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>ptl</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator> <call><name>GetSystemMetrics</name><argument_list>( <argument><expr><name>SM_XVIRTUALSCREEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>ptl</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator> <call><name>GetSystemMetrics</name><argument_list>( <argument><expr><name>SM_YVIRTUALSCREEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>screen_CloseCapture</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>screen_data_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>p_block</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_block</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>hgdi_backup</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SelectObject</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>hdc_dst</name></name></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>hgdi_backup</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DeleteDC</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>hdc_dst</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>hdc_src</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>block_sys_t</name>
<block>{
<decl_stmt><decl><type><name>block_t</name></type> <name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HBITMAP</name></type> <name>hbmp</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CaptureBlockRelease</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator>struct <name>block_sys_t</name> <operator>*</operator><operator>)</operator><name>p_block</name><operator>)</operator><operator>-&gt;</operator><name>hbmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_block_callbacks</name></name></type> <name>CaptureBlockCallbacks</name> <init>=
<expr><block>{
<expr><name>CaptureBlockRelease</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>CaptureBlockNew</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>screen_data_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>block_sys_t</name></name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HBITMAP</name></type> <name>hbmp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biSize</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_val</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biWidth</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biHeight</name></name> <operator>=</operator> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biPlanes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biBitCount</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biCompression</name></name> <operator>=</operator> <name>BI_RGB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biSizeImage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biXPelsPerMeter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biYPelsPerMeter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biClrUsed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biClrImportant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"screen-fragment-size"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_fragment_size</name></name> <operator>=</operator> <ternary><condition><expr><name>i_val</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>i_val</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_fragment_size</name></name> <operator>=</operator> <ternary><condition><expr><name>i_val</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr> ?</condition><then>
<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr> </then><else>:
<expr><name><name>p_data</name><operator>-&gt;</operator><name>i_fragment_size</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_fps</name></name> <operator>*=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name><operator>/</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_fragment_size</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_incr</name></name> <operator>=</operator> <call><name>vlc_tick_rate_duration</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_fps</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_fragment</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>hbmp</name> <operator>=</operator> <call><name>CreateDIBSection</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>hdc_dst</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_data</name><operator>-&gt;</operator><name>bmi</name></name></expr></argument>, <argument><expr><name>DIB_RGB_COLORS</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>p_buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>hbmp</name> <operator>||</operator> <operator>!</operator><name>p_buffer</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot create bitmap"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_data</name><operator>-&gt;</operator><name>hgdi_backup</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>hgdi_backup</name></name> <operator>=</operator> <call><name>SelectObject</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>hdc_dst</name></name></expr></argument>, <argument><expr><name>hbmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SelectObject</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>hdc_dst</name></name></expr></argument>, <argument><expr><name>hbmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_data</name><operator>-&gt;</operator><name>hgdi_backup</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot select bitmap"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>p_block</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>block_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_stride</name> <init>=
<expr><operator>(</operator> <operator>(</operator> <operator>(</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>)</operator> <operator>+</operator> <literal type="number">31</literal> <operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">31</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_buffer</name> <operator>=</operator> <name>i_stride</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CaptureBlockCallbacks</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>hbmp</name></name> <operator>=</operator> <name>hbmp</name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>self</name></name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if<condition>( <expr><name>hbmp</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DeleteObject</name><argument_list>( <argument><expr><name>hbmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>screen_Capture</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>screen_data_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_fragment</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>p_data</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <call><name>CaptureBlockNew</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot get block"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_follow_mouse</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>POINT</name></type> <name>pos</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetCursorPos</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FromScreenCoordinates</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FollowMouse</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>y</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>POINT</name></type> <name>top_left</name> <init>= <expr><block>{ <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_left</name></name></expr>, <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_top</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ToScreenCoordinates</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top_left</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>BitBlt</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>hdc_dst</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_fragment</name></name> <operator>*</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_fragment_size</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_fragment_size</name></name></expr></argument>,
<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>hdc_src</name></name></expr></argument>, <argument><expr><name><name>top_left</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>top_left</name><operator>.</operator><name>y</name></name> <operator>+</operator>
<name><name>p_data</name><operator>-&gt;</operator><name>i_fragment</name></name> <operator>*</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_fragment_size</name></name></expr></argument>,
<argument><expr><name>SRCCOPY</name> <operator>|</operator> <name>CAPTUREBLT</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"error during BitBlt()"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_fragment</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_fragment</name></name> <operator>%</operator>
<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name><operator>/</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_fragment_size</name></name><operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name><name>p_data</name><operator>-&gt;</operator><name>p_block</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_fragment</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mouse</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>POINT</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetCursorPos</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FromScreenCoordinates</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RenderCursor</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
