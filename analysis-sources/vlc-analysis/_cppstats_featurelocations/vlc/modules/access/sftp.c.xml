<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\sftp.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_keystore.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libssh2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libssh2_sftp.h&gt;</cpp:file></cpp:include>





<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_TEXT</name></cpp:macro> <cpp:value>N_("SFTP port")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_LONGTEXT</name></cpp:macro> <cpp:value>N_("SFTP port number to use on the server")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_TEXT</name></cpp:macro> <cpp:value>N_("Username")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_LONGTEXT</name></cpp:macro> <cpp:value>N_("Username that will be used for the connection, " "if no username is set in the URL.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASS_TEXT</name></cpp:macro> <cpp:value>N_("Password")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Password that will be used for the connection, " "if no username or password are set in URL.")</cpp:value></cpp:define>


<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"SFTP"</literal></argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"SFTP input"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_ACCESS</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"sftp-port"</literal></argument>, <argument><literal type="number">22</literal></argument>, <argument>PORT_TEXT</argument>, <argument>PORT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument><literal type="string">"sftp-user"</literal></argument>, <argument>NULL</argument>, <argument>USER_TEXT</argument>, <argument>USER_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_password</name><argument_list>(<argument><literal type="string">"sftp-pwd"</literal></argument>, <argument>NULL</argument>, <argument>PASS_TEXT</argument>, <argument>PASS_LONGTEXT</argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"sftp"</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>





<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Read</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Seek</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DirRead</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_socket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBSSH2_SESSION</name><modifier>*</modifier></type> <name>ssh_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBSSH2_SFTP</name><modifier>*</modifier></type> <name>sftp_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBSSH2_SFTP_HANDLE</name><modifier>*</modifier></type> <name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>filesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_base_url</name></decl>;</decl_stmt>
}</block></struct></type> <name>access_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AuthKeyAgent</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_username</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_result</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBSSH2_AGENT</name> <modifier>*</modifier></type><name>p_sshagent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>libssh2_agent_publickey</name></name> <modifier>*</modifier></type><name>p_identity</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>p_prev_identity</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_username</name> <operator>||</operator> <operator>!</operator><name><name>psz_username</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_sshagent</name> <operator>=</operator> <call><name>libssh2_agent_init</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sshagent</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize key agent"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bailout</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>libssh2_agent_connect</name><argument_list>( <argument><expr><name>p_sshagent</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failed to connect key agent"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bailout</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>libssh2_agent_list_identities</name><argument_list>( <argument><expr><name>p_sshagent</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failed to request identities"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bailout</name>;</goto>
</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><call><name>libssh2_agent_get_identity</name><argument_list>( <argument><expr><name>p_sshagent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_identity</name></expr></argument>, <argument><expr><name>p_prev_identity</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Using key %s"</literal></expr></argument>, <argument><expr><name><name>p_identity</name><operator>-&gt;</operator><name>comment</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>libssh2_agent_userauth</name><argument_list>( <argument><expr><name>p_sshagent</name></expr></argument>, <argument><expr><name>psz_username</name></expr></argument>, <argument><expr><name>p_identity</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Public key agent authentication succeeded"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_result</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>
<goto>goto <name>bailout</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Public key agent authentication failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_prev_identity</name> <operator>=</operator> <name>p_identity</name></expr>;</expr_stmt>
</block_content>}</block></while>

<label><name>bailout</name>:</label>
<if_stmt><if>if<condition>( <expr><name>p_sshagent</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libssh2_agent_disconnect</name><argument_list>( <argument><expr><name>p_sshagent</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libssh2_agent_free</name><argument_list>( <argument><expr><name>p_sshagent</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i_result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>AuthPublicKey</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_home</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_username</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_result</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_keyfile1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_keyfile2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_username</name> <operator>||</operator> <operator>!</operator><name><name>psz_username</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_keyfile1</name></expr></argument>, <argument><expr><literal type="string">"%s/.ssh/id_rsa.pub"</literal></expr></argument>, <argument><expr><name>psz_home</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_keyfile2</name></expr></argument>, <argument><expr><literal type="string">"%s/.ssh/id_rsa"</literal></expr></argument>, <argument><expr><name>psz_home</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>bailout</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>libssh2_userauth_publickey_fromfile</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>psz_username</name></expr></argument>, <argument><expr><name>psz_keyfile1</name></expr></argument>, <argument><expr><name>psz_keyfile2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Public key authentication failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bailout</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Public key authentication succeeded"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_result</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<label><name>bailout</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_keyfile1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_keyfile2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SSHSessionDestroy</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssh_session</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>libssh2_session_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssh_session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SSHSessionInit</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_port</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name> <operator>=</operator> <call><name>net_Connect</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>psz_host</name></expr></argument>, <argument><expr><name>i_port</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssh_session</name></name> <operator>=</operator> <call><name>libssh2_session_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssh_session</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>
<while>while<condition>( <expr><operator>(</operator> <name>i_ret</name> <operator>=</operator> <call><name>libssh2_session_startup</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name></expr></argument> )</argument_list></call> <operator>)</operator>
<operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr> )</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>libssh2_session_set_blocking</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Impossible to open the connection to %s:%i"</literal></expr></argument>,
<argument><expr><name>psz_host</name></expr></argument>, <argument><expr><name>i_port</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSHSessionDestroy</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>p_access</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name><modifier>*</modifier></type> <name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_credential</name></type> <name>credential</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_session_username</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_home</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_result</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_access</name><operator>-&gt;</operator><name>psz_location</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>vlc_obj_calloc</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>access_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_socket</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><call><name>vlc_UrlParseFixup</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_credential_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>url</name><operator>.</operator><name>psz_path</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_path</name> <operator>=</operator> <call><name>vlc_uri_decode_duplicate</name><argument_list>( <argument><expr><name><name>url</name><operator>.</operator><name>psz_path</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_path</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>EMPTY_STR</name><argument_list>( <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Unable to extract host from %s"</literal></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>url</name><operator>.</operator><name>i_port</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_port</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"sftp-port"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_port</name> <operator>=</operator> <name><name>url</name><operator>.</operator><name>i_port</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>SSHSessionInit</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name>i_port</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>LIBSSH2_KNOWNHOSTS</name> <modifier>*</modifier></type><name>ssh_knownhosts</name> <init>= <expr><call><name>libssh2_knownhost_init</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>ssh_knownhosts</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_home</name> <operator>=</operator> <call><name>config_GetUserDir</name><argument_list>( <argument><expr><name>VLC_HOME_DIR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_knownhosts_file</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_knownhosts_file</name></expr></argument>, <argument><expr><literal type="string">"%s/.ssh/known_hosts"</literal></expr></argument>, <argument><expr><name>psz_home</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>libssh2_knownhost_readfile</name><argument_list>( <argument><expr><name>ssh_knownhosts</name></expr></argument>, <argument><expr><name>psz_knownhosts_file</name></expr></argument>,
<argument><expr><name>LIBSSH2_KNOWNHOST_FILE_OPENSSH</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failure reading known_hosts '%s'"</literal></expr></argument>, <argument><expr><name>psz_knownhosts_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_knownhosts_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fingerprint</name> <init>= <expr><call><name>libssh2_session_hostkey</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_type</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>libssh2_knownhost</name></name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>knownhost_fingerprint_algo</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>LIBSSH2_HOSTKEY_TYPE_RSA</name></expr>:</case>
<expr_stmt><expr><name>knownhost_fingerprint_algo</name> <operator>=</operator> <name>LIBSSH2_KNOWNHOST_KEY_SSHRSA</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LIBSSH2_HOSTKEY_TYPE_DSS</name></expr>:</case>
<expr_stmt><expr><name>knownhost_fingerprint_algo</name> <operator>=</operator> <name>LIBSSH2_KNOWNHOST_KEY_SSHDSS</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSSH2_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x010900</literal></expr></cpp:if>
<case>case <expr><name>LIBSSH2_HOSTKEY_TYPE_ECDSA_256</name></expr>:</case>
<expr_stmt><expr><name>knownhost_fingerprint_algo</name> <operator>=</operator> <name>LIBSSH2_KNOWNHOST_KEY_ECDSA_256</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LIBSSH2_HOSTKEY_TYPE_ECDSA_384</name></expr>:</case>
<expr_stmt><expr><name>knownhost_fingerprint_algo</name> <operator>=</operator> <name>LIBSSH2_KNOWNHOST_KEY_ECDSA_384</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LIBSSH2_HOSTKEY_TYPE_ECDSA_521</name></expr>:</case>
<expr_stmt><expr><name>knownhost_fingerprint_algo</name> <operator>=</operator> <name>LIBSSH2_KNOWNHOST_KEY_ECDSA_521</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Host uses unrecognized session-key algorithm"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libssh2_knownhost_free</name><argument_list>( <argument><expr><name>ssh_knownhosts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSSH2_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x010206</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>check</name> <init>= <expr><call><name>libssh2_knownhost_checkp</name><argument_list>( <argument><expr><name>ssh_knownhosts</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name>i_port</name></expr></argument>,
<argument><expr><name>fingerprint</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument>,
<argument><expr><name>LIBSSH2_KNOWNHOST_TYPE_PLAIN</name> <operator>|</operator>
<name>LIBSSH2_KNOWNHOST_KEYENC_RAW</name> <operator>|</operator>
<name>knownhost_fingerprint_algo</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>host</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>check</name> <init>= <expr><call><name>libssh2_knownhost_check</name><argument_list>( <argument><expr><name>ssh_knownhosts</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>,
<argument><expr><name>fingerprint</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument>,
<argument><expr><name>LIBSSH2_KNOWNHOST_TYPE_PLAIN</name> <operator>|</operator>
<name>LIBSSH2_KNOWNHOST_KEYENC_RAW</name> <operator>|</operator>
<name>knownhost_fingerprint_algo</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>host</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>libssh2_knownhost_free</name><argument_list>( <argument><expr><name>ssh_knownhosts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<switch>switch<condition>(<expr><name>check</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>LIBSSH2_KNOWNHOST_CHECK_FAILURE</name></expr>:</case>
<case>case <expr><name>LIBSSH2_KNOWNHOST_CHECK_NOTFOUND</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Unable to check the remote host"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LIBSSH2_KNOWNHOST_CHECK_MATCH</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Succesfuly matched the host"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LIBSSH2_KNOWNHOST_CHECK_MISMATCH</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"The host does not match !! The remote key changed !!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_credential_get</name><argument_list>( <argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"sftp-user"</literal></expr></argument>, <argument><expr><literal type="string">"sftp-pwd"</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_userauthlist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_publickey_tried</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>credential</name><operator>.</operator><name>psz_username</name></name> <operator>||</operator> <operator>!</operator><name><name>credential</name><operator>.</operator><name>psz_username</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_session_username</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_session_username</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>credential</name><operator>.</operator><name>psz_username</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_userauthlist</name> <operator>=</operator>
<call><name>libssh2_userauth_list</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name><name>credential</name><operator>.</operator><name>psz_username</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>credential</name><operator>.</operator><name>psz_username</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_session_username</name></expr></argument>, <argument><expr><name><name>credential</name><operator>.</operator><name>psz_username</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"The username changed, starting a new ssh session"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSHSessionDestroy</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>SSHSessionInit</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name>i_port</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_publickey_tried</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_session_username</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_session_username</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>credential</name><operator>.</operator><name>psz_username</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_userauthlist</name> <operator>=</operator>
<call><name>libssh2_userauth_list</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name><name>credential</name><operator>.</operator><name>psz_username</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>credential</name><operator>.</operator><name>psz_username</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_session_username</name> <operator>||</operator> <operator>!</operator><name>psz_userauthlist</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>



<if_stmt><if>if<condition>( <expr><call><name>strstr</name><argument_list>( <argument><expr><name>psz_userauthlist</name></expr></argument>, <argument><expr><literal type="string">"publickey"</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_publickey_tried</name></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name>b_publickey_tried</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>AuthKeyAgent</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>credential</name><operator>.</operator><name>psz_username</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name>
<operator>||</operator> <call><name>AuthPublicKey</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>psz_home</name></expr></argument>, <argument><expr><name><name>credential</name><operator>.</operator><name>psz_username</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strstr</name><argument_list>( <argument><expr><name>psz_userauthlist</name></expr></argument>, <argument><expr><literal type="string">"password"</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>credential</name><operator>.</operator><name>psz_password</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>libssh2_userauth_password</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,
<argument><expr><name><name>credential</name><operator>.</operator><name>psz_username</name></name></expr></argument>,
<argument><expr><name><name>credential</name><operator>.</operator><name>psz_password</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_credential_store</name><argument_list>( <argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"sftp auth failed for %s"</literal></expr></argument>, <argument><expr><name><name>credential</name><operator>.</operator><name>psz_username</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while<condition>( <expr><call><name>vlc_credential_get</name><argument_list>( <argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"sftp-user"</literal></expr></argument>, <argument><expr><literal type="string">"sftp-pwd"</literal></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"SFTP authentication"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Please enter a valid login and password for "</literal>
<literal type="string">"the sftp connexion to %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument> )</argument_list></call></expr> )</condition>;</do>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sftp_session</name></name> <operator>=</operator> <call><name>libssh2_sftp_init</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>sftp_session</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Unable to initialize the SFTP session"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_path</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_size</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_remote_home</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_remote_home</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_read</name> <operator>=</operator> <call><name>libssh2_sftp_symlink_ex</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>psz_remote_home</name></expr></argument>, <argument><expr><name>i_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>LIBSSH2_SFTP_REALPATH</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Impossible to get the Home directory"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_remote_home</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>psz_remote_home</name><index>[<expr><name>i_read</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_path</name> <operator>=</operator> <name>psz_remote_home</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>vlc_path2uri</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument>, <argument><expr><literal type="string">"sftp"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>base</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_base_url</name></name></expr></argument>, <argument><expr><literal type="string">"sftp://%s%s"</literal></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument>, <argument><expr><name>base</name> <operator>+</operator> <literal type="number">7</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>base</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>base</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>LIBSSH2_SFTP_ATTRIBUTES</name></type> <name>attributes</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>libssh2_sftp_stat</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attributes</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Impossible to get information about the remote path %s"</literal></expr></argument>, <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>LIBSSH2_SFTP_S_ISDIR</name><argument_list>( <argument><expr><name><name>attributes</name><operator>.</operator><name>permissions</name></name></expr></argument> )</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>libssh2_sftp_open</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument>, <argument><expr><name>LIBSSH2_FXF_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <name><name>attributes</name><operator>.</operator><name>filesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ACCESS_SET_CALLBACKS</name><argument_list>( <argument><expr><name>Read</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Control</name></expr></argument>, <argument><expr><name>Seek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>libssh2_sftp_opendir</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>=</operator> <name>DirRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>access_vaDirectoryControlHelper</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_base_url</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_base_url</name></name></expr></argument>, <argument><expr><literal type="string">"sftp://%s"</literal></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_base_url</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>psz_base_url</name><index>[ <expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_base_url</name><index>[ <expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>file</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Unable to open the remote path %s"</literal></expr></argument>, <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_home</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_session_username</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_credential_clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>credential</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i_result</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>p_access</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>file</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libssh2_sftp_close_handle</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>file</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>sftp_session</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libssh2_sftp_shutdown</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SSHSessionDestroy</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_base_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Read</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name> <init>= <expr><call><name>libssh2_sftp_read</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"read failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>Seek</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>p_access</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>libssh2_sftp_seek</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name><modifier>*</modifier></type> <name>pb_bool</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>STREAM_CAN_SEEK</name></expr>:</case>
<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_CAN_FASTSEEK</name></expr>:</case>
<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_CONTROL_PACE</name></expr>:</case>
<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_GET_SIZE</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>filesize</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_GET_PTS_DELAY</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator>
<call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"network-caching"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_SET_PAUSE_STATE</name></expr>:</case>
<break>break;</break>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>DirRead</name> <parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_current_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBSSH2_SFTP_ATTRIBUTES</name></type> <name>attrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_file</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_file</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_readdir_helper</name></name></type> <name>rdh</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_readdir_helper_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>p_current_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name>
<operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>!=</operator> <operator>(</operator> <name>err</name> <operator>=</operator> <call><name>libssh2_sftp_readdir</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>psz_file</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrs</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>err</name> <operator>==</operator> <name>LIBSSH2_ERROR_BUFFER_TOO_SMALL</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"skipped too long file name"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>err</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr> )</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"directory read failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_full_uri</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_uri</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_uri</name> <operator>=</operator> <call><name>vlc_uri_encode</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_uri</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_full_uri</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_base_url</name></name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name> <init>= <expr><ternary><condition><expr><call><name>LIBSSH2_SFTP_S_ISDIR</name><argument_list>( <argument><expr><name><name>attrs</name><operator>.</operator><name>permissions</name></name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><name>ITEM_TYPE_DIRECTORY</name></expr> </then><else>: <expr><name>ITEM_TYPE_FILE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_readdir_helper_additem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>psz_full_uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz_file</name></expr></argument>,
<argument><expr><name>i_type</name></expr></argument>, <argument><expr><name>ITEM_NET</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_full_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_readdir_helper_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
