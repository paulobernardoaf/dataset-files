<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\dvb\scan.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/dvbpsi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/descriptor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/pat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/dr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/demux.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/sdt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/nit.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dvb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scan_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../demux/dvb-text.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../mux/mpeg/dvbpsi_compat.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSI_PAT_PID</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_NIT_PID</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_SDT_PID</name></cpp:macro> <cpp:value>0x11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIT_CURRENT_NETWORK_TABLE_ID</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIT_OTHER_NETWORK_TABLE_ID</name></cpp:macro> <cpp:value>0x41</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDT_CURRENT_TS_TABLE_ID</name></cpp:macro> <cpp:value>0x42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDT_OTHER_TS_TABLE_ID</name></cpp:macro> <cpp:value>0x46</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETWORK_ID_RESERVED</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum
<block>{
<decl><name>SERVICE_TYPE_RESERVED</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>SERVICE_TYPE_DIGITAL_TELEVISION</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>SERVICE_TYPE_DIGITAL_RADIO</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>SERVICE_TYPE_DIGITAL_MPEG2_HD</name> <init>= <expr><literal type="number">0x11</literal></expr></init></decl>,
<decl><name>SERVICE_TYPE_DIGITAL_TELEVISION_AC_SD</name> <init>= <expr><literal type="number">0x16</literal></expr></init></decl>,
<decl><name>SERVICE_TYPE_DIGITAL_TELEVISION_AC_HD</name> <init>= <expr><literal type="number">0x19</literal></expr></init></decl>,
<decl><name>SERVICE_TYPE_DIGITAL_RADIO_AC</name> <init>= <expr><literal type="number">0x0A</literal></expr></init></decl>,
}</block></enum></type> <name>scan_service_type_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>scan_multiplex_t</name></name></type> <name>scan_multiplex_t</name>;</typedef>

<struct>struct <name>scan_service_t</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>scan_multiplex_t</name> <modifier>*</modifier></type><name>p_mplex</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>stickyref</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_original_network_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_program</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>scan_service_type_t</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_provider</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_channel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>b_crypted</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_original_network_name</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>scan_multiplex_t</name>
<block>{
<decl_stmt><decl><type><name>scan_tuner_config_t</name></type> <name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_network_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_ts_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_network_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_services</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scan_service_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_services</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_snr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_scanned</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_nit_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_sdt_version</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>scan_modulation_t</name></type> <name>modulation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_symbolrate_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_index</name></decl>;</decl_stmt>
}</block></struct></type> <name>scan_enumeration_t</name>;</typedef>

<struct>struct <name>scan_t</name>
<block>{
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scan_frontend_tune_cb</name></type> <name>pf_tune</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scan_demux_filter_cb</name></type> <name>pf_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scan_frontend_stats_cb</name></type> <name>pf_stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scan_demux_read_cb</name></type> <name>pf_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scan_service_notify_cb</name></type> <name>pf_notify_service</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cbdata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_dialog_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>scan_parameter_t</name></type> <name>parameter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_time_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_multiplex_toscan</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_multiplex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scan_multiplex_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_multiplex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_multiplexes_from_nit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>scan_list_entry_t</name> <modifier>*</modifier></type><name>p_scanlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_scanlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>scan_list_entry_t</name> <modifier>*</modifier></type><name>p_current</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>scan_enumeration_t</name></type> <name>spectrum</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>scan_tuner_config_t</name></type> <name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_snr</name></decl>;</decl_stmt>

<struct>struct
<block>{
<decl_stmt><decl><type><name>dvbpsi_pat_t</name> <modifier>*</modifier></type><name>p_pat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbpsi_sdt_t</name> <modifier>*</modifier></type><name>p_sdt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbpsi_nit_t</name> <modifier>*</modifier></type><name>p_nit</name></decl>;</decl_stmt>
}</block> <decl><name>local</name></decl>;</struct>

<struct>struct
<block>{
<decl_stmt><decl><type><name>dvbpsi_sdt_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_sdt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_sdt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbpsi_nit_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_nit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nit</name></decl>;</decl_stmt>
}</block> <decl><name>others</name></decl>;</struct>

<decl_stmt><decl><type><name>scan_type_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_use_nit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_nit_pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dvbpsi_t</name> <modifier>*</modifier></type><name>p_pathandle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbpsi_t</name> <modifier>*</modifier></type><name>p_sdthandle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbpsi_t</name> <modifier>*</modifier></type><name>p_nithandle</name></decl>;</decl_stmt>
}</block></struct></type> <name>scan_session_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>scan_session_t</name> <modifier>*</modifier></type> <name>scan_session_New</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>scan_tuner_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>scan_session_Destroy</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><name>scan_session_t</name> <modifier>*</modifier></type><name>p_session</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>scan_session_Push</name><parameter_list>( <parameter><decl><type><name>scan_session_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_packet</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>scan_session_GetTablesTimeout</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_session_t</name> <modifier>*</modifier></type><name>p_session</name></decl></parameter> )</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_tuner_config_Init</name><parameter_list>( <parameter><decl><type><name>scan_tuner_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>scan_parameter_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>coderate_lp</name></name> <operator>=</operator> <name>SCAN_CODERATE_AUTO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>coderate_hp</name></name> <operator>=</operator> <name>SCAN_CODERATE_AUTO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>inner_fec</name></name> <operator>=</operator> <name>SCAN_CODERATE_AUTO</name></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name><name>p_params</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SCAN_DVB_T</name></expr>:</case> <expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>delivery</name></name> <operator>=</operator> <name>SCAN_DELIVERY_DVB_T</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>SCAN_DVB_S</name></expr>:</case> <expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>delivery</name></name> <operator>=</operator> <name>SCAN_DELIVERY_DVB_S</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>SCAN_DVB_C</name></expr>:</case> <expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>delivery</name></name> <operator>=</operator> <name>SCAN_DELIVERY_DVB_C</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>delivery</name></name> <operator>=</operator> <name>SCAN_DELIVERY_UNKNOWN</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>p_params</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>scan_tuner_config_StandardValidate</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_tuner_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_frequency</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>p_cfg</name><operator>-&gt;</operator><name>i_frequency</name></name> <operator>==</operator> <name>UINT32_MAX</name> <operator>/</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SCAN_DVB_T</name> <operator>&amp;&amp;</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>i_bandwidth</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>scan_service_t</name> <modifier>*</modifier></type><name>scan_service_New</name><parameter_list>( <parameter><decl><type><name>uint16_t</name></type> <name>i_program</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>scan_service_t</name> <modifier>*</modifier></type><name>p_srv</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_srv</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_srv</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_srv</name><operator>-&gt;</operator><name>p_mplex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_srv</name><operator>-&gt;</operator><name>stickyref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_program</name></name> <operator>=</operator> <name>i_program</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_original_network_id</name></name> <operator>=</operator> <name>NETWORK_ID_RESERVED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_srv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SERVICE_TYPE_RESERVED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_srv</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_srv</name><operator>-&gt;</operator><name>psz_provider</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_srv</name><operator>-&gt;</operator><name>psz_original_network_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_srv</name><operator>-&gt;</operator><name>b_crypted</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>p_srv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_service_Delete</name><parameter_list>( <parameter><decl><type><name>scan_service_t</name> <modifier>*</modifier></type><name>p_srv</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>psz_original_network_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>psz_provider</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_srv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>decode_BCD</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name>input</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>output</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>short</name></type> <name>index</name><init>=<expr><literal type="number">28</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>index</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>output</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>input</name> <operator>&gt;&gt;</operator> <name>index</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for><empty_stmt>;</empty_stmt>
<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scan_service_type_Supported</name><parameter_list>( <parameter><decl><type><name>scan_service_type_t</name></type> <name>service_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>( <expr><name>service_type</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>SERVICE_TYPE_DIGITAL_TELEVISION</name></expr>:</case>
<case>case <expr><name>SERVICE_TYPE_DIGITAL_RADIO</name></expr>:</case>
<case>case <expr><name>SERVICE_TYPE_DIGITAL_MPEG2_HD</name></expr>:</case>
<case>case <expr><name>SERVICE_TYPE_DIGITAL_TELEVISION_AC_SD</name></expr>:</case>
<case>case <expr><name>SERVICE_TYPE_DIGITAL_TELEVISION_AC_HD</name></expr>:</case>
<case>case <expr><name>SERVICE_TYPE_DIGITAL_RADIO_AC</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>scan_multiplex_t</name> <modifier>*</modifier></type><name>scan_multiplex_New</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_tuner_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_ts_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>scan_multiplex_t</name> <modifier>*</modifier></type><name>p_mplex</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_mplex</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_mplex</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>cfg</name></name> <operator>=</operator> <operator>*</operator><name>p_cfg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>i_ts_id</name></name> <operator>=</operator> <name>i_ts_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>i_network_id</name></name> <operator>=</operator> <name>NETWORK_ID_RESERVED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>psz_network_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>i_services</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>pp_services</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>i_nit_version</name></name> <operator>=</operator> <name>UINT8_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>i_sdt_version</name></name> <operator>=</operator> <name>UINT8_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>i_snr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>b_scanned</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_mplex</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_multiplex_Clean</name><parameter_list>( <parameter><decl><type><name>scan_multiplex_t</name> <modifier>*</modifier></type><name>p_mplex</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_mplex</name><operator>-&gt;</operator><name>i_services</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>scan_service_Delete</name><argument_list>( <argument><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>pp_services</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>pp_services</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>psz_network_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_multiplex_Delete</name><parameter_list>( <parameter><decl><type><name>scan_multiplex_t</name> <modifier>*</modifier></type><name>p_mplex</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>scan_multiplex_Clean</name><argument_list>( <argument><expr><name>p_mplex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_mplex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>scan_multiplex_AddService</name><parameter_list>( <parameter><decl><type><name>scan_multiplex_t</name> <modifier>*</modifier></type><name>p_mplex</name></decl></parameter>, <parameter><decl><type><name>scan_service_t</name> <modifier>*</modifier></type><name>p_service</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_service</name><operator>-&gt;</operator><name>p_mplex</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>scan_service_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>pp_services</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>scan_service_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>p_mplex</name><operator>-&gt;</operator><name>i_services</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>pp_realloc</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pp_realloc</name><index>[<expr><name><name>p_mplex</name><operator>-&gt;</operator><name>i_services</name></name></expr>]</index></name> <operator>=</operator> <name>p_service</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>pp_services</name></name> <operator>=</operator> <name>pp_realloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>i_services</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_service</name><operator>-&gt;</operator><name>p_mplex</name></name> <operator>=</operator> <name>p_mplex</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>scan_service_t</name> <modifier>*</modifier></type> <name>scan_multiplex_FindService</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_multiplex_t</name> <modifier>*</modifier></type><name>p_mplex</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_program</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mplex</name><operator>-&gt;</operator><name>i_services</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_mplex</name><operator>-&gt;</operator><name>pp_services</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_program</name> <operator>==</operator> <name>i_program</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p_mplex</name><operator>-&gt;</operator><name>pp_services</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>scan_parameter_Init</name><parameter_list>( <parameter><decl><type><name>scan_parameter_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_dst</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>scan_parameter_Clean</name><parameter_list>( <parameter><decl><type><name>scan_parameter_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>psz_scanlist_file</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_parameter_Copy</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_parameter_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>scan_parameter_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>scan_parameter_Clean</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_dst</name> <operator>=</operator> <operator>*</operator><name>p_src</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_scanlist_file</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>psz_scanlist_file</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>psz_scanlist_file</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_Prepare</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>scan_parameter_t</name> <modifier>*</modifier></type><name>p_parameter</name></decl></parameter>, <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_parameter</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SCAN_DVB_S</name> <operator>&amp;&amp;</operator>
<name><name>p_parameter</name><operator>-&gt;</operator><name>psz_scanlist_file</name></name> <operator>&amp;&amp;</operator> <name><name>p_parameter</name><operator>-&gt;</operator><name>scanlist_format</name></name> <operator>==</operator> <name>FORMAT_DVBv3</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_scanlist</name></name> <operator>=</operator>
<call><name>scan_list_dvbv3_load</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name><name>p_parameter</name><operator>-&gt;</operator><name>psz_scanlist_file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_scan</name><operator>-&gt;</operator><name>i_scanlist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_scanlist</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"using satellite config file (%s)"</literal></expr></argument>, <argument><expr><name><name>p_parameter</name><operator>-&gt;</operator><name>psz_scanlist_file</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_parameter</name><operator>-&gt;</operator><name>psz_scanlist_file</name></name> <operator>&amp;&amp;</operator>
<name><name>p_parameter</name><operator>-&gt;</operator><name>scanlist_format</name></name> <operator>==</operator> <name>FORMAT_DVBv5</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_parameter</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SCAN_DVB_T</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_scanlist</name></name> <operator>=</operator> <call><name>scan_list_dvbv5_load</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>,
<argument><expr><name><name>p_parameter</name><operator>-&gt;</operator><name>psz_scanlist_file</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_scan</name><operator>-&gt;</operator><name>i_scanlist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_Debug_Parameters</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>scan_parameter_t</name> <modifier>*</modifier></type><name>p_parameter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>rgc_types</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="char">'T'</literal></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'C'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_parameter</name><operator>-&gt;</operator><name>type</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"DVB-%c scanning:"</literal></expr></argument>, <argument><expr><name><name>rgc_types</name><index>[ <expr><name><name>p_parameter</name><operator>-&gt;</operator><name>type</name></name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_parameter</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>SCAN_DVB_S</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" - frequency [%d, %d]"</literal></expr></argument>,
<argument><expr><name><name>p_parameter</name><operator>-&gt;</operator><name>frequency</name><operator>.</operator><name>i_min</name></name></expr></argument>, <argument><expr><name><name>p_parameter</name><operator>-&gt;</operator><name>frequency</name><operator>.</operator><name>i_max</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" - bandwidth [%d,%d]"</literal></expr></argument>,
<argument><expr><name><name>p_parameter</name><operator>-&gt;</operator><name>bandwidth</name><operator>.</operator><name>i_min</name></name></expr></argument>, <argument><expr><name><name>p_parameter</name><operator>-&gt;</operator><name>bandwidth</name><operator>.</operator><name>i_max</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" - exhaustive mode %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_parameter</name><operator>-&gt;</operator><name>b_exhaustive</name></name></expr> ?</condition><then> <expr><literal type="string">"on"</literal></expr> </then><else>: <expr><literal type="string">"off"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_parameter</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SCAN_DVB_C</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" - scannin modulations %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_parameter</name><operator>-&gt;</operator><name>b_modulation_set</name></name></expr> ?</condition><then> <expr><literal type="string">"off"</literal></expr> </then><else>: <expr><literal type="string">"on"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_parameter</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SCAN_DVB_S</name> <operator>&amp;&amp;</operator> <name><name>p_parameter</name><operator>-&gt;</operator><name>psz_scanlist_file</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" - satellite [%s]"</literal></expr></argument>, <argument><expr><name><name>p_parameter</name><operator>-&gt;</operator><name>psz_scanlist_file</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" - use NIT %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_parameter</name><operator>-&gt;</operator><name>b_use_nit</name></name></expr> ?</condition><then> <expr><literal type="string">"on"</literal></expr> </then><else>: <expr><literal type="string">"off"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" - FTA only %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_parameter</name><operator>-&gt;</operator><name>b_free_only</name></name></expr> ?</condition><then> <expr><literal type="string">"on"</literal></expr> </then><else>: <expr><literal type="string">"off"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>scan_t</name> <modifier>*</modifier></type><name>scan_New</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>scan_parameter_t</name> <modifier>*</modifier></type><name>p_parameter</name></decl></parameter>,
<parameter><decl><type><name>scan_frontend_tune_cb</name></type> <name>pf_frontend</name></decl></parameter>,
<parameter><decl><type><name>scan_frontend_stats_cb</name></type> <name>pf_status</name></decl></parameter>,
<parameter><decl><type><name>scan_demux_filter_cb</name></type> <name>pf_filter</name></decl></parameter>,
<parameter><decl><type><name>scan_demux_read_cb</name></type> <name>pf_read</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cbdata</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_parameter</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SCAN_NONE</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_scan</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_scan</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_obj</name></name> <operator>=</operator> <call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>pf_tune</name></name> <operator>=</operator> <name>pf_frontend</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>pf_stats</name></name> <operator>=</operator> <name>pf_status</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>pf_read</name></name> <operator>=</operator> <name>pf_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>pf_filter</name></name> <operator>=</operator> <name>pf_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>pf_notify_service</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_cbdata</name></name> <operator>=</operator> <name>p_cbdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_dialog_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>i_multiplex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>pp_multiplex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>i_multiplex_toscan</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>b_multiplexes_from_nit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scan_parameter_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_scan</name><operator>-&gt;</operator><name>parameter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scan_parameter_Copy</name><argument_list>( <argument><expr><name>p_parameter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_scan</name><operator>-&gt;</operator><name>parameter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>i_time_start</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_scanlist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>i_scanlist</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scan_Prepare</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_parameter</name></expr></argument>, <argument><expr><name>p_scan</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_current</name></name> <operator>=</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>p_scanlist</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>spectrum</name><operator>.</operator><name>i_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>spectrum</name><operator>.</operator><name>i_symbolrate_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>spectrum</name><operator>.</operator><name>modulation</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scan_Debug_Parameters</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_parameter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_scan</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>scan_Destroy</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_scan</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_dialog_id</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_dialog_release</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_dialog_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>scan_parameter_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_scan</name><operator>-&gt;</operator><name>parameter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>i_multiplex</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>scan_multiplex_Delete</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>pp_multiplex</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>pp_multiplex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scan_list_entries_release</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_scanlist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_SetMultiplexScanStatus</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><name>scan_multiplex_t</name> <modifier>*</modifier></type><name>p_mplex</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_scanned</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_mplex</name><operator>-&gt;</operator><name>b_scanned</name></name> <operator>!=</operator> <name>b_scanned</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>b_scanned</name></name> <operator>=</operator> <name>b_scanned</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>i_multiplex_toscan</name></name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator> <name>b_scanned</name> <operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>scan_AddMultiplex</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><name>scan_multiplex_t</name> <modifier>*</modifier></type><name>p_mplex</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>scan_multiplex_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>pp_multiplex</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>scan_multiplex_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>p_scan</name><operator>-&gt;</operator><name>i_multiplex</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>pp_realloc</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pp_realloc</name><index>[<expr><name><name>p_scan</name><operator>-&gt;</operator><name>i_multiplex</name></name></expr>]</index></name> <operator>=</operator> <name>p_mplex</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>pp_multiplex</name></name> <operator>=</operator> <name>pp_realloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>i_multiplex</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_mplex</name><operator>-&gt;</operator><name>b_scanned</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>i_multiplex_toscan</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>scan_multiplex_t</name> <modifier>*</modifier></type> <name>scan_FindMultiplex</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_ts_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>i_multiplex</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_scan</name><operator>-&gt;</operator><name>pp_multiplex</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_ts_id</name> <operator>==</operator> <name>i_ts_id</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p_scan</name><operator>-&gt;</operator><name>pp_multiplex</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>scan_multiplex_t</name> <modifier>*</modifier></type><name>scan_FindOrCreateMultiplex</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_ts_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>scan_tuner_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>scan_multiplex_t</name> <modifier>*</modifier></type><name>p_mplex</name> <init>= <expr><call><name>scan_FindMultiplex</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name>i_ts_id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_mplex</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_mplex</name> <operator>=</operator> <call><name>scan_multiplex_New</name><argument_list>( <argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><name>i_ts_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_mplex</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>scan_AddMultiplex</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name>p_mplex</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>scan_multiplex_Delete</name><argument_list>( <argument><expr><name>p_mplex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p_mplex</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>scan_CountServices</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_total_services</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>i_multiplex</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_total_services</name> <operator>+=</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>pp_multiplex</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>i_services</name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>i_total_services</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Scan_Next_DVB_SpectrumExhaustive</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_parameter_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>, <parameter><decl><type><name>scan_enumeration_t</name> <modifier>*</modifier></type><name>p_spectrum</name></decl></parameter>,
<parameter><decl><type><name>scan_tuner_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pf_pos</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_bandwidth_count</name> <init>= <expr><name><name>p_params</name><operator>-&gt;</operator><name>bandwidth</name><operator>.</operator><name>i_max</name></name> <operator>-</operator> <name><name>p_params</name><operator>-&gt;</operator><name>bandwidth</name><operator>.</operator><name>i_min</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_frequency_step</name> <init>= <expr><ternary><condition><expr><name><name>p_params</name><operator>-&gt;</operator><name>frequency</name><operator>.</operator><name>i_step</name></name></expr> ?</condition><then> <expr><name><name>p_params</name><operator>-&gt;</operator><name>frequency</name><operator>.</operator><name>i_step</name></name></expr> </then><else>: <expr><literal type="number">166667</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_frequency_count</name> <init>= <expr><operator>(</operator><name><name>p_params</name><operator>-&gt;</operator><name>frequency</name><operator>.</operator><name>i_max</name></name> <operator>-</operator> <name><name>p_params</name><operator>-&gt;</operator><name>frequency</name><operator>.</operator><name>i_min</name></name><operator>)</operator> <operator>/</operator> <name><name>p_params</name><operator>-&gt;</operator><name>frequency</name><operator>.</operator><name>i_step</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_index</name></name> <operator>&gt;</operator> <name>i_frequency_count</name> <operator>*</operator> <name>i_bandwidth_count</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_bi</name> <init>= <expr><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_index</name></name> <operator>%</operator> <name>i_bandwidth_count</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_fi</name> <init>= <expr><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_index</name></name> <operator>/</operator> <name>i_bandwidth_count</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_frequency</name></name> <operator>=</operator> <name><name>p_params</name><operator>-&gt;</operator><name>frequency</name><operator>.</operator><name>i_min</name></name> <operator>+</operator> <name>i_fi</name> <operator>*</operator> <name>i_frequency_step</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_bandwidth</name></name> <operator>=</operator> <name><name>p_params</name><operator>-&gt;</operator><name>bandwidth</name><operator>.</operator><name>i_min</name></name> <operator>+</operator> <name>i_bi</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pf_pos</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_index</name></name> <operator>/</operator> <name>i_frequency_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_index</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Scan_Next_DVBC</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_parameter_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>, <parameter><decl><type><name>scan_enumeration_t</name> <modifier>*</modifier></type><name>p_spectrum</name></decl></parameter>,
<parameter><decl><type><name>scan_tuner_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pf_pos</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_rotate</name><init>=<expr><name>true</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_params</name><operator>-&gt;</operator><name>b_modulation_set</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_spectrum</name><operator>-&gt;</operator><name>modulation</name></name> <operator>=</operator> <operator>(</operator><name><name>p_spectrum</name><operator>-&gt;</operator><name>modulation</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>



<if_stmt><if>if<condition>( <expr><name><name>p_spectrum</name><operator>-&gt;</operator><name>modulation</name></name> <operator>&lt;</operator> <name>SCAN_MODULATION_QAM_64</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_spectrum</name><operator>-&gt;</operator><name>modulation</name></name> <operator>=</operator> <name>SCAN_MODULATION_QAM_256</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>b_rotate</name><operator>=</operator><name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>modulation</name></name> <operator>=</operator> <name><name>p_spectrum</name><operator>-&gt;</operator><name>modulation</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_params</name><operator>-&gt;</operator><name>i_symbolrate</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>symbolrates</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">6900</literal></expr>, <expr><literal type="number">6875</literal></expr>, <expr><literal type="number">6950</literal></expr>




}</block></expr></init></decl>;</decl_stmt>

<enum>enum <block>{ <decl><name>num_symbols</name> <init>= <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>symbolrates</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>symbolrates</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl> }</block>;</enum>


<if_stmt><if>if<condition>( <expr><name>b_rotate</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_symbolrate_index</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_symbolrate_index</name></name> <operator>%=</operator> <name>num_symbols</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_symbolrate</name></name> <operator>=</operator> <literal type="number">1000</literal> <operator>*</operator> <operator>(</operator><name><name>symbolrates</name><index>[ <expr><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_symbolrate_index</name></name></expr> ]</index></name> <operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_symbolrate_index</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_rotate</name><operator>=</operator><name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_symbolrate</name></name> <operator>=</operator> <name><name>p_params</name><operator>-&gt;</operator><name>i_symbolrate</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_params</name><operator>-&gt;</operator><name>b_exhaustive</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Scan_Next_DVB_SpectrumExhaustive</name><argument_list>( <argument><expr><name>p_params</name></expr></argument>, <argument><expr><name>p_spectrum</name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><name>pf_pos</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>frequencies</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">41000</literal></expr>, <expr><literal type="number">39400</literal></expr>, <expr><literal type="number">40200</literal></expr>,
<expr><literal type="number">38600</literal></expr>, <expr><literal type="number">41800</literal></expr>, <expr><literal type="number">36200</literal></expr>, <expr><literal type="number">44200</literal></expr>, <expr><literal type="number">43400</literal></expr>, <expr><literal type="number">37000</literal></expr>, <expr><literal type="number">35400</literal></expr>, <expr><literal type="number">42600</literal></expr>, <expr><literal type="number">37800</literal></expr>,
<expr><literal type="number">34600</literal></expr>, <expr><literal type="number">45800</literal></expr>, <expr><literal type="number">45000</literal></expr>, <expr><literal type="number">46600</literal></expr>, <expr><literal type="number">32200</literal></expr>, <expr><literal type="number">51400</literal></expr>, <expr><literal type="number">49000</literal></expr>, <expr><literal type="number">33800</literal></expr>, <expr><literal type="number">31400</literal></expr>,
<expr><literal type="number">30600</literal></expr>, <expr><literal type="number">47400</literal></expr>, <expr><literal type="number">71400</literal></expr>, <expr><literal type="number">69000</literal></expr>, <expr><literal type="number">68200</literal></expr>, <expr><literal type="number">58600</literal></expr>, <expr><literal type="number">56200</literal></expr>, <expr><literal type="number">54600</literal></expr>, <expr><literal type="number">49800</literal></expr>,
<expr><literal type="number">48200</literal></expr>, <expr><literal type="number">33000</literal></expr>, <expr><literal type="number">79400</literal></expr>, <expr><literal type="number">72200</literal></expr>, <expr><literal type="number">69800</literal></expr>, <expr><literal type="number">67400</literal></expr>, <expr><literal type="number">66600</literal></expr>, <expr><literal type="number">65000</literal></expr>, <expr><literal type="number">64200</literal></expr>,
<expr><literal type="number">61000</literal></expr>, <expr><literal type="number">55400</literal></expr>, <expr><literal type="number">53000</literal></expr>, <expr><literal type="number">52200</literal></expr>, <expr><literal type="number">50600</literal></expr>, <expr><literal type="number">29800</literal></expr>, <expr><literal type="number">16200</literal></expr>, <expr><literal type="number">15400</literal></expr>, <expr><literal type="number">11300</literal></expr>,
<expr><literal type="number">78600</literal></expr>, <expr><literal type="number">77000</literal></expr>, <expr><literal type="number">76200</literal></expr>, <expr><literal type="number">75400</literal></expr>, <expr><literal type="number">74600</literal></expr>, <expr><literal type="number">73800</literal></expr>, <expr><literal type="number">73000</literal></expr>, <expr><literal type="number">70600</literal></expr>, <expr><literal type="number">57800</literal></expr>,
<expr><literal type="number">57000</literal></expr>, <expr><literal type="number">53800</literal></expr>, <expr><literal type="number">12100</literal></expr>, <expr><literal type="number">81000</literal></expr>, <expr><literal type="number">77800</literal></expr>, <expr><literal type="number">65800</literal></expr>, <expr><literal type="number">63400</literal></expr>, <expr><literal type="number">61800</literal></expr>, <expr><literal type="number">29000</literal></expr>,
<expr><literal type="number">17000</literal></expr>, <expr><literal type="number">85000</literal></expr>, <expr><literal type="number">84200</literal></expr>, <expr><literal type="number">83400</literal></expr>, <expr><literal type="number">81800</literal></expr>, <expr><literal type="number">80200</literal></expr>, <expr><literal type="number">59400</literal></expr>, <expr><literal type="number">36900</literal></expr>, <expr><literal type="number">28300</literal></expr>,
<expr><literal type="number">26600</literal></expr>, <expr><literal type="number">25800</literal></expr>, <expr><literal type="number">25000</literal></expr>, <expr><literal type="number">24200</literal></expr>, <expr><literal type="number">23400</literal></expr>, <expr><literal type="number">85800</literal></expr>, <expr><literal type="number">74800</literal></expr>, <expr><literal type="number">73200</literal></expr>, <expr><literal type="number">72800</literal></expr>,
<expr><literal type="number">72400</literal></expr>, <expr><literal type="number">72000</literal></expr>, <expr><literal type="number">66000</literal></expr>, <expr><literal type="number">65600</literal></expr>, <expr><literal type="number">60200</literal></expr>, <expr><literal type="number">42500</literal></expr>, <expr><literal type="number">41700</literal></expr>, <expr><literal type="number">40900</literal></expr>, <expr><literal type="number">40100</literal></expr>,
<expr><literal type="number">39300</literal></expr>, <expr><literal type="number">38500</literal></expr>, <expr><literal type="number">37775</literal></expr>, <expr><literal type="number">37700</literal></expr>, <expr><literal type="number">37200</literal></expr>, <expr><literal type="number">36100</literal></expr>, <expr><literal type="number">35600</literal></expr>, <expr><literal type="number">35300</literal></expr>, <expr><literal type="number">34700</literal></expr>,
<expr><literal type="number">34500</literal></expr>, <expr><literal type="number">33900</literal></expr>, <expr><literal type="number">33700</literal></expr>, <expr><literal type="number">32900</literal></expr>, <expr><literal type="number">32300</literal></expr>, <expr><literal type="number">32100</literal></expr>, <expr><literal type="number">31500</literal></expr>, <expr><literal type="number">31300</literal></expr>, <expr><literal type="number">30500</literal></expr>,
<expr><literal type="number">29900</literal></expr>, <expr><literal type="number">29700</literal></expr>, <expr><literal type="number">29100</literal></expr>, <expr><literal type="number">28950</literal></expr>, <expr><literal type="number">28200</literal></expr>, <expr><literal type="number">28000</literal></expr>, <expr><literal type="number">27500</literal></expr>, <expr><literal type="number">27400</literal></expr>, <expr><literal type="number">27200</literal></expr>,
<expr><literal type="number">26700</literal></expr>, <expr><literal type="number">25900</literal></expr>, <expr><literal type="number">25500</literal></expr>, <expr><literal type="number">25100</literal></expr>, <expr><literal type="number">24300</literal></expr>, <expr><literal type="number">24100</literal></expr>, <expr><literal type="number">23500</literal></expr>, <expr><literal type="number">23200</literal></expr>, <expr><literal type="number">22700</literal></expr>,
<expr><literal type="number">22600</literal></expr>, <expr><literal type="number">21900</literal></expr>, <expr><literal type="number">21800</literal></expr>, <expr><literal type="number">21100</literal></expr>, <expr><literal type="number">20300</literal></expr>, <expr><literal type="number">19500</literal></expr>, <expr><literal type="number">18700</literal></expr>, <expr><literal type="number">17900</literal></expr>, <expr><literal type="number">17100</literal></expr>,
<expr><literal type="number">16300</literal></expr>, <expr><literal type="number">15500</literal></expr>, <expr><literal type="number">14700</literal></expr>, <expr><literal type="number">14600</literal></expr>, <expr><literal type="number">14500</literal></expr>, <expr><literal type="number">14300</literal></expr>, <expr><literal type="number">13900</literal></expr>, <expr><literal type="number">13700</literal></expr>, <expr><literal type="number">13100</literal></expr>,
<expr><literal type="number">12900</literal></expr>, <expr><literal type="number">12500</literal></expr>, <expr><literal type="number">12300</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<enum>enum <block>{ <decl><name>num_frequencies</name> <init>= <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>frequencies</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>frequencies</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl> }</block>;</enum>

<if_stmt><if>if<condition>( <expr><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_index</name></name> <operator>&gt;=</operator> <name>num_frequencies</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_frequency</name></name> <operator>=</operator> <literal type="number">10000</literal> <operator>*</operator> <operator>(</operator> <name><name>frequencies</name><index>[ <expr><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_index</name></name></expr> ]</index></name> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pf_pos</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_index</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator>
<name><name>p_spectrum</name><operator>-&gt;</operator><name>i_symbolrate_index</name></name> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator>
<operator>(</operator><literal type="number">256</literal> <operator>-</operator> <operator>(</operator><name><name>p_spectrum</name><operator>-&gt;</operator><name>modulation</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>)</operator>
<operator>/</operator> <operator>(</operator><name>num_frequencies</name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <literal type="number">900</literal> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_rotate</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_index</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Scan_Next_DVBT</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_parameter_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>, <parameter><decl><type><name>scan_enumeration_t</name> <modifier>*</modifier></type><name>p_spectrum</name></decl></parameter>,
<parameter><decl><type><name>scan_tuner_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pf_pos</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_params</name><operator>-&gt;</operator><name>b_exhaustive</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Scan_Next_DVB_SpectrumExhaustive</name><argument_list>( <argument><expr><name>p_params</name></expr></argument>, <argument><expr><name>p_spectrum</name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><name>pf_pos</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_frequency_step</name> <init>= <expr><ternary><condition><expr><name><name>p_params</name><operator>-&gt;</operator><name>frequency</name><operator>.</operator><name>i_step</name></name></expr> ?</condition><then> <expr><name><name>p_params</name><operator>-&gt;</operator><name>frequency</name><operator>.</operator><name>i_step</name></name></expr> </then><else>: <expr><literal type="number">166667</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_bandwidth_min</name> <init>= <expr><ternary><condition><expr><name><name>p_params</name><operator>-&gt;</operator><name>bandwidth</name><operator>.</operator><name>i_min</name></name></expr> ?</condition><then> <expr><name><name>p_params</name><operator>-&gt;</operator><name>bandwidth</name><operator>.</operator><name>i_min</name></name></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_bandwidth_max</name> <init>= <expr><ternary><condition><expr><name><name>p_params</name><operator>-&gt;</operator><name>bandwidth</name><operator>.</operator><name>i_max</name></name></expr> ?</condition><then> <expr><name><name>p_params</name><operator>-&gt;</operator><name>bandwidth</name><operator>.</operator><name>i_max</name></name></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_bandwidth_count</name> <init>= <expr><name>i_bandwidth_max</name> <operator>-</operator> <name>i_bandwidth_min</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>i_band_count</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_max</name></decl>;</decl_stmt>
}</block>
<decl><name><name>band</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"VHF"</literal></expr>, <expr><literal type="number">174</literal></expr>, <expr><literal type="number">230</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"UHF"</literal></expr>, <expr><literal type="number">470</literal></expr>, <expr><literal type="number">862</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_offset_count</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_mhz</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>




<for>for<control>( <init>;</init><condition>;</condition> <incr><expr><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_index</name></name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_bi</name> <init>= <expr><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_index</name></name> <operator>%</operator> <name>i_bandwidth_count</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_oi</name> <init>= <expr><operator>(</operator><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_index</name></name> <operator>/</operator> <name>i_bandwidth_count</name><operator>)</operator> <operator>%</operator> <name>i_offset_count</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_fi</name> <init>= <expr><operator>(</operator><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_index</name></name> <operator>/</operator> <name>i_bandwidth_count</name><operator>)</operator> <operator>/</operator> <name>i_offset_count</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_bandwidth</name> <init>= <expr><name>i_bandwidth_min</name> <operator>+</operator> <name>i_bi</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_band_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_fi</name> <operator>&gt;=</operator> <name><name>band</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_min</name> <operator>&amp;&amp;</operator> <name>i_fi</name> <operator>&lt;=</operator> <name><name>band</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_max</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;=</operator><name>i_band_count</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_fi</name> <operator>&gt;</operator> <name><name>band</name><index>[<expr><name>i_band_count</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_max</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_index</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_frequency_min</name> <init>= <expr><name><name>band</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_min</name><operator>*</operator><name>i_mhz</name> <operator>+</operator> <name>i_bandwidth</name><operator>*</operator><name>i_mhz</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_frequency_base</name> <init>= <expr><name>i_fi</name><operator>*</operator><name>i_mhz</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_frequency_base</name> <operator>&gt;=</operator> <name>i_frequency_min</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_frequency_base</name> <operator>-</operator> <name>i_frequency_min</name> <operator>)</operator> <operator>%</operator> <operator>(</operator> <name>i_bandwidth</name><operator>*</operator><name>i_mhz</name> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_frequency</name> <init>= <expr><name>i_frequency_base</name> <operator>+</operator> <operator>(</operator> <name>i_oi</name> <operator>-</operator> <name>i_offset_count</name><operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>*</operator> <name>i_frequency_step</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_frequency</name></name> <operator>=</operator> <name>i_frequency</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_bandwidth</name></name> <operator>=</operator> <name>i_bandwidth</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_current</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_band_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_frag</name> <init>= <expr><name><name>band</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_max</name><operator>-</operator><name><name>band</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_min</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_fi</name> <operator>&gt;=</operator> <name><name>band</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_min</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_current</name> <operator>+=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_fi</name> <operator>-</operator> <name><name>band</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_min</name></expr></argument>, <argument><expr><name>i_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_total</name> <operator>+=</operator> <name>i_frag</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pf_pos</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator> <name>i_current</name> <operator>+</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i_oi</name> <operator>/</operator> <name>i_offset_count</name> <operator>)</operator> <operator>/</operator> <name>i_total</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_spectrum</name><operator>-&gt;</operator><name>i_index</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Scan_GetNextSpectrumTunerConfig</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><name>scan_tuner_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pf_pos</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name><name>p_scan</name><operator>-&gt;</operator><name>parameter</name><operator>.</operator><name>type</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>SCAN_DVB_T</name></expr>:</case>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>Scan_Next_DVBT</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_scan</name><operator>-&gt;</operator><name>parameter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_scan</name><operator>-&gt;</operator><name>spectrum</name></name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><name>pf_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SCAN_DVB_C</name></expr>:</case>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>Scan_Next_DVBC</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_scan</name><operator>-&gt;</operator><name>parameter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_scan</name><operator>-&gt;</operator><name>spectrum</name></name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><name>pf_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Scan_GetNextTunerConfig</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><name>scan_tuner_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pf_pos</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_scanlist</name></name> <operator>&amp;&amp;</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>p_current</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>scan_list_entry_t</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_current</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_frequency</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>i_freq</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_bandwidth</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>i_bw</name></name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>modulation</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>modulation</name></name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>delivery</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>SCAN_DELIVERY_UNKNOWN</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>SCAN_DELIVERY_DVB_T</name></expr>:</case>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>coderate_hp</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>coderate_hp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>coderate_lp</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>coderate_lp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SCAN_DVB_T</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SCAN_DELIVERY_DVB_S</name></expr>:</case>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SCAN_DVB_S</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>polarization</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>polarization</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_symbolrate</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>inner_fec</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>inner_fec</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SCAN_DELIVERY_DVB_C</name></expr>:</case>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SCAN_DVB_C</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_symbolrate</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>inner_fec</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>inner_fec</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SCAN_NONE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_current</name></name> <operator>=</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>p_current</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pf_pos</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>spectrum</name><operator>.</operator><name>i_index</name></name><operator>++</operator> <operator>/</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>i_scanlist</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_scanlist</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>i_multiplex</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> 
<operator>(</operator><name><name>p_scan</name><operator>-&gt;</operator><name>parameter</name><operator>.</operator><name>b_use_nit</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_scan</name><operator>-&gt;</operator><name>b_multiplexes_from_nit</name></name><operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>Scan_GetNextSpectrumTunerConfig</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><name>pf_pos</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_scan</name><operator>-&gt;</operator><name>i_multiplex_toscan</name></name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_scan</name><operator>-&gt;</operator><name>i_multiplex_toscan</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_scan</name><operator>-&gt;</operator><name>pp_multiplex</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_scanned</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>scan_SetMultiplexScanStatus</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>pp_multiplex</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_cfg</name> <operator>=</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>pp_multiplex</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>cfg</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pf_pos</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name><name>p_scan</name><operator>-&gt;</operator><name>i_multiplex</name></name> <operator>/</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>i_multiplex_toscan</name></name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_ENOITEM</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scan_Next</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><name>scan_tuner_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>f_position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>scan_IsCancelled</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<block>{<block_content>
<expr_stmt><expr><call><name>scan_tuner_config_Init</name><argument_list>( <argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_scan</name><operator>-&gt;</operator><name>parameter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>Scan_GetNextTunerConfig</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f_position</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>


<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_total_services</name> <init>= <expr><call><name>scan_CountServices</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_eta</name> <init>= <expr><ternary><condition><expr><name>f_position</name> <operator>&gt;</operator> <literal type="number">0.005</literal></expr> ?</condition><then> <expr><operator>(</operator><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>i_time_start</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator> <literal type="number">1.0</literal> <operator>/</operator> <name>f_position</name> <operator>-</operator> <literal type="number">1.0</literal> <operator>)</operator></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>psz_eta</name><index>[<expr><name>MSTRTIME_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%.1f MHz (%d services)\n~%s remaining"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_eta</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"Scan ETA %s | %f"</literal></expr></argument>, <argument><expr><call><name>secstotimestr</name><argument_list>( <argument><expr><name>psz_eta</name></expr></argument>, <argument><expr><name>i_eta</name><operator>/</operator><literal type="number">1000000</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>f_position</name> <operator>*</operator> <literal type="number">100</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_dialog_id</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_dialog_id</name></name> <operator>=</operator>
<call><name>vlc_dialog_display_progress</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>f_position</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cancel"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Scanning DVB"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>i_frequency</name></name> <operator>/</operator> <literal type="number">1000000</literal></expr></argument>,
<argument><expr><name>i_total_services</name></expr></argument>,
<argument><expr><call><name>secstotimestr</name><argument_list>( <argument><expr><name>psz_eta</name></expr></argument>, <argument><expr><name>i_eta</name><operator>/</operator><literal type="number">1000000</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_dialog_update_progress_text</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_dialog_id</name></name></expr></argument>,
<argument><expr><name>f_position</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>i_frequency</name></name> <operator>/</operator> <literal type="number">1000000</literal></expr></argument>,
<argument><expr><name>i_total_services</name></expr></argument>,
<argument><expr><call><name>secstotimestr</name><argument_list>( <argument><expr><name>psz_eta</name></expr></argument>, <argument><expr><name>i_eta</name><operator>/</operator><literal type="number">1000000</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>scan_IsCancelled</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_dialog_id</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>vlc_dialog_is_cancelled</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_dialog_id</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>scan_Run</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>scan_tuner_config_t</name></type> <name>cfg</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>scan_Next</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOITEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>scan_session_t</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><call><name>scan_session_New</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>session</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name><name>p_scan</name><operator>-&gt;</operator><name>pf_tune</name></name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_cbdata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>scan_session_Destroy</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name>session</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>p_scan</name><operator>-&gt;</operator><name>pf_filter</name></name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_cbdata</name></name></expr></argument>, <argument><expr><name>PSI_PAT_PID</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>p_scan</name><operator>-&gt;</operator><name>pf_filter</name></name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_cbdata</name></name></expr></argument>, <argument><expr><name>SI_SDT_PID</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_scan</name><operator>-&gt;</operator><name>parameter</name><operator>.</operator><name>b_use_nit</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p_scan</name><operator>-&gt;</operator><name>pf_filter</name></name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_cbdata</name></name></expr></argument>, <argument><expr><name>SI_NIT_PID</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>packet</name><index>[<expr><name>TS_PACKET_SIZE</name> <operator>*</operator> <name>SCAN_READ_BUFFER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_scan_start</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_timeout</name> <init>= <expr><call><name>scan_session_GetTablesTimeout</name><argument_list>( <argument><expr><name>session</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_remaining</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name>i_scan_start</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_remaining</name> <operator>&gt;</operator> <name>i_timeout</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_packet_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name><name>p_scan</name><operator>-&gt;</operator><name>pf_read</name></name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_cbdata</name></name></expr></argument>,
<argument><expr><name>i_timeout</name> <operator>-</operator> <name>i_remaining</name></expr></argument>,
<argument><expr><name>SCAN_READ_BUFFER_COUNT</name></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_packet_count</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_scan</name><operator>-&gt;</operator><name>pf_stats</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p_scan</name><operator>-&gt;</operator><name>pf_stats</name></name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_cbdata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>session</name><operator>-&gt;</operator><name>i_snr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name>i_packet_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>scan_session_Push</name><argument_list>( <argument><expr><name>session</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>packet</name><index>[<expr><name>i</name> <operator>*</operator> <name>TS_PACKET_SIZE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>scan_session_Destroy</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name>session</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_NotifyService</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><name>scan_service_t</name> <modifier>*</modifier></type><name>p_service</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_updated</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_scan</name><operator>-&gt;</operator><name>pf_notify_service</name></name> <operator>||</operator> <operator>!</operator><call><name>scan_service_type_Supported</name><argument_list>( <argument><expr><name><name>p_service</name><operator>-&gt;</operator><name>type</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_service</name><operator>-&gt;</operator><name>stickyref</name></name> <operator>=</operator> <call><name><name>p_scan</name><operator>-&gt;</operator><name>pf_notify_service</name></name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_cbdata</name></name></expr></argument>,
<argument><expr><name>p_service</name></expr></argument>, <argument><expr><name><name>p_service</name><operator>-&gt;</operator><name>stickyref</name></name></expr></argument>,
<argument><expr><name>b_updated</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scan_NotifyNewService</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>scan_NotifyService( a, b, false )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scan_NotifyUpdatedService</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>scan_NotifyService( a, b, true )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>GetOtherNetworkNIT</name><parameter_list>( <parameter><decl><type><name>scan_session_t</name> <modifier>*</modifier></type><name>p_session</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_network_id</name></decl></parameter>,
<parameter><decl><type><name>dvbpsi_nit_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_nit</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>i_nit</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>pp_nit</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_network_id</name> <operator>==</operator> <name>i_network_id</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ppp_nit</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>pp_nit</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>GetOtherTsSDT</name><parameter_list>( <parameter><decl><type><name>scan_session_t</name> <modifier>*</modifier></type><name>p_session</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_ts_id</name></decl></parameter>,
<parameter><decl><type><name>dvbpsi_sdt_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_sdt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>i_sdt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>pp_sdt</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_extension</name> <operator>==</operator> <name>i_ts_id</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ppp_sdt</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>pp_sdt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParsePAT</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pat_t</name> <modifier>*</modifier></type><name>p_pat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>scan_tuner_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_snr</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_cfg</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>scan_multiplex_t</name> <modifier>*</modifier></type><name>p_mplex</name> <init>= <expr><call><name>scan_FindOrCreateMultiplex</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name><name>p_pat</name><operator>-&gt;</operator><name>i_ts_id</name></name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_mplex</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_mplex</name><operator>-&gt;</operator><name>i_snr</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_snr</name> <operator>&gt;</operator> <name><name>p_mplex</name><operator>-&gt;</operator><name>i_snr</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"multiplex ts_id %"</literal> <name>PRIu16</name> <literal type="string">" freq %u snr %d replaced by freq %u snr %d"</literal></expr></argument>,
<argument><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>i_ts_id</name></name></expr></argument>, <argument><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_frequency</name></name></expr></argument>, <argument><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>i_snr</name></name></expr></argument>,
<argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_frequency</name></name></expr></argument>, <argument><expr><name>i_snr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>cfg</name></name> <operator>=</operator> <operator>*</operator><name>p_cfg</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>i_snr</name></name> <operator>=</operator> <name>i_snr</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dvbpsi_pat_program_t</name> <modifier>*</modifier></type><name>p_program</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>p_program</name> <operator>=</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>p_first_program</name></name></expr>;</init> <condition><expr><name>p_program</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_program</name> <operator>=</operator> <name><name>p_program</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> 
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>scan_service_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>scan_multiplex_FindService</name><argument_list>( <argument><expr><name>p_mplex</name></expr></argument>, <argument><expr><name><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>s</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>scan_service_New</name><argument_list>( <argument><expr><name><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>scan_multiplex_AddService</name><argument_list>( <argument><expr><name>p_mplex</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>scan_service_Delete</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>scan_NotifyNewService</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>PATCallBack</name><parameter_list>( <parameter><decl><type><name>scan_session_t</name> <modifier>*</modifier></type><name>p_session</name></decl></parameter>, <parameter><decl><type><name>dvbpsi_pat_t</name> <modifier>*</modifier></type><name>p_pat</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name> <init>= <expr><name><name>p_session</name><operator>-&gt;</operator><name>p_obj</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_pat</name></name> <operator>&amp;&amp;</operator> <name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_pat</name><operator>-&gt;</operator><name>b_current_next</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dvbpsi_pat_delete</name><argument_list>( <argument><expr><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_pat</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_pat</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_pat</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dvbpsi_pat_delete</name><argument_list>( <argument><expr><name>p_pat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>dvbpsi_pat_program_t</name> <modifier>*</modifier></type><name>p_program</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_pat</name></name> <operator>=</operator> <name>p_pat</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"new PAT ts_id=%d version=%d current_next=%d"</literal></expr></argument>,
<argument><expr><name><name>p_pat</name><operator>-&gt;</operator><name>i_ts_id</name></name></expr></argument>, <argument><expr><name><name>p_pat</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument>, <argument><expr><name><name>p_pat</name><operator>-&gt;</operator><name>b_current_next</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>p_program</name> <operator>=</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>p_first_program</name></name></expr>;</init> <condition><expr><name>p_program</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_program</name> <operator>=</operator> <name><name>p_program</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * number=%d pid=%d"</literal></expr></argument>, <argument><expr><name><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument>, <argument><expr><name><name>p_program</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>i_nit_pid</name></name> <operator>=</operator> <name><name>p_program</name><operator>-&gt;</operator><name>i_pid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParseSDT</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dvbpsi_sdt_t</name> <modifier>*</modifier></type><name>p_sdt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>scan_multiplex_t</name> <modifier>*</modifier></type><name>p_mplex</name> <init>= <expr><call><name>scan_FindMultiplex</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name><name>p_sdt</name><operator>-&gt;</operator><name>i_extension</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_mplex</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return ;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>scan_SetMultiplexScanStatus</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name>p_mplex</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_mplex</name><operator>-&gt;</operator><name>i_sdt_version</name></name> <operator>==</operator> <name>UINT8_MAX</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>i_sdt_version</name></name> <operator>=</operator> <name><name>p_sdt</name><operator>-&gt;</operator><name>i_version</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>dvbpsi_sdt_service_t</name> <modifier>*</modifier></type><name>p_srv</name> <init>= <expr><name><name>p_sdt</name><operator>-&gt;</operator><name>p_first_service</name></name></expr></init></decl>;</init>
<condition><expr><name>p_srv</name></expr>;</condition> <incr><expr><name>p_srv</name> <operator>=</operator> <name><name>p_srv</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_newservice</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scan_service_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>scan_multiplex_FindService</name><argument_list>( <argument><expr><name>p_mplex</name></expr></argument>, <argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_service_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>s</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_newservice</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>scan_service_New</name><argument_list>( <argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_service_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>scan_multiplex_AddService</name><argument_list>( <argument><expr><name>p_mplex</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>scan_service_Delete</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_crypted</name></name> <operator>=</operator> <name><name>p_srv</name><operator>-&gt;</operator><name>b_free_ca</name></name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><name><name>p_srv</name><operator>-&gt;</operator><name>p_first_descriptor</name></name></expr></init></decl>;</init>
<condition><expr><name>p_dr</name></expr>;</condition> <incr><expr><name>p_dr</name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>!=</operator> <literal type="number">0x48</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>dvbpsi_service_dr_t</name> <modifier>*</modifier></type><name>pD</name> <init>= <expr><call><name>dvbpsi_DecodeServiceDr</name><argument_list>( <argument><expr><name>p_dr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>pD</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>vlc_from_EIT</name><argument_list>( <argument><expr><name><name>pD</name><operator>-&gt;</operator><name>i_service_name</name></name></expr></argument>,
<argument><expr><name><name>pD</name><operator>-&gt;</operator><name>i_service_name_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>psz_provider</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>psz_provider</name></name> <operator>=</operator> <call><name>vlc_from_EIT</name><argument_list>( <argument><expr><name><name>pD</name><operator>-&gt;</operator><name>i_service_provider_name</name></name></expr></argument>,
<argument><expr><name><name>pD</name><operator>-&gt;</operator><name>i_service_provider_name_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pD</name><operator>-&gt;</operator><name>i_service_type</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>scan_NotifyService</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>!</operator><name>b_newservice</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SDTCallBack</name><parameter_list>( <parameter><decl><type><name>scan_session_t</name> <modifier>*</modifier></type><name>p_session</name></decl></parameter>, <parameter><decl><type><name>dvbpsi_sdt_t</name> <modifier>*</modifier></type><name>p_sdt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name> <init>= <expr><name><name>p_session</name><operator>-&gt;</operator><name>p_obj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbpsi_sdt_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_stored_sdt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sdt</name><operator>-&gt;</operator><name>i_table_id</name></name> <operator>==</operator> <name>SDT_OTHER_TS_TABLE_ID</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>GetOtherTsSDT</name><argument_list>( <argument><expr><name>p_session</name></expr></argument>, <argument><expr><name><name>p_sdt</name><operator>-&gt;</operator><name>i_extension</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp_stored_sdt</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>dvbpsi_sdt_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>pp_sdt</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>i_sdt</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>pp_realloc</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_realloc</name></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>dvbpsi_sdt_delete</name><argument_list>( <argument><expr><name>p_sdt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pp_stored_sdt</name> <operator>=</operator> <operator>&amp;</operator><name><name>pp_realloc</name><index>[<expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>i_sdt</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>pp_sdt</name></name> <operator>=</operator> <name>pp_realloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>i_sdt</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name>pp_stored_sdt</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_sdt</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_stored_sdt</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><operator>(</operator><operator>*</operator><name>pp_stored_sdt</name><operator>)</operator><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <name><name>p_sdt</name><operator>-&gt;</operator><name>i_version</name></name> <operator>||</operator>
<name><operator>(</operator><operator>*</operator><name>pp_stored_sdt</name><operator>)</operator><operator>-&gt;</operator><name>b_current_next</name></name> <operator>&gt;</operator> <name><name>p_sdt</name><operator>-&gt;</operator><name>b_current_next</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>dvbpsi_sdt_delete</name><argument_list>( <argument><expr><name>p_sdt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dvbpsi_sdt_delete</name><argument_list>( <argument><expr><operator>*</operator><name>pp_stored_sdt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_stored_sdt</name> <operator>=</operator> <name>p_sdt</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"new SDT %s ts_id=%d version=%d current_next=%d network_id=%d"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator> <name><name>p_sdt</name><operator>-&gt;</operator><name>i_table_id</name></name> <operator>==</operator> <name>SDT_CURRENT_TS_TABLE_ID</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"local"</literal></expr> </then><else>: <expr><literal type="string">"other"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>p_sdt</name><operator>-&gt;</operator><name>i_extension</name></name></expr></argument>, <argument><expr><name><name>p_sdt</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument>, <argument><expr><name><name>p_sdt</name><operator>-&gt;</operator><name>b_current_next</name></name></expr></argument>,
<argument><expr><name><name>p_sdt</name><operator>-&gt;</operator><name>i_network_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dvbpsi_sdt_service_t</name> <modifier>*</modifier></type><name>p_srv</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>p_srv</name> <operator>=</operator> <name><name>p_sdt</name><operator>-&gt;</operator><name>p_first_service</name></name></expr>;</init> <condition><expr><name>p_srv</name></expr>;</condition> <incr><expr><name>p_srv</name> <operator>=</operator> <name><name>p_srv</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * service id=%d eit schedule=%d present=%d running=%d free_ca=%d"</literal></expr></argument>,
<argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_service_id</name></name></expr></argument>, <argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>b_eit_schedule</name></name></expr></argument>,
<argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>b_eit_present</name></name></expr></argument>, <argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_running_status</name></name></expr></argument>,
<argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>b_free_ca</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>p_dr</name> <operator>=</operator> <name><name>p_srv</name><operator>-&gt;</operator><name>p_first_descriptor</name></name></expr>;</init> <condition><expr><name>p_dr</name></expr>;</condition> <incr><expr><name>p_dr</name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>==</operator> <literal type="number">0x48</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>dvbpsi_service_dr_t</name> <modifier>*</modifier></type><name>pD</name> <init>= <expr><call><name>dvbpsi_DecodeServiceDr</name><argument_list>( <argument><expr><name>p_dr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>pD</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>str2</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>str2</name></expr></argument>, <argument><expr><name><name>pD</name><operator>-&gt;</operator><name>i_service_name</name></name></expr></argument>, <argument><expr><name><name>pD</name><operator>-&gt;</operator><name>i_service_name_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str2</name><index>[<expr><name><name>pD</name><operator>-&gt;</operator><name>i_service_name_length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" - type=%d name=%s"</literal></expr></argument>,
<argument><expr><name><name>pD</name><operator>-&gt;</operator><name>i_service_type</name></name></expr></argument>, <argument><expr><name>str2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * dsc 0x%x"</literal></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>scan_coderate_t</name></type> <name>ConvertDelDrInnerFec</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>v</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>v</name></expr>)</condition>
<block>{<block_content>
<default>default:</default>
<case>case <expr><literal type="number">0x0</literal></expr>:</case> <return>return <expr><name>SCAN_CODERATE_AUTO</name></expr>;</return>
<case>case <expr><literal type="number">0x1</literal></expr>:</case> <return>return <expr><name>SCAN_CODERATE_1_2</name></expr>;</return>
<case>case <expr><literal type="number">0x2</literal></expr>:</case> <return>return <expr><name>SCAN_CODERATE_2_3</name></expr>;</return>
<case>case <expr><literal type="number">0x3</literal></expr>:</case> <return>return <expr><name>SCAN_CODERATE_3_4</name></expr>;</return>
<case>case <expr><literal type="number">0x4</literal></expr>:</case> <return>return <expr><name>SCAN_CODERATE_5_6</name></expr>;</return>
<case>case <expr><literal type="number">0x5</literal></expr>:</case> <return>return <expr><name>SCAN_CODERATE_7_8</name></expr>;</return>
<case>case <expr><literal type="number">0x6</literal></expr>:</case> <return>return <expr><name>SCAN_CODERATE_8_9</name></expr>;</return>
<case>case <expr><literal type="number">0x7</literal></expr>:</case> <return>return <expr><name>SCAN_CODERATE_3_5</name></expr>;</return>
<case>case <expr><literal type="number">0x8</literal></expr>:</case> <return>return <expr><name>SCAN_CODERATE_4_5</name></expr>;</return>
<case>case <expr><literal type="number">0x9</literal></expr>:</case> <return>return <expr><name>SCAN_CODERATE_9_10</name></expr>;</return>
<case>case <expr><literal type="number">0xF</literal></expr>:</case> <return>return <expr><name>SCAN_CODERATE_NONE</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>scan_coderate_t</name></type> <name>ConvertDelDrCodeRate</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>v</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>v</name> <operator>&gt;</operator> <literal type="number">0x04</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>SCAN_CODERATE_AUTO</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>ConvertDelDrInnerFec</name><argument_list>( <argument><expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParseNIT</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_nit_t</name> <modifier>*</modifier></type><name>p_nit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>scan_tuner_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><specifier>const</specifier> <name>dvbpsi_nit_ts_t</name> <modifier>*</modifier></type><name>p_ts</name> <init>= <expr><name><name>p_nit</name><operator>-&gt;</operator><name>p_first_ts</name></name></expr></init></decl>;</init>
<condition><expr><name>p_ts</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_ts</name> <operator>=</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * ts ts_id=0x%x original_id=0x%x"</literal></expr></argument>, <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_ts_id</name></name></expr></argument>, <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_orig_network_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_private_data_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dsc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scan_tuner_config_t</name></type> <name>tscfg</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>scan_tuner_config_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tscfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_scan</name><operator>-&gt;</operator><name>parameter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_cfg</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>tscfg</name> <operator>=</operator> <operator>*</operator><name>p_cfg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>dvbpsi_service_list_dr_t</name> <modifier>*</modifier></type><name>p_sl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbpsi_lcn_dr_t</name> <modifier>*</modifier></type><name>p_lc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_nn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>p_dsc</name> <operator>=</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>p_first_descriptor</name></name></expr>;</init> <condition><expr><name>p_dsc</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_dsc</name> <operator>=</operator> <name><name>p_dsc</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_dsc</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>==</operator> <literal type="number">0x41</literal></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name>p_sl</name> <operator>=</operator> <call><name>dvbpsi_DecodeServiceListDr</name><argument_list>( <argument><expr><name>p_dsc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_dsc</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>==</operator> <literal type="number">0x5a</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>dvbpsi_terr_deliv_sys_dr_t</name> <modifier>*</modifier></type><name>p_t</name> <init>= <expr><call><name>dvbpsi_DecodeTerrDelivSysDr</name><argument_list>( <argument><expr><name>p_dsc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_t</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>i_frequency</name></name> <operator>=</operator> <name><name>p_t</name><operator>-&gt;</operator><name>i_centre_frequency</name></name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>i_bandwidth</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <name><name>p_t</name><operator>-&gt;</operator><name>i_bandwidth</name></name></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name><name>p_t</name><operator>-&gt;</operator><name>i_constellation</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>modulation</name></name> <operator>=</operator> <name>SCAN_MODULATION_QPSK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x01</literal></expr>:</case>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>modulation</name></name> <operator>=</operator> <name>SCAN_MODULATION_QAM_16</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x02</literal></expr>:</case>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>modulation</name></name> <operator>=</operator> <name>SCAN_MODULATION_QAM_64</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>modulation</name></name> <operator>=</operator> <name>SCAN_MODULATION_AUTO</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>coderate_hp</name></name> <operator>=</operator> <call><name>ConvertDelDrCodeRate</name><argument_list>( <argument><expr><name><name>p_t</name><operator>-&gt;</operator><name>i_code_rate_hp_stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_t</name><operator>-&gt;</operator><name>i_hierarchy_information</name></name> <operator>==</operator> <literal type="number">0x0</literal> <operator>||</operator> <name><name>p_t</name><operator>-&gt;</operator><name>i_hierarchy_information</name></name> <operator>==</operator> <literal type="number">0x4</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>coderate_lp</name></name> <operator>=</operator> <name>SCAN_CODERATE_NONE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>coderate_lp</name></name> <operator>=</operator> <call><name>ConvertDelDrCodeRate</name><argument_list>( <argument><expr><name><name>p_t</name><operator>-&gt;</operator><name>i_code_rate_lp_stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * terrestrial delivery system"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * centre_frequency %u"</literal></expr></argument>, <argument><expr><name><name>tscfg</name><operator>.</operator><name>i_frequency</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * bandwidth %u"</literal></expr></argument>, <argument><expr><name><name>tscfg</name><operator>.</operator><name>i_bandwidth</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * modulation %s"</literal></expr></argument>, <argument><expr><call><name>scan_value_modulation</name><argument_list>( <argument><expr><name><name>tscfg</name><operator>.</operator><name>modulation</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * hierarchy %d"</literal></expr></argument>, <argument><expr><name><name>p_t</name><operator>-&gt;</operator><name>i_hierarchy_information</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * code_rate hp %s lp %s"</literal></expr></argument>, <argument><expr><call><name>scan_value_coderate</name><argument_list>( <argument><expr><name><name>tscfg</name><operator>.</operator><name>coderate_hp</name></name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>scan_value_coderate</name><argument_list>( <argument><expr><name><name>tscfg</name><operator>.</operator><name>coderate_hp</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * guard_interval %d"</literal></expr></argument>, <argument><expr><name><name>p_t</name><operator>-&gt;</operator><name>i_guard_interval</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * transmission_mode %d"</literal></expr></argument>, <argument><expr><name><name>p_t</name><operator>-&gt;</operator><name>i_transmission_mode</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * other_frequency_flag %d"</literal></expr></argument>, <argument><expr><name><name>p_t</name><operator>-&gt;</operator><name>i_other_frequency_flag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_dsc</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>==</operator> <literal type="number">0x43</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>dvbpsi_sat_deliv_sys_dr_t</name> <modifier>*</modifier></type><name>p_s</name> <init>= <expr><call><name>dvbpsi_DecodeSatDelivSysDr</name><argument_list>( <argument><expr><name>p_dsc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_s</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>i_frequency</name></name> <operator>=</operator> <call><name>decode_BCD</name><argument_list>( <argument><expr><name><name>p_s</name><operator>-&gt;</operator><name>i_frequency</name></name></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>i_symbolrate</name></name> <operator>=</operator> <call><name>decode_BCD</name><argument_list>( <argument><expr><name><name>p_s</name><operator>-&gt;</operator><name>i_symbol_rate</name></name></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_s</name><operator>-&gt;</operator><name>i_polarization</name></name> <operator>&gt;</operator> <literal type="number">0x03</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_s</name><operator>-&gt;</operator><name>i_polarization</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>scan_polarization_t</name></type> <name><name>polarizations</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SCAN_POLARIZATION_HORIZONTAL</name></expr>,
<expr><name>SCAN_POLARIZATION_VERTICAL</name></expr>,
<expr><name>SCAN_POLARIZATION_CIRC_LEFT</name></expr>,
<expr><name>SCAN_POLARIZATION_CIRC_RIGHT</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>polarization</name></name> <operator>=</operator> <name><name>polarizations</name><index>[<expr><name><name>p_s</name><operator>-&gt;</operator><name>i_polarization</name></name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>p_s</name><operator>-&gt;</operator><name>i_modulation_type</name></name></expr>)</condition>
<block>{<block_content>
<default>default:</default>
<case>case <expr><literal type="number">0x00</literal></expr>:</case>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>modulation</name></name> <operator>=</operator> <name>SCAN_MODULATION_AUTO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x01</literal></expr>:</case>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>modulation</name></name> <operator>=</operator> <name>SCAN_MODULATION_QPSK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x02</literal></expr>:</case>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>modulation</name></name> <operator>=</operator> <name>SCAN_MODULATION_PSK_8</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x03</literal></expr>:</case>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>modulation</name></name> <operator>=</operator> <name>SCAN_MODULATION_QAM_16</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>delivery</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p_s</name><operator>-&gt;</operator><name>i_modulation_system</name></name> <operator>==</operator> <literal type="number">0x01</literal><operator>)</operator></expr> ?</condition><then> <expr><name>SCAN_DELIVERY_DVB_S2</name></expr>
</then><else>: <expr><name>SCAN_DELIVERY_DVB_S</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>inner_fec</name></name> <operator>=</operator> <call><name>ConvertDelDrInnerFec</name><argument_list>( <argument><expr><name><name>p_s</name><operator>-&gt;</operator><name>i_fec_inner</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * satellite delivery system"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * frequency %u"</literal></expr></argument>, <argument><expr><name><name>tscfg</name><operator>.</operator><name>i_frequency</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * symbolrate %u"</literal></expr></argument>, <argument><expr><name><name>tscfg</name><operator>.</operator><name>i_symbolrate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * polarization %c"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name><name>tscfg</name><operator>.</operator><name>polarization</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * modulation %s"</literal></expr></argument>, <argument><expr><call><name>scan_value_modulation</name><argument_list>( <argument><expr><name><name>tscfg</name><operator>.</operator><name>modulation</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * fec inner %s"</literal></expr></argument>, <argument><expr><call><name>scan_value_coderate</name><argument_list>( <argument><expr><name><name>tscfg</name><operator>.</operator><name>inner_fec</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tscfg</name><operator>.</operator><name>delivery</name></name> <operator>==</operator> <name>SCAN_DELIVERY_DVB_S2</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * system DVB-S2"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_dsc</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>==</operator> <literal type="number">0x44</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>dvbpsi_cable_deliv_sys_dr_t</name> <modifier>*</modifier></type><name>p_t</name> <init>= <expr><call><name>dvbpsi_DecodeCableDelivSysDr</name><argument_list>( <argument><expr><name>p_dsc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_t</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>i_frequency</name></name> <operator>=</operator> <call><name>decode_BCD</name><argument_list>( <argument><expr><name><name>p_t</name><operator>-&gt;</operator><name>i_frequency</name></name></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>i_symbolrate</name></name> <operator>=</operator> <call><name>decode_BCD</name><argument_list>( <argument><expr><name><name>p_t</name><operator>-&gt;</operator><name>i_symbol_rate</name></name></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_t</name><operator>-&gt;</operator><name>i_modulation</name></name> <operator>&lt;=</operator> <literal type="number">0x05</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>modulation</name></name> <operator>=</operator> <name><name>p_t</name><operator>-&gt;</operator><name>i_modulation</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>modulation</name></name> <operator>=</operator> <name>SCAN_MODULATION_AUTO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>tscfg</name><operator>.</operator><name>inner_fec</name></name> <operator>=</operator> <call><name>ConvertDelDrInnerFec</name><argument_list>( <argument><expr><name><name>p_t</name><operator>-&gt;</operator><name>i_fec_inner</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * Cable delivery system"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * frequency %d"</literal></expr></argument>, <argument><expr><name><name>tscfg</name><operator>.</operator><name>i_frequency</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * symbolrate %u"</literal></expr></argument>, <argument><expr><name><name>tscfg</name><operator>.</operator><name>i_symbolrate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * modulation %s"</literal></expr></argument>, <argument><expr><call><name>scan_value_modulation</name><argument_list>( <argument><expr><name><name>tscfg</name><operator>.</operator><name>modulation</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * fec inner %s"</literal></expr></argument>, <argument><expr><call><name>scan_value_coderate</name><argument_list>( <argument><expr><name><name>tscfg</name><operator>.</operator><name>inner_fec</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_dsc</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>==</operator> <literal type="number">0x5f</literal> <operator>&amp;&amp;</operator> <name><name>p_dsc</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * private data specifier descriptor"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_private_data_id</name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dsc</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * value 0x%8.8x"</literal></expr></argument>, <argument><expr><name>i_private_data_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_private_data_id</name> <operator>==</operator> <literal type="number">0x28</literal> <operator>&amp;&amp;</operator> <name><name>p_dsc</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>==</operator> <literal type="number">0x83</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * logical channel descriptor (EICTA)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_lc</name> <operator>=</operator> <call><name>dvbpsi_DecodeLCNDr</name><argument_list>( <argument><expr><name>p_dsc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_dsc</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>==</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator> <name><name>p_dsc</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><name>p_nn</name> <operator>=</operator> <name>p_dsc</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * dsc 0x%x"</literal></expr></argument>, <argument><expr><name><name>p_dsc</name><operator>-&gt;</operator><name>i_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>bool</name></type> <name>b_valid</name> <init>= <expr><call><name>scan_tuner_config_StandardValidate</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tscfg</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>b_valid</name> <operator>&amp;&amp;</operator> <name><name>p_nit</name><operator>-&gt;</operator><name>i_table_id</name></name> <operator>==</operator> <name>NIT_CURRENT_NETWORK_TABLE_ID</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>b_multiplexes_from_nit</name></name> <operator>|=</operator> <name>b_valid</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>scan_multiplex_t</name> <modifier>*</modifier></type><name>p_mplex</name> <init>= <expr><call><name>scan_FindMultiplex</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_ts_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_mplex</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>b_valid</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_mplex</name> <operator>=</operator> <call><name>scan_multiplex_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tscfg</name></expr></argument>, <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_ts_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_mplex</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>scan_AddMultiplex</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name>p_mplex</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>scan_multiplex_Delete</name><argument_list>( <argument><expr><name>p_mplex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_mplex</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_mplex</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_mplex</name><operator>-&gt;</operator><name>i_network_id</name></name> <operator>==</operator> <name>NETWORK_ID_RESERVED</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>i_network_id</name></name> <operator>=</operator> <name><name>p_nit</name><operator>-&gt;</operator><name>i_network_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_mplex</name><operator>-&gt;</operator><name>i_nit_version</name></name> <operator>=</operator> <name><name>p_nit</name><operator>-&gt;</operator><name>i_version</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>p_sl</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * service list descriptor"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p_sl</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>p_sl</name><operator>-&gt;</operator><name>i_service_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_service_id</name> <init>= <expr><name><name>p_sl</name><operator>-&gt;</operator><name>i_service</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_service_id</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_service_type</name> <init>= <expr><name><name>p_sl</name><operator>-&gt;</operator><name>i_service</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_service_type</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * service_id=%"</literal> <name>PRIu16</name> <literal type="string">" type=%"</literal> <name>PRIu8</name></expr></argument>,
<argument><expr><name>i_service_id</name></expr></argument>, <argument><expr><name>i_service_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_cfg</name> <operator>||</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>i_frequency</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"cannot create service_id=%"</literal> <name>PRIu16</name> <literal type="string">" ts_id=%"</literal> <name>PRIu16</name> <literal type="string">" (no config)"</literal></expr></argument>,
<argument><expr><name>i_service_id</name></expr></argument>, <argument><expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_ts_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_newservice</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scan_service_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>scan_multiplex_FindService</name><argument_list>( <argument><expr><name>p_mplex</name></expr></argument>, <argument><expr><name>i_service_id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>s</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>scan_service_New</name><argument_list>( <argument><expr><name>i_service_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_newservice</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>i_service_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_original_network_id</name></name> <operator>=</operator> <name><name>p_ts</name><operator>-&gt;</operator><name>i_orig_network_id</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>scan_multiplex_AddService</name><argument_list>( <argument><expr><name>p_mplex</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>scan_service_Delete</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>psz_original_network_name</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>p_nn</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>psz_original_network_name</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name><name>p_nn</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>p_nn</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>scan_NotifyService</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>!</operator><name>b_newservice</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>p_lc</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_lc</name><operator>-&gt;</operator><name>i_number_of_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_service_id</name> <init>= <expr><name><name>p_lc</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_service_id</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_channel_number</name> <init>= <expr><name><name>p_lc</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_logical_channel_number</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * service_id=%"</literal> <name>PRIu16</name> <literal type="string">" channel_number=%"</literal> <name>PRIu16</name></expr></argument>,
<argument><expr><name>i_service_id</name></expr></argument>, <argument><expr><name>i_channel_number</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>scan_service_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>scan_multiplex_FindService</name><argument_list>( <argument><expr><name>p_mplex</name></expr></argument>, <argument><expr><name>i_service_id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>s</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>=</operator> <name>i_channel_number</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>NITCallBack</name><parameter_list>( <parameter><decl><type><name>scan_session_t</name> <modifier>*</modifier></type><name>p_session</name></decl></parameter>, <parameter><decl><type><name>dvbpsi_nit_t</name> <modifier>*</modifier></type><name>p_nit</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name> <init>= <expr><name><name>p_session</name><operator>-&gt;</operator><name>p_obj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbpsi_nit_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_stored_nit</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_nit</name><operator>-&gt;</operator><name>i_table_id</name></name> <operator>==</operator> <name>NIT_OTHER_NETWORK_TABLE_ID</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>GetOtherNetworkNIT</name><argument_list>( <argument><expr><name>p_session</name></expr></argument>, <argument><expr><name><name>p_nit</name><operator>-&gt;</operator><name>i_network_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp_stored_nit</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>dvbpsi_nit_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>pp_nit</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>i_nit</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>pp_realloc</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_realloc</name></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>dvbpsi_nit_delete</name><argument_list>( <argument><expr><name>p_nit</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pp_stored_nit</name> <operator>=</operator> <operator>&amp;</operator><name><name>pp_realloc</name><index>[<expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>i_nit</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>pp_nit</name></name> <operator>=</operator> <name>pp_realloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>i_nit</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name>pp_stored_nit</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_nit</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_stored_nit</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><operator>(</operator><operator>*</operator><name>pp_stored_nit</name><operator>)</operator><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <name><name>p_nit</name><operator>-&gt;</operator><name>i_version</name></name> <operator>||</operator>
<name><operator>(</operator><operator>*</operator><name>pp_stored_nit</name><operator>)</operator><operator>-&gt;</operator><name>b_current_next</name></name> <operator>&gt;</operator> <name><name>p_nit</name><operator>-&gt;</operator><name>b_current_next</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>dvbpsi_nit_delete</name><argument_list>( <argument><expr><name>p_nit</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dvbpsi_nit_delete</name><argument_list>( <argument><expr><operator>*</operator><name>pp_stored_nit</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_stored_nit</name> <operator>=</operator> <name>p_nit</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"new NIT %s network_id=%d version=%d current_next=%d"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator> <name><name>p_nit</name><operator>-&gt;</operator><name>i_table_id</name></name> <operator>==</operator> <name>NIT_CURRENT_NETWORK_TABLE_ID</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"local"</literal></expr> </then><else>: <expr><literal type="string">"other"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>p_nit</name><operator>-&gt;</operator><name>i_network_id</name></name></expr></argument>, <argument><expr><name><name>p_nit</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument>, <argument><expr><name><name>p_nit</name><operator>-&gt;</operator><name>b_current_next</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dsc</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>p_dsc</name> <operator>=</operator> <name><name>p_nit</name><operator>-&gt;</operator><name>p_first_descriptor</name></name></expr>;</init> <condition><expr><name>p_dsc</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_dsc</name> <operator>=</operator> <name><name>p_dsc</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_dsc</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>==</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator> <name><name>p_dsc</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * network name descriptor"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str1</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>str1</name></expr></argument>, <argument><expr><name><name>p_dsc</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>p_dsc</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str1</name><index>[<expr><name><name>p_dsc</name><operator>-&gt;</operator><name>i_length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * name %s"</literal></expr></argument>, <argument><expr><name>str1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
else if( p_dsc-&gt;i_tag == 0x4a )
{
dvbpsi_linkage_dr_t *p_l = dvbpsi_DecodeLinkageDr( p_dsc );
if( p_l )
{
msg_Dbg( p_obj, " * linkage descriptor" );
msg_Dbg( p_obj, " * ts_id %" PRIu16, p_l-&gt;i_transport_stream_id );
msg_Dbg( p_obj, " * on_id %" PRIu16, p_l-&gt;i_original_network_id );
msg_Dbg( p_obj, " * service_id %" PRIu16, p_l-&gt;i_service_id );
msg_Dbg( p_obj, " * linkage_type %" PRIu8, p_l-&gt;i_linkage_type );
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">" * dsc 0x%x"</literal></expr></argument>, <argument><expr><name><name>p_dsc</name><operator>-&gt;</operator><name>i_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PSINewTableCallBack</name><parameter_list>( <parameter><decl><type><name>dvbpsi_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_table_id</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_extension</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>scan_session_t</name> <modifier>*</modifier></type><name>p_session</name> <init>= <expr><operator>(</operator><name>scan_session_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_table_id</name> <operator>==</operator> <name>SDT_CURRENT_TS_TABLE_ID</name> <operator>||</operator> <name>i_table_id</name> <operator>==</operator> <name>SDT_OTHER_TS_TABLE_ID</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dvbpsi_sdt_attach</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>i_table_id</name></expr></argument>, <argument><expr><name>i_extension</name></expr></argument>, <argument><expr><operator>(</operator><name>dvbpsi_sdt_callback</name><operator>)</operator><name>SDTCallBack</name></expr></argument>, <argument><expr><name>p_session</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_session</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"PSINewTableCallback: failed attaching SDTCallback"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_table_id</name> <operator>==</operator> <name>NIT_CURRENT_NETWORK_TABLE_ID</name> <operator>||</operator> <name>i_table_id</name> <operator>==</operator> <name>NIT_OTHER_NETWORK_TABLE_ID</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dvbpsi_nit_attach</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>i_table_id</name></expr></argument>, <argument><expr><name>i_extension</name></expr></argument>, <argument><expr><operator>(</operator><name>dvbpsi_nit_callback</name><operator>)</operator><name>NITCallBack</name></expr></argument>, <argument><expr><name>p_session</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>p_session</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><literal type="string">"PSINewTableCallback: failed attaching NITCallback"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>scan_session_t</name> <modifier>*</modifier></type><name>scan_session_New</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>scan_tuner_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>scan_session_t</name> <modifier>*</modifier></type><name>p_session</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_session</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_session</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>p_obj</name></name> <operator>=</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>p_obj</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>cfg</name></name> <operator>=</operator> <operator>*</operator><name>p_cfg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>i_snr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_pat</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_sdt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_nit</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>i_nit_pid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>b_use_nit</name></name> <operator>=</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>parameter</name><operator>.</operator><name>b_use_nit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>parameter</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>i_nit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>i_sdt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>pp_nit</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>pp_sdt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>p_pathandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>p_sdthandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_session</name><operator>-&gt;</operator><name>p_nithandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>p_session</name></expr>;</return><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_session_Delete</name><parameter_list>( <parameter><decl><type><name>scan_session_t</name> <modifier>*</modifier></type><name>p_session</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>i_sdt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dvbpsi_sdt_delete</name><argument_list>( <argument><expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>pp_sdt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>pp_sdt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>i_nit</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dvbpsi_nit_delete</name><argument_list>( <argument><expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>pp_nit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>pp_nit</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_session</name><operator>-&gt;</operator><name>p_pathandle</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dvbpsi_pat_detach</name><argument_list>( <argument><expr><name><name>p_session</name><operator>-&gt;</operator><name>p_pathandle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_pat</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dvbpsi_pat_delete</name><argument_list>( <argument><expr><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_pat</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_session</name><operator>-&gt;</operator><name>p_sdthandle</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dvbpsi_DetachDemux</name><argument_list>( <argument><expr><name><name>p_session</name><operator>-&gt;</operator><name>p_sdthandle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_sdt</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dvbpsi_sdt_delete</name><argument_list>( <argument><expr><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_sdt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_session</name><operator>-&gt;</operator><name>p_nithandle</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dvbpsi_DetachDemux</name><argument_list>( <argument><expr><name><name>p_session</name><operator>-&gt;</operator><name>p_nithandle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_nit</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dvbpsi_nit_delete</name><argument_list>( <argument><expr><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_nit</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_session</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_session_Destroy</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><name>scan_session_t</name> <modifier>*</modifier></type><name>p_session</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dvbpsi_pat_t</name> <modifier>*</modifier></type><name>p_pat</name> <init>= <expr><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_pat</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbpsi_sdt_t</name> <modifier>*</modifier></type><name>p_sdt</name> <init>= <expr><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_sdt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvbpsi_nit_t</name> <modifier>*</modifier></type><name>p_nit</name> <init>= <expr><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_nit</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>p_pat</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ParsePAT</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name>p_pat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_session</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>, <argument><expr><name><name>p_session</name><operator>-&gt;</operator><name>i_snr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>p_nit</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ParseNIT</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name>p_nit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_session</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>p_sdt</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ParseSDT</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name>p_sdt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>i_nit</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ParseNIT</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>pp_nit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>i_sdt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ParseSDT</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><name>p_scan</name></expr></argument>, <argument><expr><name><name>p_session</name><operator>-&gt;</operator><name>others</name><operator>.</operator><name>pp_sdt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><call><name>scan_session_Delete</name><argument_list>( <argument><expr><name>p_session</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ScanServiceCmp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>scan_service_t</name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>scan_service_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>a</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>scan_service_t</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>scan_service_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>b</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sa</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>==</operator> <name><name>sb</name><operator>-&gt;</operator><name>i_channel</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>sa</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>&amp;&amp;</operator> <name><name>sb</name><operator>-&gt;</operator><name>psz_name</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>sa</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sa</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>&lt;</operator> <name><name>sb</name><operator>-&gt;</operator><name>i_channel</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>sa</name><operator>-&gt;</operator><name>i_channel</name></name> <operator>&gt;</operator> <name><name>sb</name><operator>-&gt;</operator><name>i_channel</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>BlockString</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>psz</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>scan_set_NotifyCB</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><name>scan_service_notify_cb</name></type> <name>pf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>pf_notify_service</name></name> <operator>=</operator> <name>pf</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>scan_service_GetName</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_service_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>scan_service_GetProvider</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_service_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>psz_provider</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>scan_service_GetProgram</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_service_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>i_program</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>scan_service_GetNetworkName</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_service_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>psz_network_name</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>scan_service_GetUri</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_service_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mrl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>type</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>SCAN_DVB_T</name></expr>:</case>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_mrl</name></expr></argument>, <argument><expr><literal type="string">"dvb://frequency=%d:bandwidth=%d:modulation=%s"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_frequency</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_bandwidth</name></name></expr></argument>,
<argument><expr><call><name>scan_value_modulation</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>modulation</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SCAN_DVB_S</name></expr>:</case>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_mrl</name></expr></argument>, <argument><expr><literal type="string">"dvb://frequency=%d:srate=%d:polarization=%c:fec=%s"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_frequency</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_symbolrate</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>polarization</name></name></expr></argument>,
<argument><expr><call><name>scan_value_coderate</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>inner_fec</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SCAN_DVB_C</name></expr>:</case>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_mrl</name></expr></argument>, <argument><expr><literal type="string">"dvb://frequency=%d:srate=%d:modulation=%s:fec=%s"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_frequency</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_symbolrate</name></name></expr></argument>,
<argument><expr><call><name>scan_value_modulation</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>modulation</name></name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>scan_value_coderate</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>inner_fec</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>i_ret</name> <operator>&gt;=</operator><literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>psz_mrl</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>scan_GetM3U</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name> <init>= <expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_obj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_playlist</name> <init>= <expr><call><name>BlockString</name><argument_list>( <argument><expr><literal type="string">"#EXTM3U\n\n"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_playlist</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_total_services</name> <init>= <expr><call><name>scan_CountServices</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_filtered_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>scan_service_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_filtered_list</name> <init>= <expr><call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_total_services</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>scan_service_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_filtered_list</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_playlist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>i_multiplex</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>scan_multiplex_t</name> <modifier>*</modifier></type><name>p_mplex</name> <init>= <expr><name><name>p_scan</name><operator>-&gt;</operator><name>pp_multiplex</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mplex</name><operator>-&gt;</operator><name>i_services</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>scan_service_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>p_mplex</name><operator>-&gt;</operator><name>pp_services</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>scan_service_type_Supported</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"scan_GetM3U: ignoring service number %d"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>i_program</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pp_filtered_list</name><index>[<expr><name>i_filtered_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><call><name>qsort</name><argument_list>( <argument><expr><name>pp_filtered_list</name></expr></argument>, <argument><expr><name>i_filtered_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>scan_service_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ScanServiceCmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_filtered_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>scan_service_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>pp_filtered_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_type</name></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>SERVICE_TYPE_DIGITAL_TELEVISION</name></expr>:</case> <expr_stmt><expr><name>psz_type</name> <operator>=</operator> <literal type="string">"Digital television"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>SERVICE_TYPE_DIGITAL_TELEVISION_AC_SD</name></expr>:</case> <expr_stmt><expr><name>psz_type</name> <operator>=</operator> <literal type="string">"Digital television advanced codec SD"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>SERVICE_TYPE_DIGITAL_TELEVISION_AC_HD</name></expr>:</case> <expr_stmt><expr><name>psz_type</name> <operator>=</operator> <literal type="string">"Digital television advanced codec HD"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>SERVICE_TYPE_DIGITAL_RADIO</name></expr>:</case> <expr_stmt><expr><name>psz_type</name> <operator>=</operator> <literal type="string">"Digital radio"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>psz_type</name> <operator>=</operator> <literal type="string">"Unknown"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"scan_GetM3U: service number %d type '%s' name '%s' channel %d cypted=%d|"</literal>
<literal type="string">"network_id %d (nit:%d sdt:%d)| f=%d bw=%d snr=%d modulation=%s"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>i_program</name></name></expr></argument>, <argument><expr><name>psz_type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>i_channel</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_crypted</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>i_network_id</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>i_nit_version</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>i_sdt_version</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_frequency</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>i_bandwidth</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>i_snr</name></name></expr></argument>,
<argument><expr><call><name>scan_value_modulation</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mplex</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>modulation</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mrl</name> <init>= <expr><call><name>scan_service_GetUri</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_mrl</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz</name></expr></argument>, <argument><expr><literal type="string">"#EXTINF:,,%s\n"</literal>
<literal type="string">"#EXTVLCOPT:program=%d\n"</literal>
<literal type="string">"%s\n\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>&amp;&amp;</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>psz_name</name></name></expr> </then><else>: <expr><literal type="string">"Unknown"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>i_program</name></name></expr></argument>,
<argument><expr><name>psz_mrl</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_mrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>BlockString</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_playlist</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_filtered_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>p_playlist</name></expr> ?</condition><then> <expr><call><name>block_ChainGather</name><argument_list>( <argument><expr><name>p_playlist</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dvbpsi_packet_push</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dvbpsi_packet_push(a, (uint8_t *)b)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>scan_session_Push</name><parameter_list>( <parameter><decl><type><name>scan_session_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_packet</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_packet</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x47</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_pid</name> <init>= <expr><operator>(</operator> <operator>(</operator><name><name>p_packet</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x1f</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p_packet</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_pid</name> <operator>==</operator> <name>PSI_PAT_PID</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_scan</name><operator>-&gt;</operator><name>p_pathandle</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_pathandle</name></name> <operator>=</operator> <call><name>dvbpsi_new</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dvbpsi_messages</name></expr></argument>, <argument><expr><name>DVBPSI_MSG_DEBUG</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_scan</name><operator>-&gt;</operator><name>p_pathandle</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_pathandle</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>p_obj</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dvbpsi_pat_attach</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_pathandle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>dvbpsi_pat_callback</name><operator>)</operator><name>PATCallBack</name></expr></argument>, <argument><expr><name>p_scan</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dvbpsi_delete</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_pathandle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_pathandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_pathandle</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dvbpsi_packet_push</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_pathandle</name></name></expr></argument>, <argument><expr><name>p_packet</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_pid</name> <operator>==</operator> <name>SI_SDT_PID</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_scan</name><operator>-&gt;</operator><name>p_sdthandle</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_sdthandle</name></name> <operator>=</operator> <call><name>dvbpsi_new</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dvbpsi_messages</name></expr></argument>, <argument><expr><name>DVBPSI_MSG_DEBUG</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_scan</name><operator>-&gt;</operator><name>p_sdthandle</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_sdthandle</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>p_obj</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dvbpsi_AttachDemux</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_sdthandle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>dvbpsi_demux_new_cb_t</name><operator>)</operator><name>PSINewTableCallBack</name></expr></argument>, <argument><expr><name>p_scan</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dvbpsi_delete</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_sdthandle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_sdthandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_sdthandle</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dvbpsi_packet_push</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_sdthandle</name></name></expr></argument>, <argument><expr><name>p_packet</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_scan</name><operator>-&gt;</operator><name>b_use_nit</name></name> <operator>&amp;&amp;</operator> <name>i_pid</name> <operator>==</operator> <name>SI_NIT_PID</name></expr> )</condition> 
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_scan</name><operator>-&gt;</operator><name>p_nithandle</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_nithandle</name></name> <operator>=</operator> <call><name>dvbpsi_new</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dvbpsi_messages</name></expr></argument>, <argument><expr><name>DVBPSI_MSG_DEBUG</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_scan</name><operator>-&gt;</operator><name>p_nithandle</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_nithandle</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>p_obj</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dvbpsi_AttachDemux</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_nithandle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>dvbpsi_demux_new_cb_t</name><operator>)</operator><name>PSINewTableCallBack</name></expr></argument>, <argument><expr><name>p_scan</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dvbpsi_delete</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_nithandle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_nithandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_nithandle</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dvbpsi_packet_push</name><argument_list>( <argument><expr><name><name>p_scan</name><operator>-&gt;</operator><name>p_nithandle</name></name></expr></argument>, <argument><expr><name>p_packet</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>p_scan</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_pat</name></name> <operator>&amp;&amp;</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_sdt</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>p_scan</name><operator>-&gt;</operator><name>b_use_nit</name></name> <operator>||</operator> <name><name>p_scan</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_nit</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>scan_session_GetTablesTimeout</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>scan_session_t</name> <modifier>*</modifier></type><name>p_session</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_pat</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_time</name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_sdt</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_time</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><name><name>p_session</name><operator>-&gt;</operator><name>local</name><operator>.</operator><name>p_nit</name></name> <operator>&amp;&amp;</operator> <name><name>p_session</name><operator>-&gt;</operator><name>b_use_nit</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_session</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SCAN_DVB_T</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_time</name> <operator>=</operator> <literal type="number">6000</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_time</name> <operator>=</operator> <literal type="number">5000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_time</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scan_value_modulation</name><parameter_list>( <parameter><decl><type><name>scan_modulation_t</name></type> <name>m</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>m</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SCAN_MODULATION_QAM_16</name></expr>:</case> <return>return <expr><literal type="string">"16QAM"</literal></expr>;</return>
<case>case <expr><name>SCAN_MODULATION_QAM_32</name></expr>:</case> <return>return <expr><literal type="string">"32QAM"</literal></expr>;</return>
<case>case <expr><name>SCAN_MODULATION_QAM_64</name></expr>:</case> <return>return <expr><literal type="string">"64QAM"</literal></expr>;</return>
<case>case <expr><name>SCAN_MODULATION_QAM_128</name></expr>:</case> <return>return <expr><literal type="string">"128QAM"</literal></expr>;</return>
<case>case <expr><name>SCAN_MODULATION_QAM_256</name></expr>:</case> <return>return <expr><literal type="string">"256QAM"</literal></expr>;</return>
<case>case <expr><name>SCAN_MODULATION_QAM_AUTO</name></expr>:</case> <return>return <expr><literal type="string">"QAM"</literal></expr>;</return>
<case>case <expr><name>SCAN_MODULATION_PSK_8</name></expr>:</case> <return>return <expr><literal type="string">"8PSK"</literal></expr>;</return>
<case>case <expr><name>SCAN_MODULATION_QPSK</name></expr>:</case> <return>return <expr><literal type="string">"QPSK"</literal></expr>;</return>
<case>case <expr><name>SCAN_MODULATION_DQPSK</name></expr>:</case> <return>return <expr><literal type="string">"DQPSK"</literal></expr>;</return>
<case>case <expr><name>SCAN_MODULATION_APSK_16</name></expr>:</case> <return>return <expr><literal type="string">"16APSK"</literal></expr>;</return>
<case>case <expr><name>SCAN_MODULATION_APSK_32</name></expr>:</case> <return>return <expr><literal type="string">"32APSK"</literal></expr>;</return>
<case>case <expr><name>SCAN_MODULATION_VSB_8</name></expr>:</case> <return>return <expr><literal type="string">"8VSB"</literal></expr>;</return>
<case>case <expr><name>SCAN_MODULATION_VSB_16</name></expr>:</case> <return>return <expr><literal type="string">"16VSB"</literal></expr>;</return>
<case>case <expr><name>SCAN_MODULATION_QAM_4NR</name></expr>:</case>
<case>case <expr><name>SCAN_MODULATION_AUTO</name></expr>:</case>
<default>default:</default> <return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scan_value_coderate</name><parameter_list>( <parameter><decl><type><name>scan_coderate_t</name></type> <name>c</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>( <expr><name>c</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>SCAN_CODERATE_NONE</name></expr>:</case> <return>return <expr><literal type="string">"0"</literal></expr>;</return>
<case>case <expr><name>SCAN_CODERATE_1_2</name></expr>:</case> <return>return <expr><literal type="string">"1/2"</literal></expr>;</return>
<case>case <expr><name>SCAN_CODERATE_2_3</name></expr>:</case> <return>return <expr><literal type="string">"2/3"</literal></expr>;</return>
<case>case <expr><name>SCAN_CODERATE_3_4</name></expr>:</case> <return>return <expr><literal type="string">"3/4"</literal></expr>;</return>
<case>case <expr><name>SCAN_CODERATE_3_5</name></expr>:</case> <return>return <expr><literal type="string">"3/5"</literal></expr>;</return>
<case>case <expr><name>SCAN_CODERATE_4_5</name></expr>:</case> <return>return <expr><literal type="string">"4/5"</literal></expr>;</return>
<case>case <expr><name>SCAN_CODERATE_5_6</name></expr>:</case> <return>return <expr><literal type="string">"5/6"</literal></expr>;</return>
<case>case <expr><name>SCAN_CODERATE_7_8</name></expr>:</case> <return>return <expr><literal type="string">"7/8"</literal></expr>;</return>
<case>case <expr><name>SCAN_CODERATE_8_9</name></expr>:</case> <return>return <expr><literal type="string">"8/9"</literal></expr>;</return>
<case>case <expr><name>SCAN_CODERATE_9_10</name></expr>:</case> <return>return <expr><literal type="string">"9/10"</literal></expr>;</return>
<case>case <expr><name>SCAN_CODERATE_AUTO</name></expr>:</case>
<default>default:</default> <return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
