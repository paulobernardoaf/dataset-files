<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\dvb\access.c">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dvb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scan.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>demux_handle_t</name></type> <name><name>p_demux_handles</name><index>[<expr><name>MAX_DEMUX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvb_sys_t</name></type> <name>dvb</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>scan_t</name></name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>done</name></decl>;</decl_stmt>
}</block></struct></type> <name>access_sys_t</name>;</typedef>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROBE_TEXT</name></cpp:macro> <cpp:value>N_("Probe DVB card for capabilities")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROBE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Some DVB cards do not like to be probed for their capabilities, you can disable this feature if you experience some trouble.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SATELLITE_TEXT</name></cpp:macro> <cpp:value>N_("Satellite scanning config")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SATELLITE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Filename of config file in share/dvb/dvb-s.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCANLIST_TEXT</name></cpp:macro> <cpp:value>N_("Scan tuning list")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCANLIST_LONGTEXT</name></cpp:macro> <cpp:value>N_("Filename containing initial scan tuning data.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCAN_NIT_TEXT</name></cpp:macro> <cpp:value>N_("Use NIT for scanning services")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"DVB"</literal>)</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"DVB input with v4l2 support"</literal>)</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_ACCESS</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"dvb-probe"</literal></argument>, <argument>true</argument>, <argument>PROBE_TEXT</argument>, <argument>PROBE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"dvb-satellite"</literal></argument>, <argument>NULL</argument>, <argument>SATELLITE_TEXT</argument>, <argument>SATELLITE_LONGTEXT</argument>,
<argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument><literal type="string">"dvb-scanlist"</literal></argument>, <argument>NULL</argument>, <argument>SCANLIST_TEXT</argument>, <argument>SCANLIST_LONGTEXT</argument>,
<argument>true</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"dvb-scan-nit"</literal></argument>, <argument>true</argument>, <argument>SCAN_NIT_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"dvb"</literal></argument>, 
<argument><literal type="string">"dvb-s"</literal></argument>, <argument><literal type="string">"qpsk"</literal></argument>, <argument><literal type="string">"satellite"</literal></argument>, 
<argument><literal type="string">"dvb-c"</literal></argument>, <argument><literal type="string">"cable"</literal></argument>, 
<argument><literal type="string">"dvb-t"</literal></argument>, <argument><literal type="string">"terrestrial"</literal></argument> )</argument_list></macro> 

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>





<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>BlockScan</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVB_SCAN_MAX_LOCK_TIME</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(2)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FilterUnset</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_max</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FilterSet</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>VarInit</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseMRL</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ScanFrontendTuningHandler</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>scan_tuner_config_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ScanFilterHandler</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ScanStatsCallback</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_privdata</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_snr</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ScanReadCallback</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_access</name><operator>-&gt;</operator><name>b_preparsing</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>access_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>VarInit</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><call><name>ParseMRL</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_scan_mode</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-frequency"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>b_scan_mode</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"DVB scan mode selected"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_block</name></name> <operator>=</operator> <name>BlockScan</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return> 
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>FrontendOpen</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dvb</name></name></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>DVROpen</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dvb</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FrontendClose</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dvb</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>scan_parameter_t</name></type> <name>parameter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>scan_parameter_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>parameter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parameter</name><operator>.</operator><name>b_use_nit</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-scan-nit"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FrontendFillScanParameter</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dvb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parameter</name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>(</operator><name>p_scan</name> <operator>=</operator> <call><name>scan_New</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>parameter</name></expr></argument>,
<argument><expr><name>ScanFrontendTuningHandler</name></expr></argument>,
<argument><expr><name>ScanStatsCallback</name></expr></argument>,
<argument><expr><name>ScanFilterHandler</name></expr></argument>,
<argument><expr><name>ScanReadCallback</name></expr></argument>,
<argument><expr><name>p_access</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>scan_parameter_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>parameter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>scan_parameter_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>parameter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>scan</name></name> <operator>=</operator> <name>p_scan</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FilterUnset</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>MAX_DEMUX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DVRClose</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dvb</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FrontendClose</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dvb</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scan_Destroy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>scan</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ScanFrontendTuningHandler</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_privdata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>scan_tuner_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator> <name>p_privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-frequency"</literal></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_frequency</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-bandwidth"</literal></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_bandwidth</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>polarization</name></name> <operator>!=</operator> <name>SCAN_POLARIZATION_NONE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-voltage"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>polarization</name></name> <operator>==</operator> <name>SCAN_POLARIZATION_HORIZONTAL</name></expr> ?</condition><then> <expr><literal type="number">18</literal></expr> </then><else>: <expr><literal type="number">13</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_symbolrate</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-srate"</literal></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_symbolrate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Scanning frequency %d"</literal></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_frequency</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">" bandwidth %d"</literal></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_bandwidth</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><call><name>FrontendSet</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>dvb</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failed to tune the frontend"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ScanStatsCallback</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_privdata</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_snr</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator> <name>p_privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>frontend_statistic_t</name></type> <name>stat</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>FrontendGetStatistic</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>dvb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_snr</name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>i_snr</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ScanFilterHandler</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_privdata</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_pid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_set</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator> <name>p_privdata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_set</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FilterSet</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>i_pid</name></expr></argument>, <argument><expr><name>OTHER_TYPE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ScanReadCallback</name><parameter_list>( <parameter><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_privdata</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>i_probe_timeout</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_packets_max</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_packet</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_count</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator> <name>p_privdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>ufds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ufds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>dvb</name><operator>.</operator><name>i_handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ufds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ufds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>dvb</name><operator>.</operator><name>i_frontend_handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ufds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLPRI</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>frontend_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FrontendGetStatus</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dvb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_has_lock</name> <init>= <expr><name><name>status</name><operator>.</operator><name>b_has_lock</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_scan_start</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><operator>*</operator><name>pi_count</name> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_timeout</name> <init>= <expr><ternary><condition><expr><name>b_has_lock</name></expr> ?</condition><then> <expr><name>i_probe_timeout</name></expr></then><else>:
<expr><name>DVB_SCAN_MAX_LOCK_TIME</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_poll_timeout</name> <init>= <expr><name>i_scan_start</name> <operator>-</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <name>i_timeout</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_killed</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>scan_IsCancelled</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_poll_timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_poll_i11e</name><argument_list>( <argument><expr><name>ufds</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i_poll_timeout</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
while<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr> )</condition>;</do>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_ENOITEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ufds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>revents</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FrontendPoll</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dvb</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FrontendGetStatus</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dvb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>status</name><operator>.</operator><name>b_has_lock</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_has_lock</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_scan_start</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_has_lock</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>ufds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_read</name> <init>= <expr><call><name>read</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>dvb</name><operator>.</operator><name>i_handle</name></name></expr></argument>, <argument><expr><name>p_packet</name></expr></argument>, <argument><expr><name>TS_PACKET_SIZE</name> <operator>*</operator> <name>i_packets_max</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"read failed: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_count</name> <operator>=</operator> <name>i_read</name> <operator>/</operator> <name>TS_PACKET_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>BlockScan</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>eof</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scan_t</name> <modifier>*</modifier></type><name>p_scan</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>scan</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>scan_Run</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>done</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Scanning finished"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>scan_GetM3U</name><argument_list>( <argument><expr><name>p_scan</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_block</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_bool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>pf1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pf2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>frontend_statistic_t</name></type> <name>stat</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>STREAM_CAN_SEEK</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_FASTSEEK</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_CONTROL_PACE</name></expr>:</case>
<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_GET_CONTENT_TYPE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"application/vnd.apple.mpegurl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>STREAM_GET_PTS_DELAY</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>DEFAULT_PTS_DELAY</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_GET_SIGNAL</name></expr>:</case>
<expr_stmt><expr><name>pf1</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pf2</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pf1</name> <operator>=</operator> <operator>*</operator><name>pf2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>FrontendGetStatistic</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>dvb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pf1</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>stat</name><operator>.</operator><name>i_snr</name></name> <operator>/</operator> <literal type="number">65535.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pf2</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>stat</name><operator>.</operator><name>i_signal_strenth</name></name> <operator>/</operator> <literal type="number">65535.0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>FilterSet</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_DEMUX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_demux_handles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_type</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_demux_handles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pid</name> <operator>==</operator> <name>i_pid</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;=</operator> <name>MAX_DEMUX</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"no free p_demux_handles !"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>DMXSetFilter</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i_pid</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_demux_handles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_handle</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"DMXSetFilter failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_demux_handles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_type</name> <operator>=</operator> <name>i_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_demux_handles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pid</name> <operator>=</operator> <name>i_pid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FilterUnset</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_max</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_demux_handles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_type</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DMXUnsetFilter</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_demux_handles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_handle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_demux_handles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>VarInit</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-adapter"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-device"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-frequency"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-inversion"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-probe"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-satellite"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-satno"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-voltage"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-high-voltage"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-tone"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-srate"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-lnb-lof1"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-lnb-lof2"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-lnb-slof"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-bandwidth"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-transmission"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-hierarchy"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseMRL</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dup</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_parser</name> <init>= <expr><name>psz_dup</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OPTION_INT</name><parameter_list>( <parameter><type><name>option</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if ( !strncmp( psz_parser, option "=", strlen(option "=") ) ) { val.i_int = strtol( psz_parser + strlen(option "="), &amp;psz_parser, 0 ); var_Set( p_access, "dvb-" option, val ); }</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OPTION_BOOL</name><parameter_list>( <parameter><type><name>option</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if ( !strncmp( psz_parser, option "=", strlen(option "=") ) ) { val.b_bool = strtol( psz_parser + strlen(option "="), &amp;psz_parser, 0 ); var_Set( p_access, "dvb-" option, val ); }</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OPTION_STRING</name><parameter_list>( <parameter><type><name>option</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if ( !strncmp( psz_parser, option "=", strlen( option "=" ) ) ) { psz_parser += strlen( option "=" ); val.psz_string = psz_parser; char *p_save; char *tok = strtok_r(val.psz_string, ":", &amp;p_save); val.psz_string[tok - val.psz_string - 1] = 0; var_Set( p_access, "dvb-" option, val ); psz_parser += strlen( val.psz_string ); }</cpp:value></cpp:define>











<while>while<condition>( <expr><operator>*</operator><name>psz_parser</name></expr> )</condition>
<block>{<block_content>
<macro><name>GET_OPTION_INT</name><argument_list>(<argument><literal type="string">"adapter"</literal></argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>GET_OPTION_INT</name><argument_list>(<argument><literal type="string">"device"</literal></argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>GET_OPTION_INT</name><argument_list>(<argument><literal type="string">"frequency"</literal></argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>GET_OPTION_INT</name><argument_list>(<argument><literal type="string">"inversion"</literal></argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>GET_OPTION_BOOL</name><argument_list>(<argument><literal type="string">"probe"</literal></argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>GET_OPTION_BOOL</name><argument_list>(<argument><literal type="string">"budget-mode"</literal></argument>)</argument_list></macro>

<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>GET_OPTION_STRING</name><argument_list>(<argument><literal type="string">"satellite"</literal></argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>GET_OPTION_INT</name><argument_list>(<argument><literal type="string">"voltage"</literal></argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>GET_OPTION_BOOL</name><argument_list>(<argument><literal type="string">"high-voltage"</literal></argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>GET_OPTION_INT</name><argument_list>(<argument><literal type="string">"tone"</literal></argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>GET_OPTION_INT</name><argument_list>(<argument><literal type="string">"satno"</literal></argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>GET_OPTION_INT</name><argument_list>(<argument><literal type="string">"srate"</literal></argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>GET_OPTION_INT</name><argument_list>(<argument><literal type="string">"lnb-lof1"</literal></argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>GET_OPTION_INT</name><argument_list>(<argument><literal type="string">"lnb-lof2"</literal></argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>GET_OPTION_INT</name><argument_list>(<argument><literal type="string">"lnb-slof"</literal></argument>)</argument_list></macro>

<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>GET_OPTION_INT</name><argument_list>(<argument><literal type="string">"bandwidth"</literal></argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>GET_OPTION_INT</name><argument_list>(<argument><literal type="string">"transmission"</literal></argument>)</argument_list></macro>
<if_stmt><else>else<block type="pseudo"><block_content> <macro><name>GET_OPTION_INT</name><argument_list>(<argument><literal type="string">"hierarchy"</literal></argument>)</argument_list></macro>


<if_stmt><if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="string">"polarization="</literal></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>( <argument><expr><literal type="string">"polarization="</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_parser</name> <operator>+=</operator> <call><name>strlen</name><argument_list>( <argument><expr><literal type="string">"polarization="</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>*</operator><name>psz_parser</name> <operator>==</operator> <literal type="char">'V'</literal> <operator>||</operator> <operator>*</operator><name>psz_parser</name> <operator>==</operator> <literal type="char">'v'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><operator>*</operator><name>psz_parser</name> <operator>==</operator> <literal type="char">'H'</literal> <operator>||</operator> <operator>*</operator><name>psz_parser</name> <operator>==</operator> <literal type="char">'h'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>=</operator> <literal type="number">18</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"illegal polarization %c"</literal></expr></argument>, <argument><expr><operator>*</operator><name>psz_parser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>var_Set</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dvb-voltage"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"unknown option (%s)"</literal></expr></argument>, <argument><expr><name>psz_parser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>*</operator><name>psz_parser</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_parser</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_OPTION_INT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_OPTION_BOOL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_OPTION_STRING</name></cpp:undef>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

</unit>
