<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\dsm\sd.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_services_discovery.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bdsm/bdsm.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BDSM_VERSION_CURRENT</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>BDSM_VERSION_CURRENT</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> libdsm version current too low: need at least BDSM_VERSION_CURRENT 2</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROADCAST_TIMEOUT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 

<function_decl><type><name>int</name></type> <name>bdsm_SdOpen</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bdsm_SdClose</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<struct>struct <name>entry_item</name>
<block>{
<decl_stmt><decl><type><name>netbios_ns_entry</name> <modifier>*</modifier></type><name>p_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>netbios_ns</name> <modifier>*</modifier></type><name>p_ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>entry_item_list</name></decl>;</decl_stmt>
}</block></struct></type> <name>services_discovery_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>entry_item_append</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter>,
<parameter><decl><type><name>netbios_ns_entry</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter>,
<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>entry_item</name></name> <modifier>*</modifier></type><name>p_entry_item</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>entry_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_entry_item</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_entry_item</name><operator>-&gt;</operator><name>p_entry</name></name> <operator>=</operator> <name>p_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_entry_item</name><operator>-&gt;</operator><name>p_item</name></name> <operator>=</operator> <name>p_item</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Hold</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_array_append_or_abort</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>entry_item_list</name></name></expr></argument>, <argument><expr><name>p_entry_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>services_discovery_AddItem</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>entry_item_remove</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter>,
<parameter><decl><type><name>netbios_ns_entry</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>entry_item_list</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>entry_item</name></name> <modifier>*</modifier></type><name>p_entry_item</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_entry_item</name> <operator>=</operator> <call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>entry_item_list</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_entry_item</name><operator>-&gt;</operator><name>p_entry</name></name> <operator>==</operator> <name>p_entry</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>services_discovery_RemoveItem</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name><name>p_entry_item</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name><name>p_entry_item</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_array_remove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>entry_item_list</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_entry_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>netbios_ns_discover_on_entry_added</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_opaque</name></decl></parameter>,
<parameter><decl><type><name>netbios_ns_entry</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator><name>services_discovery_t</name> <operator>*</operator><operator>)</operator><name>p_opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>type</name> <init>= <expr><call><name>netbios_ns_entry_type</name><argument_list>( <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>type</name> <operator>==</operator> <name>NETBIOS_FILESERVER</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>netbios_ns_entry_name</name><argument_list>( <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_mrl</name></expr></argument>, <argument><expr><literal type="string">"smb://%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_item</name> <operator>=</operator> <call><name>input_item_NewDirectory</name><argument_list>( <argument><expr><name>psz_mrl</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ITEM_NET</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"Adding item %s"</literal></expr></argument>, <argument><expr><name>psz_mrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_mrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>entry_item_append</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument>, <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>netbios_ns_discover_on_entry_removed</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_opaque</name></decl></parameter>,
<parameter><decl><type><name>netbios_ns_entry</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator><name>services_discovery_t</name> <operator>*</operator><operator>)</operator><name>p_opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>entry_item_remove</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>bdsm_SdOpen</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator><name>services_discovery_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>services_discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>netbios_ns_discover_callbacks</name></type> <name>callbacks</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sd</name><operator>-&gt;</operator><name>description</name></name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Windows networks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>entry_item_list</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ns</name></name> <operator>=</operator> <call><name>netbios_ns_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ns</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>callbacks</name><operator>.</operator><name>p_opaque</name></name> <operator>=</operator> <name>p_sd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>callbacks</name><operator>.</operator><name>pf_on_entry_added</name></name> <operator>=</operator> <name>netbios_ns_discover_on_entry_added</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>callbacks</name><operator>.</operator><name>pf_on_entry_removed</name></name> <operator>=</operator> <name>netbios_ns_discover_on_entry_removed</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>netbios_ns_discover_start</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ns</name></name></expr></argument>, <argument><expr><name>BROADCAST_TIMEOUT</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>callbacks</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>bdsm_SdClose</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bdsm_SdClose</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><operator>(</operator><name>services_discovery_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>services_discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ns</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>netbios_ns_discover_stop</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ns</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>netbios_ns_destroy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ns</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>entry_item_list</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>entry_item</name></name> <modifier>*</modifier></type><name>p_entry_item</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_entry_item</name> <operator>=</operator> <call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>entry_item_list</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name><name>p_entry_item</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_entry_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>entry_item_list</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
