<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\nfs.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nfsc/libnfs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nfsc/libnfs-raw.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nfsc/libnfs-raw-nfs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nfsc/libnfs-raw-mount.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTO_GUID_TEXT</name></cpp:macro> <cpp:value>N_("Set NFS uid/guid automatically")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTO_GUID_LONGTEXT</name></cpp:macro> <cpp:value>N_("If uid/gid are not specified in " "the url, VLC will automatically set a uid/gid.")</cpp:value></cpp:define>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"NFS"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"NFS input"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_ACCESS</argument>)</argument_list></macro>
<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"nfs-auto-guid"</literal></argument>, <argument>true</argument>, <argument>AUTO_GUID_TEXT</argument>, <argument>AUTO_GUID_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"nfs"</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>rpc_context</name></name> <modifier>*</modifier></type> <name>p_mount</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>nfs_context</name></name> <modifier>*</modifier></type> <name>p_nfs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nfs_url</name></name> <modifier>*</modifier></type> <name>p_nfs_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nfs_stat_64</name></name></type> <name>stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nfsfh</name></name> <modifier>*</modifier></type> <name>p_nfsfh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nfsdir</name></name> <modifier>*</modifier></type> <name>p_nfsdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>encoded_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_url_decoded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_url_decoded_slash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_eof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_auto_guid</name></decl>;</decl_stmt>

<union>union <block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>ppsz_names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name></decl>;</decl_stmt>
}</block> <decl><name>exports</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name></decl>;</decl_stmt>
}</block> <decl><name>read</name></decl>;</struct>
<struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_done</name></decl>;</decl_stmt>
}</block> <decl><name>seek</name></decl>;</struct>
}</block> <decl><name>res</name></decl>;</union>
}</block></struct></type> <name>access_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>nfs_check_status</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_status</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_error</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i_status</name> <operator>!=</operator> <operator>-</operator><name>EINTR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"%s failed: %d, '%s'"</literal></expr></argument>, <argument><expr><name>psz_func</name></expr></argument>, <argument><expr><name>i_status</name></expr></argument>,
<argument><expr><name>psz_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>b_error</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"NFS operation failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name>psz_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"%s interrupted"</literal></expr></argument>, <argument><expr><name>psz_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFS_CHECK_STATUS</name><parameter_list>(<parameter><type><name>p_access</name></type></parameter>, <parameter><type><name>i_status</name></type></parameter>, <parameter><type><name>p_data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>nfs_check_status(p_access, i_status, (const char *)p_data, __func__)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>vlc_rpc_mainloop</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rpc_context</name></name> <modifier>*</modifier></type><name>p_rpc_ctx</name></decl></parameter>,
<parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>pf_until_cb</name>)<parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>pf_until_cb</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>p_fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>rpc_get_fd</name><argument_list>(<argument><expr><name>p_rpc_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <call><name>rpc_which_events</name><argument_list>(<argument><expr><name>p_rpc_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i_ret</name> <operator>=</operator> <call><name>vlc_poll_i11e</name><argument_list>(<argument><expr><name>p_fds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"vlc_poll_i11e interrupted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"vlc_poll_i11e failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i_ret</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name>
<operator>&amp;&amp;</operator> <call><name>rpc_service</name><argument_list>(<argument><expr><name>p_rpc_ctx</name></expr></argument>, <argument><expr><name><name>p_fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"nfs_service failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vlc_nfs_mainloop</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>pf_until_cb</name>)<parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_rpc_mainloop</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><call><name>nfs_get_rpc_context</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pf_until_cb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vlc_mount_mainloop</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>pf_until_cb</name>)<parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mount</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_rpc_mainloop</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mount</name></name></expr></argument>, <argument><expr><name>pf_until_cb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>nfs_read_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i_status</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>nfs_context</name></name> <modifier>*</modifier></type><name>p_nfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_nfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><name>p_private_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name> <operator>==</operator> <name>p_nfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NFS_CHECK_STATUS</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>i_status</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>read</name><operator>.</operator><name>i_len</name></name> <operator>=</operator> <name>i_status</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>read</name><operator>.</operator><name>p_buf</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>nfs_read_finished_cb</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>read</name><operator>.</operator><name>i_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>FileRead</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>read</name><operator>.</operator><name>i_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>read</name><operator>.</operator><name>p_buf</name></name> <operator>=</operator> <name>p_buf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nfs_read_async</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfsfh</name></name></expr></argument>, <argument><expr><name>i_len</name></expr></argument>, <argument><expr><name>nfs_read_cb</name></expr></argument>,
<argument><expr><name>p_access</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"nfs_read_async failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_nfs_mainloop</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>nfs_read_finished_cb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>read</name><operator>.</operator><name>i_len</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>nfs_seek_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i_status</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>nfs_context</name></name> <modifier>*</modifier></type><name>p_nfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_nfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><name>p_private_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name> <operator>==</operator> <name>p_nfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_data</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NFS_CHECK_STATUS</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>i_status</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>seek</name><operator>.</operator><name>b_done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>nfs_seek_finished_cb</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>seek</name><operator>.</operator><name>b_done</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>FileSeek</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>seek</name><operator>.</operator><name>b_done</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nfs_lseek_async</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfsfh</name></name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>,
<argument><expr><name>nfs_seek_cb</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"nfs_seek_async failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_nfs_mainloop</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>nfs_seek_finished_cb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>FileControl</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>i_query</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>STREAM_CAN_SEEK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_CAN_FASTSEEK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_CONTROL_PACE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_GET_SIZE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>nfs_size</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>STREAM_GET_PTS_DELAY</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(
<argument><expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"network-caching"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_SET_PAUSE_STATE</name></expr>:</case>
<break>break;</break>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>NfsGetUrl</name><parameter_list>(<parameter><decl><type><name>vlc_url_t</name> <modifier>*</modifier></type><name>p_url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_file</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_url</name></expr></argument>, <argument><expr><literal type="string">"nfs://%s%s%s%s%s%s"</literal></expr></argument>, <argument><expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_host</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_path</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_path</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_path</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_url</name><operator>-&gt;</operator><name>psz_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator>
<name><name>p_url</name><operator>-&gt;</operator><name>psz_path</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr> ?</condition><then> <expr><literal type="string">"/"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>psz_file</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_option</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"?"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_option</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>p_url</name><operator>-&gt;</operator><name>psz_option</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>psz_url</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>DirRead</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nfsdirent</name></name> <modifier>*</modifier></type><name>p_nfsdirent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfsdir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_readdir_helper</name></name></type> <name>rdh</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_readdir_helper_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>p_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>p_nfsdirent</name> <operator>=</operator> <call><name>nfs_readdir</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfsdir</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name_encoded</name> <init>= <expr><call><name>vlc_uri_encode</name><argument_list>(<argument><expr><name><name>p_nfsdirent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_name_encoded</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_url</name> <init>= <expr><call><name>NfsGetUrl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>encoded_url</name></name></expr></argument>, <argument><expr><name>psz_name_encoded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_name_encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_url</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>p_nfsdirent</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>NF3REG</name></expr>:</case>
<expr_stmt><expr><name>i_type</name> <operator>=</operator> <name>ITEM_TYPE_FILE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NF3DIR</name></expr>:</case>
<expr_stmt><expr><name>i_type</name> <operator>=</operator> <name>ITEM_TYPE_DIRECTORY</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>i_type</name> <operator>=</operator> <name>ITEM_TYPE_UNKNOWN</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_readdir_helper_additem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>p_nfsdirent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><name>i_type</name></expr></argument>, <argument><expr><name>ITEM_NET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_readdir_helper_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>MountRead</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mount</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>i_count</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_readdir_helper</name></name></type> <name>rdh</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_readdir_helper_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>p_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>i_count</name></name> <operator>&amp;&amp;</operator> <name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>ppsz_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_url</name> <init>= <expr><call><name>NfsGetUrl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>encoded_url</name></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_url</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_readdir_helper_additem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>,
<argument><expr><name>ITEM_TYPE_DIRECTORY</name></expr></argument>, <argument><expr><name>ITEM_NET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_readdir_helper_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>nfs_opendir_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i_status</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>nfs_context</name></name> <modifier>*</modifier></type><name>p_nfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_nfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><name>p_private_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name> <operator>==</operator> <name>p_nfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NFS_CHECK_STATUS</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>i_status</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfsdir</name></name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>nfs_open_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i_status</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>nfs_context</name></name> <modifier>*</modifier></type><name>p_nfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_nfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><name>p_private_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name> <operator>==</operator> <name>p_nfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NFS_CHECK_STATUS</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>i_status</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfsfh</name></name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>nfs_stat64_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i_status</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>nfs_context</name></name> <modifier>*</modifier></type><name>p_nfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_nfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><name>p_private_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name> <operator>==</operator> <name>p_nfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NFS_CHECK_STATUS</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>i_status</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>nfs_stat_64</name></name> <modifier>*</modifier></type><name>p_stat</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <operator>*</operator><name>p_stat</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_auto_guid</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>nfs_set_uid</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>nfs_uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nfs_set_gid</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>nfs_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>nfs_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"nfs_opendir: '%s'"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nfs_opendir_async</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name><operator>-&gt;</operator><name>file</name></name></expr></argument>,
<argument><expr><name>nfs_opendir_cb</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"nfs_opendir_async failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>nfs_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"nfs_open: '%s'"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nfs_open_async</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>,
<argument><expr><name>nfs_open_cb</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"nfs_open_async failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"nfs_stat64_cb: file type not handled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>nfs_mount_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i_status</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>nfs_context</name></name> <modifier>*</modifier></type><name>p_nfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_nfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><name>p_private_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name> <operator>==</operator> <name>p_nfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_data</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>i_status</name> <operator>==</operator> <operator>-</operator><name>EACCES</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>psz_url_decoded_slash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>url</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_UrlParseFixup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>url</name><operator>.</operator><name>psz_path</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>url</name><operator>.</operator><name>psz_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal>
<operator>||</operator> <name><name>url</name><operator>.</operator><name>psz_path</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>url</name><operator>.</operator><name>psz_path</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal>
<operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_url_decoded_slash</name></name> <operator>=</operator> <call><name>NfsGetUrl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NFS_CHECK_STATUS</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>i_status</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"trying to mount '%s' again by adding a '/'"</literal></expr></argument>,
<argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NFS_CHECK_STATUS</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>i_status</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nfs_stat64_async</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>nfs_stat64_cb</name></expr></argument>,
<argument><expr><name>p_access</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"nfs_stat64_async failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>nfs_mount_open_finished_cb</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfsfh</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_nfsdir</name></name> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>psz_url_decoded_slash</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>nfs_mount_open_slash_finished_cb</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfsfh</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_nfsdir</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mount_export_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rpc_context</name></name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><name>p_private_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mount</name></name> <operator>==</operator> <name>p_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NFS_CHECK_STATUS</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>i_status</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>exports</name></type> <name>p_export</name> <init>= <expr><operator>*</operator><operator>(</operator><name>exports</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>i_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<while>while <condition>(<expr><name>p_export</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>i_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p_export</name> <operator>=</operator> <name><name>p_export</name><operator>-&gt;</operator><name>ex_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>i_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>ppsz_names</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>i_count</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>ppsz_names</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_export</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>exports</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>p_export</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>ppsz_names</name><index>[<expr><name>i_idx</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>p_export</name><operator>-&gt;</operator><name>ex_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>ppsz_names</name><index>[<expr><name>i_idx</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_idx</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>ppsz_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>ppsz_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>ppsz_names</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>i_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_idx</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p_export</name> <operator>=</operator> <name><name>p_export</name><operator>-&gt;</operator><name>ex_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>mount_getexports_finished_cb</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>i_count</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>NfsInit</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url_decoded</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name> <operator>=</operator> <call><name>nfs_init_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"nfs_init_context failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name></name> <operator>=</operator> <call><name>nfs_parse_url_incomplete</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name></expr></argument>, <argument><expr><name>psz_url_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name><operator>-&gt;</operator><name>server</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"nfs_parse_url_incomplete failed: '%s'"</literal></expr></argument>,
<argument><expr><call><name>nfs_get_error</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>vlc_obj_calloc</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_auto_guid</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"nfs-auto-guid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_url_decoded</name></name> <operator>=</operator> <call><name>vlc_uri_decode_duplicate</name><argument_list>(<argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_url_decoded</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>vlc_UrlParseFixup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>encoded_url</name></name></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>encoded_url</name><operator>.</operator><name>psz_option</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>encoded_url</name><operator>.</operator><name>psz_option</name></name></expr></argument>, <argument><expr><literal type="string">"uid"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>encoded_url</name><operator>.</operator><name>psz_option</name></name></expr></argument>, <argument><expr><literal type="string">"gid"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_auto_guid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NfsInit</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_url_decoded</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name><operator>-&gt;</operator><name>path</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name><operator>-&gt;</operator><name>file</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"nfs_mount: server: '%s', path: '%s'"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nfs_mount_async</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name><operator>-&gt;</operator><name>server</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>nfs_mount_cb</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"nfs_mount_async failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_nfs_mainloop</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>nfs_mount_open_finished_cb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_url_decoded_slash</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>nfs_destroy_url</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nfs_destroy_context</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NfsInit</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_url_decoded_slash</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>
<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name><operator>-&gt;</operator><name>path</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name><operator>-&gt;</operator><name>file</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nfs_mount_async</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name><operator>-&gt;</operator><name>server</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>nfs_mount_cb</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"nfs_mount_async failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_nfs_mainloop</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>nfs_mount_open_slash_finished_cb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfsfh</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_read</name></name> <operator>=</operator> <name>FileRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>FileSeek</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>FileControl</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfsdir</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>=</operator> <name>DirRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>access_vaDirectoryControlHelper</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>nfs_destroy_context</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mount</name></name> <operator>=</operator> <call><name>rpc_init_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mount</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"rpc_init_context failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>ppsz_names</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>i_count</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mount_getexports_async</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mount</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name><operator>-&gt;</operator><name>server</name></name></expr></argument>,
<argument><expr><name>mount_export_cb</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"mount_getexports_async failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_mount_mainloop</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>mount_getexports_finished_cb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>=</operator> <name>MountRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>access_vaDirectoryControlHelper</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfsfh</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>nfs_close</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfsfh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfsdir</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>nfs_closedir</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfsdir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>nfs_destroy_context</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mount</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>i_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>ppsz_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>exports</name><operator>.</operator><name>ppsz_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpc_destroy_context</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>nfs_destroy_url</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_nfs_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>encoded_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_url_decoded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_url_decoded_slash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
