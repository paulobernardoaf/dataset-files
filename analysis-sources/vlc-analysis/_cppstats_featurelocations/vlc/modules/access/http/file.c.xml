<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\http\file.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resource.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>visibility</name> <name>push</name><name>(</name><name>default</name><name>)</name></cpp:pragma>

<struct>struct <name>vlc_http_file</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_resource</name></name></type> <name>resource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>offset</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_http_file_req</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_http_resource</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_file</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><operator>(</operator>struct <name>vlc_http_file</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uintmax_t</name> <modifier>*</modifier></type><name>offset</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>resource</name><operator>.</operator><name>response</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>vlc_http_msg_get_header</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>resource</name><operator>.</operator><name>response</name></name></expr></argument>,
<argument><expr><literal type="string">"ETag"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"W/"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>vlc_http_msg_add_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"If-Match"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name> <init>= <expr><call><name>vlc_http_msg_get_mtime</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>resource</name><operator>.</operator><name>response</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mtime</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_http_msg_add_time</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"If-Unmodified-Since"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_http_msg_add_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"Range"</literal></expr></argument>, <argument><expr><literal type="string">"bytes=%"</literal> <name>PRIuMAX</name> <literal type="string">"-"</literal></expr></argument>, <argument><expr><operator>*</operator><name>offset</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>*</operator><name>offset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_http_file_resp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_http_resource</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>resp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uintmax_t</name> <modifier>*</modifier></type><name>offset</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_http_msg_get_status</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">206</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>vlc_http_msg_get_header</name><argument_list>(<argument><expr><name>resp</name></expr></argument>, <argument><expr><literal type="string">"Content-Range"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>


<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uintmax_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"bytes %"</literal> <name>SCNuMAX</name> <literal type="string">"-%"</literal> <name>SCNuMAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal>
<operator>||</operator> <name>start</name> <operator>!=</operator> <operator>*</operator><name>offset</name> <operator>||</operator> <name>start</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>


<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>res</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_http_resource_cbs</name></name></type> <name>vlc_http_file_callbacks</name> <init>=
<expr><block>{
<expr><name>vlc_http_file_req</name></expr>,
<expr><name>vlc_http_file_resp</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>vlc_http_resource</name></name> <modifier>*</modifier></type><name>vlc_http_file_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_mgr</name></name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ua</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_file</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>file</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_http_res_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>resource</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc_http_file_callbacks</name></expr></argument>, <argument><expr><name>mgr</name></expr></argument>,
<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>ua</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>resource</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uintmax_t</name></type> <name>vlc_http_msg_get_file_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>vlc_http_msg_get_status</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>range</name> <init>= <expr><call><name>vlc_http_msg_get_header</name><argument_list>(<argument><expr><name>resp</name></expr></argument>, <argument><expr><literal type="string">"Content-Range"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">206</literal></expr> )</condition>
<block>{<block_content> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>range</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>uintmax_t</name></type> <name>end</name></decl>, <decl><type ref="prev"/><name>total</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="string">"bytes %*u-%"</literal> <name>SCNuMAX</name> <literal type="string">"/%"</literal> <name>SCNuMAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>total</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>end</name> <operator>==</operator> <name>UINTMAX_MAX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<return>return <expr><name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<return>return <expr><name>total</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">416</literal></expr> )</condition>
<block>{<block_content> 
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>total</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>range</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="string">"bytes */%"</literal> <name>SCNuMAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>total</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>total</name></expr>;</return></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>vlc_http_msg_can_seek</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>vlc_http_msg_get_status</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">206</literal> <operator>||</operator> <name>status</name> <operator>==</operator> <literal type="number">416</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><call><name>vlc_http_msg_get_token</name><argument_list>(<argument><expr><name>resp</name></expr></argument>, <argument><expr><literal type="string">"Accept-Ranges"</literal></expr></argument>, <argument><expr><literal type="string">"bytes"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uintmax_t</name></type> <name>vlc_http_file_get_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_resource</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>vlc_http_res_get_status</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uintmax_t</name></type> <name>ret</name> <init>= <expr><call><name>vlc_http_msg_get_file_size</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>(</operator><name>uintmax_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&gt;=</operator> <literal type="number">300</literal> <operator>||</operator> <name>status</name> <operator>==</operator> <literal type="number">201</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 



<return>return <expr><call><name>vlc_http_msg_get_size</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>vlc_http_file_can_seek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_resource</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>vlc_http_res_get_status</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>vlc_http_msg_can_seek</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_http_file_seek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_resource</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>uintmax_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>resp</name> <init>= <expr><call><name>vlc_http_res_open</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>resp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_file</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><operator>(</operator>struct <name>vlc_http_file</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>vlc_http_msg_get_status</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content> 




<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">206</literal> <operator>&amp;&amp;</operator> <name>status</name> <operator>!=</operator> <literal type="number">416</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>offset</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>status</name> <operator>&gt;=</operator> <literal type="number">300</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_http_msg_destroy</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_http_msg_destroy</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name> <operator>=</operator> <name>resp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>vlc_http_file_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_resource</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_file</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><operator>(</operator>struct <name>vlc_http_file</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>vlc_http_res_read</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>vlc_http_error</name></expr>)</condition>
<block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>vlc_http_msg_can_seek</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <call><name>vlc_http_msg_get_file_size</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>response</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>vlc_http_file_seek</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>vlc_http_res_read</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>vlc_http_error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<return>return <expr><name>block</name></expr>;</return>
</block_content>}</block></function>
</unit>
