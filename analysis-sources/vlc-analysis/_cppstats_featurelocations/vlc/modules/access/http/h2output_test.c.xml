<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\http\h2output_test.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_tls.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2output.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_tick_sleep</name></cpp:undef>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>vlc_module_name</name><index>[]</index></name> <init>= <expr><literal type="string">"test_h2output"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>send_failure</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>expect_hello</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_sem_t</name></type> <name>rx</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fd_callback</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>events</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>tls</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>events</name></expr>;</expr_stmt>
<return>return <expr><call><name>fileno</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>send_callback</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tls</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>writev</name></name> <operator>==</operator> <name>send_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>iov</name><operator>-&gt;</operator><name>iov_base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>iov</name><operator>-&gt;</operator><name>iov_len</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>expect_hello</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;=</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n"</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>expect_hello</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>send_failure</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>len</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>==</operator> <name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>send_failure</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>send_failure</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>len</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_tls_operations</name></name></type> <name>fake_ops</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>get_fd</name> <operator>=</operator> <name>fd_callback</name></expr>,
<expr><operator>.</operator><name>writev</name> <operator>=</operator> <name>send_callback</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_tls_t</name></type> <name>fake_tls</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>ops</name> <operator>=</operator> <operator>&amp;</operator><name>fake_ops</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>frame</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>vlc_h2_frame_data</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>frame_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name>first</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier><name>f</name></type> <init>= <expr><name>first</name></expr></init></decl>;</init>
<condition><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>f</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr>struct <name>vlc_h2_frame</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>first</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_output</name></name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>


<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>vlc_h2_output_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_tls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_h2_output_destroy</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>vlc_h2_output_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_tls</name></expr></argument>, <argument><expr><name>expect_hello</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_h2_output_destroy</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>vlc_h2_output_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_tls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_h2_output_send_prio</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_h2_output_send_prio</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>frame</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_h2_output_send_prio</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>frame</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_h2_output_send</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_h2_output_send</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>frame</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_h2_output_send</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>frame</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_h2_output_send</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>frame_list</name><argument_list>(<argument><expr><call><name>frame</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>frame</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>frame</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_h2_output_send</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>frame</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_sem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_h2_output_send_prio</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>frame</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_h2_output_send</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>frame</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_h2_output_destroy</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>send_failure</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>vlc_h2_output_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_tls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_h2_output_send</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>frame</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>;</init> <condition><expr><call><name>vlc_h2_output_send</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>frame</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_h2_output_send</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>frame</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_h2_output_send_prio</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>frame</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_h2_output_destroy</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>vlc_h2_output_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_tls</name></expr></argument>, <argument><expr><name>expect_hello</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_sem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><call><name>vlc_h2_output_send_prio</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>frame</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_h2_output_send</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>frame</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_h2_output_send_prio</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>frame</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_h2_output_destroy</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
