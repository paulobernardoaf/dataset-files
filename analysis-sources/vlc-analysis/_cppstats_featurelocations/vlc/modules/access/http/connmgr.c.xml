<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\http\connmgr.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_tls.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transport.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"message.h"</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>visibility</name> <name>push</name><name>(</name><name>default</name><name>)</name></cpp:pragma>

<function><type><name>void</name></type> <name>vlc_http_err</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>logger</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_vaLog</name><argument_list>(<argument><expr><operator>&amp;</operator><name>logger</name></expr></argument>, <argument><expr><name>VLC_MSG_ERR</name></expr></argument>, <argument><expr><literal type="string">"generic"</literal></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>,
<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_http_dbg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>logger</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_vaLog</name><argument_list>(<argument><expr><operator>&amp;</operator><name>logger</name></expr></argument>, <argument><expr><name>VLC_MSG_DBG</name></expr></argument>, <argument><expr><literal type="string">"generic"</literal></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>,
<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>vlc_https_connect</name><parameter_list>(<parameter><decl><type><name>vlc_tls_client_t</name> <modifier>*</modifier></type><name>creds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>two</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">443</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>alpn</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"h2"</literal></expr>, <expr><literal type="string">"http/1.1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>alp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name> <init>= <expr><call><name>vlc_tls_SocketOpenTLS</name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="string">"https"</literal></expr></argument>,
<argument><expr><name>alpn</name> <operator>+</operator> <operator>!</operator><operator>*</operator><name>two</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tls</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>two</name> <operator>=</operator> <operator>(</operator><name>alp</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>alp</name></expr></argument>, <argument><expr><literal type="string">"h2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>alp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>tls</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>vlc_http_proxy_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>secure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>proxy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <ternary><condition><expr><name>port</name></expr> ?</condition><then> <expr><literal type="string">"http%s://[%s]:%u"</literal></expr> </then><else>: <expr><literal type="string">"http%s://[%s]"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <ternary><condition><expr><name>port</name></expr> ?</condition><then> <expr><literal type="string">"http%s://%s:%u"</literal></expr> </then><else>: <expr><literal type="string">"http%s://%s"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><ternary><condition><expr><name>secure</name></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>proxy</name> <operator>=</operator> <call><name>vlc_getProxyUrl</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>proxy</name></expr>;</return>
</block_content>}</block></function>


<struct>struct <name>vlc_http_mgr</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>logger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tls_client_t</name> <modifier>*</modifier></type><name>creds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_cookie_jar_t</name></name> <modifier>*</modifier></type><name>jar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_conn</name></name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_http_conn</name></name> <modifier>*</modifier></type><name>vlc_http_mgr_find</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_mgr</name></name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>host</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>port</name></expr>;</expr_stmt>
<return>return <expr><name><name>mgr</name><operator>-&gt;</operator><name>conn</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_http_mgr_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_mgr</name></name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_http_conn</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>conn</name></name> <operator>==</operator> <name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_http_conn_release</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>vlc_http_mgr_reuse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_mgr</name></name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_conn</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>vlc_http_mgr_find</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>vlc_http_stream_open</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>vlc_http_msg_get_initial</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>m</name></expr>;</return></block_content></block></if></if_stmt>





</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_http_mgr_release</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>vlc_https_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_mgr</name></name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>http2</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>creds</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>mgr</name><operator>-&gt;</operator><name>conn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>creds</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>creds</name></name> <operator>=</operator> <call><name>vlc_tls_ClientCreate</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>creds</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>resp</name> <init>= <expr><call><name>vlc_http_mgr_reuse</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>resp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>resp</name></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><call><name>vlc_http_proxy_find</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>proxy</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tls</name> <operator>=</operator> <call><name>vlc_https_connect_proxy</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>creds</name></name></expr></argument>, <argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>creds</name></name></expr></argument>,
<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>http2</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tls</name> <operator>=</operator> <call><name>vlc_https_connect</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>creds</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>http2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tls</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_conn</name></name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>








<if_stmt><if>if <condition>(<expr><name>http2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>vlc_h2_conn_create</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>logger</name></name></expr></argument>, <argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>vlc_h1_conn_create</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>logger</name></name></expr></argument>, <argument><expr><name>tls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_tls_Close</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>

<return>return <expr><call><name>vlc_http_mgr_reuse</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>vlc_http_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_mgr</name></name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>creds</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>mgr</name><operator>-&gt;</operator><name>conn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>resp</name> <init>= <expr><call><name>vlc_http_mgr_reuse</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>resp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>resp</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_conn</name></name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_stream</name></name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><call><name>vlc_http_proxy_find</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>proxy</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>url</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_UrlParse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>url</name><operator>.</operator><name>psz_host</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>vlc_h1_request</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>logger</name></name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>url</name><operator>.</operator><name>i_port</name></name></expr> ?</condition><then> <expr><name><name>url</name><operator>.</operator><name>i_port</name></name></expr> </then><else>: <expr><literal type="number">80</literal></expr></else></ternary></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>req</name></expr></argument>,
<argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>stream</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>vlc_h1_request</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>logger</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><ternary><condition><expr><name>port</name></expr> ?</condition><then> <expr><name>port</name></expr> </then><else>: <expr><literal type="number">80</literal></expr></else></ternary></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>req</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>resp</name> <operator>=</operator> <call><name>vlc_http_msg_get_initial</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>resp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_http_conn_release</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
<return>return <expr><name>resp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>vlc_http_mgr_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_mgr</name></name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>https</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_http_msg</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&amp;&amp;</operator> <call><name>vlc_http_port_blocked</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>https</name></expr> ?</condition><then> <expr><name>vlc_https_request</name></expr> </then><else>: <expr><name>vlc_http_request</name></expr></else></ternary><operator>)</operator><operator>(</operator><name>mgr</name><operator>,</operator> <name>host</name><operator>,</operator> <name>port</name><operator>,</operator> <name>m</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_http_cookie_jar_t</name></name> <modifier>*</modifier></type><name>vlc_http_mgr_get_jar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_mgr</name></name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>mgr</name><operator>-&gt;</operator><name>jar</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_http_mgr</name></name> <modifier>*</modifier></type><name>vlc_http_mgr_create</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_http_cookie_jar_t</name></name> <modifier>*</modifier></type><name>jar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_http_mgr</name></name> <modifier>*</modifier></type><name>mgr</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>mgr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>mgr</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>logger</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>logger</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>creds</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>jar</name></name> <operator>=</operator> <name>jar</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>mgr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_http_mgr_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_http_mgr</name></name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>conn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_http_mgr_release</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>, <argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>creds</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_tls_ClientDelete</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>creds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
