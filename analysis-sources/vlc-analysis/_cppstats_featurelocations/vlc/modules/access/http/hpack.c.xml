<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\http\hpack.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpack.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>hpack_names</name><index>[]</index><index>[<expr><literal type="number">28</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="string">":authority"</literal></expr>, <expr><literal type="string">":method"</literal></expr>, <expr><literal type="string">":method"</literal></expr>, <expr><literal type="string">":path"</literal></expr>, <expr><literal type="string">":path"</literal></expr>, <expr><literal type="string">":scheme"</literal></expr>, <expr><literal type="string">":scheme"</literal></expr>,
<expr><literal type="string">":status"</literal></expr>, <expr><literal type="string">":status"</literal></expr>, <expr><literal type="string">":status"</literal></expr>, <expr><literal type="string">":status"</literal></expr>, <expr><literal type="string">":status"</literal></expr>, <expr><literal type="string">":status"</literal></expr>,
<expr><literal type="string">":status"</literal></expr>, <expr><literal type="string">"accept-charset"</literal></expr>, <expr><literal type="string">"accept-encoding"</literal></expr>, <expr><literal type="string">"accept-language"</literal></expr>,
<expr><literal type="string">"accept-ranges"</literal></expr>, <expr><literal type="string">"accept"</literal></expr>, <expr><literal type="string">"access-control-allow-origin"</literal></expr>, <expr><literal type="string">"age"</literal></expr>, <expr><literal type="string">"allow"</literal></expr>,
<expr><literal type="string">"authorization"</literal></expr>, <expr><literal type="string">"cache-control"</literal></expr>, <expr><literal type="string">"content-disposition"</literal></expr>,
<expr><literal type="string">"content-encoding"</literal></expr>, <expr><literal type="string">"content-language"</literal></expr>, <expr><literal type="string">"content-length"</literal></expr>,
<expr><literal type="string">"content-location"</literal></expr>, <expr><literal type="string">"content-range"</literal></expr>, <expr><literal type="string">"content-type"</literal></expr>, <expr><literal type="string">"cookie"</literal></expr>, <expr><literal type="string">"date"</literal></expr>,
<expr><literal type="string">"etag"</literal></expr>, <expr><literal type="string">"expect"</literal></expr>, <expr><literal type="string">"expires"</literal></expr>, <expr><literal type="string">"from"</literal></expr>, <expr><literal type="string">"host"</literal></expr>, <expr><literal type="string">"if-match"</literal></expr>,
<expr><literal type="string">"if-modified-since"</literal></expr>, <expr><literal type="string">"if-none-match"</literal></expr>, <expr><literal type="string">"if-range"</literal></expr>, <expr><literal type="string">"if-unmodified-since"</literal></expr>,
<expr><literal type="string">"last-modified"</literal></expr>, <expr><literal type="string">"link"</literal></expr>, <expr><literal type="string">"location"</literal></expr>, <expr><literal type="string">"max-forwards"</literal></expr>, <expr><literal type="string">"proxy-authenticate"</literal></expr>,
<expr><literal type="string">"proxy-authorization"</literal></expr>, <expr><literal type="string">"range"</literal></expr>, <expr><literal type="string">"referer"</literal></expr>, <expr><literal type="string">"refresh"</literal></expr>, <expr><literal type="string">"retry-after"</literal></expr>,
<expr><literal type="string">"server"</literal></expr>, <expr><literal type="string">"set-cookie"</literal></expr>, <expr><literal type="string">"strict-transport-security"</literal></expr>, <expr><literal type="string">"transfer-encoding"</literal></expr>,
<expr><literal type="string">"user-agent"</literal></expr>, <expr><literal type="string">"vary"</literal></expr>, <expr><literal type="string">"via"</literal></expr>, <expr><literal type="string">"www-authenticate"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>hpack_values</name><index>[]</index><index>[<expr><literal type="number">14</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="string">""</literal></expr>, <expr><literal type="string">"GET"</literal></expr>, <expr><literal type="string">"POST"</literal></expr>, <expr><literal type="string">"/"</literal></expr>, <expr><literal type="string">"/index.html"</literal></expr>, <expr><literal type="string">"http"</literal></expr>, <expr><literal type="string">"https"</literal></expr>, <expr><literal type="string">"200"</literal></expr>, <expr><literal type="string">"204"</literal></expr>,
<expr><literal type="string">"206"</literal></expr>, <expr><literal type="string">"304"</literal></expr>, <expr><literal type="string">"400"</literal></expr>, <expr><literal type="string">"404"</literal></expr>, <expr><literal type="string">"500"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"gzip, deflate"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>hpack_decoder</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>max_size</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name><name>struct</name> <name>hpack_decoder</name></name> <modifier>*</modifier></type><name>hpack_decode_init</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>header_table_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hpack_decoder</name></name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>dec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dec</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>max_size</name></name> <operator>=</operator> <name>header_table_size</name></expr>;</expr_stmt>
<return>return <expr><name>dec</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>hpack_decode_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hpack_decoder</name></name> <modifier>*</modifier></type><name>dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dec</name><operator>-&gt;</operator><name>entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int_fast32_t</name></type> <name>hpack_decode_int</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>datap</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>lengthp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>datap</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><operator>*</operator><name>lengthp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>length</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>i</name> <init>= <expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>length</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>mask</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>length</name><operator>--</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;=</operator> <literal type="number">28</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>datap</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lengthp</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hpack_decode_str_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>length</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hpack_decode_byte_huffman</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>end</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>bit_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>tab</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">105</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">116</literal></expr>,

<expr><literal type="number">32</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">65</literal></expr>,
<expr><literal type="number">95</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">117</literal></expr>,

<expr><literal type="number">58</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">78</literal></expr>,
<expr><literal type="number">79</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">106</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">118</literal></expr>,
<expr><literal type="number">119</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">122</literal></expr>,

<expr><literal type="number">38</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">90</literal></expr>,

<expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">63</literal></expr>,

<expr><literal type="number">39</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">124</literal></expr>,

<expr><literal type="number">35</literal></expr>, <expr><literal type="number">62</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">126</literal></expr>,

<expr><literal type="number">94</literal></expr>, <expr><literal type="number">125</literal></expr>,

<expr><literal type="number">60</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">123</literal></expr>,

<expr><literal type="number">92</literal></expr>, <expr><literal type="number">195</literal></expr>, <expr><literal type="number">208</literal></expr>,

<expr><literal type="number">128</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">131</literal></expr>, <expr><literal type="number">162</literal></expr>, <expr><literal type="number">184</literal></expr>, <expr><literal type="number">194</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">226</literal></expr>,

<expr><literal type="number">153</literal></expr>, <expr><literal type="number">161</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">172</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">177</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">209</literal></expr>, <expr><literal type="number">216</literal></expr>, <expr><literal type="number">217</literal></expr>, <expr><literal type="number">227</literal></expr>, <expr><literal type="number">229</literal></expr>, <expr><literal type="number">230</literal></expr>,

<expr><literal type="number">129</literal></expr>, <expr><literal type="number">132</literal></expr>, <expr><literal type="number">133</literal></expr>, <expr><literal type="number">134</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">146</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">164</literal></expr>, <expr><literal type="number">169</literal></expr>, <expr><literal type="number">170</literal></expr>, <expr><literal type="number">173</literal></expr>,
<expr><literal type="number">178</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">186</literal></expr>, <expr><literal type="number">187</literal></expr>, <expr><literal type="number">189</literal></expr>, <expr><literal type="number">190</literal></expr>, <expr><literal type="number">196</literal></expr>, <expr><literal type="number">198</literal></expr>, <expr><literal type="number">228</literal></expr>, <expr><literal type="number">232</literal></expr>, <expr><literal type="number">233</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">137</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">147</literal></expr>, <expr><literal type="number">149</literal></expr>, <expr><literal type="number">150</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">155</literal></expr>,
<expr><literal type="number">157</literal></expr>, <expr><literal type="number">158</literal></expr>, <expr><literal type="number">165</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">168</literal></expr>, <expr><literal type="number">174</literal></expr>, <expr><literal type="number">175</literal></expr>, <expr><literal type="number">180</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">188</literal></expr>, <expr><literal type="number">191</literal></expr>, <expr><literal type="number">197</literal></expr>, <expr><literal type="number">231</literal></expr>,
<expr><literal type="number">239</literal></expr>,

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">142</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">145</literal></expr>, <expr><literal type="number">148</literal></expr>, <expr><literal type="number">159</literal></expr>, <expr><literal type="number">171</literal></expr>, <expr><literal type="number">206</literal></expr>, <expr><literal type="number">215</literal></expr>, <expr><literal type="number">225</literal></expr>, <expr><literal type="number">236</literal></expr>, <expr><literal type="number">237</literal></expr>,

<expr><literal type="number">199</literal></expr>, <expr><literal type="number">207</literal></expr>, <expr><literal type="number">234</literal></expr>, <expr><literal type="number">235</literal></expr>,

<expr><literal type="number">192</literal></expr>, <expr><literal type="number">193</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">201</literal></expr>, <expr><literal type="number">202</literal></expr>, <expr><literal type="number">205</literal></expr>, <expr><literal type="number">210</literal></expr>, <expr><literal type="number">213</literal></expr>, <expr><literal type="number">218</literal></expr>, <expr><literal type="number">219</literal></expr>, <expr><literal type="number">238</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">242</literal></expr>, <expr><literal type="number">243</literal></expr>,
<expr><literal type="number">255</literal></expr>,

<expr><literal type="number">203</literal></expr>, <expr><literal type="number">204</literal></expr>, <expr><literal type="number">211</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">214</literal></expr>, <expr><literal type="number">221</literal></expr>, <expr><literal type="number">222</literal></expr>, <expr><literal type="number">223</literal></expr>, <expr><literal type="number">241</literal></expr>, <expr><literal type="number">244</literal></expr>, <expr><literal type="number">245</literal></expr>, <expr><literal type="number">246</literal></expr>, <expr><literal type="number">247</literal></expr>, <expr><literal type="number">248</literal></expr>,
<expr><literal type="number">250</literal></expr>, <expr><literal type="number">251</literal></expr>, <expr><literal type="number">252</literal></expr>, <expr><literal type="number">253</literal></expr>, <expr><literal type="number">254</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>,
<expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">220</literal></expr>,
<expr><literal type="number">249</literal></expr>,

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">22</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>values</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>tab</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>shift</name> <init>= <expr><operator>-</operator><operator>*</operator><name>bit_offset</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bit_offset</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>|=</operator> <operator>(</operator><name><name>end</name><index>[<expr><operator>*</operator><name>bit_offset</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>bit_offset</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>code</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>code</name> <operator>&gt;=</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>-</operator> <name>offset</name><operator>)</operator> <operator>&lt;</operator> <name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p</name><index>[<expr><name>code</name> <operator>-</operator> <name>offset</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <name><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>tab</name> <operator>==</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0x3fffffff</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">256</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hpack_decode_str_huffman</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>length</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit_offset</name> <init>= <expr><operator>-</operator><literal type="number">8</literal> <operator>*</operator> <name>length</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>hpack_decode_byte_huffman</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bit_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hpack_decode_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>datap</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>lengthp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>lengthp</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>huffman</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>*</operator><name>datap</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_fast32_t</name></type> <name>len</name> <init>= <expr><call><name>hpack_decode_int</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>datap</name></expr></argument>, <argument><expr><name>lengthp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>&gt;</operator> <operator>*</operator><name>lengthp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>*</operator><name>datap</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>datap</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lengthp</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>huffman</name></expr> ?</condition><then> <expr><name>hpack_decode_str_huffman</name></expr> </then><else>: <expr><name>hpack_decode_str_raw</name></expr></else></ternary><operator>)</operator>
<operator>(</operator><name>buf</name><operator>,</operator> <name>len</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hpack_lookup_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hpack_decoder</name></name> <modifier>*</modifier></type><name>dec</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>hpack_names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>hpack_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>hpack_names</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>-=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>hpack_names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>hpack_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>dec</name><operator>-&gt;</operator><name>entries</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>table</name><index>[<expr><name><name>dec</name><operator>-&gt;</operator><name>entries</name></name> <operator>-</operator> <operator>(</operator><name>idx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>hpack_lookup_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hpack_decoder</name></name> <modifier>*</modifier></type><name>dec</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>hpack_values</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>hpack_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>hpack_values</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>hpack_names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>hpack_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>-=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>hpack_names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>hpack_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>dec</name><operator>-&gt;</operator><name>entries</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>table</name><index>[<expr><name><name>dec</name><operator>-&gt;</operator><name>entries</name></name> <operator>-</operator> <operator>(</operator><name>idx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name>entry</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hpack_decode_evict</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hpack_decoder</name></name> <modifier>*</modifier></type><name>dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>evicted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>dec</name><operator>-&gt;</operator><name>max_size</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>evicted</name> <operator>&lt;</operator> <name><name>dec</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>namelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>evicted</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>valuelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>evicted</name></expr>]</index></name> <operator>+</operator> <name>namelen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>+</operator> <name>namelen</name> <operator>+</operator> <name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <literal type="number">32</literal> <operator>+</operator> <name>namelen</name> <operator>+</operator> <name>valuelen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>evicted</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>evicted</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>evicted</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>entries</name></name> <operator>-=</operator> <name>evicted</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>table</name></name> <operator>+</operator> <name>evicted</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dec</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hpack_append_hdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hpack_decoder</name></name> <modifier>*</modifier></type><name>dec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>namelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>valuelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>namelen</name> <operator>+</operator> <name>valuelen</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>entry</name> <operator>+</operator> <name>namelen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newtab</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>entries</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newtab</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <name>newtab</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>table</name><index>[<expr><name><name>dec</name><operator>-&gt;</operator><name>entries</name></name></expr>]</index></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>entries</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">32</literal> <operator>+</operator> <name>namelen</name> <operator>+</operator> <name>valuelen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hpack_decode_evict</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hpack_decode_hdr_indexed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hpack_decoder</name></name> <modifier>*</modifier></type><name>dec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>datap</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>lengthp</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>namep</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>valuep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int_fast32_t</name></type> <name>idx</name> <init>= <expr><call><name>hpack_decode_int</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>datap</name></expr></argument>, <argument><expr><name>lengthp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>hpack_lookup_name</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>hpack_lookup_value</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>valuep</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hpack_decode_hdr_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hpack_decoder</name></name> <modifier>*</modifier></type><name>dec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>datap</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>lengthp</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>namep</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>valuep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int_fast32_t</name></type> <name>idx</name> <init>= <expr><call><name>hpack_decode_int</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>datap</name></expr></argument>, <argument><expr><name>lengthp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>hpack_lookup_name</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>hpack_decode_str</name><argument_list>(<argument><expr><name>datap</name></expr></argument>, <argument><expr><name>lengthp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>hpack_decode_str</name><argument_list>(<argument><expr><name>datap</name></expr></argument>, <argument><expr><name>lengthp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hpack_append_hdr</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>valuep</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hpack_decode_hdr_noindex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hpack_decoder</name></name> <modifier>*</modifier></type><name>dec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>datap</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>lengthp</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>namep</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>valuep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int_fast32_t</name></type> <name>idx</name> <init>= <expr><call><name>hpack_decode_int</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>datap</name></expr></argument>, <argument><expr><name>lengthp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>hpack_lookup_name</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>hpack_decode_str</name><argument_list>(<argument><expr><name>datap</name></expr></argument>, <argument><expr><name>lengthp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>hpack_decode_str</name><argument_list>(<argument><expr><name>datap</name></expr></argument>, <argument><expr><name>lengthp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>valuep</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hpack_decode_tbl_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hpack_decoder</name></name> <modifier>*</modifier></type><name>dec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>datap</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>lengthp</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>name</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int_fast32_t</name></type> <name>max</name> <init>= <expr><call><name>hpack_decode_int</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>datap</name></expr></argument>, <argument><expr><name>lengthp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>max</name> <operator>&gt;</operator> <name><name>dec</name><operator>-&gt;</operator><name>max_size</name></name></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <operator>*</operator><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>max_size</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hpack_decode_evict</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hpack_decode_hdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hpack_decoder</name></name> <modifier>*</modifier></type><name>dec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>datap</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>lengthp</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>namep</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>valuep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hpack_decoder</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>lengthp</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name> <init>= <expr><operator>*</operator><operator>*</operator><name>datap</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>hpack_decode_hdr_indexed</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>hpack_decode_hdr_index</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>hpack_decode_tbl_update</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>hpack_decode_hdr_noindex</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>cb</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>datap</name></expr></argument>, <argument><expr><name>lengthp</name></expr></argument>, <argument><expr><name>namep</name></expr></argument>, <argument><expr><name>valuep</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>hpack_decode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hpack_decoder</name></name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>headers</name><index>[]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>hpack_decode_hdr</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>name</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>value</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>max</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>headers</name><index>[<expr><name>count</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>headers</name><index>[<expr><name>count</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>count</name></expr>;</return>

<label><name>error</name>:</label>
<while>while <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>headers</name><index>[<expr><name>count</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>headers</name><index>[<expr><name>count</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_integer</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int_fast32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%u, %zu byte(s))...\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cutbuf</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cutlen</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>hpack_decode_int</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cutbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cutlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_fast32_t</name></type> <name>v</name> <init>= <expr><call><name>hpack_decode_int</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>==</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buf</name> <operator>==</operator> <name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_integers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>test_integer</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x0A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>test_integer</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1337</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">42</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>test_integer</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%zu bytes, \"%s\", \"%s\")...\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hpack_decoder</name></name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><call><name>hpack_decode_init</name><argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dec</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>n</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cutbuf</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cutlen</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>hpack_decode_hdr</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cutbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cutlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>hpack_decode_hdr</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hpack_decode_destroy</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_headers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>test_header</name><argument_list>(<argument><literal type="string">"@\x0a""</literal>custom-key<literal type="string">""</literal>\x0d<literal type="string">""</literal>custom-header<literal type="string">", 26,
"</literal>custom-key<literal type="string">", "</literal>custom-header<literal type="string">");
test_header("</literal>\x04\x0c<literal type="string">""</literal>/sample/path<literal type="string">", 14, "</literal>:path<literal type="string">", "</literal>/sample/path<literal type="string">");
test_header("</literal>\x10\x08<literal type="string">""</literal>password<literal type="string">""</literal>\x06<literal type="string">""</literal>secret<literal type="string">", 17, "</literal>password<literal type="string">", "</literal>secret<literal type="string">");
test_header("</literal>\x82<literal type="string">", 1, "</literal>:method<literal type="string">", "</literal>GET<literal type="string">");
}

static void test_block(struct hpack_decoder *dec, const char *req, size_t len,
...)
{
printf("</literal>%s(%zu bytes)...\n<literal type="string">", __func__, len);

va_list ap;

const uint8_t *buf = (const uint8_t *)req;
char *headers[16][2];
int count = hpack_decode(dec, buf, len, headers, 16);

printf("</literal> %d headers:\n<literal type="string">", count);
assert(count &gt;= 0);

va_start(ap, len);
for (int i = 0; i &lt; count; i++)
{
const char *name = va_arg(ap, const char *);
const char *value = va_arg(ap, const char *);

printf("</literal> %s: %s\n<literal type="string">", headers[i][0], headers[i][1]);
assert(!strcmp(name, headers[i][0]));
assert(!strcmp(value, headers[i][1]));
free(headers[i][1]);
free(headers[i][0]);
}
assert(va_arg(ap, const char *) == NULL);
}

static void test_reqs(void)
{
struct hpack_decoder *dec = hpack_decode_init(4096);
assert(dec != NULL);

test_block(dec, NULL, 0, NULL);
test_block(dec, "</literal>\x82\x86\x84\x41\x0f<literal type="string">""</literal>www.example.com<literal type="string">", 20,
"</literal>:method<literal type="string">", "</literal>GET<literal type="string">", "</literal>:scheme<literal type="string">", "</literal>http<literal type="string">", "</literal>:path<literal type="string">", "</literal>/<literal type="string">",
"</literal>:authority<literal type="string">", "</literal>www.example.com<literal type="string">", NULL);
test_block(dec, "</literal>\x82\x86\x84\xbe\x58\x08<literal type="string">""</literal>no-cache<literal type="string">", 14,
"</literal>:method<literal type="string">", "</literal>GET<literal type="string">", "</literal>:scheme<literal type="string">", "</literal>http<literal type="string">", "</literal>:path<literal type="string">", "</literal>/<literal type="string">",
"</literal>:authority<literal type="string">", "</literal>www.example.com<literal type="string">", "</literal>cache-control<literal type="string">", "</literal>no-cache<literal type="string">",
NULL);
test_block(dec,
"</literal>\x82\x87\x85\xbf\x40\x0a<literal type="string">""</literal>custom-key<literal type="string">""</literal>\x0c<literal type="string">""</literal>custom-value<literal type="string">", 29,
"</literal>:method<literal type="string">", "</literal>GET<literal type="string">", "</literal>:scheme<literal type="string">", "</literal>https<literal type="string">", "</literal>:path<literal type="string">", "</literal>/index.html<literal type="string">",
"</literal>:authority<literal type="string">", "</literal>www.example.com<literal type="string">", "</literal>custom-key<literal type="string">", "</literal>custom-value<literal type="string">",
NULL);

hpack_decode_destroy(dec);
}

static void test_reqs_huffman(void)
{
struct hpack_decoder *dec = hpack_decode_init(4096);
assert(dec != NULL);

test_block(dec, "</literal>\x82\x86\x84\x41\x8c\xf1\xe3\xc2\xe5\xf2\x3a\x6b\xa0\xab<literal type="string">"
"</literal>\x90\xf4\xff<literal type="string">", 17,
"</literal>:method<literal type="string">", "</literal>GET<literal type="string">", "</literal>:scheme<literal type="string">", "</literal>http<literal type="string">", "</literal>:path<literal type="string">", "</literal>/<literal type="string">",
"</literal>:authority<literal type="string">", "</literal>www.example.com<literal type="string">", NULL);
test_block(dec, "</literal>\x82\x86\x84\xbe\x58\x86\xa8\xeb\x10\x64\x9c\xbf<literal type="string">", 12,
"</literal>:method<literal type="string">", "</literal>GET<literal type="string">", "</literal>:scheme<literal type="string">", "</literal>http<literal type="string">", "</literal>:path<literal type="string">", "</literal>/<literal type="string">",
"</literal>:authority<literal type="string">", "</literal>www.example.com<literal type="string">", "</literal>cache-control<literal type="string">", "</literal>no-cache<literal type="string">",
NULL);
test_block(dec, "</literal>\x82\x87\x85\xbf\x40\x88\x25\xa8\x49\xe9\x5b\xa9\x7d\x7f<literal type="string">"
"</literal>\x89\x25\xa8\x49\xe9\x5b\xb8\xe8\xb4\xbf<literal type="string">", 24,
"</literal>:method<literal type="string">", "</literal>GET<literal type="string">", "</literal>:scheme<literal type="string">", "</literal>https<literal type="string">", "</literal>:path<literal type="string">", "</literal>/index.html<literal type="string">",
"</literal>:authority<literal type="string">", "</literal>www.example.com<literal type="string">", "</literal>custom-key<literal type="string">", "</literal>custom-value<literal type="string">",
NULL);

hpack_decode_destroy(dec);
}

static void test_resps(void)
{
struct hpack_decoder *dec = hpack_decode_init(256);
assert(dec != NULL);

test_block(dec, "</literal>\x48\x03<literal type="string">""</literal><literal type="number">302</literal><literal type="string">""</literal>\x58\x07<literal type="string">""</literal>private<literal type="string">"
"</literal>\x61\x1d<literal type="string">""</literal>Mon</argument>, <argument><literal type="number">21</literal> Oct <literal type="number">2013</literal> <literal type="number">20</literal>:<literal type="number">13</literal>:<literal type="number">21</literal> GMT<literal type="string">"
"</literal>\x6e\x17<literal type="string">""</literal>https:
<literal type="string">":status"</literal></argument>, <argument><literal type="string">"302"</literal></argument>, <argument><literal type="string">"cache-control"</literal></argument>, <argument><literal type="string">"private"</literal></argument>,
<argument><literal type="string">"date"</literal></argument>, <argument><literal type="string">"Mon, 21 Oct 2013 20:13:21 GMT"</literal></argument>,
<argument><literal type="string">"location"</literal></argument>, <argument><literal type="string">"https://www.example.com"</literal></argument>, <argument>NULL</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>test_block</name><argument_list>(<argument>dec</argument>, <argument><literal type="string">"\x48\x03""</literal><literal type="number">307</literal><literal type="string">""</literal>\xc1\xc0\xbf<literal type="string">", 8,
"</literal>:status<literal type="string">", "</literal><literal type="number">307</literal><literal type="string">", "</literal>cache-control<literal type="string">", "</literal>private<literal type="string">",
"</literal>date<literal type="string">", "</literal>Mon</argument>, <argument><literal type="number">21</literal> Oct <literal type="number">2013</literal> <literal type="number">20</literal>:<literal type="number">13</literal>:<literal type="number">21</literal> GMT<literal type="string">",
"</literal>location<literal type="string">", "</literal>https:
test_block(dec, <literal type="string">"\x88\xc1\x61\x1d""</literal>Mon, <literal type="number">21</literal> Oct <literal type="number">2013</literal> <literal type="number">20</literal>:<literal type="number">13</literal>:<literal type="number">22</literal> GMT<literal type="string">"
"</literal>\xc0\x5a\x04<literal type="string">""</literal>gzip<literal type="string">""</literal>\x77\x38<literal type="string">""</literal>foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU;<literal type="string">"
"</literal> max-age=<literal type="number">3600</literal>; version=<literal type="number">1</literal><literal type="string">", 98,
"</literal>:status<literal type="string">", "</literal><literal type="number">200</literal><literal type="string">", "</literal>cache-control<literal type="string">", "</literal>private<literal type="string">",
"</literal>date<literal type="string">", "</literal>Mon, <literal type="number">21</literal> Oct <literal type="number">2013</literal> <literal type="number">20</literal>:<literal type="number">13</literal>:<literal type="number">22</literal> GMT<literal type="string">",
"</literal>location<literal type="string">", "</literal>https:
<literal type="string">"content-encoding"</literal>, <literal type="string">"gzip"</literal>,
<literal type="string">"set-cookie"</literal>, <literal type="string">"foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; "</literal>
<literal type="string">"max-age=3600; version=1"</literal>,
NULL);

hpack_decode_destroy(dec);
}

static void test_resps_huffman(void)
{
struct hpack_decoder *dec = hpack_decode_init(<literal type="number">256</literal>);
assert(dec != NULL);

test_block(dec, <literal type="string">"\x48\x82\x64\x02\x58\x85\xae\xc3\x77\x1a\x4b\x61\x96\xd0"</literal>
<literal type="string">"\x7a\xbe\x94\x10\x54\xd4\x44\xa8\x20\x05\x95\x04\x0b\x81\x66"</literal>
<literal type="string">"\xe0\x82\xa6\x2d\x1b\xff\x6e\x91\x9d\x29\xad\x17\x18\x63\xc7"</literal>
<literal type="string">"\x8f\x0b\x97\xc8\xe9\xae\x82\xae\x43\xd3"</literal>, <literal type="number">54</literal>,
<literal type="string">":status"</literal>, <literal type="string">"302"</literal>, <literal type="string">"cache-control"</literal>, <literal type="string">"private"</literal>,
<literal type="string">"date"</literal>, <literal type="string">"Mon, 21 Oct 2013 20:13:21 GMT"</literal>,
<literal type="string">"location"</literal>, <literal type="string">"https://www.example.com"</literal>, NULL);
test_block(dec, <literal type="string">"\x48\x83\x64\x0e\xff\xc1\xc0\xbf"</literal>, <literal type="number">8</literal>,
<literal type="string">":status"</literal>, <literal type="string">"307"</literal>, <literal type="string">"cache-control"</literal>, <literal type="string">"private"</literal>,
<literal type="string">"date"</literal>, <literal type="string">"Mon, 21 Oct 2013 20:13:21 GMT"</literal>,
<literal type="string">"location"</literal>, <literal type="string">"https://www.example.com"</literal>, NULL);
test_block(dec, <literal type="string">"\x88\xc1\x61\x96\xd0\x7a\xbe\x94\x10\x54\xd4\x44\xa8\x20"</literal>
<literal type="string">"\x05\x95\x04\x0b\x81\x66\xe0\x84\xa6\x2d\x1b\xff\xc0\x5a\x83"</literal>
<literal type="string">"\x9b\xd9\xab\x77\xad\x94\xe7\x82\x1d\xd7\xf2\xe6\xc7\xb3\x35"</literal>
<literal type="string">"\xdf\xdf\xcd\x5b\x39\x60\xd5\xaf\x27\x08\x7f\x36\x72\xc1\xab"</literal>
<literal type="string">"\x27\x0f\xb5\x29\x1f\x95\x87\x31\x60\x65\xc0\x03\xed\x4e\xe5"</literal>
<literal type="string">"\xb1\x06\x3d\x50\x07"</literal>, <literal type="number">79</literal>,
<literal type="string">":status"</literal>, <literal type="string">"200"</literal>, <literal type="string">"cache-control"</literal>, <literal type="string">"private"</literal>,
<literal type="string">"date"</literal>, <literal type="string">"Mon, 21 Oct 2013 20:13:22 GMT"</literal>,
<literal type="string">"location"</literal>, <literal type="string">"https://www.example.com"</literal>,
<literal type="string">"content-encoding"</literal>, <literal type="string">"gzip"</literal>,
<literal type="string">"set-cookie"</literal>, <literal type="string">"foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; "</literal>
<literal type="string">"max-age=3600; version=1"</literal>,
NULL);

hpack_decode_destroy(dec);
}


int main(void)
{
test_integers();
test_headers();
test_reqs();
test_reqs_huffman();
test_resps();
test_resps_huffman();
}</argument></argument_list></macro></block_content></block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
