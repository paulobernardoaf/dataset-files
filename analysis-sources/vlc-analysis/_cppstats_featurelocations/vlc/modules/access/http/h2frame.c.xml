<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\http\h2frame.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2frame.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type>
<name>vlc_h2_frame_alloc</name><parameter_list>(<parameter><decl><type><name>uint_fast8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint_fast8_t</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>stream_id</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>stream_id</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>length</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>f</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>length</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>length</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_h2_frame_payload</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((f)-&gt;data + 9)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>uint_fast32_t</name></type> <name>vlc_h2_frame_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>vlc_h2_frame_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">9</literal> <operator>+</operator> <call><name>vlc_h2_frame_length</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint_fast8_t</name></type> <name>vlc_h2_frame_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint_fast8_t</name></type> <name>vlc_h2_frame_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint_fast32_t</name></type> <name>vlc_h2_frame_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GetDWBE</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
<decl><name>VLC_H2_FRAME_DATA</name></decl>,
<decl><name>VLC_H2_FRAME_HEADERS</name></decl>,
<decl><name>VLC_H2_FRAME_PRIORITY</name></decl>,
<decl><name>VLC_H2_FRAME_RST_STREAM</name></decl>,
<decl><name>VLC_H2_FRAME_SETTINGS</name></decl>,
<decl><name>VLC_H2_FRAME_PUSH_PROMISE</name></decl>,
<decl><name>VLC_H2_FRAME_PING</name></decl>,
<decl><name>VLC_H2_FRAME_GOAWAY</name></decl>,
<decl><name>VLC_H2_FRAME_WINDOW_UPDATE</name></decl>,
<decl><name>VLC_H2_FRAME_CONTINUATION</name></decl>,
}</block>;</enum>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vlc_h2_type_name</name><parameter_list>(<parameter><decl><type><name>uint_fast8_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>names</name><index>[]</index><index>[<expr><literal type="number">14</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>VLC_H2_FRAME_DATA</name></expr>]</index> <operator>=</operator> <literal type="string">"DATA"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_HEADERS</name></expr>]</index> <operator>=</operator> <literal type="string">"HEADERS"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_PRIORITY</name></expr>]</index> <operator>=</operator> <literal type="string">"PRIORITY"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_RST_STREAM</name></expr>]</index> <operator>=</operator> <literal type="string">"RST_STREAM"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_SETTINGS</name></expr>]</index> <operator>=</operator> <literal type="string">"SETTINGS"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_PUSH_PROMISE</name></expr>]</index> <operator>=</operator> <literal type="string">"PUSH_PROMISE"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_PING</name></expr>]</index> <operator>=</operator> <literal type="string">"PING"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_GOAWAY</name></expr>]</index> <operator>=</operator> <literal type="string">"GOAWAY"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_WINDOW_UPDATE</name></expr>]</index> <operator>=</operator> <literal type="string">"WINDOW_UPDATE"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_CONTINUATION</name></expr>]</index> <operator>=</operator> <literal type="string">"CONTINUATION"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator> <name><name>names</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"&lt;unknown&gt;"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>names</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
<decl><name>VLC_H2_DATA_END_STREAM</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>VLC_H2_DATA_PADDED</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <block>{
<decl><name>VLC_H2_HEADERS_END_STREAM</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>VLC_H2_HEADERS_END_HEADERS</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
<decl><name>VLC_H2_HEADERS_PADDED</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,
<decl><name>VLC_H2_HEADERS_PRIORITY</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <block>{
<decl><name>VLC_H2_SETTINGS_ACK</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <block>{
<decl><name>VLC_H2_PUSH_PROMISE_END_HEADERS</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
<decl><name>VLC_H2_PUSH_PROMISE_PADDED</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <block>{
<decl><name>VLC_H2_PING_ACK</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <block>{
<decl><name>VLC_H2_CONTINUATION_END_HEADERS</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
}</block>;</enum>

<function><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type>
<name>vlc_h2_frame_headers</name><parameter_list>(<parameter><decl><type><name>uint_fast32_t</name></type> <name>stream_id</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>mtu</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>eos</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>headers</name><index>[]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>eos</name></expr> ?</condition><then> <expr><name>VLC_H2_HEADERS_END_STREAM</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>hpack_encode</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;=</operator> <name>mtu</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content> 
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>VLC_H2_HEADERS_END_HEADERS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>vlc_h2_frame_alloc</name><argument_list>(<argument><expr><name>VLC_H2_FRAME_HEADERS</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>f</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hpack_encode</name><argument_list>(<argument><expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>payload</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>payload</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hpack_encode</name><argument_list>(<argument><expr><name>payload</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name>f</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>offset</name> <init>= <expr><name>payload</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast8_t</name></type> <name>type</name> <init>= <expr><name>VLC_H2_FRAME_HEADERS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>mtu</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>vlc_h2_frame_alloc</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>mtu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>mtu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>VLC_H2_FRAME_CONTINUATION</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>mtu</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>mtu</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>VLC_H2_CONTINUATION_END_HEADERS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>vlc_h2_frame_alloc</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>f</name></expr>;</return>

<label><name>error</name>:</label>
<while>while <condition>(<expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type>
<name>vlc_h2_frame_data</name><parameter_list>(<parameter><decl><type><name>uint_fast32_t</name></type> <name>stream_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>eos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>eos</name></expr> ?</condition><then> <expr><name>VLC_H2_DATA_END_STREAM</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>vlc_h2_frame_alloc</name><argument_list>(<argument><expr><name>VLC_H2_FRAME_DATA</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type>
<name>vlc_h2_frame_rst_stream</name><parameter_list>(<parameter><decl><type><name>uint_fast32_t</name></type> <name>stream_id</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>error_code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>vlc_h2_frame_alloc</name><argument_list>(<argument><expr><name>VLC_H2_FRAME_RST_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>stream_id</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>(<argument><expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>error_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>vlc_h2_frame_settings</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>VLC_H2_MAX_HEADER_TABLE</name> <operator>!=</operator> <name>VLC_H2_DEFAULT_MAX_HEADER_TABLE</name><operator>)</operator>
<operator>+</operator> <literal type="number">1</literal> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VLC_H2_MAX_STREAMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>+</operator> <literal type="number">1</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>+</operator> <operator>(</operator><name>VLC_H2_INIT_WINDOW</name> <operator>!=</operator> <name>VLC_H2_DEFAULT_INIT_WINDOW</name><operator>)</operator>
<operator>+</operator> <operator>(</operator><name>VLC_H2_MAX_FRAME</name> <operator>!=</operator> <name>VLC_H2_DEFAULT_MAX_FRAME</name><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VLC_H2_MAX_HEADER_LIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>+</operator> <literal type="number">1</literal></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>vlc_h2_frame_alloc</name><argument_list>(<argument><expr><name>VLC_H2_FRAME_SETTINGS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>n</name> <operator>*</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>f</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>VLC_H2_MAX_HEADER_TABLE</name> <operator>!=</operator> <name>VLC_H2_DEFAULT_MAX_HEADER_TABLE</name><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_SETTING_HEADER_TABLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>VLC_H2_MAX_HEADER_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_SETTING_ENABLE_PUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VLC_H2_MAX_STREAMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_SETTING_MAX_CONCURRENT_STREAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>VLC_H2_MAX_STREAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>VLC_H2_INIT_WINDOW</name> <operator>!=</operator> <name>VLC_H2_DEFAULT_INIT_WINDOW</name><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>VLC_H2_INIT_WINDOW</name> <operator>&gt;</operator> <literal type="number">2147483647</literal><operator>)</operator></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Illegal initial window value</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_SETTING_INITIAL_WINDOW_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>VLC_H2_INIT_WINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>VLC_H2_MAX_FRAME</name> <operator>!=</operator> <name>VLC_H2_DEFAULT_MAX_FRAME</name><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name><name>VLC_H2_MAX_FRAME</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">16384</literal> <operator>||</operator> <name>VLC_H2_MAX_FRAME</name></expr></argument> &gt;</argument_list></name> <literal type="number">16777215</literal><operator>)</operator></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Illegal maximum frame size</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_SETTING_MAX_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>VLC_H2_MAX_FRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VLC_H2_MAX_HEADER_LIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_SETTING_MAX_HEADER_LIST_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>VLC_H2_MAX_HEADER_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>vlc_h2_frame_settings_ack</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vlc_h2_frame_alloc</name><argument_list>(<argument><expr><name>VLC_H2_FRAME_SETTINGS</name></expr></argument>, <argument><expr><name>VLC_H2_SETTINGS_ACK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vlc_h2_setting_name</name><parameter_list>(<parameter><decl><type><name>uint_fast16_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>names</name><index>[]</index><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="string">"Unknown setting"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_SETTING_HEADER_TABLE_SIZE</name></expr>]</index> <operator>=</operator> <literal type="string">"Header table size"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_SETTING_ENABLE_PUSH</name></expr>]</index> <operator>=</operator> <literal type="string">"Enable push"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_SETTING_MAX_CONCURRENT_STREAMS</name></expr>]</index> <operator>=</operator> <literal type="string">"Concurrent streams"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_SETTING_INITIAL_WINDOW_SIZE</name></expr>]</index> <operator>=</operator> <literal type="string">"Initial window size"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_SETTING_MAX_FRAME_SIZE</name></expr>]</index> <operator>=</operator> <literal type="string">"Frame size"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_SETTING_MAX_HEADER_LIST_SIZE</name></expr>]</index> <operator>=</operator> <literal type="string">"Header list size"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <name><name>names</name><index>[<expr><name>id</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>names</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>vlc_h2_frame_ping</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>vlc_h2_frame_alloc</name><argument_list>(<argument><expr><name>VLC_H2_FRAME_PING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>opaque</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>vlc_h2_frame_pong</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>vlc_h2_frame_alloc</name><argument_list>(<argument><expr><name>VLC_H2_FRAME_PING</name></expr></argument>,
<argument><expr><name>VLC_H2_PING_ACK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>opaque</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type>
<name>vlc_h2_frame_goaway</name><parameter_list>(<parameter><decl><type><name>uint_fast32_t</name></type> <name>last_stream_id</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>error_code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>vlc_h2_frame_alloc</name><argument_list>(<argument><expr><name>VLC_H2_FRAME_GOAWAY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>last_stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>error_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type>
<name>vlc_h2_frame_window_update</name><parameter_list>(<parameter><decl><type><name>uint_fast32_t</name></type> <name>stream_id</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>credit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>stream_id</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>vlc_h2_frame_alloc</name><argument_list>(<argument><expr><name>VLC_H2_FRAME_WINDOW_UPDATE</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>credit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vlc_h2_strerror</name><parameter_list>(<parameter><decl><type><name>uint_fast32_t</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>names</name><index>[]</index><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>VLC_H2_NO_ERROR</name></expr>]</index> <operator>=</operator> <literal type="string">"No error"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_PROTOCOL_ERROR</name></expr>]</index> <operator>=</operator> <literal type="string">"Protocol error"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_INTERNAL_ERROR</name></expr>]</index> <operator>=</operator> <literal type="string">"Internal error"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_FLOW_CONTROL_ERROR</name></expr>]</index> <operator>=</operator> <literal type="string">"Flow control error"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_SETTINGS_TIMEOUT</name></expr>]</index> <operator>=</operator> <literal type="string">"Settings time-out"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_STREAM_CLOSED</name></expr>]</index> <operator>=</operator> <literal type="string">"Stream closed"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr>]</index> <operator>=</operator> <literal type="string">"Frame size error"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_REFUSED_STREAM</name></expr>]</index> <operator>=</operator> <literal type="string">"Refused stream"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_CANCEL</name></expr>]</index> <operator>=</operator> <literal type="string">"Cancellation"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_COMPRESSION_ERROR</name></expr>]</index> <operator>=</operator> <literal type="string">"Compression error"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_CONNECT_ERROR</name></expr>]</index> <operator>=</operator> <literal type="string">"CONNECT error"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_ENHANCE_YOUR_CALM</name></expr>]</index> <operator>=</operator> <literal type="string">"Excessive load"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_INADEQUATE_SECURITY</name></expr>]</index> <operator>=</operator> <literal type="string">"Inadequate security"</literal></expr>,
<expr><index>[<expr><name>VLC_H2_HTTP_1_1_REQUIRED</name></expr>]</index> <operator>=</operator> <literal type="string">"Required HTTP/1.1"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <name><name>names</name><index>[<expr><name>code</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Unknown error"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>names</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_h2_frame_dump</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>vlc_h2_frame_length</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast8_t</name></type> <name>type</name> <init>= <expr><call><name>vlc_h2_frame_type</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast8_t</name></type> <name>flags</name> <init>= <expr><call><name>vlc_h2_frame_flags</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>sid</name> <init>= <expr><call><name>vlc_h2_frame_id</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_http_dbg</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr><literal type="string">"%s %s (0x%02"</literal><name>PRIxFAST8</name><literal type="string">") frame of %zu bytes, "</literal>
<literal type="string">"flags 0x%02"</literal><name>PRIxFAST8</name><literal type="string">", stream %"</literal><name>PRIuFAST32</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>,
<argument><expr><call><name>vlc_h2_type_name</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_http_dbg</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr><literal type="string">"%s %s (0x%02"</literal><name>PRIxFAST8</name><literal type="string">") frame of %zu bytes, "</literal>
<literal type="string">"flags 0x%02"</literal><name>PRIxFAST8</name><literal type="string">", global"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>,
<argument><expr><call><name>vlc_h2_type_name</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type>(<name>vlc_h2_frame_data_get</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>lenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>vlc_h2_frame_type</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_H2_FRAME_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>vlc_h2_frame_length</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast8_t</name></type> <name>flags</name> <init>= <expr><call><name>vlc_h2_frame_flags</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VLC_H2_DATA_PADDED</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;=</operator> <literal type="number">1u</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <literal type="number">1u</literal> <operator>+</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">1u</literal> <operator>+</operator> <operator>*</operator><operator>(</operator><name>ptr</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>vlc_h2_parser</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


<struct>struct <name>vlc_h2_parser</name>
<block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_h2_parser_cbs</name></name> <modifier>*</modifier></type><name>cbs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_h2_parser</name></type> <name>parser</name></decl>;</decl_stmt> 

<struct>struct
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>eos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>hpack_decoder</name></name> <modifier>*</modifier></type><name>decoder</name></decl>;</decl_stmt> 
}</block> <decl><name>headers</name></decl>;</struct> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rcwd_size</name></decl>;</decl_stmt> 
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_generic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_headers_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>error</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_stream_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>stream_error</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>vlc_h2_stream_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>stream_lookup</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_h2_parse_headers_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>sid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>eos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sid</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>sid</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parser</name></name> <operator>=</operator> <name>vlc_h2_parse_headers_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>sid</name></name> <operator>=</operator> <name>sid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>eos</name></name> <operator>=</operator> <name>eos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_headers_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>sid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>len</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">65536</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>len</name></name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_headers_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>headers</name><index>[<expr><name>VLC_H2_MAX_HEADERS</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>hpack_decode</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>decoder</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>len</name></name></expr></argument>,
<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>VLC_H2_MAX_HEADERS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>VLC_H2_MAX_HEADERS</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VLC_H2_MAX_HEADERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>headers</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>headers</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_COMPRESSION_ERROR</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vlc_h2_stream_lookup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>sid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ch</name><index>[<expr><ternary><condition><expr><name>n</name></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>headers</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator> <expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>headers</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>stream_headers</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>eos</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>stream_end</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>




<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>vlc_h2_stream_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>sid</name></name></expr></argument>, <argument><expr><name>VLC_H2_REFUSED_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>headers</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>headers</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parser</name></name> <operator>=</operator> <name>vlc_h2_parse_generic</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>sid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_frame_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_fast8_t</name></type> <name>flags</name> <init>= <expr><call><name>vlc_h2_frame_flags</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>VLC_H2_MAX_FRAME</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_stream_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VLC_H2_DATA_PADDED</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1u</literal> <operator>+</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_stream_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>rcwd_size</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_FLOW_CONTROL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rcwd_size</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>window_status</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rcwd_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vlc_h2_stream_lookup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_stream_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>VLC_H2_STREAM_CLOSED</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>p</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>stream_data</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VLC_H2_DATA_END_STREAM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>stream_end</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_frame_headers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_fast8_t</name></type> <name>flags</name> <init>= <expr><call><name>vlc_h2_frame_flags</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>VLC_H2_MAX_FRAME</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VLC_H2_HEADERS_PADDED</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1u</literal> <operator>+</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VLC_H2_HEADERS_PRIORITY</name></expr>)</condition>
<block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_h2_parse_headers_start</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <name>VLC_H2_HEADERS_END_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_h2_parse_headers_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>VLC_H2_HEADERS_END_HEADERS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_h2_parse_headers_end</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_frame_priority</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vlc_h2_stream_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_frame_rst_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vlc_h2_stream_lookup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>code</name> <init>= <expr><call><name>GetDWBE</name><argument_list>(<argument><expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>stream_reset</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_frame_settings</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>%</operator> <literal type="number">6</literal> <operator>||</operator> <name>len</name> <operator>&gt;</operator> <name>VLC_H2_MAX_FRAME</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_h2_frame_flags</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>VLC_H2_SETTINGS_ACK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>ptr</name> <operator>+</operator> <name>len</name></expr></init></decl>;</init> <condition><expr><name>ptr</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>+=</operator> <literal type="number">6</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>setting</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><call><name>GetWBE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GetDWBE</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>settings_done</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_frame_push_promise</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name> <init>= <expr><call><name>vlc_h2_frame_flags</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>VLC_H2_MAX_FRAME</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VLC_H2_PUSH_PROMISE_PADDED</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1u</literal> <operator>+</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_frame_ping</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>opaque</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_h2_frame_flags</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>VLC_H2_PING_ACK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opaque</name></expr></argument>, <argument><expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>ping</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_frame_goaway</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">8</literal> <operator>||</operator> <name>len</name></expr></argument> &gt;</argument_list></name> <name>VLC_H2_MAX_FRAME</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>last_id</name> <init>= <expr><call><name>GetDWBE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>code</name> <init>= <expr><call><name>GetDWBE</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>reset</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>last_id</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_frame_window_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>vlc_h2_stream_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>credit</name> <init>= <expr><call><name>GetDWBE</name><argument_list>(<argument><expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7fffffffu</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>credit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>vlc_h2_stream_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>VLC_H2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>window_update</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>credit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vlc_h2_stream_lookup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>cbs</name><operator>-&gt;</operator><name>stream_window_update</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>credit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_frame_continuation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>vlc_h2_frame_payload</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>id</name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>sid</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>VLC_H2_MAX_FRAME</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_h2_parse_headers_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>vlc_h2_frame_flags</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>VLC_H2_CONTINUATION_END_HEADERS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_h2_parse_headers_end</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_frame_unknown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>VLC_H2_MAX_FRAME</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>vlc_h2_stream_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>VLC_H2_FRAME_SIZE_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_h2_parser</name></type> <name><name>vlc_h2_parsers</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>VLC_H2_FRAME_DATA</name></expr>]</index> <operator>=</operator> <name>vlc_h2_parse_frame_data</name></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_HEADERS</name></expr>]</index> <operator>=</operator> <name>vlc_h2_parse_frame_headers</name></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_PRIORITY</name></expr>]</index> <operator>=</operator> <name>vlc_h2_parse_frame_priority</name></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_RST_STREAM</name></expr>]</index> <operator>=</operator> <name>vlc_h2_parse_frame_rst_stream</name></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_SETTINGS</name></expr>]</index> <operator>=</operator> <name>vlc_h2_parse_frame_settings</name></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_PUSH_PROMISE</name></expr>]</index> <operator>=</operator> <name>vlc_h2_parse_frame_push_promise</name></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_PING</name></expr>]</index> <operator>=</operator> <name>vlc_h2_parse_frame_ping</name></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_GOAWAY</name></expr>]</index> <operator>=</operator> <name>vlc_h2_parse_frame_goaway</name></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_WINDOW_UPDATE</name></expr>]</index> <operator>=</operator> <name>vlc_h2_parse_frame_window_update</name></expr>,
<expr><index>[<expr><name>VLC_H2_FRAME_CONTINUATION</name></expr>]</index> <operator>=</operator> <name>vlc_h2_parse_frame_continuation</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_preface</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>VLC_H2_DEFAULT_MAX_FRAME</name>

<operator>||</operator> <call><name>vlc_h2_frame_type</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_H2_FRAME_SETTINGS</name>

<operator>||</operator> <operator>(</operator><call><name>vlc_h2_frame_flags</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>VLC_H2_SETTINGS_ACK</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parser</name></name> <operator>=</operator> <name>vlc_h2_parse_generic</name></expr>;</expr_stmt>

<return>return <expr><call><name>vlc_h2_parse_frame_settings</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_generic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint_fast8_t</name></type> <name>type</name> <init>= <expr><call><name>vlc_h2_frame_type</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_h2_parser</name></type> <name>func</name> <init>= <expr><name>vlc_h2_parse_frame_unknown</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>sid</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>vlc_h2_parsers</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>vlc_h2_parsers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof>
<operator>&amp;&amp;</operator> <name><name>vlc_h2_parsers</name><index>[<expr><name>type</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>vlc_h2_parsers</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>func</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_headers_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>sid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>vlc_h2_frame_type</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_H2_FRAME_CONTINUATION</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_h2_parse_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>VLC_H2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>vlc_h2_parse_frame_continuation</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_h2_parse_failed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint_fast32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>len</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>id</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_h2_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_frame</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>vlc_h2_frame_length</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>id</name> <init>= <expr><call><name>vlc_h2_frame_id</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>parser</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parser</name></name> <operator>=</operator> <name>vlc_h2_parse_failed</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>vlc_h2_parse_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_h2_parser_cbs</name></name> <modifier>*</modifier></type><name>cbs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <name>cbs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parser</name></name> <operator>=</operator> <name>vlc_h2_parse_preface</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>sid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>decoder</name></name> <operator>=</operator> <call><name>hpack_decode_init</name><argument_list>(<argument><expr><name>VLC_H2_MAX_HEADER_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>decoder</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rcwd_size</name></name> <operator>=</operator> <literal type="number">65535</literal></expr>;</expr_stmt> 
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_h2_parse_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_h2_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hpack_decode_destroy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
