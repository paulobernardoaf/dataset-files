<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\sdi.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sdi.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>av_le2ne32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>u</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>u</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>u</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>u</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>v210_convert</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name> <init>= <expr><operator>(</operator><operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">47</literal><operator>)</operator> <operator>/</operator> <literal type="number">48</literal><operator>)</operator> <operator>*</operator> <literal type="number">48</literal> <operator>*</operator> <literal type="number">8</literal> <operator>/</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>width</name> <operator>*</operator> <name>height</name> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>width</name> <operator>*</operator> <name>height</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_PIXELS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { val = av_le2ne32(*src++); *a++ = val &amp; 0x3FF; *b++ = (val &gt;&gt; 10) &amp; 0x3FF; *c++ = (val &gt;&gt; 20) &amp; 0x3FF; } while (0)</cpp:value></cpp:define>







<for>for <control>(<init><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>bytes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <literal type="number">6</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>READ_PIXELS</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_PIXELS</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_PIXELS</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_PIXELS</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>READ_PIXELS</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>av_le2ne32</name><argument_list>(<argument><expr><operator>*</operator><name>src</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name><operator>++</operator> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0x3FF</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>u</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FF</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>av_le2ne32</name><argument_list>(<argument><expr><operator>*</operator><name>src</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>v</name><operator>++</operator> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0x3FF</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FF</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytes</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vanc_to_cc</name></cpp:undef>
<function><type><name>block_t</name> <modifier>*</modifier></type><name>vanc_to_cc</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>words</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>words</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"VANC line too small (%zu words)"</literal></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>vanc_header</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x03</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>vanc_header</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>words</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Data Count (%zu) &gt; line length (%zu)"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>vanc_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>v</name> <init>= <expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>np</name> <init>= <expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name>parity</name><argument_list>(<argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>!</operator><name>p</name> <operator>^</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x100</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>np</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>np</name> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Parity incorrect for word %zu"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vanc_sum</name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vanc_sum</name> <operator>&amp;=</operator> <literal type="number">0x1ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>vanc_sum</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>vanc_sum</name> <operator>&amp;</operator> <literal type="number">0x100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>vanc_sum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"VANC checksum incorrect: 0x%.4x != 0x%.4x"</literal></expr></argument>, <argument><expr><name>vanc_sum</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x61</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x01</literal></expr> )</condition> <block>{<block_content>


<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>cdp</name> <init>= <expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cdp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x96</literal> <operator>||</operator> <name><name>cdp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x69</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Invalid CDP header 0x%.2x 0x%.2x"</literal></expr></argument>, <argument><expr><name><name>cdp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cdp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>cdp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"CDP len %d != %zu"</literal></expr></argument>, <argument><expr><name><name>cdp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>cdp_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>cdp_sum</name> <operator>+=</operator> <name><name>cdp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>cdp_sum</name> <operator>=</operator> <ternary><condition><expr><name>cdp_sum</name></expr> ?</condition><then> <expr><literal type="number">256</literal> <operator>-</operator> <name>cdp_sum</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cdp</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>cdp_sum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"CDP checksum invalid 0x%.4x != 0x%.4x"</literal></expr></argument>, <argument><expr><name>cdp_sum</name></expr></argument>, <argument><expr><name><name>cdp</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>rate</name> <init>= <expr><name><name>cdp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rate</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"CDP frame rate invalid (0x%.2x)"</literal></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rate</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"CDP frame rate invalid (0x%.2x)"</literal></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cdp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x43</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"CDP flags invalid (0x%.2x)"</literal></expr></argument>, <argument><expr><name><name>cdp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>hdr</name> <init>= <expr><operator>(</operator><name><name>cdp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>cdp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cdp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x72</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Invalid ccdata_id 0x%.2x"</literal></expr></argument>, <argument><expr><name><name>cdp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>cc_count</name> <init>= <expr><name><name>cdp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cc_count</name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Invalid cc_count 0x%.2x"</literal></expr></argument>, <argument><expr><name>cc_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cc_count</name> <operator>&amp;=</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">13</literal><operator>)</operator> <operator>&lt;</operator> <name>cc_count</name> <operator>*</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Invalid cc_count %d (&gt; %zu)"</literal></expr></argument>, <argument><expr><name>cc_count</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cdp</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x74</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Invalid footer id 0x%.2x"</literal></expr></argument>, <argument><expr><name><name>cdp</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>ftr</name> <init>= <expr><operator>(</operator><name><name>cdp</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>cdp</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ftr</name> <operator>!=</operator> <name>hdr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Header 0x%.4x != Footer 0x%.4x"</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>ftr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name>cc_count</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cc_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cdp</name><index>[<expr><literal type="number">9</literal> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cdp</name><index>[<expr><literal type="number">9</literal> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>cdp</name><index>[<expr><literal type="number">9</literal> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>cc</name></expr>;</return>
</block_content>}</block></function>
</unit>
