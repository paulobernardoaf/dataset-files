<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\rist.c">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_threads.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitstream/ietf/rtcp_rr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitstream/ietf/rtcp_sdes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitstream/ietf/rtcp_fb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitstream/ietf/rtp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rist.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIST_DEFAULT_LATENCY</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIST_DEFAULT_RETRY_INTERVAL</name></cpp:macro> <cpp:value>132</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIST_DEFAULT_REORDER_BUFFER</name></cpp:macro> <cpp:value>70</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIST_MAX_PACKET_SIZE</name></cpp:macro> <cpp:value>1472</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIST_DEFAULT_POLL_TIMEOUT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIST_MAX_RETRIES</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NACK_INTERVAL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATS_INTERVAL</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>nack_type</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>nack_type_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Range"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bitmask"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>NACK_TYPE</name> <block>{
<decl><name>NACK_FMT_RANGE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>NACK_FMT_BITMASK</name></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sender_name</name><index>[<expr><name>MAX_CNAME</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>NACK_TYPE</name></name></type> <name>nack_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_data_rx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_nack_tx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_max_packet_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_poll_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_poll_timeout_current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_ismulticast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_sendnacks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_sendblindnacks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_disablenacks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_flag_discontinuity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>p_fifo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_reset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_poll_timeout_zero_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_poll_timeout_nonzero_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_last_stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>vbr_ratio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>vbr_ratio_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_lost_packets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_nack_packets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_recovered_packets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_reordered_packets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_total_packets</name></decl>;</decl_stmt>
}</block></struct></type> <name>stream_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>STREAM_CAN_SEEK</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_FASTSEEK</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_CONTROL_PACE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_GET_PTS_DELAY</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(
<argument><expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"network-caching"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>rist_init_rx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rist_flow</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flow</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>RIST_QUEUE_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rtp_pkt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>buffer</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>flow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_in</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_nack</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>flow</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rist_WriteTo_i11e_Locked</name><parameter_list>(<parameter><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>peer</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>slen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rist_WriteTo_i11e</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>rist_udp_receiver</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>vlc_url_t</name> <modifier>*</modifier></type><name>parsed_url</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_ismulticast</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Opening Rist Flow Receiver at %s:%d and %s:%d"</literal></expr></argument>,
<argument><expr><name><name>parsed_url</name><operator>-&gt;</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>parsed_url</name><operator>-&gt;</operator><name>i_port</name></name></expr></argument>,
<argument><expr><name><name>parsed_url</name><operator>-&gt;</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>parsed_url</name><operator>-&gt;</operator><name>i_port</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name> <operator>=</operator> <call><name>rist_init_rx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_in</name></name> <operator>=</operator> <call><name>net_OpenDgram</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>parsed_url</name><operator>-&gt;</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>parsed_url</name><operator>-&gt;</operator><name>i_port</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_in</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot open input socket"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b_ismulticast</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name> <operator>=</operator> <call><name>net_OpenDgram</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>parsed_url</name><operator>-&gt;</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>parsed_url</name><operator>-&gt;</operator><name>i_port</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot open multicast nack socket"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_nack</name></name> <operator>=</operator> <call><name>net_ConnectDgram</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>parsed_url</name><operator>-&gt;</operator><name>psz_host</name></name></expr></argument>,
<argument><expr><name><name>parsed_url</name><operator>-&gt;</operator><name>i_port</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_nack</name></name> <operator>=</operator> <call><name>net_OpenDgram</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>parsed_url</name><operator>-&gt;</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>parsed_url</name><operator>-&gt;</operator><name>i_port</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_nack</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot open nack socket"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>populate_cname</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_nack</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"our cname is %s"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name></expr>;</return>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_in</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_close</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_nack</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_close</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_nack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_close</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_index_in_range</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>flow</name><operator>-&gt;</operator><name>ri</name></name> <operator>&lt;=</operator> <name><name>flow</name><operator>-&gt;</operator><name>wi</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>idx</name> <operator>&gt;</operator> <name><name>flow</name><operator>-&gt;</operator><name>ri</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>idx</name> <operator>&lt;=</operator> <name><name>flow</name><operator>-&gt;</operator><name>wi</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>idx</name> <operator>&gt;</operator> <name><name>flow</name><operator>-&gt;</operator><name>ri</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>idx</name> <operator>&lt;=</operator> <name><name>flow</name><operator>-&gt;</operator><name>wi</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_rtcp_feedback</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>namelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>namelen</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>namelen</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>namelen</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rtcp_feedback_size</name> <init>= <expr><name>RTCP_EMPTY_RR_SIZE</name> <operator>+</operator> <name>RTCP_SDES_SIZE</name> <operator>+</operator> <name>namelen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>rtcp_feedback_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rr</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rtp_set_hdr</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_rr_set_pt</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_set_length</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_fb_set_int_ssrc_pkt_sender</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_sdes</name> <init>= <expr><operator>(</operator><name>buf</name> <operator>+</operator> <name>RTCP_EMPTY_RR_SIZE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rtp_set_hdr</name><argument_list>(<argument><expr><name>p_sdes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtp_set_cc</name><argument_list>(<argument><expr><name>p_sdes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rtcp_sdes_set_pt</name><argument_list>(<argument><expr><name>p_sdes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_set_length</name><argument_list>(<argument><expr><name>p_sdes</name></expr></argument>, <argument><expr><operator>(</operator><name>namelen</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_sdes_set_cname</name><argument_list>(<argument><expr><name>p_sdes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_sdes_set_name_length</name><argument_list>(<argument><expr><name>p_sdes</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_sdes_name</name> <init>= <expr><operator>(</operator><name>buf</name> <operator>+</operator> <name>RTCP_EMPTY_RR_SIZE</name> <operator>+</operator> <name>RTCP_SDES_SIZE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_sdes_name</name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rist_WriteTo_i11e_Locked</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_nack</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rtcp_feedback_size</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>flow</name><operator>-&gt;</operator><name>peer_sockaddr</name></name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>peer_socklen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_bbnack</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd_nack</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>pkt_nacks</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>nack_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bbnack_bufsize</name> <init>= <expr><name>RTCP_FB_HEADER_SIZE</name> <operator>+</operator>
<name>RTCP_FB_FCI_GENERIC_NACK_SIZE</name> <operator>*</operator> <name>nack_count</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>bbnack_bufsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>nack</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rtp_set_hdr</name><argument_list>(<argument><expr><name>nack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_fb_set_fmt</name><argument_list>(<argument><expr><name>nack</name></expr></argument>, <argument><expr><name>NACK_FMT_BITMASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_set_pt</name><argument_list>(<argument><expr><name>nack</name></expr></argument>, <argument><expr><name>RTCP_PT_RTPFB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_set_length</name><argument_list>(<argument><expr><name>nack</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>nack_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>RTCP_FB_HEADER_SIZE</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>nacks</name><index>[<expr><name>MAX_NACKS</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>nacks</name></expr></argument>, <argument><expr><name><name>pkt_nacks</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>pkt_nacks</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nack_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>nack_record</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>len</name> <operator>+</operator> <name>RTCP_FB_FCI_GENERIC_NACK_SIZE</name><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rtcp_fb_nack_set_packet_id</name><argument_list>(<argument><expr><name>nack_record</name></expr></argument>, <argument><expr><name><name>nacks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_fb_nack_set_bitmask_lost</name><argument_list>(<argument><expr><name>nack_record</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>RTCP_FB_FCI_GENERIC_NACK_SIZE</name> <operator>*</operator> <name>nack_count</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_sendnacks</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_disablenacks</name></name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rist_WriteTo_i11e_Locked</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>fd_nack</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>flow</name><operator>-&gt;</operator><name>peer_sockaddr</name></name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>peer_socklen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_rbnack</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd_nack</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>pkt_nacks</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>nack_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rbnack_bufsize</name> <init>= <expr><name>RTCP_FB_HEADER_SIZE</name> <operator>+</operator>
<name>RTCP_FB_FCI_GENERIC_NACK_SIZE</name> <operator>*</operator> <name>nack_count</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>rbnack_bufsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>nack</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rtp_set_hdr</name><argument_list>(<argument><expr><name>nack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_fb_set_fmt</name><argument_list>(<argument><expr><name>nack</name></expr></argument>, <argument><expr><name>NACK_FMT_RANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_set_pt</name><argument_list>(<argument><expr><name>nack</name></expr></argument>, <argument><expr><name>RTCP_PT_RTPFR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_set_length</name><argument_list>(<argument><expr><name>nack</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>nack_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>name</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><literal type="string">"RIST"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rtcp_fb_set_ssrc_media_src</name><argument_list>(<argument><expr><name>nack</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>RTCP_FB_HEADER_SIZE</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>nacks</name><index>[<expr><name>MAX_NACKS</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>nacks</name></expr></argument>, <argument><expr><name><name>pkt_nacks</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>pkt_nacks</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nack_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>nack_record</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>len</name> <operator>+</operator> <name>RTCP_FB_FCI_GENERIC_NACK_SIZE</name><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rtcp_fb_nack_set_range_start</name><argument_list>(<argument><expr><name>nack_record</name></expr></argument>, <argument><expr><name><name>nacks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtcp_fb_nack_set_range_extra</name><argument_list>(<argument><expr><name>nack_record</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>RTCP_FB_FCI_GENERIC_NACK_SIZE</name> <operator>*</operator> <name>nack_count</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_sendnacks</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_disablenacks</name></name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rist_WriteTo_i11e_Locked</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>fd_nack</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>flow</name><operator>-&gt;</operator><name>peer_sockaddr</name></name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>peer_socklen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_nacks</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rtp_pkt</name></name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>null_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nacks_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>nacks</name><index>[<expr><name>MAX_NACKS</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>flow</name><operator>-&gt;</operator><name>ri</name></name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>idx</name><operator>++</operator> <operator>!=</operator> <name><name>flow</name><operator>-&gt;</operator><name>wi</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pkt</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>flow</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nacks_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>MAX_NACKS</name></expr>)</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>null_count</name><operator>++</operator></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>extrapolated_ts</name> <init>= <expr><name>last_ts</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retry_count</name> <init>= <expr><name><name>flow</name><operator>-&gt;</operator><name>nacks_retries</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>age</name> <init>= <expr><name><name>flow</name><operator>-&gt;</operator><name>hi_timestamp</name></name> <operator>-</operator> <name>extrapolated_ts</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>expiration</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>retry_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>expiration</name> <operator>=</operator> <name><name>flow</name><operator>-&gt;</operator><name>reorder_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>expiration</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>flow</name><operator>-&gt;</operator><name>nacks_retries</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>flow</name><operator>-&gt;</operator><name>retry_interval</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>age</name> <operator>&gt;</operator> <name>expiration</name> <operator>&amp;&amp;</operator> <name>retry_count</name> <operator>&lt;=</operator> <name><name>flow</name><operator>-&gt;</operator><name>max_retries</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>nacks_retries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nacks</name><index>[<expr><name>nacks_len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Sending NACK for seq %d, age %"</literal><name>PRId64</name><literal type="string">" ms, retry %u, "</literal> \
<literal type="string">"expiration %"</literal><name>PRId64</name><literal type="string">" ms"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>ts_get_from_rtp</name><argument_list>(<argument><expr><name>age</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">1000</literal></expr></argument>,
<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>nacks_retries</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>ts_get_from_rtp</name><argument_list>(<argument><expr><name>expiration</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>last_ts</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>rtp_ts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>null_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>nacks_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nack_packets</name></name> <operator>+=</operator> <name>nacks_len</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>pkt_nacks</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name>nacks_len</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pkt_nacks</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt_nacks</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>nacks</name></expr></argument>, <argument><expr><name>nacks_len</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt_nacks</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>nacks_len</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_FifoPut</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument>, <argument><expr><name>pkt_nacks</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sockaddr_cmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (a != b) return a &lt; b ? -1 : 1</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CMP</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>, <argument><expr><name><name>y</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>xin</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>x</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yin</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>y</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CMP</name><argument_list>(<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>xin</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>yin</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CMP</name><argument_list>(<argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>xin</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>yin</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>xin6</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>x</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yin6</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>xin6</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name></expr></argument>, <argument><expr><name><name>yin6</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>xin6</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CMP</name><argument_list>(<argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>xin6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>yin6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CMP</name><argument_list>(<argument><expr><name><name>xin6</name><operator>-&gt;</operator><name>sin6_flowinfo</name></name></expr></argument>, <argument><expr><name><name>yin6</name><operator>-&gt;</operator><name>sin6_flowinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CMP</name><argument_list>(<argument><expr><name><name>xin6</name><operator>-&gt;</operator><name>sin6_scope_id</name></name></expr></argument>, <argument><expr><name><name>yin6</name><operator>-&gt;</operator><name>sin6_scope_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CMP</name></cpp:undef>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_sockaddr_info_change</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>xin</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>x</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yin</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>y</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Peer IP:Port change detected: old IP:Port %s:%d, new IP:Port %s:%d"</literal></expr></argument>,
<argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>xin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>xin</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>yin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>yin</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>xin6</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>x</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yin6</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>oldstr</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>newstr</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name><name>xin6</name><operator>-&gt;</operator><name>sin6_family</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xin6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>oldstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name><name>yin6</name><operator>-&gt;</operator><name>sin6_family</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>yin6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Peer IP:Port change detected: old IP:Port %s:%d, new IP:Port %s:%d"</literal></expr></argument>,
<argument><expr><name>oldstr</name></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>xin6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>newstr</name></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>yin6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_sockaddr_info</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>xin</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>x</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Peer IP:Port %s:%d"</literal></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>xin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>xin</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>xin6</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name><name>xin6</name><operator>-&gt;</operator><name>sin6_family</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xin6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Peer IP:Port %s:%d"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>xin6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtcp_input</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf_in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>peer</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>slen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ptype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>processed_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>records</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>new_sender_name</name><index>[<expr><name>MAX_CNAME</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>processed_bytes</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>buf_in</name> <operator>+</operator> <name>processed_bytes</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>bytes_left</name> <init>= <expr><name>len</name> <operator>-</operator> <name>processed_bytes</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>bytes_left</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Rist rtcp packet must have at least 4 bytes, we have %d"</literal></expr></argument>,
<argument><expr><name>bytes_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>rtp_check_hdr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Malformed rtcp packet starting with %02x, ignoring."</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptype</name> <operator>=</operator> <call><name>rtcp_get_pt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>records</name> <operator>=</operator> <call><name>rtcp_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bytes</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>records</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;</operator> <name>bytes_left</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Malformed rtcp packet, wrong len %d, expecting %u bytes in the "</literal> \
<literal type="string">"packet, got a buffer of %u bytes."</literal></expr></argument>, <argument><expr><call><name>rtcp_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>bytes_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>ptype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RTCP_PT_RTPFR</name></expr>:</case>
<case>case <expr><name>RTCP_PT_RTPFB</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>RTCP_PT_RR</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>RTCP_PT_SDES</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_sendnacks</name></name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_sendnacks</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ismulticast</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>name_length</name> <init>= <expr><call><name>rtcp_sdes_get_name_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>name_length</name> <operator>&gt;</operator> <name>bytes_left</name> <operator>||</operator> <name>name_length</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>size_t</name><operator>)</operator><name>name_length</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>new_sender_name</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Malformed SDES packet, wrong cname len %d, got a "</literal> \
<literal type="string">"buffer of %u bytes."</literal></expr></argument>, <argument><expr><name>name_length</name></expr></argument>, <argument><expr><name>bytes_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ip_port_changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sockaddr_cmp</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>flow</name><operator>-&gt;</operator><name>peer_sockaddr</name></name></expr></argument>, <argument><expr><name>peer</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ip_port_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>flow</name><operator>-&gt;</operator><name>peer_socklen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_sockaddr_info_change</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>flow</name><operator>-&gt;</operator><name>peer_sockaddr</name></name></expr></argument>, <argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_sockaddr_info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>flow</name><operator>-&gt;</operator><name>peer_sockaddr</name></name></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>peer_socklen</name></name> <operator>=</operator> <name>slen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>peer_name_changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>new_sender_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_CNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_sender_name</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>RTCP_SDES_SIZE</name></expr></argument>, <argument><expr><name>name_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>new_sender_name</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sender_name</name></name></expr></argument>, <argument><expr><name>name_length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>peer_name_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sender_name</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Peer Name: %s"</literal></expr></argument>, <argument><expr><name>new_sender_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Peer Name change detected: old Name: %s, new "</literal> \
<literal type="string">"Name: %s"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sender_name</name></name></expr></argument>, <argument><expr><name>new_sender_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sender_name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_CNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sender_name</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>RTCP_SDES_SIZE</name></expr></argument>, <argument><expr><name>name_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>peer_name_changed</name> <operator>||</operator> <name>ip_port_changed</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>RTCP_PT_SR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_sendnacks</name></name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_sendnacks</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ismulticast</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">" Unrecognized RTCP packet with PTYPE=%02x!!"</literal></expr></argument>, <argument><expr><name>ptype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>processed_bytes</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>records</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>rist_input</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>( <expr><name>len</name> <operator>&lt;</operator> <name>RTP_HEADER_SIZE</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Rist rtp packet must have at least 12 bytes, we have %zu"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>rtp_check_hdr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Malformed rtp packet header starting with %02x, ignoring."</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>idx</name> <init>= <expr><call><name>rtp_get_seqnum</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pkt_ts</name> <init>= <expr><call><name>rtp_get_timestamp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>retrasnmitted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flow</name><operator>-&gt;</operator><name>reset</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Traffic detected after buffer reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>hi_timestamp</name></name> <operator>=</operator> <name>pkt_ts</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"ts@%u"</literal></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>hi_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>wi</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>ri</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_flag_discontinuity</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Packet %d RECOVERED, Window: [%d:%d--&gt;%d]"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>ri</name></name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>wi</name></name></expr></argument>,
<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>wi</name></name><operator>-</operator><name><name>flow</name><operator>-&gt;</operator><name>ri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_recovered_packets</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>retrasnmitted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>flow</name><operator>-&gt;</operator><name>wi</name></name> <operator>!=</operator> <name><name>flow</name><operator>-&gt;</operator><name>ri</name></name></expr>)</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>idxnext</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>flow</name><operator>-&gt;</operator><name>wi</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>idxnext</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <name>idxnext</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Gap, got %d, expected %d, %d packet gap, Window: [%d:%d--&gt;%d]"</literal></expr></argument>,
<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>idxnext</name></expr></argument>, <argument><expr><name>idx</name> <operator>-</operator> <name>idxnext</name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>ri</name></name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>wi</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>flow</name><operator>-&gt;</operator><name>wi</name></name><operator>-</operator><name><name>flow</name><operator>-&gt;</operator><name>ri</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_reordered_packets</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Out of order, got %d, expected %d, Window: [%d:%d--&gt;%d]"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>,
<argument><expr><name>idxnext</name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>ri</name></name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>wi</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>flow</name><operator>-&gt;</operator><name>wi</name></name><operator>-</operator><name><name>flow</name><operator>-&gt;</operator><name>ri</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>zero_counter</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>flow</name><operator>-&gt;</operator><name>wi</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>zero_counter</name><operator>++</operator> <operator>!=</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>nacks_retries</name><index>[<expr><name>zero_counter</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>


</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>rtp_pkt</name></name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pkt</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>flow</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>rtp_ts</name></name> <operator>=</operator> <name>pkt_ts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_data_rx</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>nacks_retries</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retrasnmitted</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>success</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_packets</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_index_in_range</name><argument_list>(<argument><expr><name>flow</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>pkt_ts</name> <operator>&gt;=</operator> <name><name>flow</name><operator>-&gt;</operator><name>hi_timestamp</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pkt_ts</name> <operator>-</operator> <name><name>flow</name><operator>-&gt;</operator><name>hi_timestamp</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>flow</name><operator>-&gt;</operator><name>hi_timestamp</name></name><operator>/</operator><literal type="number">10</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Forward stream discontinuity idx@%d/%d/%d ts@%u/%u"</literal></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>ri</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>,
<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>wi</name></name></expr></argument>, <argument><expr><name>pkt_ts</name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>hi_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>wi</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>hi_timestamp</name></name> <operator>=</operator> <name>pkt_ts</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>is_index_in_range</name><argument_list>(<argument><expr><name>flow</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Backwards stream discontinuity idx@%d/%d/%d ts@%u/%u"</literal></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>ri</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>,
<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>wi</name></name></expr></argument>, <argument><expr><name>pkt_ts</name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>hi_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>rist_dequeue</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>pktout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rtp_pkt</name></name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>idx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>flow</name><operator>-&gt;</operator><name>ri</name></name> <operator>==</operator> <name><name>flow</name><operator>-&gt;</operator><name>wi</name></name> <operator>||</operator> <name><name>flow</name><operator>-&gt;</operator><name>reset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>flow</name><operator>-&gt;</operator><name>ri</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found_data</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>loss_amount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>idx</name><operator>++</operator> <operator>!=</operator> <name><name>flow</name><operator>-&gt;</operator><name>wi</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pkt</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>flow</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>loss_amount</name><operator>++</operator></expr>;</expr_stmt>




<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>flow</name><operator>-&gt;</operator><name>hi_timestamp</name></name> <operator>&gt;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>rtp_ts</name></name> <operator>+</operator> <name><name>flow</name><operator>-&gt;</operator><name>rtp_latency</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>newSize</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>RTP_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pktout</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>(<argument><expr><name>newSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pktout</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pktout</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>newSize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pktout</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>RTP_HEADER_SIZE</name></expr></argument>, <argument><expr><name>newSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>ri</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>found_data</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>loss_amount</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>found_data</name> <operator>==</operator> <name>true</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Packet NOT RECOVERED, %d packet(s), Window: [%d:%d]"</literal></expr></argument>, <argument><expr><name>loss_amount</name></expr></argument>,
<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>ri</name></name></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>wi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_lost_packets</name></name> <operator>+=</operator> <name>loss_amount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_flag_discontinuity</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>pktout</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>rist_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>



<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>pkt_nacks</name> <init>= <expr><call><name>block_FifoGet</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>nack_count</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>pkt_nacks</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>nack_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NACK_FMT_BITMASK</name></expr>:</case>
<expr_stmt><expr><call><name>send_bbnack</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_nack</name></name></expr></argument>, <argument><expr><name>pkt_nacks</name></expr></argument>, <argument><expr><name>nack_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>send_rbnack</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_nack</name></name></expr></argument>, <argument><expr><name>pkt_nacks</name></expr></argument>, <argument><expr><name>nack_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>nack_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Sent %u NACKs !!!"</literal></expr></argument>, <argument><expr><name>nack_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>pkt_nacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name> <argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>BlockRIST</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>eof</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>now</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>eof</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>pktout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>pfd</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>peer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>slen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rist_flow</name></name> <modifier>*</modifier></type><name>flow</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_killed</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>poll_sockets</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>flow</name><operator>-&gt;</operator><name>fd_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>flow</name><operator>-&gt;</operator><name>fd_nack</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ismulticast</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>poll_sockets</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>









<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_poll_i11e</name><argument_list>(<argument><expr><name>pfd</name></expr></argument>, <argument><expr><name>poll_sockets</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_timeout_current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>pktout</name> <operator>=</operator> <call><name>rist_dequeue</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>flow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pktout</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_timeout_current</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_timeout_zero_count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_timeout_current</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_timeout_nonzero_count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_packet_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>pfd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rist_ReadFrom_i11e</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_nack</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_packet_size</name></name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>peer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"socket %d error: %s\n"</literal></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_nack</name></name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ismulticast</name></name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rtcp_input</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>flow</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>peer</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ismulticast</name></name> <operator>&amp;&amp;</operator> <name><name>pfd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rist_ReadFrom_i11e</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_packet_size</name></name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>peer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"mcast socket %d error: %s\n"</literal></expr></argument>,<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rtcp_input</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>flow</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>peer</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>pfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rist_Read_i11e</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_in</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"socket %d error: %s\n"</literal></expr></argument>, <argument><expr><name><name>flow</name><operator>-&gt;</operator><name>fd_in</name></name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rist_input</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>flow</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>pktout</name> <operator>=</operator> <call><name>rist_dequeue</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>flow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pktout</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_timeout_current</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_timeout_zero_count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_timeout_current</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_timeout_nonzero_count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>uint64_t</name></type> <name>interval</name> <init>= <expr><operator>(</operator><name>now</name> <operator>-</operator> <name><name>flow</name><operator>-&gt;</operator><name>feedback_time</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>interval</name> <operator>&gt;</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>RTCP_INTERVAL</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_timeout_nonzero_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>ratio</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_timeout_zero_count</name></name>
<operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_timeout_nonzero_count</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ratio</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vbr_ratio</name></name> <operator>+=</operator> <literal type="number">1</literal> <operator>-</operator> <name>ratio</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vbr_ratio</name></name> <operator>+=</operator> <name>ratio</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vbr_ratio_count</name></name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_timeout_zero_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_timeout_nonzero_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>interval</name> <operator>=</operator> <operator>(</operator><name>now</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_last_stat</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>interval</name> <operator>&gt;</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>STATS_INTERVAL</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_lost_packets</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"We have %d lost packets"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_lost_packets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ratio</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>vbr_ratio_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ratio</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>vbr_ratio</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>vbr_ratio_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>quality</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_packets</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quality</name> <operator>-=</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">100</literal><operator>*</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_lost_packets</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_recovered_packets</name></name> <operator>+</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_reordered_packets</name></name><operator>)</operator><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_packets</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>quality</name> <operator>!=</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"STATS: Total %u, Recovered %u/%u, Reordered %u, Lost %u, VBR "</literal> \
<literal type="string">"Score %.2f, Link Quality %.2f%%"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_packets</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_recovered_packets</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nack_packets</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_reordered_packets</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_lost_packets</name></name></expr></argument>, <argument><expr><name>ratio</name></expr></argument>, <argument><expr><name>quality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_stat</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vbr_ratio</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vbr_ratio_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_lost_packets</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nack_packets</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_recovered_packets</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_reordered_packets</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_packets</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>interval</name> <operator>=</operator> <operator>(</operator><name>now</name> <operator>-</operator> <name><name>flow</name><operator>-&gt;</operator><name>feedback_time</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>interval</name> <operator>&gt;</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>RTCP_INTERVAL</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>send_rtcp_feedback</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>flow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>feedback_time</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>interval</name> <operator>=</operator> <operator>(</operator><name>now</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>last_nack_tx</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>interval</name> <operator>&gt;</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>NACK_INTERVAL</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>send_nacks</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_nack_tx</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_data_rx</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>now</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>last_data_rx</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>now</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>last_data_rx</name></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>latency</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>now</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>last_reset</name></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>flow</name><operator>-&gt;</operator><name>latency</name></name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"No data received for %"</literal><name>PRId64</name><literal type="string">" ms, resetting buffers"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>now</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>last_data_rx</name></name><operator>)</operator><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_reset</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pktout</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_flag_discontinuity</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pktout</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_flag_discontinuity</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>pktout</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Clean</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fifo</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_FifoRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_in</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>net_Close</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_nack</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>net_Close</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_nack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>net_Close</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>fd_rtcp_m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>RIST_QUEUE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rtp_pkt</name></name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Clean</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>parsed_url</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>vlc_obj_calloc</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vlc_UrlParse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>parsed_url</name></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failed to parse input URL (%s)"</literal></expr></argument>,
<argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ismulticast</name></name> <operator>=</operator> <call><name>is_multicast_address</name><argument_list>(<argument><expr><name><name>parsed_url</name><operator>.</operator><name>psz_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name> <operator>=</operator> <call><name>rist_udp_receiver</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parsed_url</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ismulticast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>parsed_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failed to open rist flow (%s)"</literal></expr></argument>,
<argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_flag_discontinuity</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_disablenacks</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"disable-nacks"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_sendblindnacks</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"mcast-blind-nacks"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_sendblindnacks</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_disablenacks</name></name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_sendnacks</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_sendnacks</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>nack_type</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"nack-type"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_packet_size</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"packet-size"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_timeout</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"maximum-jitter"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>retry_interval</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"retry-interval"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>max_retries</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"max-retries"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>latency</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"latency"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_disablenacks</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>reorder_buffer</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>latency</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>reorder_buffer</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"reorder-buffer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Setting queue latency to %d ms"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>latency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>rtp_latency</name></name> <operator>=</operator> <call><name>rtp_get_ts</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>latency</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>retry_interval</name></name> <operator>=</operator> <call><name>rtp_get_ts</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>retry_interval</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>reorder_buffer</name></name> <operator>=</operator> <call><name>rtp_get_ts</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flow</name><operator>-&gt;</operator><name>reorder_buffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fifo</name></name> <operator>=</operator> <call><name>block_FifoNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fifo</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>rist_thread</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_INPUT</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failed to create worker thread."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_block</name></name> <operator>=</operator> <name>BlockRIST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>Clean</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>


<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"RIST"</literal>)</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"RIST input"</literal>)</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_ACCESS</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"packet-size"</literal></argument>, <argument>RIST_MAX_PACKET_SIZE</argument>,
<argument>N_(<literal type="string">"RIST maximum packet size (bytes)"</literal>)</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"maximum-jitter"</literal></argument>, <argument>RIST_DEFAULT_POLL_TIMEOUT</argument>,
<argument>N_(<literal type="string">"RIST demux/decode maximum jitter (default is 5ms)"</literal>)</argument>,
<argument>N_(<literal type="string">"This controls the maximum jitter that will be passed to the demux/decode chain. "</literal>
<literal type="string">"The lower the value, the more CPU cycles the algorithm will consume"</literal>)</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"latency"</literal></argument>, <argument>RIST_DEFAULT_LATENCY</argument>, <argument>N_(<literal type="string">"RIST latency (ms)"</literal>)</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"retry-interval"</literal></argument>, <argument>RIST_DEFAULT_RETRY_INTERVAL</argument>, <argument>N_(<literal type="string">"RIST nack retry interval (ms)"</literal>)</argument>,
<argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"reorder-buffer"</literal></argument>, <argument>RIST_DEFAULT_REORDER_BUFFER</argument>, <argument>N_(<literal type="string">"RIST reorder buffer (ms)"</literal>)</argument>,
<argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"max-retries"</literal></argument>, <argument>RIST_MAX_RETRIES</argument>, <argument>N_(<literal type="string">"RIST maximum retry count"</literal>)</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"nack-type"</literal></argument>, <argument>NACK_FMT_RANGE</argument>,
<argument>N_(<literal type="string">"RIST nack type, 0 = range, 1 = bitmask. Default is range"</literal>)</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>nack_type</argument>, <argument>nack_type_names</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"disable-nacks"</literal></argument>, <argument>false</argument>, <argument><literal type="string">"Disable NACK output packets"</literal></argument>,
<argument><literal type="string">"Use this to disable packet recovery"</literal></argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"mcast-blind-nacks"</literal></argument>, <argument>false</argument>, <argument><literal type="string">"Do not check for a valid rtcp message from the encoder"</literal></argument>,
<argument><literal type="string">"Send nack messages even when we have not confirmed that the encoder is on our local "</literal> \
<literal type="string">"network."</literal></argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"rist"</literal></argument>, <argument><literal type="string">"tr06"</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>
</unit>
