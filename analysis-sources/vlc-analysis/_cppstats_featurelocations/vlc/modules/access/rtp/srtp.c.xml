<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\rtp\srtp.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"srtp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gcrypt.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>( <parameter><type><modifier>...</modifier></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>srtp_proto_t</name>
<block>{
<decl_stmt><decl><type><name>gcry_cipher_hd_t</name></type> <name>cipher</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gcry_md_hd_t</name></type> <name>mac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>salt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>srtp_proto_t</name>;</typedef>

<struct>struct <name>srtp_session_t</name>
<block>{
<decl_stmt><decl><type><name>srtp_proto_t</name></type> <name>rtp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>srtp_proto_t</name></type> <name>rtcp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>kdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rtcp_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rtp_roc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>rtp_seq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>rtp_rcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>tag_len</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum
<block>{
<decl><name>SRTP_CRYPT</name></decl>,
<decl><name>SRTP_AUTH</name></decl>,
<decl><name>SRTP_SALT</name></decl>,
<decl><name>SRTCP_CRYPT</name></decl>,
<decl><name>SRTCP_AUTH</name></decl>,
<decl><name>SRTCP_SALT</name></decl>
}</block>;</enum>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>rcc_mode</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>srtp_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>proto_destroy</name> <parameter_list>(<parameter><decl><type><name>srtp_proto_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gcry_md_close</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_cipher_close</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>cipher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>srtp_destroy</name> <parameter_list>(<parameter><decl><type><name>srtp_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>proto_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rtcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proto_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rtp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>proto_create</name> <parameter_list>(<parameter><decl><type><name>srtp_proto_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gcipher</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gcry_cipher_open</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cipher</name></name></expr></argument>, <argument><expr><name>gcipher</name></expr></argument>, <argument><expr><name>GCRY_CIPHER_MODE_CTR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gcry_md_open</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>, <argument><expr><name>gmd</name></expr></argument>, <argument><expr><name>GCRY_MD_FLAG_HMAC</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gcry_cipher_close</name> <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>cipher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>















<function><type><name>srtp_session_t</name> <modifier>*</modifier></type>
<name>srtp_create</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>encr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>auth</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>tag_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>SRTP_FLAGS_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cipher</name></decl>, <decl><type ref="prev"/><name>md</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>encr</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SRTP_ENCR_NULL</name></expr>:</case>
<expr_stmt><expr><name>cipher</name> <operator>=</operator> <name>GCRY_CIPHER_NONE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SRTP_ENCR_AES_CM</name></expr>:</case>
<expr_stmt><expr><name>cipher</name> <operator>=</operator> <name>GCRY_CIPHER_AES</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>auth</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SRTP_AUTH_NULL</name></expr>:</case>
<expr_stmt><expr><name>md</name> <operator>=</operator> <name>GCRY_MD_NONE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SRTP_AUTH_HMAC_SHA1</name></expr>:</case>
<expr_stmt><expr><name>md</name> <operator>=</operator> <name>GCRY_MD_SHA1</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>tag_len</name> <operator>&gt;</operator> <call><name>gcry_md_get_algo_dlen</name> <argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prf</name> <operator>!=</operator> <name>SRTP_PRF_AES_CM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>srtp_session_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tag_len</name></name> <operator>=</operator> <name>tag_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_rcc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>rcc_mode</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tag_len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>proto_create</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rtp</name></name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>proto_create</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rtcp</name></name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>proto_destroy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rtp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_ctr_crypt</name> <parameter_list>(<parameter><decl><type><name>gcry_cipher_hd_t</name></type> <name>hd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ctr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ctrlen</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>div_t</name></type> <name>d</name> <init>= <expr><call><name>div</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>ctrlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gcry_cipher_setctr</name> <argument_list>(<argument><expr><name>hd</name></expr></argument>, <argument><expr><name>ctr</name></expr></argument>, <argument><expr><name>ctrlen</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>gcry_cipher_encrypt</name> <argument_list>(<argument><expr><name>hd</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>quot</name></name> <operator>*</operator> <name>ctrlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>rem</name></name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>dummy</name><index>[<expr><name>ctrlen</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>d</name><operator>.</operator><name>quot</name></name> <operator>*</operator> <name>ctrlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>rem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>dummy</name> <operator>+</operator> <name><name>d</name><operator>.</operator><name>rem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctrlen</name> <operator>-</operator> <name><name>d</name><operator>.</operator><name>rem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gcry_cipher_encrypt</name> <argument_list>(<argument><expr><name>hd</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>ctrlen</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ctrlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>rem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_derive</name> <parameter_list>(<parameter><decl><type><name>gcry_cipher_hd_t</name></type> <name>prf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>rlen</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>label</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iv</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>iv</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>rlen</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iv</name><index>[<expr><literal type="number">13</literal> <operator>-</operator> <name>rlen</name></expr>]</index></name> <operator>^=</operator> <name>label</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iv</name><index>[<expr><sizeof>sizeof <argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>rlen</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>do_ctr_crypt</name> <argument_list>(<argument><expr><name>prf</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type>
<name>srtp_setkey</name> <parameter_list>(<parameter><decl><type><name>srtp_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>saltlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>gcry_cipher_hd_t</name></type> <name>prf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>r</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>keybuf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>saltlen</name> <operator>!=</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gcry_cipher_open</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>prf</name></expr></argument>, <argument><expr><name>GCRY_CIPHER_AES</name></expr></argument>, <argument><expr><name>GCRY_CIPHER_MODE_CTR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>gcry_cipher_setkey</name> <argument_list>(<argument><expr><name>prf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (s-&gt;kdr != 0)
{
uint64_t index = (((uint64_t)s-&gt;rtp_roc) &lt;&lt; 16) | s-&gt;rtp_seq;
index /= s-&gt;kdr;

for (int i = sizeof (r) - 1; i &gt;= 0; i--)
{
r[i] = index &amp; 0xff;
index = index &gt;&gt; 8;
}
}
else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>do_derive</name> <argument_list>(<argument><expr><name>prf</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>SRTP_CRYPT</name></expr></argument>, <argument><expr><name>keybuf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>gcry_cipher_setkey</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtp</name><operator>.</operator><name>cipher</name></name></expr></argument>, <argument><expr><name>keybuf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>do_derive</name> <argument_list>(<argument><expr><name>prf</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>SRTP_AUTH</name></expr></argument>, <argument><expr><name>keybuf</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>gcry_md_setkey</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtp</name><operator>.</operator><name>mac</name></name></expr></argument>, <argument><expr><name>keybuf</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>do_derive</name> <argument_list>(<argument><expr><name>prf</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>SRTP_SALT</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtp</name><operator>.</operator><name>salt</name></name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<macro><name>memcpy</name> <argument_list>(<argument>r</argument>, <argument>&amp;(uint32_t){ htonl (s-&gt;rtcp_index) }</argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><call><name>do_derive</name> <argument_list>(<argument><expr><name>prf</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>SRTCP_CRYPT</name></expr></argument>, <argument><expr><name>keybuf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>gcry_cipher_setkey</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtcp</name><operator>.</operator><name>cipher</name></name></expr></argument>, <argument><expr><name>keybuf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>do_derive</name> <argument_list>(<argument><expr><name>prf</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>SRTCP_AUTH</name></expr></argument>, <argument><expr><name>keybuf</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>gcry_md_setkey</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtcp</name><operator>.</operator><name>mac</name></name></expr></argument>, <argument><expr><name>keybuf</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>do_derive</name> <argument_list>(<argument><expr><name>prf</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>SRTCP_SALT</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtcp</name><operator>.</operator><name>salt</name></name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gcry_cipher_close</name> <argument_list>(<argument><expr><name>prf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hexdigit</name> <parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">0xA</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">0xa</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>hexstring</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>inlen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>inlen</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>outlen</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>inlen</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>inlen</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><call><name>hexdigit</name> <argument_list>(<argument><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><call><name>hexdigit</name> <argument_list>(<argument><expr><name><name>in</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>b</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>inlen</name> <operator>/</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>srtp_setkeystring</name> <parameter_list>(<parameter><decl><type><name>srtp_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bkey</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bsalt</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bkeylen</name> <init>= <expr><call><name>hexstring</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>bkey</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bsaltlen</name> <init>= <expr><call><name>hexstring</name> <argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr><name>bsalt</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bsalt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bkeylen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>bsaltlen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><call><name>srtp_setkey</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bkey</name></expr></argument>, <argument><expr><name>bkeylen</name></expr></argument>, <argument><expr><name>bsalt</name></expr></argument>, <argument><expr><name>bsaltlen</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>EINVAL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





















<function><type><name>void</name></type> <name>srtp_setrcc_rate</name> <parameter_list>(<parameter><decl><type><name>srtp_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>rate</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_rcc</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>rtp_crypt</name> <parameter_list>(<parameter><decl><type><name>gcry_cipher_hd_t</name></type> <name>hd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ssrc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>roc</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>seq</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>counter</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>counter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>salt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>counter</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>salt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name>ssrc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>counter</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>salt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <call><name>htonl</name> <argument_list>(<argument><expr><name>roc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>counter</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>salt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <call><name>htonl</name> <argument_list>(<argument><expr><name>seq</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><call><name>do_ctr_crypt</name> <argument_list>(<argument><expr><name>hd</name></expr></argument>, <argument><expr><name>counter</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>srtp_compute_roc</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>srtp_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>seq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>roc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>rtp_roc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>seq</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>rtp_seq</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">0x8000</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>seq</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rtp_seq</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>roc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>seq</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rtp_seq</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>roc</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></else></if_stmt>
<return>return <expr><name>roc</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>rtp_seq</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type>
<name>rtp_digest</name> <parameter_list>(<parameter><decl><type><name>gcry_md_hd_t</name></type> <name>md</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>roc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gcry_md_reset</name> <argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_write</name> <argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>gcry_md_write</name> <argument_list>(<argument>md</argument>, <argument>&amp;(uint32_t){ htonl (roc) }</argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<return>return <expr><call><name>gcry_md_read</name> <argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>int</name></type> <name>srtp_crypt</name> <parameter_list>(<parameter><decl><type><name>srtp_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>len</name> <operator>&gt;=</operator> <literal type="number">12u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>offset</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>extlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>extlen</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>offset</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>htons</name> <argument_list>(<argument><expr><name>extlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>seq</name> <init>= <expr><call><name>rtp_seq</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>roc</name> <init>= <expr><call><name>srtp_compute_roc</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>ssrc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ssrc</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int16_t</name></type> <name>diff</name> <init>= <expr><name>seq</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>rtp_seq</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtp</name><operator>.</operator><name>window</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rtp</name><operator>.</operator><name>window</name></name> <operator>&lt;&lt;</operator> <name>diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtp</name><operator>.</operator><name>window</name></name> <operator>|=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_seq</name></name> <operator>=</operator> <name>seq</name></expr><operator>,</operator> <expr><name><name>s</name><operator>-&gt;</operator><name>rtp_roc</name></name> <operator>=</operator> <name>roc</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>-</operator><name>diff</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>diff</name> <operator>&gt;=</operator> <literal type="number">64</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rtp</name><operator>.</operator><name>window</name></name> <operator>&gt;&gt;</operator> <name>diff</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EACCES</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtp</name><operator>.</operator><name>window</name></name> <operator>|=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>diff</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRTP_UNENCRYPTED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rtp_crypt</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtp</name><operator>.</operator><name>cipher</name></name></expr></argument>, <argument><expr><name>ssrc</name></expr></argument>, <argument><expr><name>roc</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtp</name><operator>.</operator><name>salt</name></name></expr></argument>,
<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


















<function><type><name>int</name></type>
<name>srtp_send</name> <parameter_list>(<parameter><decl><type><name>srtp_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>*</operator><name>lenp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tag_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>roc_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">12u</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRTP_UNAUTHENTICATED</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tag_len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tag_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rcc_mode</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>tag_len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_rcc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>rtp_seq</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>rtp_rcc</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>roc_len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rcc_mode</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tag_len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rcc_mode</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>roc_len</name> <operator>+</operator> <name>tag_len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tag_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>&lt;</operator> <operator>*</operator><name>lenp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ENOSPC</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>srtp_crypt</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRTP_UNAUTHENTICATED</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>roc</name> <init>= <expr><call><name>srtp_compute_roc</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>rtp_seq</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><call><name>rtp_digest</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtp</name><operator>.</operator><name>mac</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>roc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>roc_len</name></expr>)</condition>
<block>{<block_content>
<macro><name>memcpy</name> <argument_list>(<argument>buf + len</argument>, <argument>&amp;(uint32_t){ htonl (s-&gt;rtp_roc) }</argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>tag_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
printf ("Sent : 0x");
for (unsigned i = 0; i &lt; tag_len; i++)
printf ("%02x", tag[i]);
puts ("");
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>














<function><type><name>int</name></type>
<name>srtp_recv</name> <parameter_list>(<parameter><decl><type><name>srtp_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>*</operator><name>lenp</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">12u</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRTP_UNAUTHENTICATED</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>tag_len</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tag_len</name></name></expr></init></decl>, <decl><type ref="prev"/><name>roc_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rcc_mode</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>rtp_seq</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>rtp_rcc</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>roc_len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rcc_mode</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tag_len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rcc_mode</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tag_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">12u</literal> <operator>+</operator> <name>roc_len</name> <operator>+</operator> <name>tag_len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>roc_len</name> <operator>+</operator> <name>tag_len</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>roc</name> <init>= <expr><call><name>srtp_compute_roc</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>rtp_seq</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>rcc</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>roc_len</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>roc_len</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rcc</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rcc</name> <operator>=</operator> <call><name>ntohl</name> <argument_list>(<argument><expr><name>rcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rcc</name> <operator>=</operator> <name>roc</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><call><name>rtp_digest</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtp</name><operator>.</operator><name>mac</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>rcc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
printf ("Computed: 0x");
for (unsigned i = 0; i &lt; tag_len; i++)
printf ("%02x", tag[i]);
printf ("\nReceived: 0x");
for (unsigned i = 0; i &lt; tag_len; i++)
printf ("%02x", buf[len + roc_len + i]);
puts ("");
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name> <operator>+</operator> <name>roc_len</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>tag_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EACCES</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>roc_len</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_roc</name></name> <operator>+=</operator> <name>rcc</name> <operator>-</operator> <name>roc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>srtp_compute_roc</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>rtp_seq</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>rcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>srtp_crypt</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>rtcp_crypt</name> <parameter_list>(<parameter><decl><type><name>gcry_cipher_hd_t</name></type> <name>hd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ssrc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>index</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rtp_crypt</name> <argument_list>(<argument><expr><name>hd</name></expr></argument>, <argument><expr><name>ssrc</name></expr></argument>, <argument><expr><name>index</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>index</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type>
<name>rtcp_digest</name> <parameter_list>(<parameter><decl><type><name>gcry_md_hd_t</name></type> <name>md</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gcry_md_reset</name> <argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_md_write</name> <argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>gcry_md_read</name> <argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type> <name>srtcp_crypt</name> <parameter_list>(<parameter><decl><type><name>srtp_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>index</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>ntohl</name> <argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>index</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRTCP_UNENCRYPTED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>index</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt> 


<decl_stmt><decl><type><name>int32_t</name></type> <name>diff</name> <init>= <expr><name>index</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>rtcp_index</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtcp</name><operator>.</operator><name>window</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rtcp</name><operator>.</operator><name>window</name></name> <operator>&lt;&lt;</operator> <name>diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtcp</name><operator>.</operator><name>window</name></name> <operator>|=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtcp_index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>-</operator><name>diff</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>diff</name> <operator>&gt;=</operator> <literal type="number">64</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rtcp</name><operator>.</operator><name>window</name></name> <operator>&gt;&gt;</operator> <name>diff</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EACCES</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtp</name><operator>.</operator><name>window</name></name> <operator>|=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>diff</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRTCP_UNENCRYPTED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ssrc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ssrc</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rtcp_crypt</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtcp</name><operator>.</operator><name>cipher</name></name></expr></argument>, <argument><expr><name>ssrc</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtp</name><operator>.</operator><name>salt</name></name></expr></argument>,
<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>















<function><type><name>int</name></type>
<name>srtcp_send</name> <parameter_list>(<parameter><decl><type><name>srtp_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>*</operator><name>lenp</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>&lt;</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>tag_len</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ENOSPC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name> <init>= <expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>rtcp_index</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtcp_index</name></name> <operator>=</operator> <name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRTCP_UNENCRYPTED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index</name> <operator>|=</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<macro><name>memcpy</name> <argument_list>(<argument>buf + len</argument>, <argument>&amp;(uint32_t){ htonl (index) }</argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>srtcp_crypt</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><call><name>rtcp_digest</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtcp</name><operator>.</operator><name>mac</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tag_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <name>len</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>tag_len</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>














<function><type><name>int</name></type>
<name>srtcp_recv</name> <parameter_list>(<parameter><decl><type><name>srtp_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>*</operator><name>lenp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">4u</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>tag_len</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>tag_len</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><call><name>rtcp_digest</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtcp</name><operator>.</operator><name>mac</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tag_len</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EACCES</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><call><name>srtp_crypt</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</unit>
