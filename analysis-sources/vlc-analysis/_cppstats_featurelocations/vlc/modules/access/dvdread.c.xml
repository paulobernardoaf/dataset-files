<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\dvdread.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_iso_lang.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../demux/mpeg/pes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../demux/mpeg/ps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvdread/dvd_reader.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvdread/ifo_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvdread/ifo_read.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvdread/nav_read.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvdread/nav_print.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANGLE_TEXT</name></cpp:macro> <cpp:value>N_("DVD angle")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANGLE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Default DVD angle." )</cpp:value></cpp:define>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"DVD without menus"</literal>)</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"DVDRead Input (no menu support)"</literal>)</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_ACCESS</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"dvdread-angle"</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>ANGLE_TEXT</argument>,
<argument>ANGLE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_obsolete_string</name><argument_list>( <argument><literal type="string">"dvdread-css-method"</literal></argument> )</argument_list></macro> 
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"dvd"</literal></argument>, <argument><literal type="string">"dvdread"</literal></argument>, <argument><literal type="string">"dvdsimple"</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DVD_BLOCK_READ_ONCE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>





<typedef>typedef <type><struct>struct
<block>{

<decl_stmt><decl><type><name>dvd_reader_t</name> <modifier>*</modifier></type><name>p_dvdread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dvd_file_t</name> <modifier>*</modifier></type><name>p_title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ifo_handle_t</name> <modifier>*</modifier></type><name>p_vmg_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ifo_handle_t</name> <modifier>*</modifier></type><name>p_vts_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>updates</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_chapter</name></decl>, <name>i_chapters</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_chapter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_angle</name></decl>, <name>i_angles</name>;</decl_stmt>

<decl_stmt><decl><type><name>tt_srpt_t</name> <modifier>*</modifier></type><name>p_tt_srpt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pgc_t</name> <modifier>*</modifier></type><name>p_cur_pgc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dsi_t</name></type> <name>dsi_pack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ttn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pack_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_cur_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_next_vobu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_mux_rate</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_title_start_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_title_end_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_title_blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_title_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_title_start_cell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_title_end_cell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_cur_cell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_next_cell</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ps_track_t</name></type> <name><name>tk</name><index>[<expr><name>PS_TK_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_titles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>titles</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_sar_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_sar_den</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>clut</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DemuxBlock</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DemuxTitles</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ESNew</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DvdReadSetArea</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DvdReadSeek</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DvdReadHandleDSI</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DvdReadFindCell</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DVDREAD_VERSION</name> <operator>&gt;=</operator> <call><name>DVDREAD_VERSION_CODE</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DvdReadLog</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>foo</name></decl></parameter>, <parameter><decl><type><name>dvd_logger_level_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>z</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>foo</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_GenericVa</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>z</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ifo_handle_t</name> <modifier>*</modifier></type><name>p_vmg_file</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name> <operator>||</operator> <operator>!</operator><operator>*</operator><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_file</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"dvd"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_file</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>( <argument><expr><name>__OS2__</name></expr></argument> )</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name>psz_file</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>flen</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>flen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>psz_file</name><index>[<expr><name>flen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>psz_file</name><index>[<expr><name>flen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_file</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>psz_file</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name> <init>= <expr><call><name>ToLocale</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DVDREAD_VERSION</name> <operator>&gt;=</operator> <call><name>DVDREAD_VERSION_CODE</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>dvd_logger_cb</name></type> <name>cbs</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbs</name><operator>.</operator><name>pf_log</name></name> <operator>=</operator> <name>DvdReadLog</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dvd_reader_t</name> <modifier>*</modifier></type><name>p_dvdread</name> <init>= <expr><call><name>DVDOpen2</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbs</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>dvd_reader_t</name> <modifier>*</modifier></type><name>p_dvdread</name> <init>= <expr><call><name>DVDOpen</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>LocaleFree</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_dvdread</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"DVDRead cannot open source: %s"</literal></expr></argument>, <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Problem accessing a system resource"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Potentially, macOS blocks access to your disc. "</literal>
<literal type="string">"Please open \"System Preferences\" -&gt; \"Security &amp; Privacy\" "</literal>
<literal type="string">"and allow VLC to access your external media in \"Files and Folders\" section."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Playback failure"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DVDRead could not open the disc \"%s\"."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>p_vmg_file</name> <operator>=</operator> <call><name>ifoOpen</name><argument_list>( <argument><expr><name>p_dvdread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>rgsz_volid</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>DVDUDFVolumeInfo</name><argument_list>( <argument><expr><name>p_dvdread</name></expr></argument>, <argument><expr><name>rgsz_volid</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>DVDISOVolumeInfo</name><argument_list>( <argument><expr><name>p_dvdread</name></expr></argument>, <argument><expr><name>rgsz_volid</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Playback failure"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot play a non-UDF mastered DVD."</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid UDF DVD. (Found ISO9660 '%s')"</literal></expr></argument>, <argument><expr><name>rgsz_volid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot open VMG info"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"VMG opened"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DEMUX_INIT_COMMON</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ps_track_init</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tk</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dvdread</name></name> <operator>=</operator> <name>p_dvdread</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vmg_file</name></name> <operator>=</operator> <name>p_vmg_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vts_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_chapter</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cur_chapter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mux_rate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_angle</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"dvdread-angle"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_angle</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_angle</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DemuxTitles</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_angle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>DvdReadSetArea</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_angle</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"DvdReadSetArea(0,0,%i) failed (can't decrypt DVD?)"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_angle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PS_TK_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>ps_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tk</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>b_configured</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>es</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_titles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_title_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>titles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_titles</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>titles</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DVDCloseFile</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vts_file</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ifoClose</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vts_file</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vmg_file</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ifoClose</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vmg_file</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>DVDClose</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dvdread</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>dvdtime_to_time</name><parameter_list>( <parameter><decl><type><name>dvd_time_t</name> <modifier>*</modifier></type><name>dtime</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BCD2D</name><parameter_list>(<parameter><type><name>__x__</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((__x__ &amp; 0xf0) &gt;&gt; 4) * 10 + (__x__ &amp; 0x0f))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>double</name></type> <name>f_fps</name></decl>, <decl><type ref="prev"/><name>f_ms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>sec</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><call><name>BCD2D</name><argument_list>(<argument><expr><name><name>dtime</name><operator>-&gt;</operator><name>hour</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sec</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><call><name>BCD2D</name><argument_list>(<argument><expr><name><name>dtime</name><operator>-&gt;</operator><name>minute</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sec</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><call><name>BCD2D</name><argument_list>(<argument><expr><name><name>dtime</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<switch>switch<condition>(<expr><operator>(</operator><name><name>dtime</name><operator>-&gt;</operator><name>frame_u</name></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>f_fps</name> <operator>=</operator> <literal type="number">25.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>f_fps</name> <operator>=</operator> <literal type="number">29.97</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>f_fps</name> <operator>=</operator> <literal type="number">2500.0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>f_ms</name> <operator>=</operator> <call><name>BCD2D</name><argument_list>(<argument><expr><name><name>dtime</name><operator>-&gt;</operator><name>frame_u</name></name><operator>&amp;</operator><literal type="number">0x3f</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000.0</literal> <operator>/</operator> <name>f_fps</name></expr>;</expr_stmt>
<return>return <expr><call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>f_ms</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_int</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_vts_file</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_blocks</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_offset</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title_blocks</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>DvdReadSeek</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>f</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title_blocks</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_titles</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>dvdtime_to_time</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_cur_pgc</name><operator>-&gt;</operator><name>playback_time</name></name></expr></argument> )</argument_list></call> <operator>/</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_title_blocks</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title_offset</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_titles</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>dvdtime_to_time</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_cur_pgc</name><operator>-&gt;</operator><name>playback_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>


<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>

<expr_stmt><expr><name>pb</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_TITLE_INFO</name></expr>:</case>
<expr_stmt><expr><name>ppp_title</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>input_title_t</name> <operator>*</operator><operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pi_int</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 


<expr_stmt><expr><operator>*</operator><name>pi_int</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppp_title</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_titles</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>input_title_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>ppp_title</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_titles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier></type><name>p_dup</name> <init>= <expr><call><name>vlc_input_title_Duplicate</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>titles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>p_dup</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppp_title</name><operator>)</operator><index>[<expr><operator>(</operator><operator>*</operator><name>pi_int</name><operator>)</operator><operator>++</operator></expr>]</index> <operator>=</operator> <name>p_dup</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_TITLE</name></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>DvdReadSetArea</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot set title/chapter"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>|=</operator> <name>INPUT_UPDATE_TITLE</name> <operator>|</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_chapter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_SEEKPOINT</name></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>DvdReadSetArea</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot set title/chapter"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>|=</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_chapter</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_TEST_AND_CLEAR_FLAGS</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>flags</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>unsigned</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>&amp;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>*</operator><name>flags</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>DEMUX_GET_TITLE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_SEEKPOINT</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cur_chapter</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator>
<call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"disc-caching"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>


<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_vts_file</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_buffer</name><index>[<expr><name>DVD_VIDEO_LB_LEN</name> <operator>*</operator> <name>DVD_BLOCK_READ_ONCE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_blocks_once</name></decl>, <decl><type ref="prev"/><name>i_read</name></decl>;</decl_stmt>








<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pack_len</name></name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>DVDReadBlocks</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_vobu</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"read failed for block %d"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_vobu</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Playback failure"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DVDRead could not read block %d."</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_vobu</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>DemuxBlock</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>DVD_VIDEO_LB_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DvdReadHandleDSI</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_cell</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_cur_pgc</name><operator>-&gt;</operator><name>nr_of_cells</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name></expr></init></decl>;</decl_stmt>


<while>while<condition>( <expr><name>k</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_titles</name></name> <operator>&amp;&amp;</operator> <call><name>DvdReadSetArea</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>++</operator><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Failed next title, trying another: %i"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>k</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_titles</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pack_len</name></name> <operator>&gt;=</operator> <literal type="number">1024</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"i_pack_len &gt;= 1024 (%i). "</literal>
<literal type="string">"This shouldn't happen!"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pack_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_block</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_offset</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_cell</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_cur_pgc</name><operator>-&gt;</operator><name>nr_of_cells</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name></expr></init></decl>;</decl_stmt>


<while>while<condition>( <expr><name>k</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_titles</name></name> <operator>&amp;&amp;</operator> <call><name>DvdReadSetArea</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>++</operator><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Failed next title, trying another: %i"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>k</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_titles</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>i_blocks_once</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pack_len</name></name></expr></argument>, <argument><expr><name>DVD_BLOCK_READ_ONCE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pack_len</name></name> <operator>-=</operator> <name>i_blocks_once</name></expr>;</expr_stmt>


<expr_stmt><expr><name>i_read</name> <operator>=</operator> <call><name>DVDReadBlocks</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_block</name></name></expr></argument>,
<argument><expr><name>i_blocks_once</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>!=</operator> <name>i_blocks_once</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"read failed for %d/%d blocks at 0x%02x"</literal></expr></argument>,
<argument><expr><name>i_read</name></expr></argument>, <argument><expr><name>i_blocks_once</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_block</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Playback failure"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DVDRead could not read %d/%d blocks at 0x%02x."</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>i_read</name></expr></argument>, <argument><expr><name>i_blocks_once</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_block</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_block</name></name> <operator>+=</operator> <name>i_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_offset</name></name> <operator>+=</operator> <name>i_read</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
msg_Dbg( p_demux, "i_blocks: %d len: %d current: 0x%02x",
i_read, p_sys-&gt;i_pack_len, p_sys-&gt;i_cur_block );
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_read</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>DemuxBlock</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_buffer</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>DVD_VIDEO_LB_LEN</name></expr></argument>,
<argument><expr><name>DVD_VIDEO_LB_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxBlock</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><call><name>ps_pkt_size</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_size</name> <operator>&gt;</operator> <name>len</name></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pkt</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<switch>switch<condition>( <expr><literal type="number">0x100</literal> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x1b9</literal></expr>:</case>
<case>case <expr><literal type="number">0x1bb</literal></expr>:</case>
<case>case <expr><literal type="number">0x1bc</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DVDREAD_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xbc</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"received a PSM packet"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xbb</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"received a SYSTEM packet"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x1ba</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_scr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_mux_rate</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ps_pkt_parse_pack</name><argument_list>( <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_scr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_mux_rate</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name> <operator>+</operator> <name>i_scr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_mux_rate</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mux_rate</name></name> <operator>=</operator> <name>i_mux_rate</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_id</name> <init>= <expr><call><name>ps_pkt_id</name><argument_list>( <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_id</name> <operator>&gt;=</operator> <literal type="number">0xc0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ps_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tk</name><index>[<expr><call><name>ps_id_to_tk</name><argument_list>(<argument><expr><name>i_id</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>b_configured</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ESNew</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>es</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>ps_pkt_parse_pes</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p_pkt</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_skip</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>i_size</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>ESNew</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_lang</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ps_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tk</name><index>[<expr><call><name>ps_id_to_tk</name><argument_list>(<argument><expr><name>i_id</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>psz_language</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>b_configured</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ps_track_fill</name><argument_list>( <argument><expr><name>tk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unknown codec for id=0x%x"</literal></expr></argument>, <argument><expr><name>i_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>psz_language</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>psz_language</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>psz_language</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_lang</name> <operator>&amp;&amp;</operator> <name>i_lang</name> <operator>!=</operator> <literal type="number">0xffff</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>psz_language</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_lang</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_language</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_lang</name> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int i_audio = -1;

if( (i_id&amp;0xbdf8) == 0xbd88 ) 
{
i_audio = i_id&amp;0x07;
}
else if( (i_id&amp;0xbdf0) == 0xbd80 ) 
{
i_audio = i_id&amp;0xf;
}
else if( (i_id&amp;0xbdf0) == 0xbda0 ) 
{
i_audio = i_id&amp;0x1f;
}
else if( ( i_id&amp;0xe0 ) == 0xc0 ) 
{
i_audio = i_id&amp;0x1f;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name><name>psz_language</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_language</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>palette</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SPU_PALETTE_DEFINED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>palette</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>clut</name></name></expr></argument>,
<argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>uint32_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>psz_language</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_language</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>b_configured</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>DvdReadSetArea</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_title</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_chapter</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_angle</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_angle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pgc_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pgn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_title</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_title</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_titles</name></name> <operator>&amp;&amp;</operator>
<name>i_title</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_start_cell</name></decl>, <decl><type ref="prev"/><name>i_end_cell</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>DVDCloseFile</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name> <operator>=</operator> <name>i_title</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ifo_handle_t</name> <modifier>*</modifier></type><name>p_vmg</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vmg_file</name></name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"open VTS %d, for title %d"</literal></expr></argument>,
<argument><expr><name><name>p_vmg</name><operator>-&gt;</operator><name>tt_srpt</name><operator>-&gt;</operator><name>title</name><index>[<expr><name>i_title</name></expr>]</index></name><operator>.</operator><name>title_set_nr</name></expr></argument>, <argument><expr><name>i_title</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vts_file</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ifoClose</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vts_file</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_vts_file</name></name> <operator>=</operator> <call><name>ifoOpen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dvdread</name></name></expr></argument>,
<argument><expr><name><name>p_vmg</name><operator>-&gt;</operator><name>tt_srpt</name><operator>-&gt;</operator><name>title</name><index>[<expr><name>i_title</name></expr>]</index></name><operator>.</operator><name>title_set_nr</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"fatal error in vts ifo"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ifo_handle_t</name> <modifier>*</modifier></type><name>p_vts</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vts_file</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ttn</name></name> <operator>=</operator> <name><name>p_vmg</name><operator>-&gt;</operator><name>tt_srpt</name><operator>-&gt;</operator><name>title</name><index>[<expr><name>i_title</name></expr>]</index></name><operator>.</operator><name>vts_ttn</name></expr>;</expr_stmt>


<expr_stmt><expr><name>pgc_id</name> <operator>=</operator> <name><name>p_vts</name><operator>-&gt;</operator><name>vts_ptt_srpt</name><operator>-&gt;</operator><name>title</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ttn</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ptt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pgcn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pgn</name> <operator>=</operator> <name><name>p_vts</name><operator>-&gt;</operator><name>vts_ptt_srpt</name><operator>-&gt;</operator><name>title</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ttn</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ptt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pgn</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pgc_t</name> <modifier>*</modifier></type><name>p_pgc</name> <init>=
<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cur_pgc</name></name> <operator>=</operator> <name><name>p_vts</name><operator>-&gt;</operator><name>vts_pgcit</name><operator>-&gt;</operator><name>pgci_srp</name><index>[<expr><name>pgc_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pgc</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pgc</name><operator>-&gt;</operator><name>cell_playback</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid PGC (cell_playback_offset)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_start_cell</name></name> <operator>=</operator>
<name>i_start_cell</name> <operator>=</operator> <name><name>p_pgc</name><operator>-&gt;</operator><name>program_map</name><index>[<expr><name>pgn</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_start_block</name></name> <operator>=</operator>
<name><name>p_pgc</name><operator>-&gt;</operator><name>cell_playback</name><index>[<expr><name>i_start_cell</name></expr>]</index></name><operator>.</operator><name>first_sector</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_end_cell</name></name> <operator>=</operator>
<name>i_end_cell</name> <operator>=</operator> <name><name>p_pgc</name><operator>-&gt;</operator><name>nr_of_cells</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_end_block</name></name> <operator>=</operator>
<name><name>p_pgc</name><operator>-&gt;</operator><name>cell_playback</name><index>[<expr><name>i_end_cell</name></expr>]</index></name><operator>.</operator><name>last_sector</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_blocks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>i_start_cell</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>i_end_cell</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>cell_blocks</name> <init>= <expr><name><name>p_pgc</name><operator>-&gt;</operator><name>cell_playback</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last_sector</name> <operator>-</operator>
<name><name>p_pgc</name><operator>-&gt;</operator><name>cell_playback</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first_sector</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>( <argument><expr><name>cell_blocks</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>cell_blocks</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator>
<name>INT_MAX</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title_blocks</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>cell_blocks</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_blocks</name></name> <operator>+=</operator> <name>cell_blocks</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"title %d vts_title %d pgc %d pgn %d "</literal>
<literal type="string">"start %d end %d blocks: %d"</literal></expr></argument>,
<argument><expr><name>i_title</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ttn</name></name></expr></argument>, <argument><expr><name>pgc_id</name></expr></argument>, <argument><expr><name>pgn</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_start_block</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_end_block</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_blocks</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chapter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chapters</name></name> <operator>=</operator>
<name><name>p_vts</name><operator>-&gt;</operator><name>vts_ptt_srpt</name><operator>-&gt;</operator><name>title</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ttn</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nr_of_ptts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pgc_id</name> <operator>=</operator> <name><name>p_vts</name><operator>-&gt;</operator><name>vts_ptt_srpt</name><operator>-&gt;</operator><name>title</name><index>[
<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ttn</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ptt</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chapter</name></name></expr>]</index></name><operator>.</operator><name>pgcn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pgn</name> <operator>=</operator> <name><name>p_vts</name><operator>-&gt;</operator><name>vts_ptt_srpt</name><operator>-&gt;</operator><name>title</name><index>[
<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ttn</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ptt</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chapter</name></name></expr>]</index></name><operator>.</operator><name>pgn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pgc</name> <operator>=</operator> <name><name>p_vts</name><operator>-&gt;</operator><name>vts_pgcit</name><operator>-&gt;</operator><name>pgci_srp</name><index>[<expr><name>pgc_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pgc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pack_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_cell</name></name> <operator>=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_cell</name></name> <operator>=</operator> <name><name>p_pgc</name><operator>-&gt;</operator><name>program_map</name><index>[<expr><name>pgn</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DvdReadFindCell</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_vobu</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_block</name></name> <operator>=</operator>
<name><name>p_pgc</name><operator>-&gt;</operator><name>cell_playback</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_cell</name></name></expr>]</index></name><operator>.</operator><name>first_sector</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_angles</name></name> <operator>=</operator> <name><name>p_vmg</name><operator>-&gt;</operator><name>tt_srpt</name><operator>-&gt;</operator><name>title</name><index>[<expr><name>i_title</name></expr>]</index></name><operator>.</operator><name>nr_of_angles</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_angle</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_angles</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_angle</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_title</name></name> <operator>=</operator> <call><name>DVDOpenFile</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dvdread</name></name></expr></argument>,
<argument><expr><name><name>p_vmg</name><operator>-&gt;</operator><name>tt_srpt</name><operator>-&gt;</operator><name>title</name><index>[<expr><name>i_title</name></expr>]</index></name><operator>.</operator><name>title_set_nr</name></expr></argument>,
<argument><expr><name>DVD_READ_TITLE_VOBS</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot open title (VTS_%02d_1.VOB)"</literal></expr></argument>,
<argument><expr><name><name>p_vmg</name><operator>-&gt;</operator><name>tt_srpt</name><operator>-&gt;</operator><name>title</name><index>[<expr><name>i_title</name></expr>]</index></name><operator>.</operator><name>title_set_nr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_RESET_PCR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PS_TK_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>ps_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tk</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>b_configured</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>es</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>b_configured</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name> <operator>!=</operator> <name>i_title</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>|=</operator> <name>INPUT_UPDATE_TITLE</name> <operator>|</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_title</name></name> <operator>=</operator> <name>i_title</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_chapter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>ESNew</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="number">0xe0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>video_attr_t</name> <modifier>*</modifier></type><name>p_attr</name> <init>= <expr><operator>&amp;</operator><name><name>p_vts</name><operator>-&gt;</operator><name>vtsi_mat</name><operator>-&gt;</operator><name>vts_video_attr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_video_height</name> <init>= <expr><ternary><condition><expr><name><name>p_attr</name><operator>-&gt;</operator><name>video_format</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">576</literal></expr> </then><else>: <expr><literal type="number">480</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_video_width</name></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name><name>p_attr</name><operator>-&gt;</operator><name>picture_size</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>i_video_width</name> <operator>=</operator> <literal type="number">720</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>i_video_width</name> <operator>=</operator> <literal type="number">704</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>i_video_width</name> <operator>=</operator> <literal type="number">352</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>i_video_width</name> <operator>=</operator> <literal type="number">352</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_video_height</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<switch>switch<condition>( <expr><name><name>p_attr</name><operator>-&gt;</operator><name>display_aspect_ratio</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name>i_video_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>i_video_width</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name>i_video_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">9</literal> <operator>*</operator> <name>i_video_width</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_vts</name><operator>-&gt;</operator><name>vtsi_mat</name><operator>-&gt;</operator><name>nr_of_vts_audio_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_id</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_audio_control</name> <init>= <expr><name><name>p_pgc</name><operator>-&gt;</operator><name>audio_control</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_audio_control</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_position</name> <operator>=</operator> <operator>(</operator> <name>i_audio_control</name> <operator>&amp;</operator> <literal type="number">0x7F00</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"audio position %d"</literal></expr></argument>, <argument><expr><name>i_position</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>( <expr><name><name>p_vts</name><operator>-&gt;</operator><name>vtsi_mat</name><operator>-&gt;</operator><name>vts_audio_attr</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>audio_format</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case> 
<expr_stmt><expr><name>i_id</name> <operator>=</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>+</operator> <name>i_position</name><operator>)</operator> <operator>|</operator> <literal type="number">0xbd00</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x02</literal></expr>:</case>
<case>case <expr><literal type="number">0x03</literal></expr>:</case> 
<expr_stmt><expr><name>i_id</name> <operator>=</operator> <literal type="number">0xc000</literal> <operator>+</operator> <name>i_position</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x04</literal></expr>:</case> 
<expr_stmt><expr><name>i_id</name> <operator>=</operator> <operator>(</operator><literal type="number">0xa0</literal> <operator>+</operator> <name>i_position</name><operator>)</operator> <operator>|</operator> <literal type="number">0xbd00</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x06</literal></expr>:</case> 
<expr_stmt><expr><name>i_id</name> <operator>=</operator> <operator>(</operator><literal type="number">0x88</literal> <operator>+</operator> <name>i_position</name><operator>)</operator> <operator>|</operator> <literal type="number">0xbd00</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>i_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unknown audio type %.2x"</literal></expr></argument>,
<argument><expr><name><name>p_vts</name><operator>-&gt;</operator><name>vtsi_mat</name><operator>-&gt;</operator><name>vts_audio_attr</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>audio_format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>ESNew</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_id</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vts_file</name><operator>-&gt;</operator><name>vtsi_mat</name><operator>-&gt;</operator>
<name>vts_audio_attr</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lang_code</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>clut</name></name></expr></argument>, <argument><expr><name><name>p_pgc</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>uint32_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_vts</name><operator>-&gt;</operator><name>vtsi_mat</name><operator>-&gt;</operator><name>nr_of_vts_subp_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_spu_control</name> <init>= <expr><name><name>p_pgc</name><operator>-&gt;</operator><name>subp_control</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"spu %d 0x%02x"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i_spu_control</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_spu_control</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_vts</name><operator>-&gt;</operator><name>vtsi_mat</name><operator>-&gt;</operator><name>vts_video_attr</name><operator>.</operator><name>display_aspect_ratio</name></name></expr> )</condition>
<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_vts</name><operator>-&gt;</operator><name>vtsi_mat</name><operator>-&gt;</operator><name>vts_video_attr</name><operator>.</operator><name>permitted_df</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> 
<expr_stmt><expr><name>i_position</name> <operator>=</operator> <name>i_spu_control</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<expr_stmt><expr><name>i_position</name> <operator>=</operator> <operator>(</operator> <name>i_spu_control</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> 
<expr_stmt><expr><name>i_position</name> <operator>=</operator> <operator>(</operator> <name>i_spu_control</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>i_position</name> <operator>=</operator> <operator>(</operator> <name>i_spu_control</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_id</name> <operator>=</operator> <operator>(</operator><literal type="number">0x20</literal> <operator>+</operator> <name>i_position</name><operator>)</operator> <operator>|</operator> <literal type="number">0xbd00</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ESNew</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_id</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vts_file</name><operator>-&gt;</operator><name>vtsi_mat</name><operator>-&gt;</operator>
<name>vts_subp_attr</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lang_code</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_title</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_title</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name></expr> )</condition>

<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return> 
</block_content>}</block></if></if_stmt>





<if_stmt><if>if<condition>( <expr><name>i_chapter</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_chapter</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_chapters</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ifo_handle_t</name> <modifier>*</modifier></type><name>p_vts</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vts_file</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pgc_id</name> <operator>=</operator> <name><name>p_vts</name><operator>-&gt;</operator><name>vts_ptt_srpt</name><operator>-&gt;</operator><name>title</name><index>[
<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ttn</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ptt</name><index>[<expr><name>i_chapter</name></expr>]</index></name><operator>.</operator><name>pgcn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pgn</name> <operator>=</operator> <name><name>p_vts</name><operator>-&gt;</operator><name>vts_ptt_srpt</name><operator>-&gt;</operator><name>title</name><index>[
<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ttn</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ptt</name><index>[<expr><name>i_chapter</name></expr>]</index></name><operator>.</operator><name>pgn</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pgc_t</name> <modifier>*</modifier></type><name>p_pgc</name> <init>=
<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cur_pgc</name></name> <operator>=</operator> <name><name>p_vts</name><operator>-&gt;</operator><name>vts_pgcit</name><operator>-&gt;</operator><name>pgci_srp</name><index>[<expr><name>pgc_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pgc</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_pgc</name><operator>-&gt;</operator><name>cell_playback</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_cell</name></name> <operator>=</operator> <name><name>p_pgc</name><operator>-&gt;</operator><name>program_map</name><index>[<expr><name>pgn</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chapter</name></name> <operator>=</operator> <name>i_chapter</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DvdReadFindCell</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_start_cell</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_cell</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_offset</name></name> <operator>+=</operator> <name><name>p_pgc</name><operator>-&gt;</operator><name>cell_playback</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last_sector</name> <operator>-</operator>
<name><name>p_pgc</name><operator>-&gt;</operator><name>cell_playback</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first_sector</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pack_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_vobu</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_block</name></name> <operator>=</operator>
<name><name>p_pgc</name><operator>-&gt;</operator><name>cell_playback</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_cell</name></name></expr>]</index></name><operator>.</operator><name>first_sector</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_chapter</name></name> <operator>!=</operator> <name>i_chapter</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>|=</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_chapter</name></name> <operator>=</operator> <name>i_chapter</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_chapter</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>DvdReadSeek</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_block_offset</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_chapter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_cell</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pgc_t</name> <modifier>*</modifier></type><name>p_pgc</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cur_pgc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ifo_handle_t</name> <modifier>*</modifier></type><name>p_vts</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vts_file</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>i_block</name> <operator>=</operator> <name>i_block_offset</name></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i_cell</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title_start_cell</name></name></expr>;</init>
<condition><expr><name>i_cell</name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title_end_cell</name></name></expr>;</condition> <incr><expr><name>i_cell</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_block</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_pgc</name><operator>-&gt;</operator><name>cell_playback</name><index>[<expr><name>i_cell</name></expr>]</index></name><operator>.</operator><name>last_sector</name> <operator>-</operator>
<operator>(</operator><name>int</name><operator>)</operator><name><name>p_pgc</name><operator>-&gt;</operator><name>cell_playback</name><index>[<expr><name>i_cell</name></expr>]</index></name><operator>.</operator><name>first_sector</name> <operator>+</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_block</name> <operator>-=</operator> <operator>(</operator><name><name>p_pgc</name><operator>-&gt;</operator><name>cell_playback</name><index>[<expr><name>i_cell</name></expr>]</index></name><operator>.</operator><name>last_sector</name> <operator>-</operator>
<name><name>p_pgc</name><operator>-&gt;</operator><name>cell_playback</name><index>[<expr><name>i_cell</name></expr>]</index></name><operator>.</operator><name>first_sector</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>i_cell</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title_end_cell</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"couldn't find cell for block %i"</literal></expr></argument>, <argument><expr><name>i_block_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_block</name> <operator>+=</operator> <name><name>p_pgc</name><operator>-&gt;</operator><name>cell_playback</name><index>[<expr><name>i_cell</name></expr>]</index></name><operator>.</operator><name>first_sector</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_offset</name></name> <operator>=</operator> <name>i_block_offset</name></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>i_chapter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_chapter</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_chapters</name></name></expr>;</condition> <incr><expr><name>i_chapter</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pgc_id</name></decl>, <decl><type ref="prev"/><name>pgn</name></decl>, <decl><type ref="prev"/><name>i_tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pgc_id</name> <operator>=</operator> <name><name>p_vts</name><operator>-&gt;</operator><name>vts_ptt_srpt</name><operator>-&gt;</operator><name>title</name><index>[
<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ttn</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ptt</name><index>[<expr><name>i_chapter</name></expr>]</index></name><operator>.</operator><name>pgcn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pgn</name> <operator>=</operator> <name><name>p_vts</name><operator>-&gt;</operator><name>vts_ptt_srpt</name><operator>-&gt;</operator><name>title</name><index>[
<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ttn</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ptt</name><index>[<expr><name>i_chapter</name></expr>]</index></name><operator>.</operator><name>pgn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_tmp</name> <operator>=</operator> <name><name>p_vts</name><operator>-&gt;</operator><name>vts_pgcit</name><operator>-&gt;</operator><name>pgci_srp</name><index>[<expr><name>pgc_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>pgc</name><operator>-&gt;</operator><name>program_map</name><index>[<expr><name>pgn</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_tmp</name> <operator>&gt;</operator> <name>i_cell</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_chapter</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_chapters</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>cur_chapter</name></name> <operator>!=</operator> <name>i_chapter</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>|=</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_chapter</name></name> <operator>=</operator> <name>i_chapter</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>i_vobu</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_vobu_sect_index_count</name> <init>=
<expr><operator>(</operator><name><name>p_vts</name><operator>-&gt;</operator><name>vts_vobu_admap</name><operator>-&gt;</operator><name>last_byte</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>VOBU_ADMAP_SIZE</name><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_vobu_sect_index_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_vts</name><operator>-&gt;</operator><name>vts_vobu_admap</name><operator>-&gt;</operator><name>vobu_start_sectors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>i_block</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_vobu</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i_sub_cell</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>vobu_start_sector</name> <init>= <expr><name><name>p_vts</name><operator>-&gt;</operator><name>vts_vobu_admap</name><operator>-&gt;</operator><name>vobu_start_sectors</name><index>[<expr><name>i_vobu</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>&lt;</operator><name><name>p_vts</name><operator>-&gt;</operator><name>vts_c_adt</name><operator>-&gt;</operator><name>nr_of_vobs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>cell_adr_t</name> <modifier>*</modifier></type><name>p_cell</name> <init>= <expr><operator>&amp;</operator><name><name>p_vts</name><operator>-&gt;</operator><name>vts_c_adt</name><operator>-&gt;</operator><name>cell_adr_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p_cell</name><operator>-&gt;</operator><name>start_sector</name></name> <operator>&lt;=</operator> <name>vobu_start_sector</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_sub_cell</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cell %d i_sub_cell %d chapter %d vobu %d "</literal>
<literal type="string">"cell_sector %d vobu_sector %d sub_cell_sector %d"</literal></expr></argument>,
<argument><expr><name>i_cell</name></expr></argument>, <argument><expr><name>i_sub_cell</name></expr></argument>, <argument><expr><name>i_chapter</name></expr></argument>, <argument><expr><name>i_vobu</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cur_pgc</name><operator>-&gt;</operator><name>cell_playback</name><index>[<expr><name>i_cell</name></expr>]</index></name><operator>.</operator><name>first_sector</name></expr></argument>,
<argument><expr><name><name>p_vts</name><operator>-&gt;</operator><name>vts_vobu_admap</name><operator>-&gt;</operator><name>vobu_start_sectors</name><index>[<expr><name>i_vobu</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_vts</name><operator>-&gt;</operator><name>vts_c_adt</name><operator>-&gt;</operator><name>cell_adr_table</name><index>[<expr><name>i_sub_cell</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>start_sector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_block</name></name> <operator>=</operator> <name>i_block</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>likely</name><argument_list>( <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i_vobu</name> <operator>&lt;</operator> <name>i_vobu_sect_index_count</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_vobu</name></name> <operator>=</operator> <name><name>p_vts</name><operator>-&gt;</operator><name>vts_vobu_admap</name><operator>-&gt;</operator><name>vobu_start_sectors</name><index>[<expr><name>i_vobu</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_vobu</name></name> <operator>=</operator> <name>i_block</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pack_len</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_vobu</name></name> <operator>-</operator> <name>i_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_cell</name></name> <operator>=</operator> <name>i_cell</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chapter</name></name> <operator>=</operator> <name>i_chapter</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DvdReadFindCell</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>DvdReadHandleDSI</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>dsiheader</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><name>DSI_START_BYTE</name><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dsiheader</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>navRead_DSI</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dsi_pack</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><name>DSI_START_BYTE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_block</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>dsi_pack</name><operator>.</operator><name>dsi_gi</name><operator>.</operator><name>nv_pck_lbn</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pack_len</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>dsi_pack</name><operator>.</operator><name>dsi_gi</name><operator>.</operator><name>vobu_ea</name></name></expr>;</expr_stmt>









<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_vobu</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_block</name></name> <operator>+</operator>
<operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>dsi_pack</name><operator>.</operator><name>vobu_sri</name><operator>.</operator><name>next_vobu</name></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid DSI packet in VOBU %d found, skipping Cell %d / %d"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_vobu</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_cell</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title_end_cell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>dsi_pack</name><operator>.</operator><name>vobu_sri</name><operator>.</operator><name>next_vobu</name></name> <operator>=</operator> <name>SRI_END_OF_CELL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>dsi_pack</name><operator>.</operator><name>vobu_sri</name><operator>.</operator><name>next_vobu</name></name> <operator>!=</operator> <name>SRI_END_OF_CELL</name>
<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_angle</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>dsi_pack</name><operator>.</operator><name>sml_pbi</name><operator>.</operator><name>category</name></name> <operator>&amp;</operator> <literal type="number">0xf000</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x4</literal></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>dsi_pack</name><operator>.</operator><name>sml_pbi</name><operator>.</operator><name>ilvu_sa</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_vobu</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_block</name></name> <operator>+</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>dsi_pack</name><operator>.</operator><name>sml_pbi</name><operator>.</operator><name>ilvu_sa</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pack_len</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>dsi_pack</name><operator>.</operator><name>sml_pbi</name><operator>.</operator><name>ilvu_ea</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_vobu</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_block</name></name> <operator>+</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>dsi_pack</name><operator>.</operator><name>dsi_gi</name><operator>.</operator><name>vobu_ea</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x5</literal></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>dsi_pack</name><operator>.</operator><name>sml_agli</name><operator>.</operator><name>data</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_angle</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>address</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_vobu</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_block</name></name> <operator>+</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>dsi_pack</name><operator>.</operator><name>sml_agli</name><operator>.</operator><name>data</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_angle</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>address</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pack_len</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>dsi_pack</name><operator>.</operator><name>sml_pbi</name><operator>.</operator><name>ilvu_ea</name></name></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="number">0x6</literal></expr>:</case>

<case>case <expr><literal type="number">0x9</literal></expr>:</case>

<case>case <expr><literal type="number">0xa</literal></expr>:</case>

<case>case <expr><literal type="number">0x8</literal></expr>:</case>

<default>default:</default>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_vobu</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_block</name></name> <operator>+</operator>
<operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>dsi_pack</name><operator>.</operator><name>vobu_sri</name><operator>.</operator><name>next_vobu</name></name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal> <operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>dsi_pack</name><operator>.</operator><name>vobu_sri</name><operator>.</operator><name>next_vobu</name></name> <operator>==</operator> <name>SRI_END_OF_CELL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_cell</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_cell</name></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_cell</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_cur_pgc</name><operator>-&gt;</operator><name>nr_of_cells</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DvdReadFindCell</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_vobu</name></name> <operator>=</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>p_cur_pgc</name><operator>-&gt;</operator><name>cell_playback</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_cell</name></name></expr>]</index></name><operator>.</operator><name>first_sector</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
msg_Dbg( p_demux, "scr %d lbn 0x%02x vobu_ea %d vob_id %d c_id %d c_time %lld",
p_sys-&gt;dsi_pack.dsi_gi.nv_pck_scr,
p_sys-&gt;dsi_pack.dsi_gi.nv_pck_lbn,
p_sys-&gt;dsi_pack.dsi_gi.vobu_ea,
p_sys-&gt;dsi_pack.dsi_gi.vobu_vob_idn,
p_sys-&gt;dsi_pack.dsi_gi.vobu_c_idn,
dvdtime_to_time( &amp;p_sys-&gt;dsi_pack.dsi_gi.c_eltm ) );

msg_Dbg( p_demux, "cell duration: %lld",
dvdtime_to_time( &amp;p_sys-&gt;p_cur_pgc-&gt;cell_playback[p_sys-&gt;i_cur_cell].playback_time ) );

msg_Dbg( p_demux, "cat 0x%02x ilvu_ea %d ilvu_sa %d size %d",
p_sys-&gt;dsi_pack.sml_pbi.category,
p_sys-&gt;dsi_pack.sml_pbi.ilvu_ea,
p_sys-&gt;dsi_pack.sml_pbi.ilvu_sa,
p_sys-&gt;dsi_pack.sml_pbi.size );

msg_Dbg( p_demux, "next_vobu %d next_ilvu1 %d next_ilvu2 %d",
p_sys-&gt;dsi_pack.vobu_sri.next_vobu &amp; 0x7fffffff,
p_sys-&gt;dsi_pack.sml_agli.data[ p_sys-&gt;i_angle - 1 ].address,
p_sys-&gt;dsi_pack.sml_agli.data[ p_sys-&gt;i_angle ].address);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>DvdReadFindCell</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pgc_t</name> <modifier>*</modifier></type><name>p_pgc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pgc_id</name></decl>, <decl><type ref="prev"/><name>pgn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>cell_playback_t</name> <modifier>*</modifier></type><name>cell</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cur_pgc</name><operator>-&gt;</operator><name>cell_playback</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>cell</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_cell</name></name></expr>]</index></name><operator>.</operator><name>block_type</name> <operator>==</operator> <name>BLOCK_TYPE_ANGLE_BLOCK</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_cell</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_angle</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><name><name>cell</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_cell</name></name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>block_mode</name> <operator>!=</operator> <name>BLOCK_MODE_LAST_CELL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_cell</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_cell</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_cell</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_cell</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chapter</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_chapters</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pgc_id</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_vts_file</name><operator>-&gt;</operator><name>vts_ptt_srpt</name><operator>-&gt;</operator><name>title</name><index>[
<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ttn</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ptt</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chapter</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pgcn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pgn</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_vts_file</name><operator>-&gt;</operator><name>vts_ptt_srpt</name><operator>-&gt;</operator><name>title</name><index>[
<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ttn</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ptt</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chapter</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pgn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_pgc</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_vts_file</name><operator>-&gt;</operator><name>vts_pgcit</name><operator>-&gt;</operator><name>pgci_srp</name><index>[<expr><name>pgc_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pgc</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_cell</name></name> <operator>&gt;=</operator> <name><name>p_pgc</name><operator>-&gt;</operator><name>program_map</name><index>[<expr><name>pgn</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chapter</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chapter</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_chapters</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>cur_chapter</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_chapter</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>|=</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cur_chapter</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_chapter</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>DemuxTitles</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_angle</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>pi_angle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>tt_srpt_t</name> <modifier>*</modifier></type><name>tt_srpt</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vmg_file</name><operator>-&gt;</operator><name>tt_srpt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_titles</name> <init>= <expr><name><name>tt_srpt</name><operator>-&gt;</operator><name>nr_of_srpts</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"number of titles: %d"</literal></expr></argument>, <argument><expr><name>i_titles</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_titles</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i_chapters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_chapters</name> <operator>=</operator> <name><name>tt_srpt</name><operator>-&gt;</operator><name>title</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nr_of_ptts</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"title %d has %d chapters"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i_chapters</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>vlc_input_title_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>i_chapters</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vlc_seekpoint_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>t</name><operator>-&gt;</operator><name>i_seekpoint</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>seekpoint</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_titles</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>titles</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
