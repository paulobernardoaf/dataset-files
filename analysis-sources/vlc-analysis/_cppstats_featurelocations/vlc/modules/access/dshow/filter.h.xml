<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\dshow\filter.h">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>dshow</name> <block>{<block_content>

<struct>struct <name>VLCMediaSample</name>
<block>{
<decl_stmt><decl><type><name><name>ComPtr</name><argument_list type="generic">&lt;<argument><expr><name>IMediaSample</name></expr></argument>&gt;</argument_list></name></type> <name>p_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_timestamp</name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><name>void</name> <name>WINAPI</name></type> <name>FreeMediaType</name><parameter_list>( <parameter><decl><type><name>AM_MEDIA_TYPE</name><modifier>&amp;</modifier></type> <name>mt</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>HRESULT</name> <name>WINAPI</name></type> <name>CopyMediaType</name><parameter_list>( <parameter><decl><type><name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>pmtTarget</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>pmtSource</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>GetFourCCFromMediaType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AM_MEDIA_TYPE</name> <modifier>&amp;</modifier></type><name>media_type</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>class</name></type> <name>CaptureFilter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CapturePin</name><range>: <expr><name>public</name> <name>IPin</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>IMemInputPin</name>
<block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>CaptureEnumMediaTypes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CaptureFilter</name><modifier>*</modifier></type> <name>p_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>ComPtr</name><argument_list type="generic">&lt;<argument><expr><name>IPin</name></expr></argument>&gt;</argument_list></name></type> <name>p_connected_pin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>media_types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>media_type_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AM_MEDIA_TYPE</name></type> <name>cx_media_type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>VLCMediaSample</name></expr></argument>&gt;</argument_list></name> <name>samples_queue</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i_ref</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>CapturePin</name><argument_list>( <argument>vlc_object_t *_p_input</argument>, <argument>access_sys_t *p_sys</argument>,
<argument>CaptureFilter* _p_filter</argument>,
<argument>AM_MEDIA_TYPE *mt</argument>, <argument>size_t mt_count</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>


<function_decl><type><name>STDMETHODIMP</name></type> <name>QueryInterface</name><parameter_list>(<parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppv</name></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro> <expr_stmt><expr><call><name>AddRef</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro> <expr_stmt><expr><call><name>Release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>STDMETHODIMP</name></type> <name>Connect</name><parameter_list>( <parameter><decl><type><name>IPin</name> <modifier>*</modifier></type> <name>pReceivePin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>pmt</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>STDMETHODIMP</name></type> <name>ReceiveConnection</name><parameter_list>( <parameter><decl><type><name>IPin</name> <modifier>*</modifier></type> <name>pConnector</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>pmt</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>STDMETHODIMP</name></type> <name>Disconnect</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>STDMETHODIMP</name></type> <name>ConnectedTo</name><parameter_list>( <parameter><decl><type><name>IPin</name> <modifier>*</modifier><modifier>*</modifier></type><name>pPin</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>STDMETHODIMP</name></type> <name>ConnectionMediaType</name><parameter_list>( <parameter><decl><type><name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>pmt</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>STDMETHODIMP</name></type> <name>QueryPinInfo</name><parameter_list>( <parameter><decl><type><name>PIN_INFO</name> <modifier>*</modifier></type> <name>pInfo</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>STDMETHODIMP</name></type> <name>QueryDirection</name><parameter_list>( <parameter><decl><type><name>PIN_DIRECTION</name> <modifier>*</modifier></type> <name>pPinDir</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>STDMETHODIMP</name></type> <name>QueryId</name><parameter_list>( <parameter><decl><type><name>LPWSTR</name> <modifier>*</modifier></type> <name>Id</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>STDMETHODIMP</name></type> <name>QueryAccept</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>pmt</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>STDMETHODIMP</name></type> <name>EnumMediaTypes</name><parameter_list>( <parameter><decl><type><name>IEnumMediaTypes</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppEnum</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>STDMETHODIMP</name></type> <name>QueryInternalConnections</name><parameter_list>( <parameter><decl><type><name>IPin</name><modifier>*</modifier> <modifier>*</modifier></type><name>apPin</name></decl></parameter>, <parameter><decl><type><name>ULONG</name> <modifier>*</modifier></type><name>nPin</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>STDMETHODIMP</name></type> <name>EndOfStream</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHODIMP</name></type> <name>BeginFlush</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>STDMETHODIMP</name></type> <name>EndFlush</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>STDMETHODIMP</name></type> <name>NewSegment</name><parameter_list>( <parameter><decl><type><name>REFERENCE_TIME</name></type> <name>tStart</name></decl></parameter>, <parameter><decl><type><name>REFERENCE_TIME</name></type> <name>tStop</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>dRate</name></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><name>STDMETHODIMP</name></type> <name>GetAllocator</name><parameter_list>( <parameter><decl><type><name>IMemAllocator</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppAllocator</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>STDMETHODIMP</name></type> <name>NotifyAllocator</name><parameter_list>( <parameter><decl><type><name>IMemAllocator</name> <modifier>*</modifier></type><name>pAllocator</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>bReadOnly</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>STDMETHODIMP</name></type> <name>GetAllocatorRequirements</name><parameter_list>( <parameter><decl><type><name>ALLOCATOR_PROPERTIES</name> <modifier>*</modifier></type><name>pProps</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>STDMETHODIMP</name></type> <name>Receive</name><parameter_list>( <parameter><decl><type><name>IMediaSample</name> <modifier>*</modifier></type><name>pSample</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>STDMETHODIMP</name></type> <name>ReceiveMultiple</name><parameter_list>( <parameter><decl><type><name>IMediaSample</name> <modifier>*</modifier><modifier>*</modifier></type><name>pSamples</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nSamples</name></decl></parameter>,
<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>nSamplesProcessed</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>STDMETHODIMP</name></type> <name>ReceiveCanBlock</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><name>HRESULT</name></type> <name>CustomGetSample</name><parameter_list>( <parameter><decl><type><name>VLCMediaSample</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>CustomGetSamples</name><argument_list>( <argument><expr><name>std</name><operator>::</operator><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>VLCMediaSample</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>external_queue</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<function_decl><type><name>AM_MEDIA_TYPE</name> <modifier>&amp;</modifier></type><name>CustomGetMediaType</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>CapturePin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>CaptureFilter</name> <range>: <expr><name>public</name> <name>IBaseFilter</name>
<block>{
<expr><name>friend</name> <name>class</name> <name>CapturePin</name></expr>;

<expr><name>vlc_object_t</name> <operator>*</operator><name>p_input</name></expr>;
<expr><name><name>ComPtr</name><argument_list type="generic">&lt;<argument><expr><name>CapturePin</name></expr></argument>&gt;</argument_list></name> <name>p_pin</name></expr>;
<expr><name><name>ComPtr</name><argument_list type="generic">&lt;<argument><expr><name>IFilterGraph</name></expr></argument>&gt;</argument_list></name> <name>p_graph</name></expr>;

<expr><name>FILTER_STATE</name> <name>state</name></expr>;

<expr><name>long</name> <name>i_ref</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>CaptureFilter</name><argument_list>( <argument>vlc_object_t *_p_input</argument>, <argument>access_sys_t *p_sys</argument>,
<argument>AM_MEDIA_TYPE *mt</argument>, <argument>size_t mt_count</argument> )</argument_list></macro></expr>;


<expr><name>STDMETHODIMP</name> <macro><name>QueryInterface</name><argument_list>(<argument>REFIID riid</argument>, <argument>void **ppv</argument>)</argument_list></macro></expr>;
<macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro> <expr><call><name>AddRef</name><argument_list>()</argument_list></call></expr>;
<macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro> <expr><call><name>Release</name><argument_list>()</argument_list></call></expr>;


<expr><name>STDMETHODIMP</name> <call><name>GetClassID</name><argument_list>(<argument><expr><name>CLSID</name> <operator>*</operator><name>pClsID</name></expr></argument>)</argument_list></call></expr>;


<expr><name>STDMETHODIMP</name> <macro><name>GetState</name><argument_list>(<argument>DWORD dwMSecs</argument>, <argument>FILTER_STATE *State</argument>)</argument_list></macro></expr>;
<expr><name>STDMETHODIMP</name> <call><name>SetSyncSource</name><argument_list>(<argument><expr><name>IReferenceClock</name> <operator>*</operator><name>pClock</name></expr></argument>)</argument_list></call></expr>;
<expr><name>STDMETHODIMP</name> <call><name>GetSyncSource</name><argument_list>(<argument><expr><name>IReferenceClock</name> <operator>*</operator><operator>*</operator><name>pClock</name></expr></argument>)</argument_list></call></expr>;
<expr><name>STDMETHODIMP</name> <call><name>Stop</name><argument_list>()</argument_list></call></expr>;
<expr><name>STDMETHODIMP</name> <call><name>Pause</name><argument_list>()</argument_list></call></expr>;
<expr><name>STDMETHODIMP</name> <macro><name>Run</name><argument_list>(<argument>REFERENCE_TIME tStart</argument>)</argument_list></macro></expr>;


<expr><name>STDMETHODIMP</name> <call><name>EnumPins</name><argument_list>( <argument><expr><name>IEnumPins</name> <operator>*</operator><operator>*</operator> <name>ppEnum</name></expr></argument> )</argument_list></call></expr>;
<expr><name>STDMETHODIMP</name> <macro><name>FindPin</name><argument_list>( <argument>LPCWSTR Id</argument>, <argument>IPin ** ppPin</argument> )</argument_list></macro></expr>;
<expr><name>STDMETHODIMP</name> <call><name>QueryFilterInfo</name><argument_list>( <argument><expr><name>FILTER_INFO</name> <operator>*</operator> <name>pInfo</name></expr></argument> )</argument_list></call></expr>;
<expr><name>STDMETHODIMP</name> <macro><name>JoinFilterGraph</name><argument_list>( <argument>IFilterGraph * pGraph</argument>, <argument>LPCWSTR pName</argument> )</argument_list></macro></expr>;
<expr><name>STDMETHODIMP</name> <call><name>QueryVendorInfo</name><argument_list>( <argument><expr><name>LPWSTR</name><operator>*</operator> <name>pVendorInfo</name></expr></argument> )</argument_list></call></expr>;


<expr><name><name>ComPtr</name><argument_list type="generic">&lt;<argument><expr><name>CapturePin</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <call><name>CustomGetPin</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><call><name>CaptureFilter</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>CaptureEnumPins</name> <range>: <expr><name>public</name> <name>IEnumPins</name>
<block>{
<expr><name>vlc_object_t</name> <operator>*</operator><name>p_input</name></expr>;
<expr><name><name>ComPtr</name><argument_list type="generic">&lt;<argument><expr><name>CaptureFilter</name></expr></argument>&gt;</argument_list></name> <name>p_filter</name></expr>;

<expr><name>int</name> <name>i_position</name></expr>;
<expr><name>long</name> <name>i_ref</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>CaptureEnumPins</name><argument_list>( <argument><expr><name>vlc_object_t</name> <operator>*</operator><name>_p_input</name></expr></argument>, <argument><expr><name><name>ComPtr</name><argument_list type="generic">&lt;<argument><expr><name>CaptureFilter</name></expr></argument>&gt;</argument_list></name> <name>_p_filter</name></expr></argument>,
<argument><expr><name><name>ComPtr</name><argument_list type="generic">&lt;<argument><expr><name>CaptureEnumPins</name></expr></argument>&gt;</argument_list></name> <name>pEnumPins</name></expr></argument> )</argument_list></call></expr>;


<expr><name>STDMETHODIMP</name> <macro><name>QueryInterface</name><argument_list>( <argument>REFIID riid</argument>, <argument>void **ppv</argument> )</argument_list></macro></expr>;
<macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro> <expr><call><name>AddRef</name><argument_list>()</argument_list></call></expr>;
<macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro> <expr><call><name>Release</name><argument_list>()</argument_list></call></expr>;


<expr><name>STDMETHODIMP</name> <macro><name>Next</name><argument_list>( <argument>ULONG cPins</argument>, <argument>IPin ** ppPins</argument>, <argument>ULONG * pcFetched</argument> )</argument_list></macro></expr>;
<expr><name>STDMETHODIMP</name> <macro><name>Skip</name><argument_list>( <argument>ULONG cPins</argument> )</argument_list></macro></expr>;
<expr><name>STDMETHODIMP</name> <call><name>Reset</name><argument_list>()</argument_list></call></expr>;
<expr><name>STDMETHODIMP</name> <call><name>Clone</name><argument_list>( <argument><expr><name>IEnumPins</name> <operator>*</operator><operator>*</operator><name>ppEnum</name></expr></argument> )</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><call><name>CaptureEnumPins</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>CaptureEnumMediaTypes</name> <range>: <expr><name>public</name> <name>IEnumMediaTypes</name>
<block>{
<expr><name>vlc_object_t</name> <operator>*</operator><name>p_input</name></expr>;
<expr><name><name>ComPtr</name><argument_list type="generic">&lt;<argument><expr><name>CapturePin</name></expr></argument>&gt;</argument_list></name> <name>p_pin</name></expr>;
<expr><name>AM_MEDIA_TYPE</name> <name>cx_media_type</name></expr>;

<expr><name>size_t</name> <name>i_position</name></expr>;
<expr><name>long</name> <name>i_ref</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>CaptureEnumMediaTypes</name><argument_list>( <argument><expr><name>vlc_object_t</name> <operator>*</operator><name>_p_input</name></expr></argument>, <argument><expr><name><name>ComPtr</name><argument_list type="generic">&lt;<argument><expr><name>CapturePin</name></expr></argument>&gt;</argument_list></name> <name>_p_pin</name></expr></argument>,
<argument><expr><name>CaptureEnumMediaTypes</name> <operator>*</operator><name>pEnumMediaTypes</name></expr></argument> )</argument_list></call></expr>;


<expr><name>STDMETHODIMP</name> <macro><name>QueryInterface</name><argument_list>( <argument>REFIID riid</argument>, <argument>void **ppv</argument> )</argument_list></macro></expr>;
<macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro> <expr><call><name>AddRef</name><argument_list>()</argument_list></call></expr>;
<macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro> <expr><call><name>Release</name><argument_list>()</argument_list></call></expr>;


<expr><name>STDMETHODIMP</name> <macro><name>Next</name><argument_list>( <argument>ULONG cMediaTypes</argument>, <argument>AM_MEDIA_TYPE ** ppMediaTypes</argument>,
<argument>ULONG * pcFetched</argument> )</argument_list></macro></expr>;
<expr><name>STDMETHODIMP</name> <macro><name>Skip</name><argument_list>( <argument>ULONG cMediaTypes</argument> )</argument_list></macro></expr>;
<expr><name>STDMETHODIMP</name> <call><name>Reset</name><argument_list>()</argument_list></call></expr>;
<expr><name>STDMETHODIMP</name> <call><name>Clone</name><argument_list>( <argument><expr><name>IEnumMediaTypes</name> <operator>*</operator><operator>*</operator><name>ppEnum</name></expr></argument> )</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><call><name>CaptureEnumMediaTypes</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt> 
</unit>
