<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\srt_common.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SRT_COMMON_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_COMMON_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;srt/srt.h&gt;</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_PARAM_LATENCY</name></cpp:macro> <cpp:value>"latency"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_PARAM_PASSPHRASE</name></cpp:macro> <cpp:value>"passphrase"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_PARAM_PAYLOAD_SIZE</name></cpp:macro> <cpp:value>"payload-size"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_PARAM_BANDWIDTH_OVERHEAD_LIMIT</name></cpp:macro> <cpp:value>"bandwidth-overhead-limit"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_PARAM_CHUNK_SIZE</name></cpp:macro> <cpp:value>"chunk-size"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_PARAM_POLL_TIMEOUT</name></cpp:macro> <cpp:value>"poll-timeout"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_PARAM_KEY_LENGTH</name></cpp:macro> <cpp:value>"key-length"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_DEFAULT_BANDWIDTH_OVERHEAD_LIMIT</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_DEFAULT_CHUNK_SIZE</name></cpp:macro> <cpp:value>SRT_LIVE_DEF_PLSIZE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_DEFAULT_PORT</name></cpp:macro> <cpp:value>9000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_MIN_CHUNKS_TRYREAD</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_MAX_CHUNKS_TRYREAD</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_DEFAULT_POLL_TIMEOUT</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_DEFAULT_LATENCY</name></cpp:macro> <cpp:value>SRT_LIVE_DEF_LATENCY_MS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_DEFAULT_PAYLOAD_SIZE</name></cpp:macro> <cpp:value>SRT_LIVE_DEF_PLSIZE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_KEY_LENGTH_TEXT</name></cpp:macro> <cpp:value>N_("Crypto key length in bytes")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_DEFAULT_KEY_LENGTH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>srt_key_lengths</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>srt_key_length_names</name><index>[]</index></name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>srt_params</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>latency</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>passphrase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>payload_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bandwidth_overhead_limit</name></decl>;</decl_stmt>
}</block></struct></type> <name>srt_params_t</name>;</typedef>

<function_decl><type><name>bool</name></type> <name>srt_parse_url</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>url</name></decl></parameter>, <parameter><decl><type><name>srt_params_t</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>srt_set_socket_option</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>srt_param</name></decl></parameter>,
<parameter><decl><type><name>SRTSOCKET</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>SRT_SOCKOPT</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>optval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optlen</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
