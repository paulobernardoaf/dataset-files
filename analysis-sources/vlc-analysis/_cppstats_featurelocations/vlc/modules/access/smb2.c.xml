<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\smb2.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_keystore.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;smb2/smb2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;smb2/libsmb2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;smb2/libsmb2-raw.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DSM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bdsm/netbios_ns.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bdsm/netbios_defs.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"smb_common.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"smb2"</literal></argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"SMB2 / SMB3 input"</literal>)</argument>)</argument_list></macro>
<macro><name>set_help</name><argument_list>(<argument>N_(<literal type="string">"Samba (Windows network shares) input via libsmb2"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">21</literal></argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_ACCESS</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>(<argument><literal type="string">"smb-user"</literal></argument>, <argument>NULL</argument>, <argument>SMB_USER_TEXT</argument>, <argument>SMB_USER_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>add_password</name><argument_list>(<argument><literal type="string">"smb-pwd"</literal></argument>, <argument>NULL</argument>, <argument>SMB_PASS_TEXT</argument>, <argument>SMB_PASS_LONGTEXT</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>(<argument><literal type="string">"smb-domain"</literal></argument>, <argument>NULL</argument>, <argument>SMB_DOMAIN_TEXT</argument>, <argument>SMB_DOMAIN_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"smb"</literal></argument>, <argument><literal type="string">"smb2"</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<struct>struct <name>access_sys</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>smb2_context</name></name> <modifier>*</modifier></type> <name>smb2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smb2fh</name></name> <modifier>*</modifier></type> <name>smb2fh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smb2dir</name></name> <modifier>*</modifier></type> <name>smb2dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>srvsvc_netshareenumall_rep</name></name> <modifier>*</modifier></type><name>share_enum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>smb2_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>encoded_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>eof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>smb2_connected</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>res_done</name></decl>;</decl_stmt>
<union>union <block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block> <decl><name>read</name></decl>;</struct>
}</block> <decl><name>res</name></decl>;</union>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>smb2_check_status</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>access_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_error</name> <init>= <expr><call><name>smb2_get_error</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"%s failed: %d, '%s'"</literal></expr></argument>, <argument><expr><name>psz_func</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>psz_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>res_done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>smb2_set_error</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>access_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"%s failed: %d, %s"</literal></expr></argument>, <argument><expr><name>psz_func</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><call><name>smb2_get_error</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_SMB2_CHECK_STATUS</name><parameter_list>(<parameter><type><name>access</name></type></parameter>, <parameter><type><name>status</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>smb2_check_status(access, status, __func__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_SMB2_SET_ERROR</name><parameter_list>(<parameter><type><name>access</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>err</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>smb2_set_error(access, func, err)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_SMB2_STATUS_DENIED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x == -ECONNREFUSED || x == -EACCES)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vlc_smb2_mainloop</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>teardown</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEARDOWN_TIMEOUT</name></cpp:macro> <cpp:value>250</cpp:value></cpp:define> 
<decl_stmt><decl><type><name><name>struct</name> <name>access_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>poll_func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>vlc_poll_i11e</name></expr></init>;</function_decl>





<decl_stmt><decl><type><name>int</name></type> <name>original_error_status</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>error_status</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>teardown</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>TEARDOWN_TIMEOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>poll_func</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>poll</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>res_done</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>error_status</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>res_done</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>p_fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>smb2_get_fd</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <call><name>smb2_which_events</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>poll_func</name><argument_list>(<argument><expr><name>p_fds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"vlc_poll_i11e interrupted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>poll_func</name> <operator>!=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>poll</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>TEARDOWN_TIMEOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>poll_func</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>poll</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <operator>-</operator><name>errno</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"vlc_poll_i11e failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <operator>-</operator><name>errno</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <operator>-</operator><name>ETIMEDOUT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name>
<operator>&amp;&amp;</operator> <call><name>smb2_service</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>, <argument><expr><name><name>p_fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VLC_SMB2_SET_ERROR</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"smb2_service"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>error_status</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>original_error_status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <name>original_error_status</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_SMB2_GENERIC_CB</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>VLC_UNUSED(smb2); stream_t *access = private_data; struct access_sys *sys = access-&gt;p_sys; assert(sys-&gt;smb2 == smb2); if (VLC_SMB2_CHECK_STATUS(access, status)) return</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>smb2_generic_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>smb2_context</name></name> <modifier>*</modifier></type><name>smb2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_SMB2_GENERIC_CB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>smb2_read_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>smb2_context</name></name> <modifier>*</modifier></type><name>smb2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_SMB2_GENERIC_CB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>read</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>FileRead</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>access_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>error_status</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">262144</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">262144</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>read</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>smb2_read_async</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2fh</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name>smb2_read_cb</name></expr></argument>, <argument><expr><name>access</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_SMB2_SET_ERROR</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"smb2_read_async"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_smb2_mainloop</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>sys</name><operator>-&gt;</operator><name>res</name><operator>.</operator><name>read</name><operator>.</operator><name>len</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>FileSeek</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>access_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>error_status</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>smb2_lseek</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2fh</name></name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_SMB2_SET_ERROR</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"smb2_seek_async"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>FileControl</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>access_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>i_query</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>STREAM_CAN_SEEK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_CAN_FASTSEEK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_CONTROL_PACE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_GET_SIZE</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>smb2_size</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>STREAM_GET_PTS_DELAY</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(
<argument><expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"network-caching"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_SET_PAUSE_STATE</name></expr>:</case>
<break>break;</break>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>vlc_smb2_get_url</name><parameter_list>(<parameter><decl><type><name>vlc_url_t</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"smb://%s%s%s%s%s%s"</literal></expr></argument>, <argument><expr><name><name>url</name><operator>-&gt;</operator><name>psz_host</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>url</name><operator>-&gt;</operator><name>psz_path</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>url</name><operator>-&gt;</operator><name>psz_path</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>url</name><operator>-&gt;</operator><name>psz_path</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>url</name><operator>-&gt;</operator><name>psz_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator>
<name><name>url</name><operator>-&gt;</operator><name>psz_path</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>url</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr> ?</condition><then> <expr><literal type="string">"/"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>file</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>url</name><operator>-&gt;</operator><name>psz_option</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"?"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>url</name><operator>-&gt;</operator><name>psz_option</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>url</name><operator>-&gt;</operator><name>psz_option</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>buf</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AddItem</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vlc_readdir_helper</name></name> <modifier>*</modifier></type><name>rdh</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>access_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name_encoded</name> <init>= <expr><call><name>vlc_uri_encode</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>name_encoded</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><call><name>vlc_smb2_get_url</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>encoded_url</name></name></expr></argument>, <argument><expr><name>name_encoded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name_encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>url</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_readdir_helper_additem</name><argument_list>(<argument><expr><name>rdh</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>,
<argument><expr><name>ITEM_NET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>DirRead</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>access_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smb2dirent</name></name> <modifier>*</modifier></type><name>smb2dirent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_readdir_helper</name></name></type> <name>rdh</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_readdir_helper_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>access</name></expr></argument>, <argument><expr><name>p_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>smb2dirent</name> <operator>=</operator> <call><name>smb2_readdir</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2dir</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>smb2dirent</name><operator>-&gt;</operator><name>st</name><operator>.</operator><name>smb2_type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SMB2_TYPE_FILE</name></expr>:</case>
<expr_stmt><expr><name>i_type</name> <operator>=</operator> <name>ITEM_TYPE_FILE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SMB2_TYPE_DIRECTORY</name></expr>:</case>
<expr_stmt><expr><name>i_type</name> <operator>=</operator> <name>ITEM_TYPE_DIRECTORY</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>i_type</name> <operator>=</operator> <name>ITEM_TYPE_UNKNOWN</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AddItem</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name><name>smb2dirent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_readdir_helper_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ShareEnum</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>access_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>share_enum</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_readdir_helper</name></name></type> <name>rdh</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_readdir_helper_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>access</name></expr></argument>, <argument><expr><name>p_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>srvsvc_netsharectr</name></name> <modifier>*</modifier></type><name>ctr</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>share_enum</name><operator>-&gt;</operator><name>ctr</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>iinfo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>
<condition><expr><name>iinfo</name> <operator>&lt;</operator> <name><name>ctr</name><operator>-&gt;</operator><name>ctr1</name><operator>.</operator><name>count</name></name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>;</condition> <incr><expr><operator>++</operator><name>iinfo</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>srvsvc_netshareinfo1</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>ctr</name><operator>-&gt;</operator><name>ctr1</name><operator>.</operator><name>array</name><index>[<expr><name>iinfo</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>SHARE_TYPE_HIDDEN</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SHARE_TYPE_DISKTREE</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AddItem</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>ITEM_TYPE_DIRECTORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_readdir_helper_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vlc_smb2_close_fh</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>access_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>smb2_close_async</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2fh</name></name></expr></argument>, <argument><expr><name>smb2_generic_cb</name></expr></argument>, <argument><expr><name>access</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_SMB2_SET_ERROR</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"smb2_close_async"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2fh</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><call><name>vlc_smb2_mainloop</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vlc_smb2_disconnect_share</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>access_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>smb2_connected</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>smb2_disconnect_share_async</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>, <argument><expr><name>smb2_generic_cb</name></expr></argument>, <argument><expr><name>access</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_SMB2_SET_ERROR</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"smb2_connect_share_async"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_smb2_mainloop</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2_connected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>smb2_opendir_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>smb2_context</name></name> <modifier>*</modifier></type><name>smb2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_SMB2_GENERIC_CB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2dir</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>smb2_open_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>smb2_context</name></name> <modifier>*</modifier></type><name>smb2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_SMB2_GENERIC_CB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2fh</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>smb2_share_enum_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>smb2_context</name></name> <modifier>*</modifier></type><name>smb2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_SMB2_GENERIC_CB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>share_enum</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vlc_smb2_open_share</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>smb2_url</name></name> <modifier>*</modifier></type><name>smb2_url</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vlc_credential</name> <modifier>*</modifier></type><name>credential</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>access_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>do_enum</name> <init>= <expr><name><name>smb2_url</name><operator>-&gt;</operator><name>share</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>username</name> <init>= <expr><name><name>credential</name><operator>-&gt;</operator><name>psz_username</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>password</name> <init>= <expr><name><name>credential</name><operator>-&gt;</operator><name>psz_password</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name> <init>= <expr><name><name>credential</name><operator>-&gt;</operator><name>psz_realm</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>share</name> <init>= <expr><ternary><condition><expr><name>do_enum</name></expr> ?</condition><then> <expr><literal type="string">"IPC$"</literal></expr> </then><else>: <expr><name><name>smb2_url</name><operator>-&gt;</operator><name>share</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>username</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>username</name> <operator>=</operator> <literal type="string">"Guest"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>password</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>smb2_set_password</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>smb2_set_domain</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>domain</name></expr> ?</condition><then> <expr><name>domain</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>smb2_connect_share_async</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>, <argument><expr><name><name>smb2_url</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>share</name></expr></argument>,
<argument><expr><name>username</name></expr></argument>, <argument><expr><name>smb2_generic_cb</name></expr></argument>, <argument><expr><name>access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_SMB2_SET_ERROR</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"smb2_connect_share_async"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_smb2_mainloop</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2_connected</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>do_enum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smb2_share_enum_async</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>, <argument><expr><name>smb2_share_enum_cb</name></expr></argument>, <argument><expr><name>access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb2_stat_64</name></name></type> <name>smb2_stat</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>smb2_stat_async</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>, <argument><expr><name><name>smb2_url</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smb2_stat</name></expr></argument>,
<argument><expr><name>smb2_generic_cb</name></expr></argument>, <argument><expr><name>access</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VLC_SMB2_SET_ERROR</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"smb2_stat_async"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_smb2_mainloop</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>smb2_stat</name><operator>.</operator><name>smb2_type</name></name> <operator>==</operator> <name>SMB2_TYPE_FILE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2_size</name></name> <operator>=</operator> <name><name>smb2_stat</name><operator>.</operator><name>smb2_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smb2_open_async</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>, <argument><expr><name><name>smb2_url</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>,
<argument><expr><name>smb2_open_cb</name></expr></argument>, <argument><expr><name>access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>smb2_stat</name><operator>.</operator><name>smb2_type</name></name> <operator>==</operator> <name>SMB2_TYPE_DIRECTORY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smb2_opendir_async</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>, <argument><expr><name><name>smb2_url</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
<argument><expr><name>smb2_opendir_cb</name></expr></argument>, <argument><expr><name>access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"smb2_stat_cb: file type not handled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_SMB2_SET_ERROR</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"smb2_open*_async"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_smb2_mainloop</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>vlc_smb2_disconnect_share</name><argument_list>(<argument><expr><name>access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>vlc_smb2_resolve</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>access</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>host</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DSM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vlc_getaddrinfo_i11e</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out_host</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>netbios_ns</name> <modifier>*</modifier></type><name>ns</name> <init>= <expr><call><name>netbios_ns_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ns</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ip4_addr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>netbios_ns_resolve</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>NETBIOS_FILESERVER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip4_addr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[]</index></name> <init>= <expr><literal type="string">"xxx.xxx.xxx.xxx"</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip4_addr</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_host</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>netbios_ns_destroy</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>out_host</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>port</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>access_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_calloc</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smb2_url</name></name> <modifier>*</modifier></type><name>smb2_url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_domain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>vlc_UrlParseFixup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>encoded_url</name></name></expr></argument>, <argument><expr><name><name>access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name> <operator>=</operator> <call><name>smb2_init_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"smb2_init_context failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>smb2_set_security_mode</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>, <argument><expr><name>SMB2_NEGOTIATE_SIGNING_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>encoded_url</name><operator>.</operator><name>psz_path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>encoded_url</name><operator>.</operator><name>psz_path</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">"/"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>resolved_host</name> <init>= <expr><call><name>vlc_smb2_resolve</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>encoded_url</name><operator>.</operator><name>psz_host</name></name></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>encoded_url</name><operator>.</operator><name>i_port</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>resolved_host</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>resolved_url</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>encoded_url</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>resolved_url</name><operator>.</operator><name>psz_host</name></name> <operator>=</operator> <name>resolved_host</name></expr>;</expr_stmt>
<expr_stmt><expr><name>url</name> <operator>=</operator> <call><name>vlc_uri_compose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>resolved_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>resolved_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>url</name> <operator>=</operator> <call><name>vlc_uri_compose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>encoded_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_uri_decode</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>smb2_url</name> <operator>=</operator> <call><name>smb2_parse_url</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>smb2_url</name> <operator>||</operator> <operator>!</operator><name><name>smb2_url</name><operator>-&gt;</operator><name>share</name></name> <operator>||</operator> <operator>!</operator><name><name>smb2_url</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"smb2_parse_url failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_credential</name></type> <name>credential</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_credential_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>encoded_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>var_domain</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"smb-domain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>credential</name><operator>.</operator><name>psz_realm</name></name> <operator>=</operator> <name>var_domain</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>vlc_credential_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>, <argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"smb-user"</literal></expr></argument>, <argument><expr><literal type="string">"smb-pwd"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_smb2_open_share</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>smb2_url</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>error_status</name></name> <operator>||</operator> <call><name>VLC_SMB2_STATUS_DENIED</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>error_status</name></name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>vlc_credential_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>, <argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"smb-user"</literal></expr></argument>, <argument><expr><literal type="string">"smb-pwd"</literal></expr></argument>,
<argument><expr><name>SMB_LOGIN_DIALOG_TITLE</name></expr></argument>, <argument><expr><name>SMB_LOGIN_DIALOG_TEXT</name></expr></argument>,
<argument><expr><name><name>smb2_url</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>error_status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_smb2_open_share</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>smb2_url</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_credential_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>, <argument><expr><name>access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_credential_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><call><name>smb2_get_error</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>(<argument><expr><name>access</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"SMB2 operation failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>credential</name><operator>.</operator><name>i_get_order</name></name> <operator>==</operator> <name>GET_FROM_DIALOG</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"smb-dialog-failed"</literal></expr></argument>, <argument><expr><name>VLC_VAR_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>smb2fh</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_read</name></name> <operator>=</operator> <name>FileRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>FileSeek</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>FileControl</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>smb2dir</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>=</operator> <name>DirRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>access_vaDirectoryControlHelper</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>share_enum</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>=</operator> <name>ShareEnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>access_vaDirectoryControlHelper</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>smb2_destroy_url</name><argument_list>(<argument><expr><name>smb2_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>var_domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>smb2_url</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>smb2_destroy_url</name><argument_list>(<argument><expr><name>smb2_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_smb2_disconnect_share</name><argument_list>(<argument><expr><name>access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>smb2_destroy_context</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>encoded_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>var_domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<return>return <expr><ternary><condition><expr><call><name>vlc_killed</name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>error_status</name></name> <operator>==</operator> <operator>-</operator><name>EIO</name></expr> ?</condition><then> <expr><name>VLC_ETIMEOUT</name></expr>
</then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>access_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>smb2fh</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_smb2_close_fh</name><argument_list>(<argument><expr><name>access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>smb2dir</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>smb2_closedir</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>share_enum</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>smb2_free_data</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>share_enum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_smb2_disconnect_share</name><argument_list>(<argument><expr><name>access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>smb2_destroy_context</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>smb2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>encoded_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
