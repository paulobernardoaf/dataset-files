<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\v4l2\video.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v4l2.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SetupStandard</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>v4l2_input</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>input</name></decl></parameter>,
<parameter><decl><type><name>v4l2_std_id</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>std</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>input</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>V4L2_IN_CAP_STD</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"no video standard selection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>std</name> <operator>=</operator> <name>V4L2_STD_UNKNOWN</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>std</name> <operator>=</operator> <call><name>var_InheritStandard</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name><literal type="string">"standard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>std</name> <operator>==</operator> <name>V4L2_STD_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"video standard not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_G_STD</name></expr></argument>, <argument><expr><name>std</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot get video standard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_S_STD</name></expr></argument>, <argument><expr><name>std</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot set video standard 0x%"</literal><name>PRIx64</name><literal type="string">": %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>*</operator><name>std</name></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"video standard set to 0x%"</literal><name>PRIx64</name><literal type="string">":"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>*</operator><name>std</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SetupAudio</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>v4l2_input</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>audioset</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"no audio input available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"available audio inputs: 0x%08"</literal><name>PRIX32</name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>audioset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>idx</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name><literal type="string">"audio-input"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"no audio input selected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>idx</name><operator>)</operator> <operator>&amp;</operator> <name><name>input</name><operator>-&gt;</operator><name>audioset</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"skipped unavailable audio input %"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_audio</name></name></type> <name>enumaudio</name> <init>= <expr><block>{ <expr><operator>.</operator><name>index</name> <operator>=</operator> <name>idx</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_ENUMAUDIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enumaudio</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot get audio input %"</literal><name>PRIu32</name><literal type="string">" properties: %s"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"audio input %s (%"</literal><name>PRIu32</name><literal type="string">") is %s"</literal>
<literal type="string">" (capabilities: 0x%08"</literal><name>PRIX32</name><literal type="string">")"</literal></expr></argument>, <argument><expr><name><name>enumaudio</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>enumaudio</name><operator>.</operator><name>index</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>enumaudio</name><operator>.</operator><name>capability</name></name> <operator>&amp;</operator> <name>V4L2_AUDCAP_STEREO</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"Stereo"</literal></expr> </then><else>: <expr><literal type="string">"Mono"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>enumaudio</name><operator>.</operator><name>capability</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>enumaudio</name><operator>.</operator><name>capability</name></name> <operator>&amp;</operator> <name>V4L2_AUDCAP_AVL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" supports Automatic Volume Level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_audio</name></name></type> <name>audio</name> <init>= <expr><block>{ <expr><operator>.</operator><name>index</name> <operator>=</operator> <name>idx</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_S_AUDIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>audio</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot select audio input %"</literal><name>PRIu32</name><literal type="string">": %s"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"selected audio input %"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>SetupTuner</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_tuner</name></name></type> <name>tuner</name> <init>= <expr><block>{ <expr><operator>.</operator><name>index</name> <operator>=</operator> <name>idx</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_G_TUNER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tuner</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot get tuner %"</literal><name>PRIu32</name><literal type="string">" properties: %s"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>typename</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mult</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>tuner</name><operator>.</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>V4L2_TUNER_RADIO</name></expr>:</case>
<expr_stmt><expr><name>typename</name> <operator>=</operator> <literal type="string">"Radio"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V4L2_TUNER_ANALOG_TV</name></expr>:</case>
<expr_stmt><expr><name>typename</name> <operator>=</operator> <literal type="string">"Analog TV"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>typename</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>mult</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>tuner</name><operator>.</operator><name>capability</name></name> <operator>&amp;</operator> <name>V4L2_TUNER_CAP_LOW</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"k"</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"tuner %s (%"</literal><name>PRIu32</name><literal type="string">") is %s"</literal></expr></argument>, <argument><expr><name><name>tuner</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>tuner</name><operator>.</operator><name>index</name></name></expr></argument>,
<argument><expr><name>typename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" ranges from %u.%u %sHz to %u.%u %sHz"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>tuner</name><operator>.</operator><name>rangelow</name></name> <operator>*</operator> <literal type="number">125</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>tuner</name><operator>.</operator><name>rangelow</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>mult</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>tuner</name><operator>.</operator><name>rangehigh</name></name> <operator>*</operator> <literal type="number">125</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>tuner</name><operator>.</operator><name>rangehigh</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">5</literal></expr></argument>,
<argument><expr><name>mult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<expr_stmt><expr><name><name>tuner</name><operator>.</operator><name>audmode</name></name> <operator>=</operator> <call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name><literal type="string">"tuner-audio-mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>tuner</name><operator>.</operator><name>reserved</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>tuner</name><operator>.</operator><name>reserved</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tuner</name><operator>.</operator><name>capability</name></name> <operator>&amp;</operator> <name>V4L2_TUNER_CAP_LANG1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" supports primary audio language"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>tuner</name><operator>.</operator><name>audmode</name></name> <operator>==</operator> <name>V4L2_TUNER_MODE_LANG1</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" falling back to stereo mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tuner</name><operator>.</operator><name>audmode</name></name> <operator>=</operator> <name>V4L2_TUNER_MODE_STEREO</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tuner</name><operator>.</operator><name>capability</name></name> <operator>&amp;</operator> <name>V4L2_TUNER_CAP_LANG2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" supports secondary audio language or program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tuner</name><operator>.</operator><name>capability</name></name> <operator>&amp;</operator> <name>V4L2_TUNER_CAP_STEREO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" supports stereo audio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>tuner</name><operator>.</operator><name>audmode</name></name> <operator>==</operator> <name>V4L2_TUNER_MODE_STEREO</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" falling back to mono mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tuner</name><operator>.</operator><name>audmode</name></name> <operator>=</operator> <name>V4L2_TUNER_MODE_MONO</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_S_TUNER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tuner</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot set tuner %"</literal><name>PRIu32</name><literal type="string">" audio mode: %s"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"tuner %"</literal><name>PRIu32</name><literal type="string">" audio mode %u set"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>tuner</name><operator>.</operator><name>audmode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>freq</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name><literal type="string">"tuner-frequency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>freq</name> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_frequency</name></name></type> <name>frequency</name> <init>= <expr><block>{
<expr><operator>.</operator><name>tuner</name> <operator>=</operator> <name>idx</name></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>tuner</name><operator>.</operator><name>type</name></name></expr>,
<expr><operator>.</operator><name>frequency</name> <operator>=</operator> <name>freq</name> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">125</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_S_FREQUENCY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frequency</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot tune tuner %"</literal><name>PRIu32</name>
<literal type="string">" to frequency %u %sHz: %s"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>mult</name></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"tuner %"</literal><name>PRIu32</name><literal type="string">" tuned to frequency %"</literal><name>PRIu32</name><literal type="string">" %sHz"</literal></expr></argument>,
<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>mult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"tuner not tuned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ResetCrop</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_cropcap</name></name></type> <name>cropcap</name> <init>= <expr><block>{ <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr> }</block></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_CROPCAP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cropcap</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot get cropping properties: %s"</literal></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_crop</name></name></type> <name>crop</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>,
<expr><operator>.</operator><name>c</name> <operator>=</operator> <name><name>cropcap</name><operator>.</operator><name>defrect</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_S_CROP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crop</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot reset cropping limits: %s"</literal></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>SetupInput</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>v4l2_std_id</name> <modifier>*</modifier></type><name>std</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_input</name></name></type> <name>input</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>input</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name><literal type="string">"input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_ENUMINPUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"invalid video input %"</literal><name>PRIu32</name><literal type="string">": %s"</literal></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>index</name></name></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>typename</name> <init>= <expr><literal type="string">"unknown"</literal></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>input</name><operator>.</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>V4L2_INPUT_TYPE_TUNER</name></expr>:</case>
<expr_stmt><expr><name>typename</name> <operator>=</operator> <literal type="string">"tuner"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V4L2_INPUT_TYPE_CAMERA</name></expr>:</case>
<expr_stmt><expr><name>typename</name> <operator>=</operator> <literal type="string">"camera"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"video input %s (%"</literal><name>PRIu32</name><literal type="string">") is %s"</literal></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>name</name></name></expr></argument>,
<argument><expr><name><name>input</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name>typename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_S_INPUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>input</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot select input %"</literal><name>PRIu32</name><literal type="string">": %s"</literal></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>index</name></name></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"selected input %"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetupStandard</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>std</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>input</name><operator>.</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>V4L2_INPUT_TYPE_TUNER</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"tuning required: tuner %"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>tuner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetupTuner</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>tuner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V4L2_INPUT_TYPE_CAMERA</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"no tuning required (analog baseband input)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"unknown input tuning type %"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break> 
</block_content>}</block></switch>

<expr_stmt><expr><call><name>SetupAudio</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>fcmp</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>v4l2_fract</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>v4l2_fract</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>numerator</name></name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>denominator</name></name>
<operator>-</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>numerator</name></name> <operator>*</operator> <name><name>a</name><operator>-&gt;</operator><name>denominator</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>v4l2_fract</name></name></type> <name>infinity</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>v4l2_fract</name></name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>









<function><type><specifier>static</specifier> <name>int</name></type> <name>FindMaxRate</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>v4l2_format</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>v4l2_fract</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>min_it</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>v4l2_fract</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>it</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_frmivalenum</name></name></type> <name>fie</name> <init>= <expr><block>{
<expr><operator>.</operator><name>pixel_format</name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>pixelformat</name></name></expr>,
<expr><operator>.</operator><name>width</name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>width</name></name></expr>,
<expr><operator>.</operator><name>height</name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>height</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_ENUM_FRAMEINTERVALS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fie</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" unknown frame intervals: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_format</name></name></type> <name>dummy_fmt</name> <init>= <expr><operator>*</operator><name>fmt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_streamparm</name></name></type> <name>parm</name> <init>= <expr><block>{ <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_S_FMT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy_fmt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_G_PARM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parm</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>it</name> <operator>=</operator> <name>infinity</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>it</name> <operator>=</operator> <name><name>parm</name><operator>.</operator><name>parm</name><operator>.</operator><name>capture</name><operator>.</operator><name>timeperframe</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" %s frame interval: %"</literal><name>PRIu32</name><literal type="string">"/%"</literal><name>PRIu32</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>parm</name><operator>.</operator><name>parm</name><operator>.</operator><name>capture</name><operator>.</operator><name>capability</name></name> <operator>&amp;</operator> <name>V4L2_CAP_TIMEPERFRAME</name><operator>)</operator></expr>
?</condition><then> <expr><literal type="string">"default"</literal></expr> </then><else>: <expr><literal type="string">"constant"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>numerator</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>denominator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name><name>fie</name><operator>.</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>V4L2_FRMIVAL_TYPE_DISCRETE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>it</name> <operator>=</operator> <name>infinity</name></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fcmp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>fie</name><operator>.</operator><name>discrete</name></name></expr></argument>, <argument><expr><name>min_it</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>fcmp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>fie</name><operator>.</operator><name>discrete</name></name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>it</name> <operator>=</operator> <name><name>fie</name><operator>.</operator><name>discrete</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fie</name><operator>.</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_ENUM_FRAMEINTERVALS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fie</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" %s frame interval: %"</literal><name>PRIu32</name><literal type="string">"/%"</literal><name>PRIu32</name></expr></argument>,
<argument><expr><literal type="string">"discrete"</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>numerator</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>denominator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>V4L2_FRMIVAL_TYPE_STEPWISE</name></expr>:</case>
<case>case <expr><name>V4L2_FRMIVAL_TYPE_CONTINUOUS</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" frame intervals from %"</literal><name>PRIu32</name><literal type="string">"/%"</literal><name>PRIu32</name>
<literal type="string">" to %"</literal><name>PRIu32</name><literal type="string">"/%"</literal><name>PRIu32</name><literal type="string">" supported"</literal></expr></argument>,
<argument><expr><name><name>fie</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>min</name><operator>.</operator><name>numerator</name></name></expr></argument>, <argument><expr><name><name>fie</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>min</name><operator>.</operator><name>denominator</name></name></expr></argument>,
<argument><expr><name><name>fie</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>max</name><operator>.</operator><name>numerator</name></name></expr></argument>, <argument><expr><name><name>fie</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>max</name><operator>.</operator><name>denominator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fie</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>V4L2_FRMIVAL_TYPE_STEPWISE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" with %"</literal><name>PRIu32</name><literal type="string">"/%"</literal><name>PRIu32</name><literal type="string">" step"</literal></expr></argument>,
<argument><expr><name><name>fie</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>step</name><operator>.</operator><name>numerator</name></name></expr></argument>,
<argument><expr><name><name>fie</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>step</name><operator>.</operator><name>denominator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fcmp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>fie</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>max</name></name></expr></argument>, <argument><expr><name>min_it</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>it</name> <operator>=</operator> <name>infinity</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fcmp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>fie</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>min</name></name></expr></argument>, <argument><expr><name>min_it</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>it</name> <operator>=</operator> <name><name>fie</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>min</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fie</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>V4L2_FRMIVAL_TYPE_CONTINUOUS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>it</name> <operator>=</operator> <operator>*</operator><name>min_it</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>numerator</name></name> <operator>*=</operator> <name><name>fie</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>step</name><operator>.</operator><name>denominator</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>denominator</name></name> <operator>*=</operator> <name><name>fie</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>step</name><operator>.</operator><name>denominator</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>fcmp</name> <argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>min_it</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>numerator</name></name> <operator>+=</operator> <name><name>fie</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>step</name><operator>.</operator><name>numerator</name></name></expr>;</expr_stmt></block_content></block></while>
<break>break;</break>
</block_content>}</block></switch></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SetupFormat</name></cpp:undef>







<function><type><name>int</name></type> <name>SetupFormat</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>fourcc</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>v4l2_format</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>v4l2_streamparm</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>parm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>fmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>parm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>parm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parm</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_G_FMT</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot get default format: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>pixelformat</name></name> <operator>=</operator> <name>fourcc</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_frmsizeenum</name></name></type> <name>fse</name> <init>= <expr><block>{
<expr><operator>.</operator><name>pixel_format</name> <operator>=</operator> <name>fourcc</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_fract</name></name></type> <name>best_it</name> <init>= <expr><name>infinity</name></expr></init></decl>, <decl><type ref="prev"/><name>min_it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>best_area</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_InheritURational</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>min_it</name><operator>.</operator><name>denominator</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>min_it</name><operator>.</operator><name>numerator</name></name></expr></argument>,
<argument><expr><name>CFG_PREFIX</name><literal type="string">"fps"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" requested frame internal: %"</literal><name>PRIu32</name><literal type="string">"/%"</literal><name>PRIu32</name></expr></argument>,
<argument><expr><name><name>min_it</name><operator>.</operator><name>numerator</name></name></expr></argument>, <argument><expr><name><name>min_it</name><operator>.</operator><name>denominator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>min_it</name> <operator>=</operator> <name>zero</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name><literal type="string">"width"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name><literal type="string">"height"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" requested frame size: %"</literal><name>PRIu32</name><literal type="string">"x%"</literal><name>PRIu32</name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FindMaxRate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_ENUM_FRAMESIZES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fse</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" unknown frame sizes: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" current frame size: %"</literal><name>PRIu32</name><literal type="string">"x%"</literal><name>PRIu32</name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FindMaxRate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name><name>fse</name><operator>.</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>V4L2_FRMSIZE_TYPE_DISCRETE</name></expr>:</case>
<do>do
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_fract</name></name></type> <name>cur_it</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" frame size %"</literal><name>PRIu32</name><literal type="string">"x%"</literal><name>PRIu32</name></expr></argument>,
<argument><expr><name><name>fse</name><operator>.</operator><name>discrete</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>fse</name><operator>.</operator><name>discrete</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FindMaxRate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>c</name> <init>= <expr><call><name>fcmp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cur_it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_it</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>area</name> <init>= <expr><name><name>fse</name><operator>.</operator><name>discrete</name><operator>.</operator><name>width</name></name> <operator>*</operator> <name><name>fse</name><operator>.</operator><name>discrete</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>area</name> <operator>&gt;</operator> <name>best_area</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>best_it</name> <operator>=</operator> <name>cur_it</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_area</name> <operator>=</operator> <name>area</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>fse</name><operator>.</operator><name>discrete</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>fse</name><operator>.</operator><name>discrete</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fse</name><operator>.</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_ENUM_FRAMESIZES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fse</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" best discrete frame size: %"</literal><name>PRIu32</name><literal type="string">"x%"</literal><name>PRIu32</name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>V4L2_FRMSIZE_TYPE_STEPWISE</name></expr>:</case>
<case>case <expr><name>V4L2_FRMSIZE_TYPE_CONTINUOUS</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" frame sizes from %"</literal><name>PRIu32</name><literal type="string">"x%"</literal><name>PRIu32</name><literal type="string">" to "</literal>
<literal type="string">"%"</literal><name>PRIu32</name><literal type="string">"x%"</literal><name>PRIu32</name><literal type="string">" supported"</literal></expr></argument>,
<argument><expr><name><name>fse</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>min_width</name></name></expr></argument>, <argument><expr><name><name>fse</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>min_height</name></name></expr></argument>,
<argument><expr><name><name>fse</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>max_width</name></name></expr></argument>, <argument><expr><name><name>fse</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>max_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fse</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>V4L2_FRMSIZE_TYPE_STEPWISE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" with %"</literal><name>PRIu32</name><literal type="string">"x%"</literal><name>PRIu32</name><literal type="string">" steps"</literal></expr></argument>,
<argument><expr><name><name>fse</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>step_width</name></name></expr></argument>, <argument><expr><name><name>fse</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>step_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>width</name> <operator>=</operator> <name><name>fse</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>min_width</name></name></expr>;</init>
<condition><expr><name>width</name> <operator>&lt;=</operator> <name><name>fse</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>max_width</name></name></expr>;</condition>
<incr><expr><name>width</name> <operator>+=</operator> <name><name>fse</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>step_width</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>height</name> <operator>=</operator> <name><name>fse</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>min_height</name></name></expr>;</init>
<condition><expr><name>height</name> <operator>&lt;=</operator> <name><name>fse</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>max_height</name></name></expr>;</condition>
<incr><expr><name>height</name> <operator>+=</operator> <name><name>fse</name><operator>.</operator><name>stepwise</name><operator>.</operator><name>step_height</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_fract</name></name></type> <name>cur_it</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FindMaxRate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>c</name> <init>= <expr><call><name>fcmp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cur_it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_it</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>area</name> <init>= <expr><name>width</name> <operator>*</operator> <name>height</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>area</name> <operator>&gt;</operator> <name>best_area</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>best_it</name> <operator>=</operator> <name>cur_it</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_area</name> <operator>=</operator> <name>area</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for></block_content></block></for>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" best frame size: %"</literal><name>PRIu32</name><literal type="string">"x%"</literal><name>PRIu32</name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_S_FMT</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot set format: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_G_PARM</name></expr></argument>, <argument><expr><name>parm</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot get streaming parameters: %s"</literal></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>parm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>parm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parm</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>parm</name><operator>-&gt;</operator><name>parm</name><operator>.</operator><name>capture</name><operator>.</operator><name>capturemode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>parm</name><operator>-&gt;</operator><name>parm</name><operator>.</operator><name>capture</name><operator>.</operator><name>extendedmode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>best_it</name><operator>.</operator><name>denominator</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>parm</name><operator>-&gt;</operator><name>parm</name><operator>.</operator><name>capture</name><operator>.</operator><name>timeperframe</name></name> <operator>=</operator> <name>best_it</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_S_PARM</name></expr></argument>, <argument><expr><name>parm</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot set streaming parameters: %s"</literal></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ResetCrop</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type> <name>GetBufferPTS</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>v4l2_buffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>V4L2_BUF_FLAG_TIMESTAMP_MASK</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC</name></expr>:</case>
<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>vlc_tick_from_timeval</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>V4L2_BUF_FLAG_TIMESTAMP_UNKNOWN</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>vlc_tick_now</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>pts</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>block_t</name> <modifier>*</modifier></type><name>GrabVideo</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>buffer_t</name></name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>bufv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_buffer</name></name></type> <name>buf</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>,
<expr><operator>.</operator><name>memory</name> <operator>=</operator> <name>V4L2_MEMORY_MMAP</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_DQBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name>errno</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EAGAIN</name></expr>:</case>
<return>return <expr><name>NULL</name></expr>;</return>
<case>case <expr><name>EIO</name></expr>:</case>


<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"dequeue error: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_Alloc</name> <argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>bytesused</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>block</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>GetBufferPTS</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>bufv</name><index>[<expr><name><name>buf</name><operator>.</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>bytesused</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_QBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"queue error: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>block</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>StartUserPtr</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_requestbuffers</name></name></type> <name>reqbuf</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>,
<expr><operator>.</operator><name>memory</name> <operator>=</operator> <name>V4L2_MEMORY_USERPTR</name></expr>,
<expr><operator>.</operator><name>count</name> <operator>=</operator> <literal type="number">2</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_REQBUFS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reqbuf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot reserve user buffers: %s"</literal></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_STREAMON</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>reqbuf</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot start streaming: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name><name>struct</name> <name>buffer_t</name></name> <modifier>*</modifier></type><name>StartMmap</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_requestbuffers</name></name></type> <name>req</name> <init>= <expr><block>{
<expr><operator>.</operator><name>count</name> <operator>=</operator> <operator>*</operator><name>n</name></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>,
<expr><operator>.</operator><name>memory</name> <operator>=</operator> <name>V4L2_MEMORY_MMAP</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_REQBUFS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate buffers: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>count</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate enough buffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>buffer_t</name></name> <modifier>*</modifier></type><name>bufv</name> <init>= <expr><call><name>vlc_alloc</name> <argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>bufv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>bufv</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bufc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>bufc</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>count</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_buffer</name></name></type> <name>buf</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>,
<expr><operator>.</operator><name>memory</name> <operator>=</operator> <name>V4L2_MEMORY_MMAP</name></expr>,
<expr><operator>.</operator><name>index</name> <operator>=</operator> <name>bufc</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_QUERYBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot query buffer %"</literal><name>PRIu32</name><literal type="string">": %s"</literal></expr></argument>, <argument><expr><name>bufc</name></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bufv</name><index>[<expr><name>bufc</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <call><name>v4l2_mmap</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>,
<argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>m</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bufv</name><index>[<expr><name>bufc</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot map buffer %"</literal><name>PRIu32</name><literal type="string">": %s"</literal></expr></argument>, <argument><expr><name>bufc</name></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bufv</name><index>[<expr><name>bufc</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bufc</name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_QBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot queue buffer %"</literal><name>PRIu32</name><literal type="string">": %s"</literal></expr></argument>, <argument><expr><name>bufc</name></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name><name>enum</name> <name>v4l2_buf_type</name></name></type> <name>type</name> <init>= <expr><name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_STREAMON</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot start streaming: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>n</name> <operator>=</operator> <name>bufc</name></expr>;</expr_stmt>
<return>return <expr><name>bufv</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>StopMmap</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>bufv</name></expr></argument>, <argument><expr><name>bufc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>StopMmap</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>buffer_t</name></name> <modifier>*</modifier></type><name>bufv</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bufc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>v4l2_buf_type</name></name></type> <name>type</name> <init>= <expr><name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_STREAMOFF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bufc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>v4l2_munmap</name> <argument_list>(<argument><expr><name><name>bufv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name><name>bufv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>bufv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
