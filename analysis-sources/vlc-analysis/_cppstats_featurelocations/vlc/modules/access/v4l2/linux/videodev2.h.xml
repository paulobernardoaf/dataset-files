<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\v4l2\linux\videodev2.h">






















































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_UAPI__LINUX_VIDEODEV2_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UAPI__LINUX_VIDEODEV2_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__KERNEL__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/v4l2-common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/v4l2-controls.h&gt;</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_MAX_FRAME</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_MAX_PLANES</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v4l2_fourcc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>((__u32)(a) | ((__u32)(b) &lt;&lt; 8) | ((__u32)(c) &lt;&lt; 16) | ((__u32)(d) &lt;&lt; 24))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v4l2_fourcc_be</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v4l2_fourcc(a, b, c, d) | (1 &lt;&lt; 31))</cpp:value></cpp:define>




<enum>enum <name>v4l2_field</name> <block>{
<decl><name>V4L2_FIELD_ANY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 



<decl><name>V4L2_FIELD_NONE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>V4L2_FIELD_TOP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>V4L2_FIELD_BOTTOM</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 
<decl><name>V4L2_FIELD_INTERLACED</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 
<decl><name>V4L2_FIELD_SEQ_TB</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, 

<decl><name>V4L2_FIELD_SEQ_BT</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>, 
<decl><name>V4L2_FIELD_ALTERNATE</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>, 

<decl><name>V4L2_FIELD_INTERLACED_TB</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 


<decl><name>V4L2_FIELD_INTERLACED_BT</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>, 


}</block>;</enum>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FIELD_HAS_TOP</name><parameter_list>(<parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((field) == V4L2_FIELD_TOP ||(field) == V4L2_FIELD_INTERLACED ||(field) == V4L2_FIELD_INTERLACED_TB ||(field) == V4L2_FIELD_INTERLACED_BT ||(field) == V4L2_FIELD_SEQ_TB ||(field) == V4L2_FIELD_SEQ_BT)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FIELD_HAS_BOTTOM</name><parameter_list>(<parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((field) == V4L2_FIELD_BOTTOM ||(field) == V4L2_FIELD_INTERLACED ||(field) == V4L2_FIELD_INTERLACED_TB ||(field) == V4L2_FIELD_INTERLACED_BT ||(field) == V4L2_FIELD_SEQ_TB ||(field) == V4L2_FIELD_SEQ_BT)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FIELD_HAS_BOTH</name><parameter_list>(<parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((field) == V4L2_FIELD_INTERLACED ||(field) == V4L2_FIELD_INTERLACED_TB ||(field) == V4L2_FIELD_INTERLACED_BT ||(field) == V4L2_FIELD_SEQ_TB ||(field) == V4L2_FIELD_SEQ_BT)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FIELD_HAS_T_OR_B</name><parameter_list>(<parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((field) == V4L2_FIELD_BOTTOM ||(field) == V4L2_FIELD_TOP ||(field) == V4L2_FIELD_ALTERNATE)</cpp:value></cpp:define>




<enum>enum <name>v4l2_buf_type</name> <block>{
<decl><name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>V4L2_BUF_TYPE_VIDEO_OUTPUT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>V4L2_BUF_TYPE_VIDEO_OVERLAY</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>V4L2_BUF_TYPE_VBI_CAPTURE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>V4L2_BUF_TYPE_VBI_OUTPUT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>V4L2_BUF_TYPE_SLICED_VBI_CAPTURE</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>V4L2_BUF_TYPE_SLICED_VBI_OUTPUT</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl><name>V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl><name>V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>V4L2_BUF_TYPE_SDR_CAPTURE</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>V4L2_BUF_TYPE_SDR_OUTPUT</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,

<decl><name>V4L2_BUF_TYPE_PRIVATE</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>,
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TYPE_IS_MULTIPLANAR</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type) == V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE || (type) == V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TYPE_IS_OUTPUT</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type) == V4L2_BUF_TYPE_VIDEO_OUTPUT || (type) == V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE || (type) == V4L2_BUF_TYPE_VIDEO_OVERLAY || (type) == V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY || (type) == V4L2_BUF_TYPE_VBI_OUTPUT || (type) == V4L2_BUF_TYPE_SLICED_VBI_OUTPUT || (type) == V4L2_BUF_TYPE_SDR_OUTPUT)</cpp:value></cpp:define>








<enum>enum <name>v4l2_tuner_type</name> <block>{
<decl><name>V4L2_TUNER_RADIO</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>V4L2_TUNER_ANALOG_TV</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>V4L2_TUNER_DIGITAL_TV</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>V4L2_TUNER_SDR</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>V4L2_TUNER_RF</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
}</block>;</enum>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_ADC</name></cpp:macro> <cpp:value>V4L2_TUNER_SDR</cpp:value></cpp:define>

<enum>enum <name>v4l2_memory</name> <block>{
<decl><name>V4L2_MEMORY_MMAP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>V4L2_MEMORY_USERPTR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>V4L2_MEMORY_OVERLAY</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>V4L2_MEMORY_DMABUF</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
}</block>;</enum>


<enum>enum <name>v4l2_colorspace</name> <block>{




<decl><name>V4L2_COLORSPACE_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>V4L2_COLORSPACE_SMPTE170M</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,


<decl><name>V4L2_COLORSPACE_SMPTE240M</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,


<decl><name>V4L2_COLORSPACE_REC709</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,





<decl><name>V4L2_COLORSPACE_BT878</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,





<decl><name>V4L2_COLORSPACE_470_SYSTEM_M</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,






<decl><name>V4L2_COLORSPACE_470_SYSTEM_BG</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,





<decl><name>V4L2_COLORSPACE_JPEG</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,


<decl><name>V4L2_COLORSPACE_SRGB</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,


<decl><name>V4L2_COLORSPACE_ADOBERGB</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,


<decl><name>V4L2_COLORSPACE_BT2020</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,


<decl><name>V4L2_COLORSPACE_RAW</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,


<decl><name>V4L2_COLORSPACE_DCI_P3</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
}</block>;</enum>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_MAP_COLORSPACE_DEFAULT</name><parameter_list>(<parameter><type><name>is_sdtv</name></type></parameter>, <parameter><type><name>is_hdtv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((is_sdtv) ? V4L2_COLORSPACE_SMPTE170M : ((is_hdtv) ? V4L2_COLORSPACE_REC709 : V4L2_COLORSPACE_SRGB))</cpp:value></cpp:define>



<enum>enum <name>v4l2_xfer_func</name> <block>{


















<decl><name>V4L2_XFER_FUNC_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>V4L2_XFER_FUNC_709</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>V4L2_XFER_FUNC_SRGB</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>V4L2_XFER_FUNC_ADOBERGB</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>V4L2_XFER_FUNC_SMPTE240M</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>V4L2_XFER_FUNC_NONE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>V4L2_XFER_FUNC_DCI_P3</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>V4L2_XFER_FUNC_SMPTE2084</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
}</block>;</enum>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_MAP_XFER_FUNC_DEFAULT</name><parameter_list>(<parameter><type><name>colsp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((colsp) == V4L2_COLORSPACE_ADOBERGB ? V4L2_XFER_FUNC_ADOBERGB : ((colsp) == V4L2_COLORSPACE_SMPTE240M ? V4L2_XFER_FUNC_SMPTE240M : ((colsp) == V4L2_COLORSPACE_DCI_P3 ? V4L2_XFER_FUNC_DCI_P3 : ((colsp) == V4L2_COLORSPACE_RAW ? V4L2_XFER_FUNC_NONE : ((colsp) == V4L2_COLORSPACE_SRGB || (colsp) == V4L2_COLORSPACE_JPEG ? V4L2_XFER_FUNC_SRGB : V4L2_XFER_FUNC_709)))))</cpp:value></cpp:define>







<enum>enum <name>v4l2_ycbcr_encoding</name> <block>{
















<decl><name>V4L2_YCBCR_ENC_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>V4L2_YCBCR_ENC_601</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,


<decl><name>V4L2_YCBCR_ENC_709</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,


<decl><name>V4L2_YCBCR_ENC_XV601</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,


<decl><name>V4L2_YCBCR_ENC_XV709</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,


<decl><name>V4L2_YCBCR_ENC_SYCC</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,


<decl><name>V4L2_YCBCR_ENC_BT2020</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,


<decl><name>V4L2_YCBCR_ENC_BT2020_CONST_LUM</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,


<decl><name>V4L2_YCBCR_ENC_SMPTE240M</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
}</block>;</enum>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_MAP_YCBCR_ENC_DEFAULT</name><parameter_list>(<parameter><type><name>colsp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((colsp) == V4L2_COLORSPACE_REC709 || (colsp) == V4L2_COLORSPACE_DCI_P3) ? V4L2_YCBCR_ENC_709 : ((colsp) == V4L2_COLORSPACE_BT2020 ? V4L2_YCBCR_ENC_BT2020 : ((colsp) == V4L2_COLORSPACE_SMPTE240M ? V4L2_YCBCR_ENC_SMPTE240M : V4L2_YCBCR_ENC_601)))</cpp:value></cpp:define>






<enum>enum <name>v4l2_quantization</name> <block>{






<decl><name>V4L2_QUANTIZATION_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>V4L2_QUANTIZATION_FULL_RANGE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>V4L2_QUANTIZATION_LIM_RANGE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
}</block>;</enum>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_MAP_QUANTIZATION_DEFAULT</name><parameter_list>(<parameter><type><name>is_rgb</name></type></parameter>, <parameter><type><name>colsp</name></type></parameter>, <parameter><type><name>ycbcr_enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((is_rgb) &amp;&amp; (colsp) == V4L2_COLORSPACE_BT2020) ? V4L2_QUANTIZATION_LIM_RANGE : (((is_rgb) || (ycbcr_enc) == V4L2_YCBCR_ENC_XV601 || (ycbcr_enc) == V4L2_YCBCR_ENC_XV709 || (colsp) == V4L2_COLORSPACE_JPEG) ? V4L2_QUANTIZATION_FULL_RANGE : V4L2_QUANTIZATION_LIM_RANGE))</cpp:value></cpp:define>





<enum>enum <name>v4l2_priority</name> <block>{
<decl><name>V4L2_PRIORITY_UNSET</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>V4L2_PRIORITY_BACKGROUND</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>V4L2_PRIORITY_INTERACTIVE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>V4L2_PRIORITY_RECORD</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>V4L2_PRIORITY_DEFAULT</name> <init>= <expr><name>V4L2_PRIORITY_INTERACTIVE</name></expr></init></decl>,
}</block>;</enum>

<struct>struct <name>v4l2_rect</name> <block>{
<decl_stmt><decl><type><name>__s32</name></type> <name>left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__s32</name></type> <name>top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>height</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>v4l2_fract</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>numerator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>denominator</name></decl>;</decl_stmt>
}</block>;</struct>












<struct>struct <name>v4l2_capability</name> <block>{
<decl_stmt><decl><type><name>__u8</name></type> <name><name>driver</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name><name>card</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name><name>bus_info</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>capabilities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>device_caps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_VIDEO_CAPTURE</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_VIDEO_OUTPUT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_VIDEO_OVERLAY</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_VBI_CAPTURE</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_VBI_OUTPUT</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_SLICED_VBI_CAPTURE</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_SLICED_VBI_OUTPUT</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_RDS_CAPTURE</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_VIDEO_OUTPUT_OVERLAY</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_HW_FREQ_SEEK</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_RDS_OUTPUT</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_VIDEO_CAPTURE_MPLANE</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_VIDEO_OUTPUT_MPLANE</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_VIDEO_M2M_MPLANE</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_VIDEO_M2M</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_TUNER</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_AUDIO</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_RADIO</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_MODULATOR</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_SDR_CAPTURE</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_EXT_PIX_FORMAT</name></cpp:macro> <cpp:value>0x00200000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_SDR_OUTPUT</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_READWRITE</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_ASYNCIO</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_STREAMING</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_DEVICE_CAPS</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define> 




<struct>struct <name>v4l2_pix_format</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>pixelformat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>field</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>bytesperline</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>sizeimage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>colorspace</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>priv</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>ycbcr_enc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>quantization</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>xfer_func</name></decl>;</decl_stmt> 
}</block>;</struct>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_RGB332</name></cpp:macro> <cpp:value>v4l2_fourcc('R', 'G', 'B', '1')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_RGB444</name></cpp:macro> <cpp:value>v4l2_fourcc('R', '4', '4', '4')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_ARGB444</name></cpp:macro> <cpp:value>v4l2_fourcc('A', 'R', '1', '2')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_XRGB444</name></cpp:macro> <cpp:value>v4l2_fourcc('X', 'R', '1', '2')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_RGB555</name></cpp:macro> <cpp:value>v4l2_fourcc('R', 'G', 'B', 'O')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_ARGB555</name></cpp:macro> <cpp:value>v4l2_fourcc('A', 'R', '1', '5')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_XRGB555</name></cpp:macro> <cpp:value>v4l2_fourcc('X', 'R', '1', '5')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_RGB565</name></cpp:macro> <cpp:value>v4l2_fourcc('R', 'G', 'B', 'P')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_RGB555X</name></cpp:macro> <cpp:value>v4l2_fourcc('R', 'G', 'B', 'Q')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_ARGB555X</name></cpp:macro> <cpp:value>v4l2_fourcc_be('A', 'R', '1', '5')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_XRGB555X</name></cpp:macro> <cpp:value>v4l2_fourcc_be('X', 'R', '1', '5')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_RGB565X</name></cpp:macro> <cpp:value>v4l2_fourcc('R', 'G', 'B', 'R')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_BGR666</name></cpp:macro> <cpp:value>v4l2_fourcc('B', 'G', 'R', 'H')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_BGR24</name></cpp:macro> <cpp:value>v4l2_fourcc('B', 'G', 'R', '3')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_RGB24</name></cpp:macro> <cpp:value>v4l2_fourcc('R', 'G', 'B', '3')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_BGR32</name></cpp:macro> <cpp:value>v4l2_fourcc('B', 'G', 'R', '4')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_ABGR32</name></cpp:macro> <cpp:value>v4l2_fourcc('A', 'R', '2', '4')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_XBGR32</name></cpp:macro> <cpp:value>v4l2_fourcc('X', 'R', '2', '4')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_RGB32</name></cpp:macro> <cpp:value>v4l2_fourcc('R', 'G', 'B', '4')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_ARGB32</name></cpp:macro> <cpp:value>v4l2_fourcc('B', 'A', '2', '4')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_XRGB32</name></cpp:macro> <cpp:value>v4l2_fourcc('B', 'X', '2', '4')</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_GREY</name></cpp:macro> <cpp:value>v4l2_fourcc('G', 'R', 'E', 'Y')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_Y4</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', '0', '4', ' ')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_Y6</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', '0', '6', ' ')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_Y10</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', '1', '0', ' ')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_Y12</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', '1', '2', ' ')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_Y16</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', '1', '6', ' ')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_Y16_BE</name></cpp:macro> <cpp:value>v4l2_fourcc_be('Y', '1', '6', ' ')</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_Y10BPACK</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', '1', '0', 'B')</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_PAL8</name></cpp:macro> <cpp:value>v4l2_fourcc('P', 'A', 'L', '8')</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_UV8</name></cpp:macro> <cpp:value>v4l2_fourcc('U', 'V', '8', ' ')</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_YVU410</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', 'V', 'U', '9')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_YVU420</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', 'V', '1', '2')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_YUYV</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', 'U', 'Y', 'V')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_YYUV</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', 'Y', 'U', 'V')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_YVYU</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', 'V', 'Y', 'U')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_UYVY</name></cpp:macro> <cpp:value>v4l2_fourcc('U', 'Y', 'V', 'Y')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_VYUY</name></cpp:macro> <cpp:value>v4l2_fourcc('V', 'Y', 'U', 'Y')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_YUV422P</name></cpp:macro> <cpp:value>v4l2_fourcc('4', '2', '2', 'P')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_YUV411P</name></cpp:macro> <cpp:value>v4l2_fourcc('4', '1', '1', 'P')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_Y41P</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', '4', '1', 'P')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_YUV444</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', '4', '4', '4')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_YUV555</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', 'U', 'V', 'O')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_YUV565</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', 'U', 'V', 'P')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_YUV32</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', 'U', 'V', '4')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_YUV410</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', 'U', 'V', '9')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_YUV420</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', 'U', '1', '2')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_HI240</name></cpp:macro> <cpp:value>v4l2_fourcc('H', 'I', '2', '4')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_HM12</name></cpp:macro> <cpp:value>v4l2_fourcc('H', 'M', '1', '2')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_M420</name></cpp:macro> <cpp:value>v4l2_fourcc('M', '4', '2', '0')</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_NV12</name></cpp:macro> <cpp:value>v4l2_fourcc('N', 'V', '1', '2')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_NV21</name></cpp:macro> <cpp:value>v4l2_fourcc('N', 'V', '2', '1')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_NV16</name></cpp:macro> <cpp:value>v4l2_fourcc('N', 'V', '1', '6')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_NV61</name></cpp:macro> <cpp:value>v4l2_fourcc('N', 'V', '6', '1')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_NV24</name></cpp:macro> <cpp:value>v4l2_fourcc('N', 'V', '2', '4')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_NV42</name></cpp:macro> <cpp:value>v4l2_fourcc('N', 'V', '4', '2')</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_NV12M</name></cpp:macro> <cpp:value>v4l2_fourcc('N', 'M', '1', '2')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_NV21M</name></cpp:macro> <cpp:value>v4l2_fourcc('N', 'M', '2', '1')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_NV16M</name></cpp:macro> <cpp:value>v4l2_fourcc('N', 'M', '1', '6')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_NV61M</name></cpp:macro> <cpp:value>v4l2_fourcc('N', 'M', '6', '1')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_NV12MT</name></cpp:macro> <cpp:value>v4l2_fourcc('T', 'M', '1', '2')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_NV12MT_16X16</name></cpp:macro> <cpp:value>v4l2_fourcc('V', 'M', '1', '2')</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_YUV420M</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', 'M', '1', '2')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_YVU420M</name></cpp:macro> <cpp:value>v4l2_fourcc('Y', 'M', '2', '1')</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SBGGR8</name></cpp:macro> <cpp:value>v4l2_fourcc('B', 'A', '8', '1')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SGBRG8</name></cpp:macro> <cpp:value>v4l2_fourcc('G', 'B', 'R', 'G')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SGRBG8</name></cpp:macro> <cpp:value>v4l2_fourcc('G', 'R', 'B', 'G')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SRGGB8</name></cpp:macro> <cpp:value>v4l2_fourcc('R', 'G', 'G', 'B')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SBGGR10</name></cpp:macro> <cpp:value>v4l2_fourcc('B', 'G', '1', '0')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SGBRG10</name></cpp:macro> <cpp:value>v4l2_fourcc('G', 'B', '1', '0')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SGRBG10</name></cpp:macro> <cpp:value>v4l2_fourcc('B', 'A', '1', '0')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SRGGB10</name></cpp:macro> <cpp:value>v4l2_fourcc('R', 'G', '1', '0')</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SBGGR10P</name></cpp:macro> <cpp:value>v4l2_fourcc('p', 'B', 'A', 'A')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SGBRG10P</name></cpp:macro> <cpp:value>v4l2_fourcc('p', 'G', 'A', 'A')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SGRBG10P</name></cpp:macro> <cpp:value>v4l2_fourcc('p', 'g', 'A', 'A')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SRGGB10P</name></cpp:macro> <cpp:value>v4l2_fourcc('p', 'R', 'A', 'A')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SBGGR10ALAW8</name></cpp:macro> <cpp:value>v4l2_fourcc('a', 'B', 'A', '8')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SGBRG10ALAW8</name></cpp:macro> <cpp:value>v4l2_fourcc('a', 'G', 'A', '8')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SGRBG10ALAW8</name></cpp:macro> <cpp:value>v4l2_fourcc('a', 'g', 'A', '8')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SRGGB10ALAW8</name></cpp:macro> <cpp:value>v4l2_fourcc('a', 'R', 'A', '8')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SBGGR10DPCM8</name></cpp:macro> <cpp:value>v4l2_fourcc('b', 'B', 'A', '8')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SGBRG10DPCM8</name></cpp:macro> <cpp:value>v4l2_fourcc('b', 'G', 'A', '8')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SGRBG10DPCM8</name></cpp:macro> <cpp:value>v4l2_fourcc('B', 'D', '1', '0')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SRGGB10DPCM8</name></cpp:macro> <cpp:value>v4l2_fourcc('b', 'R', 'A', '8')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SBGGR12</name></cpp:macro> <cpp:value>v4l2_fourcc('B', 'G', '1', '2')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SGBRG12</name></cpp:macro> <cpp:value>v4l2_fourcc('G', 'B', '1', '2')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SGRBG12</name></cpp:macro> <cpp:value>v4l2_fourcc('B', 'A', '1', '2')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SRGGB12</name></cpp:macro> <cpp:value>v4l2_fourcc('R', 'G', '1', '2')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SBGGR16</name></cpp:macro> <cpp:value>v4l2_fourcc('B', 'Y', 'R', '2')</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_MJPEG</name></cpp:macro> <cpp:value>v4l2_fourcc('M', 'J', 'P', 'G')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_JPEG</name></cpp:macro> <cpp:value>v4l2_fourcc('J', 'P', 'E', 'G')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_DV</name></cpp:macro> <cpp:value>v4l2_fourcc('d', 'v', 's', 'd')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_MPEG</name></cpp:macro> <cpp:value>v4l2_fourcc('M', 'P', 'E', 'G')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_H264</name></cpp:macro> <cpp:value>v4l2_fourcc('H', '2', '6', '4')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_H264_NO_SC</name></cpp:macro> <cpp:value>v4l2_fourcc('A', 'V', 'C', '1')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_H264_MVC</name></cpp:macro> <cpp:value>v4l2_fourcc('M', '2', '6', '4')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_H263</name></cpp:macro> <cpp:value>v4l2_fourcc('H', '2', '6', '3')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_MPEG1</name></cpp:macro> <cpp:value>v4l2_fourcc('M', 'P', 'G', '1')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_MPEG2</name></cpp:macro> <cpp:value>v4l2_fourcc('M', 'P', 'G', '2')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_MPEG4</name></cpp:macro> <cpp:value>v4l2_fourcc('M', 'P', 'G', '4')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_XVID</name></cpp:macro> <cpp:value>v4l2_fourcc('X', 'V', 'I', 'D')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_VC1_ANNEX_G</name></cpp:macro> <cpp:value>v4l2_fourcc('V', 'C', '1', 'G')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_VC1_ANNEX_L</name></cpp:macro> <cpp:value>v4l2_fourcc('V', 'C', '1', 'L')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_VP8</name></cpp:macro> <cpp:value>v4l2_fourcc('V', 'P', '8', '0')</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_CPIA1</name></cpp:macro> <cpp:value>v4l2_fourcc('C', 'P', 'I', 'A')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_WNVA</name></cpp:macro> <cpp:value>v4l2_fourcc('W', 'N', 'V', 'A')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SN9C10X</name></cpp:macro> <cpp:value>v4l2_fourcc('S', '9', '1', '0')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SN9C20X_I420</name></cpp:macro> <cpp:value>v4l2_fourcc('S', '9', '2', '0')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_PWC1</name></cpp:macro> <cpp:value>v4l2_fourcc('P', 'W', 'C', '1')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_PWC2</name></cpp:macro> <cpp:value>v4l2_fourcc('P', 'W', 'C', '2')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_ET61X251</name></cpp:macro> <cpp:value>v4l2_fourcc('E', '6', '2', '5')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SPCA501</name></cpp:macro> <cpp:value>v4l2_fourcc('S', '5', '0', '1')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SPCA505</name></cpp:macro> <cpp:value>v4l2_fourcc('S', '5', '0', '5')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SPCA508</name></cpp:macro> <cpp:value>v4l2_fourcc('S', '5', '0', '8')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SPCA561</name></cpp:macro> <cpp:value>v4l2_fourcc('S', '5', '6', '1')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_PAC207</name></cpp:macro> <cpp:value>v4l2_fourcc('P', '2', '0', '7')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_MR97310A</name></cpp:macro> <cpp:value>v4l2_fourcc('M', '3', '1', '0')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_JL2005BCD</name></cpp:macro> <cpp:value>v4l2_fourcc('J', 'L', '2', '0')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SN9C2028</name></cpp:macro> <cpp:value>v4l2_fourcc('S', 'O', 'N', 'X')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SQ905C</name></cpp:macro> <cpp:value>v4l2_fourcc('9', '0', '5', 'C')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_PJPG</name></cpp:macro> <cpp:value>v4l2_fourcc('P', 'J', 'P', 'G')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_OV511</name></cpp:macro> <cpp:value>v4l2_fourcc('O', '5', '1', '1')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_OV518</name></cpp:macro> <cpp:value>v4l2_fourcc('O', '5', '1', '8')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_STV0680</name></cpp:macro> <cpp:value>v4l2_fourcc('S', '6', '8', '0')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_TM6000</name></cpp:macro> <cpp:value>v4l2_fourcc('T', 'M', '6', '0')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_CIT_YYVYUY</name></cpp:macro> <cpp:value>v4l2_fourcc('C', 'I', 'T', 'V')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_KONICA420</name></cpp:macro> <cpp:value>v4l2_fourcc('K', 'O', 'N', 'I')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_JPGL</name></cpp:macro> <cpp:value>v4l2_fourcc('J', 'P', 'G', 'L')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_SE401</name></cpp:macro> <cpp:value>v4l2_fourcc('S', '4', '0', '1')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_S5C_UYVY_JPG</name></cpp:macro> <cpp:value>v4l2_fourcc('S', '5', 'C', 'I')</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_SDR_FMT_CU8</name></cpp:macro> <cpp:value>v4l2_fourcc('C', 'U', '0', '8')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_SDR_FMT_CU16LE</name></cpp:macro> <cpp:value>v4l2_fourcc('C', 'U', '1', '6')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_SDR_FMT_CS8</name></cpp:macro> <cpp:value>v4l2_fourcc('C', 'S', '0', '8')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_SDR_FMT_CS14LE</name></cpp:macro> <cpp:value>v4l2_fourcc('C', 'S', '1', '4')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_SDR_FMT_RU12LE</name></cpp:macro> <cpp:value>v4l2_fourcc('R', 'U', '1', '2')</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_PRIV_MAGIC</name></cpp:macro> <cpp:value>0xfeedcafe</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_PIX_FMT_FLAG_PREMUL_ALPHA</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>




<struct>struct <name>v4l2_fmtdesc</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name><name>description</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>pixelformat</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FMT_FLAG_COMPRESSED</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FMT_FLAG_EMULATED</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>




<enum>enum <name>v4l2_frmsizetypes</name> <block>{
<decl><name>V4L2_FRMSIZE_TYPE_DISCRETE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>V4L2_FRMSIZE_TYPE_CONTINUOUS</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>V4L2_FRMSIZE_TYPE_STEPWISE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
}</block>;</enum>

<struct>struct <name>v4l2_frmsize_discrete</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>height</name></decl>;</decl_stmt> 
}</block>;</struct>

<struct>struct <name>v4l2_frmsize_stepwise</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>min_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>max_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>step_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>min_height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>max_height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>step_height</name></decl>;</decl_stmt> 
}</block>;</struct>

<struct>struct <name>v4l2_frmsizeenum</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>pixel_format</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt> 

<union>union <block>{ 
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_frmsize_discrete</name></name></type> <name>discrete</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_frmsize_stepwise</name></name></type> <name>stepwise</name></decl>;</decl_stmt>
}</block>;</union>

<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>




<enum>enum <name>v4l2_frmivaltypes</name> <block>{
<decl><name>V4L2_FRMIVAL_TYPE_DISCRETE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>V4L2_FRMIVAL_TYPE_CONTINUOUS</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>V4L2_FRMIVAL_TYPE_STEPWISE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
}</block>;</enum>

<struct>struct <name>v4l2_frmival_stepwise</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_fract</name></name></type> <name>min</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_fract</name></name></type> <name>max</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_fract</name></name></type> <name>step</name></decl>;</decl_stmt> 
}</block>;</struct>

<struct>struct <name>v4l2_frmivalenum</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>pixel_format</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt> 

<union>union <block>{ 
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_fract</name></name></type> <name>discrete</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_frmival_stepwise</name></name></type> <name>stepwise</name></decl>;</decl_stmt>
}</block>;</union>

<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<struct>struct <name>v4l2_timecode</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name>frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name>seconds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name>minutes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name>hours</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name><name>userbits</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TC_TYPE_24FPS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TC_TYPE_25FPS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TC_TYPE_30FPS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TC_TYPE_50FPS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TC_TYPE_60FPS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TC_FLAG_DROPFRAME</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TC_FLAG_COLORFRAME</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TC_USERBITS_field</name></cpp:macro> <cpp:value>0x000C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TC_USERBITS_USERDEFINED</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TC_USERBITS_8BITCHARS</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>


<struct>struct <name>v4l2_jpegcompression</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>quality</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>APPn</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>APP_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>APP_data</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>COM_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>COM_data</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>__u32</name></type> <name>jpeg_markers</name></decl>;</decl_stmt> 









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_JPEG_MARKER_DHT</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_JPEG_MARKER_DQT</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_JPEG_MARKER_DRI</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_JPEG_MARKER_COM</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_JPEG_MARKER_APP</name></cpp:macro> <cpp:value>(1&lt;&lt;7)</cpp:value></cpp:define> 

}</block>;</struct>




<struct>struct <name>v4l2_requestbuffers</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>memory</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>





















<struct>struct <name>v4l2_plane</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>bytesused</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>length</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>mem_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>userptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__s32</name></type> <name>fd</name></decl>;</decl_stmt>
}</block> <decl><name>m</name></decl>;</union>
<decl_stmt><decl><type><name>__u32</name></type> <name>data_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>































<struct>struct <name>v4l2_buffer</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>bytesused</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>field</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_timecode</name></name></type> <name>timecode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>sequence</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>__u32</name></type> <name>memory</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>userptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_plane</name></name> <modifier>*</modifier></type><name>planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__s32</name></type> <name>fd</name></decl>;</decl_stmt>
}</block> <decl><name>m</name></decl>;</union>
<decl_stmt><decl><type><name>__u32</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>reserved2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>reserved</name></decl>;</decl_stmt>
}</block>;</struct>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_MAPPED</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_QUEUED</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_DONE</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_KEYFRAME</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_PFRAME</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_BFRAME</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_ERROR</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_TIMECODE</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_PREPARED</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_NO_CACHE_INVALIDATE</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_NO_CACHE_CLEAN</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_TIMESTAMP_MASK</name></cpp:macro> <cpp:value>0x0000e000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_TIMESTAMP_UNKNOWN</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_TIMESTAMP_COPY</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_TSTAMP_SRC_MASK</name></cpp:macro> <cpp:value>0x00070000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_TSTAMP_SRC_EOF</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_TSTAMP_SRC_SOE</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BUF_FLAG_LAST</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define>



















<struct>struct <name>v4l2_exportbuffer</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>plane</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__s32</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>




<struct>struct <name>v4l2_framebuffer</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>capability</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>flags</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>pixelformat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>field</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>bytesperline</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>sizeimage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>colorspace</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>priv</name></decl>;</decl_stmt> 
}</block> <decl><name>fmt</name></decl>;</struct>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FBUF_CAP_EXTERNOVERLAY</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FBUF_CAP_CHROMAKEY</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FBUF_CAP_LIST_CLIPPING</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FBUF_CAP_BITMAP_CLIPPING</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FBUF_CAP_LOCAL_ALPHA</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FBUF_CAP_GLOBAL_ALPHA</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FBUF_CAP_LOCAL_INV_ALPHA</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FBUF_CAP_SRC_CHROMAKEY</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FBUF_FLAG_PRIMARY</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FBUF_FLAG_OVERLAY</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FBUF_FLAG_CHROMAKEY</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FBUF_FLAG_LOCAL_ALPHA</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FBUF_FLAG_GLOBAL_ALPHA</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FBUF_FLAG_LOCAL_INV_ALPHA</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FBUF_FLAG_SRC_CHROMAKEY</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>

<struct>struct <name>v4l2_clip</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_rect</name></name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_clip</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>v4l2_window</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_rect</name></name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>field</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>chromakey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_clip</name></name> <modifier>*</modifier></type><name>clips</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>clipcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name>global_alpha</name></decl>;</decl_stmt>
}</block>;</struct>




<struct>struct <name>v4l2_captureparm</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>capability</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>capturemode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_fract</name></name></type> <name>timeperframe</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>extendedmode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>readbuffers</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_MODE_HIGHQUALITY</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CAP_TIMEPERFRAME</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define> 

<struct>struct <name>v4l2_outputparm</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>capability</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>outputmode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_fract</name></name></type> <name>timeperframe</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>extendedmode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>writebuffers</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>




<struct>struct <name>v4l2_cropcap</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_rect</name></name></type> <name>bounds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_rect</name></name></type> <name>defrect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_fract</name></name></type> <name>pixelaspect</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>v4l2_crop</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_rect</name></name></type> <name>c</name></decl>;</decl_stmt>
}</block>;</struct>














<struct>struct <name>v4l2_selection</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_rect</name></name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>






<typedef>typedef <type><name>__u64</name></type> <name>v4l2_std_id</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_PAL_B</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00000001)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_PAL_B1</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00000002)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_PAL_G</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00000004)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_PAL_H</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00000008)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_PAL_I</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00000010)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_PAL_D</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00000020)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_PAL_D1</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00000040)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_PAL_K</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00000080)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_PAL_M</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00000100)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_PAL_N</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00000200)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_PAL_Nc</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00000400)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_PAL_60</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00000800)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_NTSC_M</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00001000)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_NTSC_M_JP</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00002000)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_NTSC_443</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00004000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_NTSC_M_KR</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00008000)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_SECAM_B</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00010000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_SECAM_D</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00020000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_SECAM_G</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00040000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_SECAM_H</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00080000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_SECAM_K</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00100000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_SECAM_K1</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00200000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_SECAM_L</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00400000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_SECAM_LC</name></cpp:macro> <cpp:value>((v4l2_std_id)0x00800000)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_ATSC_8_VSB</name></cpp:macro> <cpp:value>((v4l2_std_id)0x01000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_ATSC_16_VSB</name></cpp:macro> <cpp:value>((v4l2_std_id)0x02000000)</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_NTSC</name></cpp:macro> <cpp:value>(V4L2_STD_NTSC_M |V4L2_STD_NTSC_M_JP |V4L2_STD_NTSC_M_KR)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_SECAM_DK</name></cpp:macro> <cpp:value>(V4L2_STD_SECAM_D |V4L2_STD_SECAM_K |V4L2_STD_SECAM_K1)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_SECAM</name></cpp:macro> <cpp:value>(V4L2_STD_SECAM_B |V4L2_STD_SECAM_G |V4L2_STD_SECAM_H |V4L2_STD_SECAM_DK |V4L2_STD_SECAM_L |V4L2_STD_SECAM_LC)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_PAL_BG</name></cpp:macro> <cpp:value>(V4L2_STD_PAL_B |V4L2_STD_PAL_B1 |V4L2_STD_PAL_G)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_PAL_DK</name></cpp:macro> <cpp:value>(V4L2_STD_PAL_D |V4L2_STD_PAL_D1 |V4L2_STD_PAL_K)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_PAL</name></cpp:macro> <cpp:value>(V4L2_STD_PAL_BG |V4L2_STD_PAL_DK |V4L2_STD_PAL_H |V4L2_STD_PAL_I)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_B</name></cpp:macro> <cpp:value>(V4L2_STD_PAL_B |V4L2_STD_PAL_B1 |V4L2_STD_SECAM_B)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_G</name></cpp:macro> <cpp:value>(V4L2_STD_PAL_G |V4L2_STD_SECAM_G)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_H</name></cpp:macro> <cpp:value>(V4L2_STD_PAL_H |V4L2_STD_SECAM_H)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_L</name></cpp:macro> <cpp:value>(V4L2_STD_SECAM_L |V4L2_STD_SECAM_LC)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_GH</name></cpp:macro> <cpp:value>(V4L2_STD_G |V4L2_STD_H)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_DK</name></cpp:macro> <cpp:value>(V4L2_STD_PAL_DK |V4L2_STD_SECAM_DK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_BG</name></cpp:macro> <cpp:value>(V4L2_STD_B |V4L2_STD_G)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_MN</name></cpp:macro> <cpp:value>(V4L2_STD_PAL_M |V4L2_STD_PAL_N |V4L2_STD_PAL_Nc |V4L2_STD_NTSC)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_MTS</name></cpp:macro> <cpp:value>(V4L2_STD_NTSC_M |V4L2_STD_PAL_M |V4L2_STD_PAL_N |V4L2_STD_PAL_Nc)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_525_60</name></cpp:macro> <cpp:value>(V4L2_STD_PAL_M |V4L2_STD_PAL_60 |V4L2_STD_NTSC |V4L2_STD_NTSC_443)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_625_50</name></cpp:macro> <cpp:value>(V4L2_STD_PAL |V4L2_STD_PAL_N |V4L2_STD_PAL_Nc |V4L2_STD_SECAM)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_ATSC</name></cpp:macro> <cpp:value>(V4L2_STD_ATSC_8_VSB |V4L2_STD_ATSC_16_VSB)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_UNKNOWN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_STD_ALL</name></cpp:macro> <cpp:value>(V4L2_STD_525_60 |V4L2_STD_625_50)</cpp:value></cpp:define>


<struct>struct <name>v4l2_standard</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4l2_std_id</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name><name>name</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_fract</name></name></type> <name>frameperiod</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>framelines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>





































<struct>struct <name>v4l2_bt_timings</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>interlaced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>polarities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u64</name></type> <name>pixelclock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>hfrontporch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>hsync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>hbackporch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>vfrontporch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>vsync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>vbackporch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>il_vfrontporch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>il_vsync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>il_vbackporch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>standards</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_PROGRESSIVE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_INTERLACED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_VSYNC_POS_POL</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_HSYNC_POS_POL</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_BT_STD_CEA861</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_BT_STD_DMT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_BT_STD_CVT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_BT_STD_GTF</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define> 







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_FL_REDUCED_BLANKING</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_FL_CAN_REDUCE_FPS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_FL_REDUCED_FPS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_FL_HALF_LINE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_FL_IS_CE_VIDEO</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_BT_BLANKING_WIDTH</name><parameter_list>(<parameter><type><name>bt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bt)-&gt;hfrontporch + (bt)-&gt;hsync + (bt)-&gt;hbackporch)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_BT_FRAME_WIDTH</name><parameter_list>(<parameter><type><name>bt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bt)-&gt;width + V4L2_DV_BT_BLANKING_WIDTH(bt))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_BT_BLANKING_HEIGHT</name><parameter_list>(<parameter><type><name>bt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bt)-&gt;vfrontporch + (bt)-&gt;vsync + (bt)-&gt;vbackporch + (bt)-&gt;il_vfrontporch + (bt)-&gt;il_vsync + (bt)-&gt;il_vbackporch)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_BT_FRAME_HEIGHT</name><parameter_list>(<parameter><type><name>bt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bt)-&gt;height + V4L2_DV_BT_BLANKING_HEIGHT(bt))</cpp:value></cpp:define>






<struct>struct <name>v4l2_dv_timings</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_bt_timings</name></name></type> <name>bt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</union>
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_BT_656_1120</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 









<struct>struct <name>v4l2_enum_dv_timings</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>pad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_dv_timings</name></name></type> <name>timings</name></decl>;</decl_stmt>
}</block>;</struct>












<struct>struct <name>v4l2_bt_timings_cap</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>min_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>max_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>min_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>max_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u64</name></type> <name>min_pixelclock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u64</name></type> <name>max_pixelclock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>standards</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>capabilities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_BT_CAP_INTERLACED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_BT_CAP_PROGRESSIVE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_BT_CAP_REDUCED_BLANKING</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DV_BT_CAP_CUSTOM</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>







<struct>struct <name>v4l2_dv_timings_cap</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>pad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_bt_timings_cap</name></name></type> <name>bt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>raw_data</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</union>
}</block>;</struct>





<struct>struct <name>v4l2_input</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u8</name></type> <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>audioset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>tuner</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>v4l2_std_id</name></type> <name>std</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>capabilities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_INPUT_TYPE_TUNER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_INPUT_TYPE_CAMERA</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_IN_ST_NO_POWER</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_IN_ST_NO_SIGNAL</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_IN_ST_NO_COLOR</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_IN_ST_HFLIP</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_IN_ST_VFLIP</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_IN_ST_NO_H_LOCK</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_IN_ST_COLOR_KILL</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_IN_ST_NO_SYNC</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_IN_ST_NO_EQU</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_IN_ST_NO_CARRIER</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_IN_ST_MACROVISION</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_IN_ST_NO_ACCESS</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_IN_ST_VTR</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_IN_CAP_DV_TIMINGS</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_IN_CAP_CUSTOM_TIMINGS</name></cpp:macro> <cpp:value>V4L2_IN_CAP_DV_TIMINGS</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_IN_CAP_STD</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_IN_CAP_NATIVE_SIZE</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define> 




<struct>struct <name>v4l2_output</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u8</name></type> <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>audioset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>modulator</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>v4l2_std_id</name></type> <name>std</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>capabilities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_OUTPUT_TYPE_MODULATOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_OUTPUT_TYPE_ANALOG</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_OUTPUT_TYPE_ANALOGVGAOVERLAY</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_OUT_CAP_DV_TIMINGS</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_OUT_CAP_CUSTOM_TIMINGS</name></cpp:macro> <cpp:value>V4L2_OUT_CAP_DV_TIMINGS</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_OUT_CAP_STD</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_OUT_CAP_NATIVE_SIZE</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define> 




<struct>struct <name>v4l2_control</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__s32</name></type> <name>value</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>v4l2_ext_control</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>__s32</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__s64</name></type> <name>value64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name> <modifier>*</modifier></type><name>p_u8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u16</name> <modifier>*</modifier></type><name>p_u16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name> <modifier>*</modifier></type><name>p_u32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
}</block>;</union>
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<struct>struct <name>v4l2_ext_controls</name> <block>{
<union>union <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__KERNEL__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>__u32</name></type> <name>ctrl_class</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>__u32</name></type> <name>which</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>__u32</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>error_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_ext_control</name></name> <modifier>*</modifier></type><name>controls</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_ID_MASK</name></cpp:macro> <cpp:value>(0x0fffffff)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__KERNEL__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_ID2CLASS</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((id) &amp; 0x0fff0000UL)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_ID2WHICH</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((id) &amp; 0x0fff0000UL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_DRIVER_PRIV</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((id) &amp; 0xffff) &gt;= 0x1000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_MAX_DIMS</name></cpp:macro> <cpp:value>(4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_WHICH_CUR_VAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_WHICH_DEF_VAL</name></cpp:macro> <cpp:value>0x0f000000</cpp:value></cpp:define>

<enum>enum <name>v4l2_ctrl_type</name> <block>{
<decl><name>V4L2_CTRL_TYPE_INTEGER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>V4L2_CTRL_TYPE_BOOLEAN</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>V4L2_CTRL_TYPE_MENU</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>V4L2_CTRL_TYPE_BUTTON</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>V4L2_CTRL_TYPE_INTEGER64</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>V4L2_CTRL_TYPE_CTRL_CLASS</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>V4L2_CTRL_TYPE_STRING</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>V4L2_CTRL_TYPE_BITMASK</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>V4L2_CTRL_TYPE_INTEGER_MENU</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,


<decl><name>V4L2_CTRL_COMPOUND_TYPES</name> <init>= <expr><literal type="number">0x0100</literal></expr></init></decl>,
<decl><name>V4L2_CTRL_TYPE_U8</name> <init>= <expr><literal type="number">0x0100</literal></expr></init></decl>,
<decl><name>V4L2_CTRL_TYPE_U16</name> <init>= <expr><literal type="number">0x0101</literal></expr></init></decl>,
<decl><name>V4L2_CTRL_TYPE_U32</name> <init>= <expr><literal type="number">0x0102</literal></expr></init></decl>,
}</block>;</enum>


<struct>struct <name>v4l2_queryctrl</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u8</name></type> <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__s32</name></type> <name>minimum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__s32</name></type> <name>maximum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__s32</name></type> <name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__s32</name></type> <name>default_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>v4l2_query_ext_ctrl</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__s64</name></type> <name>minimum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__s64</name></type> <name>maximum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u64</name></type> <name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__s64</name></type> <name>default_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>elem_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>elems</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>nr_of_dims</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>dims</name><index>[<expr><name>V4L2_CTRL_MAX_DIMS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>v4l2_querymenu</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>index</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>__u8</name></type> <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__s64</name></type> <name>value</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>__u32</name></type> <name>reserved</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_FLAG_DISABLED</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_FLAG_GRABBED</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_FLAG_READ_ONLY</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_FLAG_UPDATE</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_FLAG_INACTIVE</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_FLAG_SLIDER</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_FLAG_WRITE_ONLY</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_FLAG_VOLATILE</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_FLAG_HAS_PAYLOAD</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_FLAG_EXECUTE_ON_WRITE</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_FLAG_NEXT_CTRL</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CTRL_FLAG_NEXT_COMPOUND</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CID_MAX_CTRLS</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CID_PRIVATE_BASE</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>





<struct>struct <name>v4l2_tuner</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>capability</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>rangelow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>rangehigh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>rxsubchans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>audmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__s32</name></type> <name>signal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__s32</name></type> <name>afc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>v4l2_modulator</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>capability</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>rangelow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>rangehigh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>txsubchans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_CAP_LOW</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_CAP_NORM</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_CAP_HWSEEK_BOUNDED</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_CAP_HWSEEK_WRAP</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_CAP_STEREO</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_CAP_LANG2</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_CAP_SAP</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_CAP_LANG1</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_CAP_RDS</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_CAP_RDS_BLOCK_IO</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_CAP_RDS_CONTROLS</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_CAP_FREQ_BANDS</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_CAP_HWSEEK_PROG_LIM</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_CAP_1HZ</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_SUB_MONO</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_SUB_STEREO</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_SUB_LANG2</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_SUB_SAP</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_SUB_LANG1</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_SUB_RDS</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_MODE_MONO</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_MODE_STEREO</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_MODE_LANG2</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_MODE_SAP</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_MODE_LANG1</name></cpp:macro> <cpp:value>0x0003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_TUNER_MODE_LANG1_LANG2</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<struct>struct <name>v4l2_frequency</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>tuner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>frequency</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BAND_MODULATION_VSB</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BAND_MODULATION_FM</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_BAND_MODULATION_AM</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<struct>struct <name>v4l2_frequency_band</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>tuner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>capability</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>rangelow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>rangehigh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>modulation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>v4l2_hw_freq_seek</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>tuner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>seek_upward</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>wrap_around</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>spacing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>rangelow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>rangehigh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>





<struct>struct <name>v4l2_rds_data</name> <block>{
<decl_stmt><decl><type><name>__u8</name></type> <name>lsb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name>msb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name>block</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_RDS_BLOCK_MSK</name></cpp:macro> <cpp:value>0x7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_RDS_BLOCK_A</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_RDS_BLOCK_B</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_RDS_BLOCK_C</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_RDS_BLOCK_D</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_RDS_BLOCK_C_ALT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_RDS_BLOCK_INVALID</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_RDS_BLOCK_CORRECTED</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_RDS_BLOCK_ERROR</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>




<struct>struct <name>v4l2_audio</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>capability</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_AUDCAP_STEREO</name></cpp:macro> <cpp:value>0x00001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_AUDCAP_AVL</name></cpp:macro> <cpp:value>0x00002</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_AUDMODE_AVL</name></cpp:macro> <cpp:value>0x00001</cpp:value></cpp:define>

<struct>struct <name>v4l2_audioout</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>capability</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_ENC_IDX_FRAME_I</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_ENC_IDX_FRAME_P</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_ENC_IDX_FRAME_B</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_ENC_IDX_FRAME_MASK</name></cpp:macro> <cpp:value>(0xf)</cpp:value></cpp:define>

<struct>struct <name>v4l2_enc_idx_entry</name> <block>{
<decl_stmt><decl><type><name>__u64</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u64</name></type> <name>pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_ENC_IDX_ENTRIES</name></cpp:macro> <cpp:value>(64)</cpp:value></cpp:define>
<struct>struct <name>v4l2_enc_idx</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>entries_cap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_enc_idx_entry</name></name></type> <name><name>entry</name><index>[<expr><name>V4L2_ENC_IDX_ENTRIES</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_ENC_CMD_START</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_ENC_CMD_STOP</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_ENC_CMD_PAUSE</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_ENC_CMD_RESUME</name></cpp:macro> <cpp:value>(3)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_ENC_CMD_STOP_AT_GOP_END</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<struct>struct <name>v4l2_encoder_cmd</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>flags</name></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>raw</name></decl>;</struct>
}</block>;</union>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DEC_CMD_START</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DEC_CMD_STOP</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DEC_CMD_PAUSE</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DEC_CMD_RESUME</name></cpp:macro> <cpp:value>(3)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DEC_CMD_START_MUTE_AUDIO</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DEC_CMD_PAUSE_TO_BLACK</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DEC_CMD_STOP_TO_BLACK</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DEC_CMD_STOP_IMMEDIATELY</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DEC_START_FMT_NONE</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_DEC_START_FMT_GOP</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>



<struct>struct <name>v4l2_decoder_cmd</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>flags</name></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>__u64</name></type> <name>pts</name></decl>;</decl_stmt>
}</block> <decl><name>stop</name></decl>;</struct>

<struct>struct <block>{





<decl_stmt><decl><type><name>__s32</name></type> <name>speed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>format</name></decl>;</decl_stmt>
}</block> <decl><name>start</name></decl>;</struct>

<struct>struct <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name><name>data</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>raw</name></decl>;</struct>
}</block>;</union>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<struct>struct <name>v4l2_vbi_format</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>sampling_rate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>samples_per_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>sample_format</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__s32</name></type> <name><name>start</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>count</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_VBI_UNSYNC</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_VBI_INTERLACED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_VBI_ITU_525_F1_START</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_VBI_ITU_525_F2_START</name></cpp:macro> <cpp:value>(264)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_VBI_ITU_625_F1_START</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_VBI_ITU_625_F2_START</name></cpp:macro> <cpp:value>(314)</cpp:value></cpp:define>








<struct>struct <name>v4l2_sliced_vbi_format</name> <block>{
<decl_stmt><decl><type><name>__u16</name></type> <name>service_set</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>__u16</name></type> <name><name>service_lines</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>io_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_SLICED_TELETEXT_B</name></cpp:macro> <cpp:value>(0x0001)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_SLICED_VPS</name></cpp:macro> <cpp:value>(0x0400)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_SLICED_CAPTION_525</name></cpp:macro> <cpp:value>(0x1000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_SLICED_WSS_625</name></cpp:macro> <cpp:value>(0x4000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_SLICED_VBI_525</name></cpp:macro> <cpp:value>(V4L2_SLICED_CAPTION_525)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_SLICED_VBI_625</name></cpp:macro> <cpp:value>(V4L2_SLICED_TELETEXT_B | V4L2_SLICED_VPS | V4L2_SLICED_WSS_625)</cpp:value></cpp:define>

<struct>struct <name>v4l2_sliced_vbi_cap</name> <block>{
<decl_stmt><decl><type><name>__u16</name></type> <name>service_set</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>__u16</name></type> <name><name>service_lines</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>

<struct>struct <name>v4l2_sliced_vbi_data</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>field</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>line</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u32</name></type> <name>reserved</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u8</name></type> <name><name>data</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_MPEG_VBI_IVTV_TELETEXT_B</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_MPEG_VBI_IVTV_CAPTION_525</name></cpp:macro> <cpp:value>(4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_MPEG_VBI_IVTV_WSS_625</name></cpp:macro> <cpp:value>(5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_MPEG_VBI_IVTV_VPS</name></cpp:macro> <cpp:value>(7)</cpp:value></cpp:define>

<struct>struct <name>v4l2_mpeg_vbi_itv0_line</name> <block>{
<decl_stmt><decl><type><name>__u8</name></type> <name>id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u8</name></type> <name><name>data</name><index>[<expr><literal type="number">42</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<struct>struct <name>v4l2_mpeg_vbi_itv0</name> <block>{
<decl_stmt><decl><type><name>__le32</name></type> <name><name>linemask</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_mpeg_vbi_itv0_line</name></name></type> <name><name>line</name><index>[<expr><literal type="number">35</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<struct>struct <name>v4l2_mpeg_vbi_ITV0</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_mpeg_vbi_itv0_line</name></name></type> <name><name>line</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_MPEG_VBI_IVTV_MAGIC0</name></cpp:macro> <cpp:value>"itv0"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_MPEG_VBI_IVTV_MAGIC1</name></cpp:macro> <cpp:value>"ITV0"</cpp:value></cpp:define>

<struct>struct <name>v4l2_mpeg_vbi_fmt_ivtv</name> <block>{
<decl_stmt><decl><type><name>__u8</name></type> <name><name>magic</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_mpeg_vbi_itv0</name></name></type> <name>itv0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_mpeg_vbi_ITV0</name></name></type> <name>ITV0</name></decl>;</decl_stmt>
}</block>;</union>
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>












<struct>struct <name>v4l2_plane_pix_format</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>sizeimage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>bytesperline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u16</name></type> <name><name>reserved</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>















<struct>struct <name>v4l2_pix_format_mplane</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>pixelformat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>field</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>colorspace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_plane_pix_format</name></name></type> <name><name>plane_fmt</name><index>[<expr><name>VIDEO_MAX_PLANES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name>num_planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name>ycbcr_enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name>quantization</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name>xfer_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name><name>reserved</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>






<struct>struct <name>v4l2_sdr_format</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>pixelformat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>buffersize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name><name>reserved</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>











<struct>struct <name>v4l2_format</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_pix_format</name></name></type> <name>pix</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_pix_format_mplane</name></name></type> <name>pix_mp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_window</name></name></type> <name>win</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_vbi_format</name></name></type> <name>vbi</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_sliced_vbi_format</name></name></type> <name>sliced</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_sdr_format</name></name></type> <name>sdr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u8</name></type> <name><name>raw_data</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block> <decl><name>fmt</name></decl>;</union>
}</block>;</struct>



<struct>struct <name>v4l2_streamparm</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt> 
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_captureparm</name></name></type> <name>capture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_outputparm</name></name></type> <name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name><name>raw_data</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block> <decl><name>parm</name></decl>;</union>
}</block>;</struct>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_EVENT_ALL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_EVENT_VSYNC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_EVENT_EOS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_EVENT_CTRL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_EVENT_FRAME_SYNC</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_EVENT_SOURCE_CHANGE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_EVENT_MOTION_DET</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_EVENT_PRIVATE_START</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>


<struct>struct <name>v4l2_event_vsync</name> <block>{

<decl_stmt><decl><type><name>__u8</name></type> <name>field</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_EVENT_CTRL_CH_VALUE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_EVENT_CTRL_CH_FLAGS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_EVENT_CTRL_CH_RANGE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<struct>struct <name>v4l2_event_ctrl</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>changes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>__s32</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__s64</name></type> <name>value64</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>__u32</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__s32</name></type> <name>minimum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__s32</name></type> <name>maximum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__s32</name></type> <name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__s32</name></type> <name>default_value</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>v4l2_event_frame_sync</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>frame_sequence</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_EVENT_SRC_CH_RESOLUTION</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<struct>struct <name>v4l2_event_src_change</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>changes</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_EVENT_MD_FL_HAVE_FRAME_SEQ</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>








<struct>struct <name>v4l2_event_motion_det</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>frame_sequence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>region_mask</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>v4l2_event</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_event_vsync</name></name></type> <name>vsync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_event_ctrl</name></name></type> <name>ctrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_event_frame_sync</name></name></type> <name>frame_sync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_event_src_change</name></name></type> <name>src_change</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_event_motion_det</name></name></type> <name>motion_det</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u8</name></type> <name><name>data</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
<decl_stmt><decl><type><name>__u32</name></type> <name>pending</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>sequence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_EVENT_SUB_FL_SEND_INITIAL</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_EVENT_SUB_FL_ALLOW_FEEDBACK</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<struct>struct <name>v4l2_event_subscription</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CHIP_MATCH_BRIDGE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CHIP_MATCH_SUBDEV</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CHIP_MATCH_HOST</name></cpp:macro> <cpp:value>V4L2_CHIP_MATCH_BRIDGE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CHIP_MATCH_I2C_DRIVER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CHIP_MATCH_I2C_ADDR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CHIP_MATCH_AC97</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<struct>struct <name>v4l2_dbg_match</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>type</name></decl>;</decl_stmt> 
<union>union <block>{ 
<decl_stmt><decl><type><name>__u32</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</union>
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<struct>struct <name>v4l2_dbg_register</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_dbg_match</name></name></type> <name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__u64</name></type> <name>reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u64</name></type> <name>val</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CHIP_FL_READABLE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_CHIP_FL_WRITABLE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>


<struct>struct <name>v4l2_dbg_chip_info</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_dbg_match</name></name></type> <name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>










<struct>struct <name>v4l2_create_buffers</name> <block>{
<decl_stmt><decl><type><name>__u32</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>memory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_format</name></name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name><name>reserved</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_QUERYCAP</name></cpp:macro> <cpp:value>_IOR('V', 0, struct v4l2_capability)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_RESERVED</name></cpp:macro> <cpp:value>_IO('V', 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_ENUM_FMT</name></cpp:macro> <cpp:value>_IOWR('V', 2, struct v4l2_fmtdesc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_FMT</name></cpp:macro> <cpp:value>_IOWR('V', 4, struct v4l2_format)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_FMT</name></cpp:macro> <cpp:value>_IOWR('V', 5, struct v4l2_format)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_REQBUFS</name></cpp:macro> <cpp:value>_IOWR('V', 8, struct v4l2_requestbuffers)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_QUERYBUF</name></cpp:macro> <cpp:value>_IOWR('V', 9, struct v4l2_buffer)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_FBUF</name></cpp:macro> <cpp:value>_IOR('V', 10, struct v4l2_framebuffer)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_FBUF</name></cpp:macro> <cpp:value>_IOW('V', 11, struct v4l2_framebuffer)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_OVERLAY</name></cpp:macro> <cpp:value>_IOW('V', 14, int)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_QBUF</name></cpp:macro> <cpp:value>_IOWR('V', 15, struct v4l2_buffer)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_EXPBUF</name></cpp:macro> <cpp:value>_IOWR('V', 16, struct v4l2_exportbuffer)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_DQBUF</name></cpp:macro> <cpp:value>_IOWR('V', 17, struct v4l2_buffer)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_STREAMON</name></cpp:macro> <cpp:value>_IOW('V', 18, int)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_STREAMOFF</name></cpp:macro> <cpp:value>_IOW('V', 19, int)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_PARM</name></cpp:macro> <cpp:value>_IOWR('V', 21, struct v4l2_streamparm)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_PARM</name></cpp:macro> <cpp:value>_IOWR('V', 22, struct v4l2_streamparm)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_STD</name></cpp:macro> <cpp:value>_IOR('V', 23, v4l2_std_id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_STD</name></cpp:macro> <cpp:value>_IOW('V', 24, v4l2_std_id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_ENUMSTD</name></cpp:macro> <cpp:value>_IOWR('V', 25, struct v4l2_standard)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_ENUMINPUT</name></cpp:macro> <cpp:value>_IOWR('V', 26, struct v4l2_input)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_CTRL</name></cpp:macro> <cpp:value>_IOWR('V', 27, struct v4l2_control)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_CTRL</name></cpp:macro> <cpp:value>_IOWR('V', 28, struct v4l2_control)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_TUNER</name></cpp:macro> <cpp:value>_IOWR('V', 29, struct v4l2_tuner)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_TUNER</name></cpp:macro> <cpp:value>_IOW('V', 30, struct v4l2_tuner)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_AUDIO</name></cpp:macro> <cpp:value>_IOR('V', 33, struct v4l2_audio)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_AUDIO</name></cpp:macro> <cpp:value>_IOW('V', 34, struct v4l2_audio)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_QUERYCTRL</name></cpp:macro> <cpp:value>_IOWR('V', 36, struct v4l2_queryctrl)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_QUERYMENU</name></cpp:macro> <cpp:value>_IOWR('V', 37, struct v4l2_querymenu)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_INPUT</name></cpp:macro> <cpp:value>_IOR('V', 38, int)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_INPUT</name></cpp:macro> <cpp:value>_IOWR('V', 39, int)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_EDID</name></cpp:macro> <cpp:value>_IOWR('V', 40, struct v4l2_edid)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_EDID</name></cpp:macro> <cpp:value>_IOWR('V', 41, struct v4l2_edid)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_OUTPUT</name></cpp:macro> <cpp:value>_IOR('V', 46, int)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_OUTPUT</name></cpp:macro> <cpp:value>_IOWR('V', 47, int)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_ENUMOUTPUT</name></cpp:macro> <cpp:value>_IOWR('V', 48, struct v4l2_output)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_AUDOUT</name></cpp:macro> <cpp:value>_IOR('V', 49, struct v4l2_audioout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_AUDOUT</name></cpp:macro> <cpp:value>_IOW('V', 50, struct v4l2_audioout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_MODULATOR</name></cpp:macro> <cpp:value>_IOWR('V', 54, struct v4l2_modulator)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_MODULATOR</name></cpp:macro> <cpp:value>_IOW('V', 55, struct v4l2_modulator)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_FREQUENCY</name></cpp:macro> <cpp:value>_IOWR('V', 56, struct v4l2_frequency)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_FREQUENCY</name></cpp:macro> <cpp:value>_IOW('V', 57, struct v4l2_frequency)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_CROPCAP</name></cpp:macro> <cpp:value>_IOWR('V', 58, struct v4l2_cropcap)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_CROP</name></cpp:macro> <cpp:value>_IOWR('V', 59, struct v4l2_crop)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_CROP</name></cpp:macro> <cpp:value>_IOW('V', 60, struct v4l2_crop)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_JPEGCOMP</name></cpp:macro> <cpp:value>_IOR('V', 61, struct v4l2_jpegcompression)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_JPEGCOMP</name></cpp:macro> <cpp:value>_IOW('V', 62, struct v4l2_jpegcompression)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_QUERYSTD</name></cpp:macro> <cpp:value>_IOR('V', 63, v4l2_std_id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_TRY_FMT</name></cpp:macro> <cpp:value>_IOWR('V', 64, struct v4l2_format)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_ENUMAUDIO</name></cpp:macro> <cpp:value>_IOWR('V', 65, struct v4l2_audio)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_ENUMAUDOUT</name></cpp:macro> <cpp:value>_IOWR('V', 66, struct v4l2_audioout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_PRIORITY</name></cpp:macro> <cpp:value>_IOR('V', 67, __u32)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_PRIORITY</name></cpp:macro> <cpp:value>_IOW('V', 68, __u32)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_SLICED_VBI_CAP</name></cpp:macro> <cpp:value>_IOWR('V', 69, struct v4l2_sliced_vbi_cap)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_LOG_STATUS</name></cpp:macro> <cpp:value>_IO('V', 70)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_EXT_CTRLS</name></cpp:macro> <cpp:value>_IOWR('V', 71, struct v4l2_ext_controls)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_EXT_CTRLS</name></cpp:macro> <cpp:value>_IOWR('V', 72, struct v4l2_ext_controls)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_TRY_EXT_CTRLS</name></cpp:macro> <cpp:value>_IOWR('V', 73, struct v4l2_ext_controls)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_ENUM_FRAMESIZES</name></cpp:macro> <cpp:value>_IOWR('V', 74, struct v4l2_frmsizeenum)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_ENUM_FRAMEINTERVALS</name></cpp:macro> <cpp:value>_IOWR('V', 75, struct v4l2_frmivalenum)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_ENC_INDEX</name></cpp:macro> <cpp:value>_IOR('V', 76, struct v4l2_enc_idx)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_ENCODER_CMD</name></cpp:macro> <cpp:value>_IOWR('V', 77, struct v4l2_encoder_cmd)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_TRY_ENCODER_CMD</name></cpp:macro> <cpp:value>_IOWR('V', 78, struct v4l2_encoder_cmd)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_DBG_S_REGISTER</name></cpp:macro> <cpp:value>_IOW('V', 79, struct v4l2_dbg_register)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_DBG_G_REGISTER</name></cpp:macro> <cpp:value>_IOWR('V', 80, struct v4l2_dbg_register)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_HW_FREQ_SEEK</name></cpp:macro> <cpp:value>_IOW('V', 82, struct v4l2_hw_freq_seek)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_DV_TIMINGS</name></cpp:macro> <cpp:value>_IOWR('V', 87, struct v4l2_dv_timings)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_DV_TIMINGS</name></cpp:macro> <cpp:value>_IOWR('V', 88, struct v4l2_dv_timings)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_DQEVENT</name></cpp:macro> <cpp:value>_IOR('V', 89, struct v4l2_event)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_SUBSCRIBE_EVENT</name></cpp:macro> <cpp:value>_IOW('V', 90, struct v4l2_event_subscription)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_UNSUBSCRIBE_EVENT</name></cpp:macro> <cpp:value>_IOW('V', 91, struct v4l2_event_subscription)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_CREATE_BUFS</name></cpp:macro> <cpp:value>_IOWR('V', 92, struct v4l2_create_buffers)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_PREPARE_BUF</name></cpp:macro> <cpp:value>_IOWR('V', 93, struct v4l2_buffer)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_G_SELECTION</name></cpp:macro> <cpp:value>_IOWR('V', 94, struct v4l2_selection)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_S_SELECTION</name></cpp:macro> <cpp:value>_IOWR('V', 95, struct v4l2_selection)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_DECODER_CMD</name></cpp:macro> <cpp:value>_IOWR('V', 96, struct v4l2_decoder_cmd)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_TRY_DECODER_CMD</name></cpp:macro> <cpp:value>_IOWR('V', 97, struct v4l2_decoder_cmd)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_ENUM_DV_TIMINGS</name></cpp:macro> <cpp:value>_IOWR('V', 98, struct v4l2_enum_dv_timings)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_QUERY_DV_TIMINGS</name></cpp:macro> <cpp:value>_IOR('V', 99, struct v4l2_dv_timings)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_DV_TIMINGS_CAP</name></cpp:macro> <cpp:value>_IOWR('V', 100, struct v4l2_dv_timings_cap)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_ENUM_FREQ_BANDS</name></cpp:macro> <cpp:value>_IOWR('V', 101, struct v4l2_frequency_band)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_DBG_G_CHIP_INFO</name></cpp:macro> <cpp:value>_IOWR('V', 102, struct v4l2_dbg_chip_info)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDIOC_QUERY_EXT_CTRL</name></cpp:macro> <cpp:value>_IOWR('V', 103, struct v4l2_query_ext_ctrl)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_VIDIOC_PRIVATE</name></cpp:macro> <cpp:value>192</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
