<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\v4l2\v4l2.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v4l2.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_DEVICE_TEXT</name></cpp:macro> <cpp:value>N_( "Video capture device" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_DEVICE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Video capture device node." )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBI_DEVICE_TEXT</name></cpp:macro> <cpp:value>N_("VBI capture device")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBI_DEVICE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "The device node where VBI data can be read " "(for closed captions)." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STANDARD_TEXT</name></cpp:macro> <cpp:value>N_( "Standard" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STANDARD_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Video standard (Default, SECAM, PAL, or NTSC)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_TEXT</name></cpp:macro> <cpp:value>N_("Video input chroma format")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Force the Video4Linux2 video device to use a specific chroma format " "(eg. I420 or I422 for raw images, MJPG for M-JPEG compressed input). " "Complete list: GREY, I240, RV16, RV15, RV24, RV32, YUY2, YUYV, UYVY, " "I41N, I422, I420, I411, I410, MJPG")</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_TEXT</name></cpp:macro> <cpp:value>N_( "Input" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Input of the card to use (see debug)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_INPUT_TEXT</name></cpp:macro> <cpp:value>N_( "Audio input" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_INPUT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Audio input of the card to use (see debug)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH_TEXT</name></cpp:macro> <cpp:value>N_( "Width" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT_TEXT</name></cpp:macro> <cpp:value>N_( "Height" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "The specified pixel resolution is forced " "(if both width and height are strictly positive)." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS_TEXT</name></cpp:macro> <cpp:value>N_( "Frame rate" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Maximum frame rate to use (0 = no limits)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RADIO_DEVICE_TEXT</name></cpp:macro> <cpp:value>N_( "Radio device" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RADIO_DEVICE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Radio tuner device node." )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREQUENCY_TEXT</name></cpp:macro> <cpp:value>N_("Frequency")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREQUENCY_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Tuner frequency in Hz or kHz (see debug output)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TUNER_AUDIO_MODE_TEXT</name></cpp:macro> <cpp:value>N_("Audio mode")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TUNER_AUDIO_MODE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Tuner audio mono/stereo and track selection." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_RESET_TEXT</name></cpp:macro> <cpp:value>N_( "Reset controls" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_RESET_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Reset controls to defaults." )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRIGHTNESS_TEXT</name></cpp:macro> <cpp:value>N_( "Brightness" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRIGHTNESS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Picture brightness or black level." )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRIGHTNESS_AUTO_TEXT</name></cpp:macro> <cpp:value>N_( "Automatic brightness" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRIGHTNESS_AUTO_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Automatically adjust the picture brightness." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTRAST_TEXT</name></cpp:macro> <cpp:value>N_( "Contrast" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTRAST_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Picture contrast or luma gain." )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SATURATION_TEXT</name></cpp:macro> <cpp:value>N_( "Saturation" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SATURATION_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Picture saturation or chroma gain." )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUE_TEXT</name></cpp:macro> <cpp:value>N_( "Hue" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Hue or color balance." )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUE_AUTO_TEXT</name></cpp:macro> <cpp:value>N_( "Automatic hue" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUE_AUTO_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Automatically adjust the picture hue." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WHITE_BALANCE_TEMP_TEXT</name></cpp:macro> <cpp:value>N_( "White balance temperature (K)" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WHITE_BALANCE_TEMP_LONGTEXT</name></cpp:macro> <cpp:value>N_( "White balance temperature as a color temperation in Kelvin " "(2800 is minimum incandescence, 6500 is maximum daylight)." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTOWHITEBALANCE_TEXT</name></cpp:macro> <cpp:value>N_( "Automatic white balance" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTOWHITEBALANCE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Automatically adjust the picture white balance." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDBALANCE_TEXT</name></cpp:macro> <cpp:value>N_( "Red balance" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDBALANCE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Red chroma balance." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLUEBALANCE_TEXT</name></cpp:macro> <cpp:value>N_( "Blue balance" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLUEBALANCE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Blue chroma balance." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAMMA_TEXT</name></cpp:macro> <cpp:value>N_( "Gamma" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAMMA_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Gamma adjust." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTOGAIN_TEXT</name></cpp:macro> <cpp:value>N_( "Automatic gain" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTOGAIN_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Automatically set the video gain." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAIN_TEXT</name></cpp:macro> <cpp:value>N_( "Gain" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAIN_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Picture gain." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHARPNESS_TEXT</name></cpp:macro> <cpp:value>N_( "Sharpness" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHARPNESS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Sharpness filter adjust." )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_GAIN_TEXT</name></cpp:macro> <cpp:value>N_( "Chroma gain" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_GAIN_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Chroma gain control." )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_GAIN_AUTO_TEXT</name></cpp:macro> <cpp:value>N_( "Automatic chroma gain" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_GAIN_AUTO_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Automatically control the chroma gain." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POWER_FREQ_TEXT</name></cpp:macro> <cpp:value>N_( "Power line frequency" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POWER_FREQ_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Power line frequency anti-flicker filter." )</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>power_freq_vlc</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><name>V4L2_CID_POWER_LINE_FREQUENCY_DISABLED</name></expr>,
<expr><name>V4L2_CID_POWER_LINE_FREQUENCY_50HZ</name></expr>,
<expr><name>V4L2_CID_POWER_LINE_FREQUENCY_60HZ</name></expr>,
<expr><name>V4L2_CID_POWER_LINE_FREQUENCY_AUTO</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>power_freq_user</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Unspecified"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Off"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"50 Hz"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"60 Hz"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Automatic"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BKLT_COMPENSATE_TEXT</name></cpp:macro> <cpp:value>N_( "Backlight compensation" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BKLT_COMPENSATE_LONGTEXT</name></cpp:macro> <cpp:value>BKLT_COMPENSATE_TEXT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAND_STOP_FILTER_TEXT</name></cpp:macro> <cpp:value>N_( "Band-stop filter" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAND_STOP_FILTER_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Cut a light band induced by fluorescent lighting (unit undocumented)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HFLIP_TEXT</name></cpp:macro> <cpp:value>N_( "Horizontal flip" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HFLIP_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Flip the picture horizontally." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VFLIP_TEXT</name></cpp:macro> <cpp:value>N_( "Vertical flip" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VFLIP_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Flip the picture vertically." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATE_TEXT</name></cpp:macro> <cpp:value>N_( "Rotate (degrees)" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Picture rotation angle (in degrees)." )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_KILLER_TEXT</name></cpp:macro> <cpp:value>N_( "Color killer" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_KILLER_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Enable the color killer, i.e. switch to black &amp; white picture " "whenever the signal is weak." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_EFFECT_TEXT</name></cpp:macro> <cpp:value>N_( "Color effect" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_EFFECT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Select a color effect." )</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>colorfx_vlc</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>V4L2_COLORFX_NONE</name></expr>,
<expr><name>V4L2_COLORFX_BW</name></expr>, <expr><name>V4L2_COLORFX_SEPIA</name></expr>, <expr><name>V4L2_COLORFX_NEGATIVE</name></expr>,
<expr><name>V4L2_COLORFX_EMBOSS</name></expr>, <expr><name>V4L2_COLORFX_SKETCH</name></expr>, <expr><name>V4L2_COLORFX_SKY_BLUE</name></expr>,
<expr><name>V4L2_COLORFX_GRASS_GREEN</name></expr>, <expr><name>V4L2_COLORFX_SKIN_WHITEN</name></expr>, <expr><name>V4L2_COLORFX_VIVID</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>colorfx_user</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Unspecified"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"None"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Black &amp; white"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Sepia"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Negative"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Emboss"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Sketch"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Sky blue"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Grass green"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Skin whiten"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Vivid"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_VOLUME_TEXT</name></cpp:macro> <cpp:value>N_( "Audio volume" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_VOLUME_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Volume of the audio input." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_BALANCE_TEXT</name></cpp:macro> <cpp:value>N_( "Audio balance" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_BALANCE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Balance of the audio input." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_BASS_TEXT</name></cpp:macro> <cpp:value>N_( "Bass level" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_BASS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Bass adjustment of the audio input." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_TREBLE_TEXT</name></cpp:macro> <cpp:value>N_( "Treble level" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_TREBLE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Treble adjustment of the audio input." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_MUTE_TEXT</name></cpp:macro> <cpp:value>N_( "Mute" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_MUTE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Mute the audio." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_LOUDNESS_TEXT</name></cpp:macro> <cpp:value>N_( "Loudness mode" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_LOUDNESS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Loudness mode a.k.a. bass boost." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_CTRLS_TEXT</name></cpp:macro> <cpp:value>N_("v4l2 driver controls")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_CTRLS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Set the v4l2 driver controls to the values specified using a comma " "separated list optionally encapsulated by curly braces " "(e.g.: {video_bitrate=6000000,audio_crc=0,stream_type=3} ). " "To list available controls, increase verbosity (-vv) " "or use the v4l2-ctl application." )</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASPECT_TEXT</name></cpp:macro> <cpp:value>N_("Picture aspect-ratio n:m")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASPECT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Define input picture aspect-ratio to use. Default is 4:3" )</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>tristate_vlc</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>tristate_user</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Unspecified"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Off"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"On"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>v4l2_std_id</name></type> <name><name>standards_v4l2</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>V4L2_STD_UNKNOWN</name></expr>, <expr><name>V4L2_STD_ALL</name></expr>,
<expr><name>V4L2_STD_PAL</name></expr>, <expr><name>V4L2_STD_PAL_BG</name></expr>, <expr><name>V4L2_STD_PAL_DK</name></expr>,
<expr><name>V4L2_STD_NTSC</name></expr>,
<expr><name>V4L2_STD_SECAM</name></expr>, <expr><name>V4L2_STD_SECAM_DK</name></expr>,
<expr><name>V4L2_STD_MTS</name></expr>, <expr><name>V4L2_STD_525_60</name></expr>, <expr><name>V4L2_STD_625_50</name></expr>,
<expr><name>V4L2_STD_ATSC</name></expr>,

<expr><name>V4L2_STD_B</name></expr>, <expr><name>V4L2_STD_G</name></expr>, <expr><name>V4L2_STD_H</name></expr>, <expr><name>V4L2_STD_L</name></expr>,
<expr><name>V4L2_STD_GH</name></expr>, <expr><name>V4L2_STD_DK</name></expr>, <expr><name>V4L2_STD_BG</name></expr>, <expr><name>V4L2_STD_MN</name></expr>,

<expr><name>V4L2_STD_PAL_B</name></expr>, <expr><name>V4L2_STD_PAL_B1</name></expr>, <expr><name>V4L2_STD_PAL_G</name></expr>, <expr><name>V4L2_STD_PAL_H</name></expr>,
<expr><name>V4L2_STD_PAL_I</name></expr>, <expr><name>V4L2_STD_PAL_D</name></expr>, <expr><name>V4L2_STD_PAL_D1</name></expr>, <expr><name>V4L2_STD_PAL_K</name></expr>,
<expr><name>V4L2_STD_PAL_M</name></expr>, <expr><name>V4L2_STD_PAL_N</name></expr>, <expr><name>V4L2_STD_PAL_Nc</name></expr>, <expr><name>V4L2_STD_PAL_60</name></expr>,
<expr><name>V4L2_STD_NTSC_M</name></expr>, <expr><name>V4L2_STD_NTSC_M_JP</name></expr>,<expr><name>V4L2_STD_NTSC_443</name></expr>, <expr><name>V4L2_STD_NTSC_M_KR</name></expr>,
<expr><name>V4L2_STD_SECAM_B</name></expr>, <expr><name>V4L2_STD_SECAM_D</name></expr>, <expr><name>V4L2_STD_SECAM_G</name></expr>, <expr><name>V4L2_STD_SECAM_H</name></expr>,
<expr><name>V4L2_STD_SECAM_K</name></expr>, <expr><name>V4L2_STD_SECAM_K1</name></expr>, <expr><name>V4L2_STD_SECAM_L</name></expr>, <expr><name>V4L2_STD_SECAM_LC</name></expr>,
<expr><name>V4L2_STD_ATSC_8_VSB</name></expr>, <expr><name>V4L2_STD_ATSC_16_VSB</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>standards_vlc</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"ALL"</literal></expr>,

<expr><literal type="string">"PAL"</literal></expr>, <expr><literal type="string">"PAL_BG"</literal></expr>, <expr><literal type="string">"PAL_DK"</literal></expr>,
<expr><literal type="string">"NTSC"</literal></expr>,
<expr><literal type="string">"SECAM"</literal></expr>, <expr><literal type="string">"SECAM_DK"</literal></expr>,
<expr><literal type="string">"MTS"</literal></expr>, <expr><literal type="string">"525_60"</literal></expr>, <expr><literal type="string">"625_50"</literal></expr>,
<expr><literal type="string">"ATSC"</literal></expr>,


<expr><literal type="string">"B"</literal></expr>, <expr><literal type="string">"G"</literal></expr>, <expr><literal type="string">"H"</literal></expr>, <expr><literal type="string">"L"</literal></expr>,
<expr><literal type="string">"GH"</literal></expr>, <expr><literal type="string">"DK"</literal></expr>, <expr><literal type="string">"BG"</literal></expr>, <expr><literal type="string">"MN"</literal></expr>,


<expr><literal type="string">"PAL_B"</literal></expr>, <expr><literal type="string">"PAL_B1"</literal></expr>, <expr><literal type="string">"PAL_G"</literal></expr>, <expr><literal type="string">"PAL_H"</literal></expr>,
<expr><literal type="string">"PAL_I"</literal></expr>, <expr><literal type="string">"PAL_D"</literal></expr>, <expr><literal type="string">"PAL_D1"</literal></expr>, <expr><literal type="string">"PAL_K"</literal></expr>,
<expr><literal type="string">"PAL_M"</literal></expr>, <expr><literal type="string">"PAL_N"</literal></expr>, <expr><literal type="string">"PAL_Nc"</literal></expr>, <expr><literal type="string">"PAL_60"</literal></expr>,
<expr><literal type="string">"NTSC_M"</literal></expr>, <expr><literal type="string">"NTSC_M_JP"</literal></expr>, <expr><literal type="string">"NTSC_443"</literal></expr>, <expr><literal type="string">"NTSC_M_KR"</literal></expr>,
<expr><literal type="string">"SECAM_B"</literal></expr>, <expr><literal type="string">"SECAM_D"</literal></expr>, <expr><literal type="string">"SECAM_G"</literal></expr>, <expr><literal type="string">"SECAM_H"</literal></expr>,
<expr><literal type="string">"SECAM_K"</literal></expr>, <expr><literal type="string">"SECAM_K1"</literal></expr>, <expr><literal type="string">"SECAM_L"</literal></expr>, <expr><literal type="string">"SECAM_LC"</literal></expr>,
<expr><literal type="string">"ATSC_8_VSB"</literal></expr>, <expr><literal type="string">"ATSC_16_VSB"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>standards_user</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Undefined"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"All"</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"PAL"</literal></expr>, <expr><literal type="string">"PAL B/G"</literal></expr>, <expr><literal type="string">"PAL D/K"</literal></expr>,
<expr><literal type="string">"NTSC"</literal></expr>,
<expr><literal type="string">"SECAM"</literal></expr>, <expr><literal type="string">"SECAM D/K"</literal></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Multichannel television sound (MTS)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"525 lines / 60 Hz"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"625 lines / 50 Hz"</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"ATSC"</literal></expr>,

<expr><literal type="string">"PAL/SECAM B"</literal></expr>, <expr><literal type="string">"PAL/SECAM G"</literal></expr>, <expr><literal type="string">"PAL/SECAM H"</literal></expr>, <expr><literal type="string">"PAL/SECAM L"</literal></expr>,
<expr><literal type="string">"PAL/SECAM G/H"</literal></expr>, <expr><literal type="string">"PAL/SECAM D/K"</literal></expr>, <expr><literal type="string">"PAL/SECAM B/G"</literal></expr>, <expr><literal type="string">"PAL/NTSC M/N"</literal></expr>,

<expr><literal type="string">"PAL B"</literal></expr>, <expr><literal type="string">"PAL B1"</literal></expr>, <expr><literal type="string">"PAL G"</literal></expr>, <expr><literal type="string">"PAL H"</literal></expr>,
<expr><literal type="string">"PAL I"</literal></expr>, <expr><literal type="string">"PAL D"</literal></expr>, <expr><literal type="string">"PAL D1"</literal></expr>, <expr><literal type="string">"PAL K"</literal></expr>,
<expr><literal type="string">"PAL M"</literal></expr>, <expr><literal type="string">"PAL N"</literal></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"PAL N Argentina"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"PAL 60"</literal></expr>,
<expr><literal type="string">"NTSC M"</literal></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"NTSC M Japan"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"NTSC 443"</literal></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"NTSC M South Korea"</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"SECAM B"</literal></expr>, <expr><literal type="string">"SECAM D"</literal></expr>, <expr><literal type="string">"SECAM G"</literal></expr>, <expr><literal type="string">"SECAM H"</literal></expr>,
<expr><literal type="string">"SECAM K"</literal></expr>, <expr><literal type="string">"SECAM K1"</literal></expr>, <expr><literal type="string">"SECAM L"</literal></expr>, <expr><literal type="string">"SECAM L/C"</literal></expr>,
<expr><literal type="string">"ATSC 8-VSB"</literal></expr>, <expr><literal type="string">"ATSC 16-VSB"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>i_tuner_audio_modes_list</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>V4L2_TUNER_MODE_MONO</name></expr>, <expr><name>V4L2_TUNER_MODE_STEREO</name></expr>,
<expr><name>V4L2_TUNER_MODE_LANG1</name></expr>, <expr><name>V4L2_TUNER_MODE_LANG2</name></expr>, <expr><name>V4L2_TUNER_MODE_LANG1_LANG2</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>psz_tuner_audio_modes_list_text</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Mono"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Stereo"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Primary language"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Secondary language or program"</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>N_</name><argument_list>(<argument><literal type="string">"Dual mono"</literal></argument> )</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"V4L"</literal>)</argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Video4Linux input"</literal>)</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_ACCESS</argument> )</argument_list></macro>

<macro><name>set_section</name><argument_list>( <argument>N_( <literal type="string">"Video input"</literal> )</argument>, <argument>NULL</argument> )</argument_list></macro>
<macro><name>add_loadfile</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"dev"</literal></argument>, <argument><literal type="string">"/dev/video0"</literal></argument>,
<argument>VIDEO_DEVICE_TEXT</argument>, <argument>VIDEO_DEVICE_LONGTEXT</argument>)</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZVBI_COMPILED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_loadfile</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"vbidev"</literal></argument>, <argument>NULL</argument>,
<argument>VBI_DEVICE_TEXT</argument>, <argument>VBI_DEVICE_LONGTEXT</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>add_string</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"standard"</literal></argument>, <argument><literal type="string">""</literal></argument>,
<argument>STANDARD_TEXT</argument>, <argument>STANDARD_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_string_list</name><argument_list>( <argument>standards_vlc</argument>, <argument>standards_user</argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"chroma"</literal></argument>, <argument>NULL</argument>, <argument>CHROMA_TEXT</argument>, <argument>CHROMA_LONGTEXT</argument>,
<argument>true</argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"input"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>INPUT_TEXT</argument>, <argument>INPUT_LONGTEXT</argument>,
<argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0xFFFFFFFE</literal></argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"audio-input"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>AUDIO_INPUT_TEXT</argument>,
<argument>AUDIO_INPUT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0xFFFFFFFE</literal></argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<macro><name>add_obsolete_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"io"</literal></argument> )</argument_list></macro> 
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"width"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>WIDTH_TEXT</argument>, <argument>SIZE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument>VOUT_MAX_WIDTH</argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"height"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>HEIGHT_TEXT</argument>, <argument>SIZE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument>VOUT_MAX_WIDTH</argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"aspect-ratio"</literal></argument>, <argument><literal type="string">"4:3"</literal></argument>, <argument>ASPECT_TEXT</argument>,
<argument>ASPECT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"fps"</literal></argument>, <argument><literal type="string">"60"</literal></argument>, <argument>FPS_TEXT</argument>, <argument>FPS_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<macro><name>add_obsolete_bool</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"use-libv4l2"</literal></argument> )</argument_list></macro> 

<macro><name>set_section</name><argument_list>( <argument>N_( <literal type="string">"Tuner"</literal> )</argument>, <argument>NULL</argument> )</argument_list></macro>
<macro><name>add_loadfile</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"radio-dev"</literal></argument>, <argument><literal type="string">"/dev/radio0"</literal></argument>,
<argument>RADIO_DEVICE_TEXT</argument>, <argument>RADIO_DEVICE_LONGTEXT</argument>)</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<macro><name>add_obsolete_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"tuner"</literal></argument> )</argument_list></macro> 
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"tuner-frequency"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>FREQUENCY_TEXT</argument>,
<argument>FREQUENCY_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0xFFFFFFFE</literal></argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"tuner-audio-mode"</literal></argument>, <argument>V4L2_TUNER_MODE_LANG1</argument>,
<argument>TUNER_AUDIO_MODE_TEXT</argument>, <argument>TUNER_AUDIO_MODE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>i_tuner_audio_modes_list</argument>,
<argument>psz_tuner_audio_modes_list_text</argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>set_section</name><argument_list>( <argument>N_( <literal type="string">"Controls"</literal> )</argument>,
<argument>N_( <literal type="string">"Video capture controls (if supported by the device)"</literal> )</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"controls-reset"</literal></argument>, <argument>false</argument>, <argument>CTRL_RESET_TEXT</argument>,
<argument>CTRL_RESET_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"brightness"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>BRIGHTNESS_TEXT</argument>,
<argument>BRIGHTNESS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"brightness-auto"</literal></argument>, <argument>-<literal type="number">1</literal></argument>,
<argument>BRIGHTNESS_AUTO_TEXT</argument>, <argument>BRIGHTNESS_AUTO_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>tristate_vlc</argument>, <argument>tristate_user</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"contrast"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>CONTRAST_TEXT</argument>,
<argument>CONTRAST_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"saturation"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>SATURATION_TEXT</argument>,
<argument>SATURATION_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"hue"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>HUE_TEXT</argument>,
<argument>HUE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"hue-auto"</literal></argument>, <argument>-<literal type="number">1</literal></argument>,
<argument>HUE_AUTO_TEXT</argument>, <argument>HUE_AUTO_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>tristate_vlc</argument>, <argument>tristate_user</argument> )</argument_list></macro>
<macro><name>add_obsolete_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"black-level"</literal></argument> )</argument_list></macro> 
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"white-balance-temperature"</literal></argument>, <argument>-<literal type="number">1</literal></argument>,
<argument>WHITE_BALANCE_TEMP_TEXT</argument>, <argument>WHITE_BALANCE_TEMP_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_integer_range</name><argument_list>( <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">6500</literal></argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"auto-white-balance"</literal></argument>, <argument>-<literal type="number">1</literal></argument>,
<argument>AUTOWHITEBALANCE_TEXT</argument>, <argument>AUTOWHITEBALANCE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>tristate_vlc</argument>, <argument>tristate_user</argument> )</argument_list></macro>
<macro><name>add_obsolete_integer</name><argument_list>( <argument>CFG_PREFIX<literal type="string">"do-white-balance"</literal></argument> )</argument_list></macro> 
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"red-balance"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>REDBALANCE_TEXT</argument>,
<argument>REDBALANCE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"blue-balance"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>BLUEBALANCE_TEXT</argument>,
<argument>BLUEBALANCE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"gamma"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>GAMMA_TEXT</argument>,
<argument>GAMMA_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"autogain"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>AUTOGAIN_TEXT</argument>,
<argument>AUTOGAIN_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>tristate_vlc</argument>, <argument>tristate_user</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"gain"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>GAIN_TEXT</argument>,
<argument>GAIN_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"sharpness"</literal></argument>, <argument>-<literal type="number">1</literal></argument>,
<argument>SHARPNESS_TEXT</argument>, <argument>SHARPNESS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"chroma-gain"</literal></argument>, <argument>-<literal type="number">1</literal></argument>,
<argument>CHROMA_GAIN_TEXT</argument>, <argument>CHROMA_GAIN_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"chroma-gain-auto"</literal></argument>, <argument>-<literal type="number">1</literal></argument>,
<argument>CHROMA_GAIN_AUTO_TEXT</argument>, <argument>CHROMA_GAIN_AUTO_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX<literal type="string">"power-line-frequency"</literal></argument>, <argument>-<literal type="number">1</literal></argument>,
<argument>POWER_FREQ_TEXT</argument>, <argument>POWER_FREQ_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>power_freq_vlc</argument>, <argument>power_freq_user</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX<literal type="string">"backlight-compensation"</literal></argument>, <argument>-<literal type="number">1</literal></argument>,
<argument>BKLT_COMPENSATE_TEXT</argument>, <argument>BKLT_COMPENSATE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"band-stop-filter"</literal></argument>, <argument>-<literal type="number">1</literal></argument>,
<argument>BAND_STOP_FILTER_TEXT</argument>, <argument>BAND_STOP_FILTER_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"hflip"</literal></argument>, <argument>false</argument>, <argument>HFLIP_TEXT</argument>, <argument>HFLIP_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"vflip"</literal></argument>, <argument>false</argument>, <argument>VFLIP_TEXT</argument>, <argument>VFLIP_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"rotate"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>ROTATE_TEXT</argument>, <argument>ROTATE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">359</literal></argument> )</argument_list></macro>
<macro><name>add_obsolete_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"hcenter"</literal></argument> )</argument_list></macro> 
<macro><name>add_obsolete_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"vcenter"</literal></argument> )</argument_list></macro> 
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX<literal type="string">"color-killer"</literal></argument>, <argument>-<literal type="number">1</literal></argument>,
<argument>COLOR_KILLER_TEXT</argument>, <argument>COLOR_KILLER_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>tristate_vlc</argument>, <argument>tristate_user</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX<literal type="string">"color-effect"</literal></argument>, <argument>-<literal type="number">1</literal></argument>,
<argument>COLOR_EFFECT_TEXT</argument>, <argument>COLOR_EFFECT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>colorfx_vlc</argument>, <argument>colorfx_user</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"audio-volume"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>AUDIO_VOLUME_TEXT</argument>,
<argument>AUDIO_VOLUME_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"audio-balance"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>AUDIO_BALANCE_TEXT</argument>,
<argument>AUDIO_BALANCE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"audio-mute"</literal></argument>, <argument>false</argument>, <argument>AUDIO_MUTE_TEXT</argument>,
<argument>AUDIO_MUTE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"audio-bass"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>AUDIO_BASS_TEXT</argument>,
<argument>AUDIO_BASS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"audio-treble"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>AUDIO_TREBLE_TEXT</argument>,
<argument>AUDIO_TREBLE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"audio-loudness"</literal></argument>, <argument>false</argument>, <argument>AUDIO_LOUDNESS_TEXT</argument>,
<argument>AUDIO_LOUDNESS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"set-ctrls"</literal></argument>, <argument>NULL</argument>, <argument>S_CTRLS_TEXT</argument>,
<argument>S_CTRLS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_obsolete_string</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"adev"</literal></argument> )</argument_list></macro>
<macro><name>add_obsolete_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"audio-method"</literal></argument> )</argument_list></macro>
<macro><name>add_obsolete_bool</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"stereo"</literal></argument> )</argument_list></macro>
<macro><name>add_obsolete_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"samplerate"</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"v4l"</literal></argument>, <argument><literal type="string">"v4l2"</literal></argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">2</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>DemuxOpen</argument>, <argument>DemuxClose</argument> )</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"v4l"</literal></argument>, <argument><literal type="string">"v4l2"</literal></argument>, <argument><literal type="string">"v4l2c"</literal></argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Video4Linux compressed A/V input"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>AccessOpen</argument>, <argument>AccessClose</argument> )</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>
<macro><name>add_shortcut</name> <argument_list>(<argument><literal type="string">"radio"</literal></argument> )</argument_list></macro>
<macro><name>set_description</name> <argument_list>(<argument>N_(<literal type="string">"Video4Linux radio tuner"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name> <argument_list>(<argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name> <argument_list>(<argument>RadioOpen</argument>, <argument>RadioClose</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<function><type><name>void</name></type> <name>ParseMRL</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mrl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>mrl</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_LocationParse</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>CFG_PREFIX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p</name> <operator>&gt;</operator> <name>mrl</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dev</name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><name>mrl</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>mrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>mrl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dev</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>mrl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>dev</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name><literal type="string">"dev"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name><literal type="string">"dev"</literal></expr></argument>, <argument><expr><name>dev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>dev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>OpenDevice</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>caps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"opening device '%s'"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rawfd</name> <init>= <expr><call><name>vlc_open</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rawfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot open device '%s': %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>v4l2_fd_open</name> <argument_list>(<argument><expr><name>rawfd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot initialize user-space library: %s"</literal></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>rawfd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_capability</name></name></type> <name>cap</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>v4l2_ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_QUERYCAP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cap</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot get device capabilities: %s"</literal></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>v4l2_close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"device %s using driver %s (version %u.%u.%u) on %s"</literal></expr></argument>,
<argument><expr><name><name>cap</name><operator>.</operator><name>card</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>.</operator><name>driver</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>cap</name><operator>.</operator><name>version</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>cap</name><operator>.</operator><name>version</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>, <argument><expr><name><name>cap</name><operator>.</operator><name>version</name></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>, <argument><expr><name><name>cap</name><operator>.</operator><name>bus_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>.</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>V4L2_CAP_DEVICE_CAPS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" with capabilities 0x%08"</literal><name>PRIX32</name><literal type="string">" "</literal>
<literal type="string">"(overall 0x%08"</literal><name>PRIX32</name><literal type="string">")"</literal></expr></argument>, <argument><expr><name><name>cap</name><operator>.</operator><name>device_caps</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>.</operator><name>capabilities</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>caps</name> <operator>=</operator> <name><name>cap</name><operator>.</operator><name>device_caps</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" with unknown capabilities "</literal>
<literal type="string">"(overall 0x%08"</literal><name>PRIX32</name><literal type="string">")"</literal></expr></argument>, <argument><expr><name><name>cap</name><operator>.</operator><name>capabilities</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>caps</name> <operator>=</operator> <name><name>cap</name><operator>.</operator><name>capabilities</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>v4l2_std_id</name></type> <name>var_InheritStandard</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>var_InheritString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>V4L2_STD_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>n</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>standards_vlc</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>standards_vlc</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>static_assert</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>standards_vlc</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>standards_vlc</name></expr></argument>)</argument_list></sizeof>
<operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>standards_v4l2</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>standards_v4l2</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Inconsistent standards tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>static_assert</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>standards_vlc</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>standards_vlc</name></expr></argument>)</argument_list></sizeof>
<operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>standards_user</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>standards_user</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Inconsistent standards tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>standards_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>standards_v4l2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4l2_std_id</name></type> <name>std</name> <init>= <expr><call><name>strtoull</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"unknown video standard \"%s\""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name> <operator>=</operator> <name>V4L2_STD_UNKNOWN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>std</name></expr>;</return>
</block_content>}</block></function>
</unit>
