<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\unc.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_keystore.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"smb_common.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_smb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>url</name></decl>;</decl_stmt>
}</block></struct></type> <name>access_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Win32AddConnection</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>share</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>remote_name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>share</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>slen</name> <init>= <expr><call><name>strcspn</name><argument_list>(<argument><expr><operator>++</operator><name>share</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>remote_name</name></expr></argument>, <argument><expr><literal type="string">"\\\\%s\\%.*s"</literal></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><name>share</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>remote_name</name></expr></argument>, <argument><expr><literal type="string">"\\\\%s\\"</literal></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>NETRESOURCE</name></type> <name>net_resource</name> <init>= <expr><block>{
<expr><operator>.</operator><name>dwType</name> <operator>=</operator> <name>RESOURCETYPE_DISK</name></expr>,
<expr><operator>.</operator><name>lpRemoteName</name> <operator>=</operator> <call><name>ToWide</name><argument_list>(<argument><expr><name>remote_name</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>remote_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wpwd</name> <init>= <expr><ternary><condition><expr><name>pwd</name></expr> ?</condition><then> <expr><call><name>ToWide</name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wuser</name> <init>= <expr><ternary><condition><expr><name>user</name></expr> ?</condition><then> <expr><call><name>ToWide</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>WNetAddConnection2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>net_resource</name></expr></argument>, <argument><expr><name>wpwd</name></expr></argument>, <argument><expr><name>wuser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>NO_ERROR</name></expr>:</case>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"connected to %ls"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ERROR_ALREADY_ASSIGNED</name></expr>:</case>
<case>case <expr><name>ERROR_DEVICE_ALREADY_REMEMBERED</name></expr>:</case>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"already connected to %ls"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"failed to connect to %ls"</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>net_resource</name><operator>.</operator><name>lpRemoteName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>net_resource</name><operator>.</operator><name>lpRemoteName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wuser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>smb_get_uri</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_uri</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_pwd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_server</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_share_path</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>psz_server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSZ_SHARE_PATH_OR_NULL</name></cpp:macro> <cpp:value>psz_share_path ? psz_share_path : ""</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSZ_NAME_OR_NULL</name></cpp:macro> <cpp:value>psz_name ? "/" : "", psz_name ? psz_name : ""</cpp:value></cpp:define>
<if_stmt><if>if<condition>( <expr><name>psz_user</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Win32AddConnection</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>psz_server</name></expr></argument>, <argument><expr><name>psz_share_path</name></expr></argument>,
<argument><expr><name>psz_user</name></expr></argument>, <argument><expr><name>psz_pwd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>asprintf</name><argument_list>( <argument><expr><name>ppsz_uri</name></expr></argument>, <argument><expr><literal type="string">"//%s%s%s%s"</literal></expr></argument>, <argument><expr><name>psz_server</name></expr></argument>, <argument><expr><name>PSZ_SHARE_PATH_OR_NULL</name></expr></argument>,
<argument><expr><name>PSZ_NAME_OR_NULL</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Seek</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pos</name> <operator>&gt;=</operator> <name>INT64_MAX</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"seeking to %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>lseek</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_smb</name></name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"seek failed (%s)"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Read</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_read</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_read</name> <operator>=</operator> <call><name>read</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_smb</name></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"read failed (%s)"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_read</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_read</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DirRead</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_readdir_helper</name></name></type> <name>rdh</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_readdir_helper_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>SHARE_INFO_1</name> <modifier>*</modifier></type><name>p_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>i_share_enum_res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>i_nb_elem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>i_resume_handle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>i_total_elements</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wpsz_host</name> <init>= <expr><call><name>ToWide</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>wpsz_host</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>i_share_enum_res</name> <operator>=</operator> <call><name>NetShareEnum</name><argument_list>( <argument><expr><name>wpsz_host</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_info</name></expr></argument>,
<argument><expr><name>MAX_PREFERRED_LENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nb_elem</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_total_elements</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_resume_handle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_share_enum_res</name> <operator>==</operator> <name>ERROR_SUCCESS</name> <operator>||</operator>
<name>i_share_enum_res</name> <operator>==</operator> <name>ERROR_MORE_DATA</name></expr> )</condition>
<block>{<block_content>
<for>for <control>( <init><decl><type><name>DWORD</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb_elem</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>SHARE_INFO_1</name> <modifier>*</modifier></type><name>p_current</name> <init>= <expr><name>p_info</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_current</name><operator>-&gt;</operator><name>shi1_type</name></name> <operator>&amp;</operator> <name>STYPE_SPECIAL</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_name</name> <init>= <expr><call><name>FromWide</name><argument_list>( <argument><expr><name><name>p_current</name><operator>-&gt;</operator><name>shi1_netname</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_name</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_path</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>smb_get_uri</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>psz_path</name></name></expr></argument>,
<argument><expr><name>psz_name</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>




<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_uri</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_uri</name></expr></argument>, <argument><expr><literal type="string">"file:%s"</literal></expr></argument>, <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_readdir_helper_additem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>ITEM_TYPE_DIRECTORY</name></expr></argument>, <argument><expr><name>ITEM_NET</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>NetApiBufferFree</name><argument_list>( <argument><expr><name>p_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while<condition>( <expr><name>i_share_enum_res</name> <operator>==</operator> <name>ERROR_MORE_DATA</name> <operator>&amp;&amp;</operator> <name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>;</do>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>wpsz_host</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_readdir_helper_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rdh</name></expr></argument>, <argument><expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>STREAM_CAN_SEEK</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_CONTROL_PACE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_CAN_FASTSEEK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_GET_SIZE</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_GET_PTS_DELAY</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(
<argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"network-caching"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_SET_PAUSE_STATE</name></expr>:</case>

<break>break;</break>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_credential</name></type> <name>credential</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_decoded_path</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_uri</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_var_domain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_dir</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_UrlParseFixup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name><name>access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>url</name><operator>.</operator><name>psz_path</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_decoded_path</name> <operator>=</operator> <call><name>vlc_uri_decode_duplicate</name><argument_list>(<argument><expr><name><name>url</name><operator>.</operator><name>psz_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_decoded_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_credential_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz_var_domain</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"smb-domain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>credential</name><operator>.</operator><name>psz_realm</name></name> <operator>=</operator> <name>psz_var_domain</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_credential_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>, <argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"smb-user"</literal></expr></argument>, <argument><expr><literal type="string">"smb-pwd"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>smb_get_uri</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_uri</name></expr></argument>,
<argument><expr><name><name>credential</name><operator>.</operator><name>psz_username</name></name></expr></argument>, <argument><expr><name><name>credential</name><operator>.</operator><name>psz_password</name></name></expr></argument>,
<argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><name>psz_decoded_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_credential_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_var_domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_decoded_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>is_dir</name> <operator>=</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>is_dir</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EACCES</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_credential_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>, <argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"smb-user"</literal></expr></argument>,
<argument><expr><literal type="string">"smb-pwd"</literal></expr></argument>, <argument><expr><name>SMB_LOGIN_DIALOG_TITLE</name></expr></argument>,
<argument><expr><name>SMB_LOGIN_DIALOG_TEXT</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_credential_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>, <argument><expr><name>access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_credential_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>credential</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_var_domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_decoded_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_calloc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_dir</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <name>url</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>=</operator> <name>DirRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>access_vaDirectoryControlHelper</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_read</name></name> <operator>=</operator> <name>Read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>Seek</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_smb</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>i_smb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"UNC"</literal></argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"UNC input"</literal>)</argument>)</argument_list></macro>
<macro><name>set_help</name><argument_list>(<argument>N_(<literal type="string">"Microsoft Windows networking (UNC) input"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_ACCESS</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>(<argument><literal type="string">"smb-user"</literal></argument>, <argument>NULL</argument>, <argument>SMB_USER_TEXT</argument>, <argument>SMB_USER_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>add_password</name><argument_list>(<argument><literal type="string">"smb-pwd"</literal></argument>, <argument>NULL</argument>, <argument>SMB_PASS_TEXT</argument>, <argument>SMB_PASS_LONGTEXT</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>(<argument><literal type="string">"smb-domain"</literal></argument>, <argument>NULL</argument>, <argument>SMB_DOMAIN_TEXT</argument>, <argument>SMB_DOMAIN_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"smb"</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>
</unit>
