<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\satip.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTSP_DEFAULT_PORT</name></cpp:macro> <cpp:value>554</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTSP_RECEIVE_BUFFER</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTP_HEADER_SIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLEN</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEEPALIVE_INTERVAL</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEEPALIVE_MARGIN</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>satip_open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>satip_close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_TEXT</name></cpp:macro> <cpp:value>N_("Receive buffer")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_LONGTEXT</name></cpp:macro> <cpp:value>N_("UDP receive buffer size (bytes)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTICAST_TEXT</name></cpp:macro> <cpp:value>N_("Request multicast stream")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTICAST_LONGTEXT</name></cpp:macro> <cpp:value>N_("Request server to send stream as multicast")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SATIP_HOST_TEXT</name></cpp:macro> <cpp:value>N_("Host")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"satip"</literal></argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"SAT&gt;IP Receiver Plugin"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">201</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>satip_open</argument>, <argument>satip_close</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_ACCESS</argument>)</argument_list></macro>
<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"satip-buffer"</literal></argument>, <argument><literal type="number">0x400000</literal></argument>, <argument>BUFFER_TEXT</argument>, <argument>BUFFER_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"satip-multicast"</literal></argument>, <argument>false</argument>, <argument>MULTICAST_TEXT</argument>, <argument>MULTICAST_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>(<argument><literal type="string">"satip-host"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>SATIP_HOST_TEXT</argument>, <argument>SATIP_HOST_TEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_safe</name><argument_list>()</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"rtsp"</literal></argument>, <argument><literal type="string">"satip"</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>vlc_module_end</name><argument_list>()</argument_list></call>

enum <name>rtsp_state</name> <block>{
<expr><name>RTSP_IDLE</name></expr>,
<expr><name>RTSP_DESCRIBE</name></expr>,
<expr><name>RTSP_SETUP</name></expr>,
<expr><name>RTSP_PLAY</name></expr>,
<expr><name>RTSP_RUNNING</name></expr>
}</block></expr>;</expr_stmt>

<enum>enum <name>rtsp_result</name> <block>{
<decl><name>RTSP_RESULT_OK</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>,
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UDP_ADDRESS_LEN</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>content_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>session_id</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>stream_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keepalive_interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>udp_address</name><index>[<expr><name>UDP_ADDRESS_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>udp_port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tcp_sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>udp_sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtcp_sock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>rtsp_state</name></name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cseq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>fifo_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>last_seq_nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>woken</name></decl>;</decl_stmt>
}</block></struct></type> <name>access_sys_t</name>;</typedef>

<macro><name>VLC_FORMAT</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>void</name></type> <name>net_Printf</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>vasprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>net_Write</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_session</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>request_line</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tok</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>request_line</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>, <argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>max</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tok</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"timeout="</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>timeout</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>tok</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>timeout</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>timeout</name> <operator>-=</operator> <name>KEEPALIVE_MARGIN</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>timeout</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_port</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>p</name></expr></argument> &gt;</argument_list></name> <name>UINT16_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EBADVAR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_transport</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>request_line</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>request_line</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"RTP/AVP"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"multicast"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tok</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"destination="</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_address</name></name></expr></argument>, <argument><expr><name>tok</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tok</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UDP_ADDRESS_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><literal type="string">"port="</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>port</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>tok</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tok</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>end</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>parse_port</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>udp_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>net_readln_timeout</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>interrupted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>intr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>size</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EMSGSIZE</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto> 
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newbuf</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>newbuf</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>newbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>intr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>vlc_recv_i11e</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><name>MSG_PEEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>intr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>interrupted</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>interrupted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>pfd</name> <init>= <expr><block>{
<expr><operator>.</operator><name>fd</name> <operator>=</operator> <name>fd</name></expr>,
<expr><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><name>MSG_PEEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>end</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>buf</name> <operator>+</operator> <name>len</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>recv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>buf</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"read error: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>skip_whitespace</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while(*x == ' ') x++</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name><name>enum</name> <name>rtsp_result</name></name></type> <name>rtsp_handle</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>interrupted</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtsp_result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>have_header</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>content_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>


<while>while <condition>(<expr><operator>!</operator><name>have_header</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>net_readln_timeout</name><argument_list>(<argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>access</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>tcp_sock</name></name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>,
<argument><expr><name>interrupted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>in</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"RTSP/1.0 "</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rtsp_result</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"Content-Base:"</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>content_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>in</name> <operator>+</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_whitespace</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>content_base</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"Content-Length:"</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>in</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_whitespace</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>content_length</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"Session:"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>in</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_whitespace</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_session</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>keepalive_interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"Transport:"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>in</name> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_whitespace</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_transport</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rtsp_result</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"com.ses.streamID:"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>in</name> <operator>+</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_whitespace</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>have_header</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<while>while <condition>(<expr><name>content_length</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>read</name> <operator>=</operator> <call><name>net_Read</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>tcp_sock</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>content_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>content_length</name> <operator>-=</operator> <name>read</name></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>rtsp_result</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RECVMMSG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>satip_cleanup_blocks</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>input_blocks</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VLEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>input_blocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>input_blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_rtp_seq</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>seq_nr</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>seq_nr</name> <operator>==</operator> <name><name>sys</name><operator>-&gt;</operator><name>last_seq_nr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"Received duplicate packet (seq_nr=%"</literal><name>PRIu16</name><literal type="string">")"</literal></expr></argument>, <argument><expr><name>seq_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>seq_nr</name> <operator>&lt;</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>last_seq_nr</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"Received out of order packet (seq_nr=%"</literal><name>PRIu16</name><literal type="string">" &lt; %"</literal><name>PRIu16</name><literal type="string">")"</literal></expr></argument>,
<argument><expr><name>seq_nr</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>last_seq_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>++</operator><name><name>sys</name><operator>-&gt;</operator><name>last_seq_nr</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>seq_nr</name> <operator>&gt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>last_seq_nr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"Gap in seq_nr (%"</literal><name>PRIu16</name><literal type="string">" &gt; %"</literal><name>PRIu16</name><literal type="string">"), probably lost a packet"</literal></expr></argument>,
<argument><expr><name>seq_nr</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>last_seq_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>last_seq_nr</name></name> <operator>=</operator> <name>seq_nr</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>satip_teardown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>tcp_sock</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>session_id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>discard_buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>pfd</name> <init>= <expr><block>{
<expr><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>tcp_sock</name></name></expr>,
<expr><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLOUT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="string">"TEARDOWN %s RTSP/1.0\r\n"</literal>
<literal type="string">"CSeq: %d\r\n"</literal>
<literal type="string">"Session: %s\r\n\r\n"</literal></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>control</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cseq</name></name><operator>++</operator></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>tcp_sock</name></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>tcp_sock</name></name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>ioctlsocket</name><argument_list>(<argument>sys-&gt;tcp_sock</argument>, <argument>FIONBIO</argument>, <argument>&amp;(unsigned long){ <literal type="number">1</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><decl><type><name>int</name></type> <name>sent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>sent</name> <operator>&lt;</operator> <name>len</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"Timed out sending RTSP teardown\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_send</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>tcp_sock</name></name></expr></argument>, <argument><expr><name>msg</name> <operator>+</operator> <name>sent</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"Failed to send RTSP teardown: %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sent</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rtsp_handle</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RTSP_RESULT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"Failed to teardown RTSP session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<while>while <condition>(<expr><call><name>recv</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>tcp_sock</name></name></expr></argument>, <argument><expr><name>discard_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>discard_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>



<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">150</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECV_TIMEOUT</name></cpp:macro> <cpp:value>VLC_TICK_FROM_SEC(2)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>satip_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sock</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>udp_sock</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>last_recv</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>next_keepalive</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>keepalive_interval</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RECVMMSG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>mmsghdr</name></name></type> <name><name>msgs</name><index>[<expr><name>VLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>iovecs</name><index>[<expr><name>VLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name><name>input_blocks</name><index>[<expr><name>VLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VLEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msgs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>msgs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msgs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>msg_hdr</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>iovecs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msgs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>msg_hdr</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iovecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iovecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>RTSP_RECEIVE_BUFFER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input_blocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>ufd</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ufd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>sock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ufd</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name>last_recv</name> <operator>&gt;</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name>RECV_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RECVMMSG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VLEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>input_blocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>input_blocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>(<argument><expr><name>RTSP_RECEIVE_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>input_blocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>iovecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name><name>input_blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_buffer</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_cleanup_push</name><argument_list>(<argument><expr><name>satip_cleanup_blocks</name></expr></argument>, <argument><expr><name>input_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>recvmmsg</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>msgs</name></expr></argument>, <argument><expr><name>VLEN</name></expr></argument>, <argument><expr><name>MSG_WAITFORONE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_recv</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>retval</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name><name>input_blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>msgs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>check_rtp_seq</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>RTP_HEADER_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>RTP_HEADER_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_FifoPut</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input_blocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>poll</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ufd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name>RTSP_RECEIVE_BUFFER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate memory for input buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_cleanup_push</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>RTSP_RECEIVE_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>RTP_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_rtp_seq</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>last_recv</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>RTP_HEADER_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>RTP_HEADER_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_FifoPut</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>keepalive_interval</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>next_keepalive</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>net_Printf</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>tcp_sock</name></name></expr></argument>,
<argument><expr><literal type="string">"OPTIONS %s RTSP/1.0\r\n"</literal>
<literal type="string">"CSeq: %d\r\n"</literal>
<literal type="string">"Session: %s\r\n\r\n"</literal></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>control</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cseq</name></name><operator>++</operator></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rtsp_handle</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RTSP_RESULT_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"Failed to keepalive RTSP session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next_keepalive</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>keepalive_interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RECVMMSG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>satip_cleanup_blocks</name><argument_list>(<argument><expr><name>input_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"timed out waiting for data..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>woken</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Signal</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name><modifier>*</modifier></type> <name>satip_block</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>eof</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_fifo_Lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>vlc_fifo_IsEmpty</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>woken</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Wait</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>block</name> <operator>=</operator> <call><name>vlc_fifo_DequeueUnlocked</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>woken</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_fifo_Unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>block</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>satip_control</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_bool</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>i_query</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>STREAM_CAN_CONTROL_PACE</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_SEEK</name></expr>:</case>
<case>case <expr><name>STREAM_CAN_PAUSE</name></expr>:</case>
<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STREAM_GET_PTS_DELAY</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator>
<call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"live-caching"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>satip_bind_ports</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>rnd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_rand_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rnd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_port</name></name> <operator>=</operator> <literal type="number">9000</literal> <operator>+</operator> <operator>(</operator><name>rnd</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt> 
<while>while <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>udp_sock</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_sock</name></name> <operator>=</operator> <call><name>net_OpenDgram</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"0.0.0.0"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_port</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>udp_sock</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>udp_port</name></name> <operator>==</operator> <literal type="number">65534</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_port</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>rtcp_sock</name></name> <operator>=</operator> <call><name>net_OpenDgram</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"0.0.0.0"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_port</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>rtcp_sock</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_port</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>udp_sock</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"Could not open two adjacent ports for RTP and RTCP data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>satip_open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>multicast</name> <init>= <expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"satip-multicast"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name> <operator>=</operator> <call><name>vlc_obj_calloc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"try to open '%s'"</literal></expr></argument>, <argument><expr><name><name>access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_host</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"satip-host"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_sock</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>rtcp_sock</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>tcp_sock</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>





<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_lower_url</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>access</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_lower_url</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_host</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>psz_lower_url</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>psz_lower_url</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name><name>psz_lower_url</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_UrlParse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name>psz_lower_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>url</name><operator>.</operator><name>i_port</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>url</name><operator>.</operator><name>i_port</name></name> <operator>=</operator> <name>RTSP_DEFAULT_PORT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_host</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>url</name><operator>.</operator><name>psz_host</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_host</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>psz_host</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>url</name><operator>.</operator><name>psz_host</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>url</name><operator>.</operator><name>psz_host</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"malformed URL: %s"</literal></expr></argument>, <argument><expr><name>psz_lower_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"connect to host '%s'"</literal></expr></argument>, <argument><expr><name>psz_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>tcp_sock</name></name> <operator>=</operator> <call><name>net_Connect</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>psz_host</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>i_port</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>tcp_sock</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"Failed to connect to RTSP server %s:%d"</literal></expr></argument>,
<argument><expr><name>psz_host</name></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>i_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<macro><name>setsockopt</name> <argument_list>(<argument>sys-&gt;tcp_sock</argument>, <argument>SOL_SOCKET</argument>, <argument>SO_KEEPALIVE</argument>, <argument>&amp;(int){ <literal type="number">1</literal> }</argument>, <argument>sizeof (int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>content_base</name></name></expr></argument>, <argument><expr><literal type="string">"rtsp://%s:%d/"</literal></expr></argument>, <argument><expr><name>psz_host</name></expr></argument>,
<argument><expr><name><name>url</name><operator>.</operator><name>i_port</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>content_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>last_seq_nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>keepalive_interval</name></name> <operator>=</operator> <operator>(</operator><name>KEEPALIVE_INTERVAL</name> <operator>-</operator> <name>KEEPALIVE_MARGIN</name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>setup_url</name> <init>= <expr><name>url</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name><name>setup_url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><literal type="string">"sat.ip"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>setup_url</name><operator>.</operator><name>psz_host</name></name> <operator>=</operator> <name>psz_host</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>setup_url</name><operator>.</operator><name>psz_protocol</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>strncasecmp</name><argument_list>( <argument><expr><name><name>setup_url</name><operator>.</operator><name>psz_protocol</name></name></expr></argument>, <argument><expr><literal type="string">"satip"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>setup_url</name><operator>.</operator><name>psz_protocol</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"rtsp"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_setup_url</name> <init>= <expr><call><name>vlc_uri_compose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setup_url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_setup_url</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>multicast</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>net_Printf</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>tcp_sock</name></name></expr></argument>,
<argument><expr><literal type="string">"SETUP %s RTSP/1.0\r\n"</literal>
<literal type="string">"CSeq: %d\r\n"</literal>
<literal type="string">"Transport: RTP/AVP;multicast\r\n\r\n"</literal></expr></argument>,
<argument><expr><name>psz_setup_url</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cseq</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>satip_bind_ports</name><argument_list>(<argument><expr><name>access</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_setup_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>net_Printf</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>tcp_sock</name></name></expr></argument>,
<argument><expr><literal type="string">"SETUP %s RTSP/1.0\r\n"</literal>
<literal type="string">"CSeq: %d\r\n"</literal>
<literal type="string">"Transport: RTP/AVP;unicast;client_port=%d-%d\r\n\r\n"</literal></expr></argument>,
<argument><expr><name>psz_setup_url</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cseq</name></name><operator>++</operator></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_port</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_port</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_setup_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>interrupted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rtsp_handle</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>interrupted</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RTSP_RESULT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"Failed to setup RTSP session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>control</name></name></expr></argument>, <argument><expr><literal type="string">"%sstream=%d"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>content_base</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>control</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>interrupted</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"SETUP was interrupted, abort startup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>vlc_msleep_i11e</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>multicast</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_sock</name></name> <operator>=</operator> <call><name>net_OpenDgram</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_address</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_port</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_port</name></name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>udp_sock</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"Failed to open UDP socket for listening."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>rtcp_sock</name></name> <operator>=</operator> <call><name>net_OpenDgram</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_address</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_port</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_port</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>rtcp_sock</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"Failed to open RTCP socket for listening."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>net_Printf</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>tcp_sock</name></name></expr></argument>,
<argument><expr><literal type="string">"PLAY %s RTSP/1.0\r\n"</literal>
<literal type="string">"CSeq: %d\r\n"</literal>
<literal type="string">"Session: %s\r\n\r\n"</literal></expr></argument>,
<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>control</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cseq</name></name><operator>++</operator></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rtsp_handle</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RTSP_RESULT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"Failed to play RTSP session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name> <operator>=</operator> <call><name>block_FifoNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate block fifo."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo_size</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"satip-buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>satip_thread</name></expr></argument>, <argument><expr><name>access</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_INPUT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><literal type="string">"Failed to create worker thread."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>satip_control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>access</name><operator>-&gt;</operator><name>pf_block</name></name> <operator>=</operator> <name>satip_block</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_lower_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_lower_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>satip_teardown</name><argument_list>(<argument><expr><name>access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_FifoRelease</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>udp_sock</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>net_Close</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>rtcp_sock</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>net_Close</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>rtcp_sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>tcp_sock</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>net_Close</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>tcp_sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>content_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>satip_close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>access</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>satip_teardown</name><argument_list>(<argument><expr><name>access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_FifoRelease</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>net_Close</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>udp_sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>net_Close</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>rtcp_sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>net_Close</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>tcp_sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>content_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
