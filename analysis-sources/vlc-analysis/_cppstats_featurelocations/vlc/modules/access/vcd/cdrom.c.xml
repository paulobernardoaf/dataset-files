<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\vcd\cdrom.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_DOSDEVIOCTL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>SYS_BSDI</name></expr></argument> )</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvd.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>__APPLE__</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreFoundation/CFBase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;IOKit/IOKitLib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;IOKit/storage/IOCDTypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;IOKit/storage/IOCDMedia.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;IOKit/storage/IOCDMediaBSDClient.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>HAVE_SCSIREQ_IN_SYS_SCSIIO_H</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/scsiio.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>HAVE_IOC_TOC_HEADER_IN_SYS_CDIO_H</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdrio.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winioctl.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/cdrom.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__OS2__</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;os2safe.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;os2.h&gt;</cpp:file></cpp:include>








<function><type><specifier>static</specifier> <name>APIRET</name></type> <name>vlc_DosDevIOCtl</name><parameter_list>( <parameter><decl><type><name>HFILE</name></type> <name>hdevice</name></decl></parameter>, <parameter><decl><type><name>ULONG</name></type> <name>category</name></decl></parameter>, <parameter><decl><type><name>ULONG</name></type> <name>function</name></decl></parameter>,
<parameter><decl><type><name>PVOID</name></type> <name>pParams</name></decl></parameter>, <parameter><decl><type><name>ULONG</name></type> <name>cbParamLenMax</name></decl></parameter>,
<parameter><decl><type><name>PULONG</name></type> <name>pcbParamLen</name></decl></parameter>, <parameter><decl><type><name>PVOID</name></type> <name>pData</name></decl></parameter>,
<parameter><decl><type><name>ULONG</name></type> <name>cbDataLenMax</name></decl></parameter>, <parameter><decl><type><name>PULONG</name></type> <name>pcbDataLen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PVOID</name></type> <name>pParamsLow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PVOID</name></type> <name>pDataLow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>cbParamLenLow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>cbDataLenLow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>APIRET</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>DosAllocMem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pParamsLow</name></expr></argument>, <argument><expr><name>cbParamLenMax</name></expr></argument>, <argument><expr><name>fALLOC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit_free</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>DosAllocMem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pDataLow</name></expr></argument>, <argument><expr><name>cbDataLenMax</name></expr></argument>, <argument><expr><name>fALLOC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit_free</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>pParamsLow</name></expr></argument>, <argument><expr><name>pParams</name></expr></argument>, <argument><expr><name>cbParamLenMax</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>pDataLow</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>cbDataLenMax</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cbParamLenLow</name> <operator>=</operator> <operator>*</operator><name>pcbParamLen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cbDataLenLow</name> <operator>=</operator> <operator>*</operator><name>pcbDataLen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>DosDevIOCtl</name><argument_list>( <argument><expr><name>hdevice</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>function</name></expr></argument>, <argument><expr><name>pParamsLow</name></expr></argument>,
<argument><expr><name>cbParamLenMax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbParamLenLow</name></expr></argument>, <argument><expr><name>pDataLow</name></expr></argument>, <argument><expr><name>cbDataLenMax</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cbDataLenLow</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>rc</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>pParams</name></expr></argument>, <argument><expr><name>pParamsLow</name></expr></argument>, <argument><expr><name>cbParamLenMax</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>pDataLow</name></expr></argument>, <argument><expr><name>cbDataLenMax</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pcbParamLen</name> <operator>=</operator> <name>cbParamLenLow</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pcbDataLen</name> <operator>=</operator> <name>cbDataLenLow</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>exit_free</name>:</label>
<expr_stmt><expr><call><name>DosFreeMem</name><argument_list>( <argument><expr><name>pParamsLow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DosFreeMem</name><argument_list>( <argument><expr><name>pDataLow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DosDevIOCtl</name></cpp:macro> <cpp:value>vlc_DosDevIOCtl</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> FIXME</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdrom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdrom_internals.h"</cpp:file></cpp:include>




<function><type><name>vcddev_t</name> <modifier>*</modifier></type><name>ioctl_Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_dev</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_is_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vcddev_t</name> <modifier>*</modifier></type><name>p_vcddev</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>( <argument><expr><name>__OS2__</name></expr></argument> )</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>fileinfo</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_dev</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>p_vcddev</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_vcddev</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_vcddev</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_vcdimage_handle</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>psz_dev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vcddev</name><operator>-&gt;</operator><name>toc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>toc</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_is_file</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>( <argument><expr><name>__OS2__</name></expr></argument> )</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><operator>(</operator><call><name>strlen</name><argument_list>( <argument><expr><name>psz_dev</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>psz_dev</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_is_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stat</name><argument_list>( <argument><expr><name>psz_dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileinfo</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_vcddev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>S_ISBLK</name><argument_list>( <argument><expr><name><name>fileinfo</name><operator>.</operator><name>st_mode</name></name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>S_ISCHR</name><argument_list>( <argument><expr><name><name>fileinfo</name><operator>.</operator><name>st_mode</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_is_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name>b_is_file</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>OpenVCDImage</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_dev</name></expr></argument>, <argument><expr><name>p_vcddev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>win32_vcd_open</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_dev</name></expr></argument>, <argument><expr><name>p_vcddev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__OS2__</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>os2_vcd_open</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_dev</name></expr></argument>, <argument><expr><name>p_vcddev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_device_handle</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_device_handle</name></name> <operator>=</operator> <call><name>vlc_open</name><argument_list>( <argument><expr><name>psz_dev</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_device_handle</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>psz_dev</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>strdup</name><argument_list>( <argument><expr><name>psz_dev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_vcddev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_vcddev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>p_vcddev</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>ioctl_Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter>, <parameter><decl><type><name>vcddev_t</name> <modifier>*</modifier></type><name>p_vcddev</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>psz_dev</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_vcdimage_handle</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>




<expr_stmt><expr><call><name>CloseVCDImage</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_vcddev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>h_device_handle</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>h_device_handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__OS2__</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<if_stmt><if>if<condition>( <expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>hcd</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DosClose</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>hcd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>( <expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_device_handle</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_close</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_device_handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_vcddev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>vcddev_toc_t</name> <modifier>*</modifier></type> <name>ioctl_GetTOC</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vcddev_t</name> <modifier>*</modifier></type><name>p_vcddev</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_fill_sectorinfo</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vcddev_toc_t</name> <modifier>*</modifier></type><name>p_toc</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_toc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_toc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_vcdimage_handle</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>




<expr_stmt><expr><operator>*</operator><name>p_toc</name> <operator>=</operator> <name><name>p_vcddev</name><operator>-&gt;</operator><name>toc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_fill_sectorinfo</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_toc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name></expr></argument>, <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>toc</name><operator>.</operator><name>p_sectors</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_toc</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__APPLE__</name></expr></argument> )</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>CDTOC</name> <modifier>*</modifier></type><name>pTOC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_descriptors</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>pTOC</name> <operator>=</operator> <call><name>darwin_getTOC</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>p_vcddev</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"failed to get the TOC"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vcddev_toc_Free</name><argument_list>( <argument><expr><name>p_toc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_descriptors</name> <operator>=</operator> <call><name>CDTOCGetDescriptorCount</name><argument_list>( <argument><expr><name>pTOC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>=</operator> <call><name>darwin_getNumberOfTracks</name><argument_list>( <argument><expr><name>pTOC</name></expr></argument>, <argument><expr><name>i_descriptors</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_toc</name><operator>-&gt;</operator><name>i_first_track</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_toc</name><operator>-&gt;</operator><name>i_last_track</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_fill_sectorinfo</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>i_leadout</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CDTOCDescriptor</name> <modifier>*</modifier></type><name>pTrackDescriptors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name>track</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vcddev_toc_Free</name><argument_list>( <argument><expr><name>p_toc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>darwin_freeTOC</name><argument_list>( <argument><expr><name>pTOC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pTrackDescriptors</name> <operator>=</operator> <name><name>pTOC</name><operator>-&gt;</operator><name>descriptors</name></name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_descriptors</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>track</name> <operator>=</operator> <name><name>pTrackDescriptors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>point</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>track</name> <operator>==</operator> <literal type="number">0xA2</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_leadout</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>track</name> <operator>&gt;</operator> <name>CD_MAX_TRACK_NO</name> <operator>||</operator> <name>track</name> <operator>&lt;</operator> <name>CD_MIN_TRACK_NO</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>]</index></name><operator>.</operator><name>i_control</name> <operator>=</operator> <name><name>pTrackDescriptors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name><operator>++</operator></expr>]</index></name><operator>.</operator><name>i_lba</name> <operator>=</operator>
<call><name>CDConvertMSFToLBA</name><argument_list>( <argument><expr><name><name>pTrackDescriptors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_leadout</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"leadout not found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vcddev_toc_Free</name><argument_list>( <argument><expr><name>p_toc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>darwin_freeTOC</name><argument_list>( <argument><expr><name>pTOC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>]</index></name><operator>.</operator><name>i_lba</name> <operator>=</operator>
<call><name>CDConvertMSFToLBA</name><argument_list>( <argument><expr><name><name>pTrackDescriptors</name><index>[<expr><name>i_leadout</name></expr>]</index></name><operator>.</operator><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>darwin_freeTOC</name><argument_list>( <argument><expr><name>pTOC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwBytesReturned</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CDROM_TOC</name></type> <name>cdrom_toc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>DeviceIoControl</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>h_device_handle</name></name></expr></argument>, <argument><expr><name>IOCTL_CDROM_READ_TOC</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cdrom_toc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CDROM_TOC</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dwBytesReturned</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"could not read TOCHDR"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vcddev_toc_Free</name><argument_list>( <argument><expr><name>p_toc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>=</operator> <name><name>cdrom_toc</name><operator>.</operator><name>LastTrack</name></name> <operator>-</operator> <name><name>cdrom_toc</name><operator>.</operator><name>FirstTrack</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_first_track</name></name> <operator>=</operator> <name><name>cdrom_toc</name><operator>.</operator><name>FirstTrack</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_last_track</name></name> <operator>=</operator> <name><name>cdrom_toc</name><operator>.</operator><name>LastTrack</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_fill_sectorinfo</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vcddev_toc_Free</name><argument_list>( <argument><expr><name>p_toc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>i_control</name> <operator>=</operator> <name><name>cdrom_toc</name><operator>.</operator><name>TrackData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>i_lba</name> <operator>=</operator> <call><name>MSF_TO_LBA2</name><argument_list>(
<argument><expr><name><name>cdrom_toc</name><operator>.</operator><name>TrackData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Address</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cdrom_toc</name><operator>.</operator><name>TrackData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Address</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cdrom_toc</name><operator>.</operator><name>TrackData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Address</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"p_sectors: %i, %i"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__OS2__</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>cdrom_get_tochdr_t</name></type> <name>get_tochdr</name> <init>= <expr><block>{<expr><block>{<expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdrom_tochdr_t</name></type> <name>tochdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>param_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>data_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>DosDevIOCtl</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>hcd</name></name></expr></argument>, <argument><expr><name>IOCTL_CDROMAUDIO</name></expr></argument>,
<argument><expr><name>CDROMAUDIO_GETAUDIODISK</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>get_tochdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>get_tochdr</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>param_len</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>tochdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>tochdr</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"could not read TOCHDR"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>=</operator> <name><name>tochdr</name><operator>.</operator><name>last_track</name></name> <operator>-</operator> <name><name>tochdr</name><operator>.</operator><name>first_track</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_first_track</name></name> <operator>=</operator> <name><name>tochdr</name><operator>.</operator><name>first_track</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_last_track</name></name> <operator>=</operator> <name><name>tochdr</name><operator>.</operator><name>last_track</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_fill_sectorinfo</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>cdrom_get_track_t</name></type> <name>get_track</name> <init>= <expr><block>{<expr><block>{<expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>, }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdrom_track_t</name></type> <name>track</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vcddev_toc_Free</name><argument_list>( <argument><expr><name>p_toc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>get_track</name><operator>.</operator><name>track</name></name> <operator>=</operator> <name><name>tochdr</name><operator>.</operator><name>first_track</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>DosDevIOCtl</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>hcd</name></name></expr></argument>, <argument><expr><name>IOCTL_CDROMAUDIO</name></expr></argument>,
<argument><expr><name>CDROMAUDIO_GETAUDIOTRACK</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>get_track</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>get_track</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>param_len</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>track</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"could not read %d track"</literal></expr></argument>,
<argument><expr><name><name>get_track</name><operator>.</operator><name>track</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vcddev_toc_Free</name><argument_list>( <argument><expr><name>p_toc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>i_lba</name> <operator>=</operator> <call><name>MSF_TO_LBA2</name><argument_list>(
<argument><expr><name><name>track</name><operator>.</operator><name>start</name><operator>.</operator><name>minute</name></name></expr></argument>,
<argument><expr><name><name>track</name><operator>.</operator><name>start</name><operator>.</operator><name>second</name></name></expr></argument>,
<argument><expr><name><name>track</name><operator>.</operator><name>start</name><operator>.</operator><name>frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"p_sectors: %i, %i"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>i_lba</name> <operator>=</operator> <call><name>MSF_TO_LBA2</name><argument_list>(
<argument><expr><name><name>tochdr</name><operator>.</operator><name>lead_out</name><operator>.</operator><name>minute</name></name></expr></argument>,
<argument><expr><name><name>tochdr</name><operator>.</operator><name>lead_out</name><operator>.</operator><name>second</name></name></expr></argument>,
<argument><expr><name><name>tochdr</name><operator>.</operator><name>lead_out</name><operator>.</operator><name>frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"p_sectors: %i, %i"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>HAVE_IOC_TOC_HEADER_IN_SYS_CDIO_H</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>( <argument><expr><name>HAVE_SCSIREQ_IN_SYS_SCSIIO_H</name></expr></argument> )</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name><name>struct</name> <name>ioc_toc_header</name></name></type> <name>tochdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ioc_read_toc_entry</name></name></type> <name>toc_entries</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_device_handle</name></name></expr></argument>, <argument><expr><name>CDIOREADTOCHEADER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tochdr</name></expr></argument> )</argument_list></call>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"could not read TOCHDR"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vcddev_toc_Free</name><argument_list>( <argument><expr><name>p_toc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>=</operator> <name><name>tochdr</name><operator>.</operator><name>ending_track</name></name> <operator>-</operator> <name><name>tochdr</name><operator>.</operator><name>starting_track</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_first_track</name></name> <operator>=</operator> <name><name>tochdr</name><operator>.</operator><name>starting_track</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_last_track</name></name> <operator>=</operator> <name><name>tochdr</name><operator>.</operator><name>ending_track</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_fill_sectorinfo</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vcddev_toc_Free</name><argument_list>( <argument><expr><name>p_toc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>toc_entries</name><operator>.</operator><name>address_format</name></name> <operator>=</operator> <name>CD_LBA_FORMAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>toc_entries</name><operator>.</operator><name>starting_track</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>toc_entries</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <operator>(</operator> <name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator>
<sizeof>sizeof<argument_list>( <argument><expr>struct <name>cd_toc_entry</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>toc_entries</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator>struct <name>cd_toc_entry</name> <operator>*</operator><operator>)</operator>
<call><name>malloc</name><argument_list>( <argument><expr><name><name>toc_entries</name><operator>.</operator><name>data_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>toc_entries</name><operator>.</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vcddev_toc_Free</name><argument_list>( <argument><expr><name>p_toc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_device_handle</name></name></expr></argument>, <argument><expr><name>CDIOREADTOCENTRYS</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>toc_entries</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"could not read the TOC"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>toc_entries</name><operator>.</operator><name>data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vcddev_toc_Free</name><argument_list>( <argument><expr><name>p_toc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>HAVE_SCSIREQ_IN_SYS_SCSIIO_H</name></expr></argument> )</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>i_lba</name> <operator>=</operator> <name><name>toc_entries</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>addr</name><operator>.</operator><name>lba</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>i_lba</name> <operator>=</operator> <call><name>ntohl</name><argument_list>( <argument><expr><name><name>toc_entries</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>addr</name><operator>.</operator><name>lba</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>cdrom_tochdr</name></name></type> <name>tochdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cdrom_tocentry</name></name></type> <name>tocent</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_device_handle</name></name></expr></argument>, <argument><expr><name>CDROMREADTOCHDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tochdr</name></expr></argument> )</argument_list></call>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"could not read TOCHDR"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_toc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>=</operator> <name><name>tochdr</name><operator>.</operator><name>cdth_trk1</name></name> <operator>-</operator> <name><name>tochdr</name><operator>.</operator><name>cdth_trk0</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_first_track</name></name> <operator>=</operator> <name><name>tochdr</name><operator>.</operator><name>cdth_trk0</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_last_track</name></name> <operator>=</operator> <name><name>tochdr</name><operator>.</operator><name>cdth_trk1</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_fill_sectorinfo</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_toc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>tocent</name><operator>.</operator><name>cdte_format</name></name> <operator>=</operator> <name>CDROM_LBA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tocent</name><operator>.</operator><name>cdte_track</name></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator> <name>i</name> <operator>==</operator> <name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>)</operator></expr> ?</condition><then> <expr><name>CDROM_LEADOUT</name></expr> </then><else>: <expr><name><name>tochdr</name><operator>.</operator><name>cdth_trk0</name></name> <operator>+</operator> <name>i</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_device_handle</name></name></expr></argument>, <argument><expr><name>CDROMREADTOCENTRY</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>tocent</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"could not read TOCENTRY"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_toc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>i_lba</name> <operator>=</operator> <name><name>tocent</name><operator>.</operator><name>cdte_addr</name><operator>.</operator><name>lba</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>i_control</name> <operator>=</operator> <name><name>tocent</name><operator>.</operator><name>cdte_ctrl</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>p_toc</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>ioctl_ReadSectors</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vcddev_t</name> <modifier>*</modifier></type><name>p_vcddev</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_sector</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_nb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>VCD_TYPE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_nb</name></expr></argument>, <argument><expr><name>VCD_SECTOR_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name>p_buffer</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_vcdimage_handle</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>



<if_stmt><if>if<condition>( <expr><call><name>lseek</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_vcdimage_handle</name></name></expr></argument>, <argument><expr><name>i_sector</name> <operator>*</operator> <name>VCD_SECTOR_SIZE</name></expr></argument>,
<argument><expr><name>SEEK_SET</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Could not lseek to sector %d"</literal></expr></argument>, <argument><expr><name>i_sector</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>read</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_vcdimage_handle</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>VCD_SECTOR_SIZE</name> <operator>*</operator> <name>i_nb</name></expr></argument>)</argument_list></call>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Could not read sector %d"</literal></expr></argument>, <argument><expr><name>i_sector</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if>
<else>else
<block>{<block_content>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__APPLE__</name></expr></argument> )</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>dk_cd_read_t</name></type> <name>cd_read</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cd_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cd_read</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cd_read</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>i_sector</name> <operator>*</operator> <name>VCD_SECTOR_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd_read</name><operator>.</operator><name>sectorArea</name></name> <operator>=</operator> <name>kCDSectorAreaSync</name> <operator>|</operator> <name>kCDSectorAreaHeader</name> <operator>|</operator>
<name>kCDSectorAreaSubHeader</name> <operator>|</operator> <name>kCDSectorAreaUser</name> <operator>|</operator>
<name>kCDSectorAreaAuxiliary</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd_read</name><operator>.</operator><name>sectorType</name></name> <operator>=</operator> <name>kCDSectorTypeUnknown</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cd_read</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cd_read</name><operator>.</operator><name>bufferLength</name></name> <operator>=</operator> <name>VCD_SECTOR_SIZE</name> <operator>*</operator> <name>i_nb</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_device_handle</name></name></expr></argument>, <argument><expr><name>DKIOCCDREAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cd_read</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"could not read block %d"</literal></expr></argument>, <argument><expr><name>i_sector</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwBytesReturned</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RAW_READ_INFO</name></type> <name>cdrom_raw</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>cdrom_raw</name><operator>.</operator><name>DiskOffset</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name>CD_SECTOR_SIZE</name> <operator>*</operator> <name>i_sector</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cdrom_raw</name><operator>.</operator><name>SectorCount</name></name> <operator>=</operator> <name>i_nb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cdrom_raw</name><operator>.</operator><name>TrackMode</name></name> <operator>=</operator> <ternary><condition><expr><name>i_type</name> <operator>==</operator> <name>VCD_TYPE</name></expr> ?</condition><then> <expr><name>XAForm2</name></expr> </then><else>: <expr><name>CDDA</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>DeviceIoControl</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>h_device_handle</name></name></expr></argument>, <argument><expr><name>IOCTL_CDROM_RAW_READ</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cdrom_raw</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RAW_READ_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>p_block</name></expr></argument>,
<argument><expr><name>VCD_SECTOR_SIZE</name> <operator>*</operator> <name>i_nb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwBytesReturned</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>VCD_TYPE</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>cdrom_raw</name><operator>.</operator><name>TrackMode</name></name> <operator>=</operator> <name>YellowMode2</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>DeviceIoControl</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>h_device_handle</name></name></expr></argument>,
<argument><expr><name>IOCTL_CDROM_RAW_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cdrom_raw</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RAW_READ_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>p_block</name></expr></argument>,
<argument><expr><name>VCD_SECTOR_SIZE</name> <operator>*</operator> <name>i_nb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwBytesReturned</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__OS2__</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>cdrom_readlong_t</name></type> <name>readlong</name> <init>= <expr><block>{<expr><block>{<expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>, }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>param_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>data_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>readlong</name><operator>.</operator><name>addr_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>readlong</name><operator>.</operator><name>sectors</name></name> <operator>=</operator> <name>i_nb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>readlong</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name>i_sector</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>DosDevIOCtl</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>hcd</name></name></expr></argument>, <argument><expr><name>IOCTL_CDROMDISK</name></expr></argument>, <argument><expr><name>CDROMDISK_READLONG</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>readlong</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>readlong</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>param_len</name></expr></argument>,
<argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>VCD_SECTOR_SIZE</name> <operator>*</operator> <name>i_nb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"could not read block %d"</literal></expr></argument>, <argument><expr><name>i_sector</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>HAVE_SCSIREQ_IN_SYS_SCSIIO_H</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name><name>struct</name> <name>scsireq</name></name></type> <name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xBE</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>i_type</name> <operator>==</operator> <name>VCD_TYPE</name></expr> ?</condition><then> <expr><name>SECTOR_TYPE_MODE2_FORM2</name></expr></then><else>:
<expr><name>SECTOR_TYPE_CDDA</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_sector</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_sector</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_sector</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_sector</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_nb</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_nb</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_nb</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>i_type</name> <operator>==</operator> <name>VCD_TYPE</name></expr> ?</condition><then> <expr><name>READ_CD_RAW_MODE2</name></expr> </then><else>: <expr><name>READ_CD_USERDATA</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>sc</name><operator>.</operator><name>cmdlen</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>.</operator><name>databuf</name></name> <operator>=</operator> <operator>(</operator><name>caddr_t</name><operator>)</operator><name>p_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>.</operator><name>datalen</name></name> <operator>=</operator> <name>VCD_SECTOR_SIZE</name> <operator>*</operator> <name>i_nb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>.</operator><name>senselen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name><name>sc</name><operator>.</operator><name>sense</name></name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>SCCMD_READ</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_device_handle</name></name></expr></argument>, <argument><expr><name>SCIOCCOMMAND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"SCIOCCOMMAND failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>sc</name><operator>.</operator><name>retsts</name></name> <operator>||</operator> <name><name>sc</name><operator>.</operator><name>error</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"SCSI command failed: status %d error %d"</literal></expr></argument>,
<argument><expr><name><name>sc</name><operator>.</operator><name>retsts</name></name></expr></argument>, <argument><expr><name><name>sc</name><operator>.</operator><name>error</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>HAVE_IOC_TOC_HEADER_IN_SYS_CDIO_H</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><name>VCD_SECTOR_SIZE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_device_handle</name></name></expr></argument>, <argument><expr><name>CDRIOCSETBLOCKSIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument> )</argument_list></call>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Could not set block size"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lseek</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_device_handle</name></name></expr></argument>,
<argument><expr><name>i_sector</name> <operator>*</operator> <name>VCD_SECTOR_SIZE</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Could not lseek to sector %d"</literal></expr></argument>, <argument><expr><name>i_sector</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>read</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_device_handle</name></name></expr></argument>,
<argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>VCD_SECTOR_SIZE</name> <operator>*</operator> <name>i_nb</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Could not read sector %d"</literal></expr></argument>, <argument><expr><name>i_sector</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_dummy</name> <init>= <expr><name>i_sector</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>CD_FRAMES</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p_msf</name></cpp:macro> <cpp:value>((struct cdrom_msf0 *)(p_block + i * VCD_SECTOR_SIZE))</cpp:value></cpp:define>
<expr_stmt><expr><name><name>p_msf</name><operator>-&gt;</operator><name>minute</name></name> <operator>=</operator> <name>i_dummy</name> <operator>/</operator> <operator>(</operator><name>CD_FRAMES</name> <operator>*</operator> <name>CD_SECS</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_msf</name><operator>-&gt;</operator><name>second</name></name> <operator>=</operator> <operator>(</operator> <name>i_dummy</name> <operator>%</operator> <operator>(</operator><name>CD_FRAMES</name> <operator>*</operator> <name>CD_SECS</name><operator>)</operator> <operator>)</operator> <operator>/</operator> <name>CD_FRAMES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_msf</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <operator>(</operator> <name>i_dummy</name> <operator>%</operator> <operator>(</operator><name>CD_FRAMES</name> <operator>*</operator> <name>CD_SECS</name><operator>)</operator> <operator>)</operator> <operator>%</operator> <name>CD_FRAMES</name></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>p_msf</name></cpp:undef>

<if_stmt><if>if<condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_device_handle</name></name></expr></argument>, <argument><expr><name>CDROMREADRAW</name></expr></argument>,
<argument><expr><name>p_block</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>VCD_SECTOR_SIZE</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"could not read block %i from disc"</literal></expr></argument>,
<argument><expr><name>i_sector</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>VCD_TYPE</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_buffer</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>VCD_DATA_SIZE</name></expr></argument>,
<argument><expr><name>p_block</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>VCD_SECTOR_SIZE</name> <operator>+</operator> <name>VCD_DATA_START</name></expr></argument>,
<argument><expr><name>VCD_DATA_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>VCD_TYPE</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenVCDImage</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_dev</name></decl></parameter>,
<parameter><decl><type><name>vcddev_t</name> <modifier>*</modifier></type><name>p_vcddev</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_vcdfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_cuefile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>cuefile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vcddev_toc_t</name> <modifier>*</modifier></type><name>p_toc</name> <init>= <expr><operator>&amp;</operator><name><name>p_vcddev</name><operator>-&gt;</operator><name>toc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>p_pos</name> <operator>=</operator> <call><name>strrchr</name><argument_list>( <argument><expr><name>psz_dev</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_pos</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>p_pos</name></expr></argument>, <argument><expr><literal type="string">".cue"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>


<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_vcdfile</name></expr></argument>, <argument><expr><literal type="string">"%.*s.bin"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p_pos</name> <operator>-</operator> <name>psz_dev</name><operator>)</operator></expr></argument>,
<argument><expr><name>psz_dev</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_vcdfile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>psz_cuefile</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_dev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
if<condition>( <expr><name>p_pos</name></expr> )</condition>
<block>{<block_content>


<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_cuefile</name></expr></argument>, <argument><expr><literal type="string">"%.*s.cue"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p_pos</name> <operator>-</operator> <name>psz_dev</name><operator>)</operator></expr></argument>,
<argument><expr><name>psz_dev</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_cuefile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>psz_vcdfile</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_dev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_cuefile</name></expr></argument>, <argument><expr><literal type="string">"%s.cue"</literal></expr></argument>, <argument><expr><name>psz_dev</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_cuefile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>psz_vcdfile</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_dev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_cuefile</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>psz_vcdfile</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>,<argument><expr><literal type="string">"trying .cue file: %s"</literal></expr></argument>, <argument><expr><name>psz_cuefile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cuefile</name> <operator>=</operator> <call><name>vlc_fopen</name><argument_list>( <argument><expr><name>psz_cuefile</name></expr></argument>, <argument><expr><literal type="string">"rt"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>cuefile</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"could not find .cue file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>,<argument><expr><literal type="string">"guessing vcd image file: %s"</literal></expr></argument>, <argument><expr><name>psz_vcdfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_vcdimage_handle</name></name> <operator>=</operator> <call><name>vlc_open</name><argument_list>( <argument><expr><name>psz_vcdfile</name></expr></argument>,
<argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_NONBLOCK</name> <operator>|</operator> <name>O_BINARY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><call><name>fgets</name><argument_list>( <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>cuefile</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_found</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>type</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_temp</name> <init>= <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"FILE \"%1023[^\"]\" %15s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>type</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name>i_temp</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"the cue file says the data file is %s"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>strcasecmp</name><argument_list>( <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"BINARY"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt> 

<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_vcdimage_handle</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"we could not find the data file, but we found a new path"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_vcdfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>filename</name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>p_pos</name> <operator>=</operator> <call><name>strrchr</name><argument_list>( <argument><expr><name>psz_cuefile</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument> )</argument_list></call><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>p_pos</name> <operator>=</operator> <call><name>strrchr</name><argument_list>( <argument><expr><name>psz_cuefile</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument> )</argument_list></call> <operator>)</operator><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_vcdfile</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator>
<operator>(</operator><name>p_pos</name> <operator>-</operator> <name>psz_cuefile</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>( <argument><expr><name>psz_vcdfile</name></expr></argument>, <argument><expr><name>psz_cuefile</name></expr></argument>, <argument><expr><operator>(</operator><name>p_pos</name> <operator>-</operator> <name>psz_cuefile</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>( <argument><expr><name>psz_vcdfile</name> <operator>+</operator> <operator>(</operator><name>p_pos</name> <operator>-</operator> <name>psz_cuefile</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>psz_vcdfile</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>,<argument><expr><literal type="string">"using vcd image file: %s"</literal></expr></argument>, <argument><expr><name>psz_vcdfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_vcdimage_handle</name></name> <operator>=</operator> <call><name>vlc_open</name><argument_list>( <argument><expr><name>psz_vcdfile</name></expr></argument>,
<argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_NONBLOCK</name> <operator>|</operator> <name>O_BINARY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_vcdimage_handle</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><call><name>fgets</name><argument_list>( <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>cuefile</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>&lt;</operator> <name>INT_MAX</name><operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_dummy</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>sscanf</name><argument_list>( <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%9s"</literal></expr></argument>, <argument><expr><name>psz_dummy</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>psz_dummy</name></expr></argument>, <argument><expr><literal type="string">"TRACK"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<while>while<condition>( <expr><call><name>fgets</name><argument_list>( <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>cuefile</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_num</name></decl>, <decl><type ref="prev"/><name>i_min</name></decl>, <decl><type ref="prev"/><name>i_sec</name></decl>, <decl><type ref="prev"/><name>i_frame</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><call><name>sscanf</name><argument_list>( <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%*9s %2u %2u:%2u:%2u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_num</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_min</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_frame</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i_num</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vcddev_sector_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>]</index></name><operator>.</operator><name>i_lba</name> <operator>=</operator> <call><name>MSF_TO_LBA</name><argument_list>(<argument><expr><name>i_min</name></expr></argument>, <argument><expr><name>i_sec</name></expr></argument>, <argument><expr><name>i_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>]</index></name><operator>.</operator><name>i_control</name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"vcd track %i begins at sector:%i"</literal></expr></argument>,
<argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr></argument>, <argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>]</index></name><operator>.</operator><name>i_lba</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></while>
</block_content>}</block></while>


<decl_stmt><decl><type><name>vcddev_sector_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>realloc</name> <argument_list>(<argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>]</index></name><operator>.</operator><name>i_lba</name> <operator>=</operator>
<call><name>lseek</name><argument_list>(<argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_vcdimage_handle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>VCD_SECTOR_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>]</index></name><operator>.</operator><name>i_control</name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"vcd track %i, begins at sector:%i"</literal></expr></argument>,
<argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr></argument>, <argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name><index>[<expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>]</index></name><operator>.</operator><name>i_lba</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_first_track</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_toc</name><operator>-&gt;</operator><name>i_last_track</name></name> <operator>=</operator> <name><name>p_toc</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_toc</name><operator>-&gt;</operator><name>p_sectors</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_toc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_toc</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if<condition>( <expr><name>cuefile</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>cuefile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_cuefile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_vcdfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseVCDImage</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter>, <parameter><decl><type><name>vcddev_t</name> <modifier>*</modifier></type><name>p_vcddev</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_vcdimage_handle</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_close</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_vcdimage_handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>toc</name><operator>.</operator><name>p_sectors</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__APPLE__</name></expr></argument> )</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>CDTOC</name> <modifier>*</modifier></type><name>darwin_getTOC</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vcddev_t</name> <modifier>*</modifier></type><name>p_vcddev</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mach_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_devname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>kern_return_t</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CDTOC</name> <modifier>*</modifier></type><name>pTOC</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>io_iterator_t</name></type> <name>iterator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>io_registry_entry_t</name></type> <name>service</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>properties</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFDataRef</name></type> <name>data</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>psz_devname</name> <operator>=</operator> <call><name>strrchr</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>psz_dev</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>psz_devname</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_devname</name> <operator>=</operator> <name><name>p_vcddev</name><operator>-&gt;</operator><name>psz_dev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_devname</name> <operator>==</operator> <literal type="char">'r'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>psz_devname</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>IOMasterPort</name><argument_list>( <argument><expr><name>MACH_PORT_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <name>KERN_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"IOMasterPort: 0x%08x"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>IOServiceGetMatchingServices</name><argument_list>(
<argument><expr><name>port</name></expr></argument>, <argument><expr><call><name>IOBSDNameMatching</name><argument_list>( <argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>psz_devname</name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <name>KERN_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"IOServiceGetMatchingServices: 0x%08x"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>service</name> <operator>=</operator> <call><name>IOIteratorNext</name><argument_list>( <argument><expr><name>iterator</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IOObjectRelease</name><argument_list>( <argument><expr><name>iterator</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<while>while<condition>( <expr><name>service</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IOObjectConformsTo</name><argument_list>( <argument><expr><name>service</name></expr></argument>, <argument><expr><name>kIOCDMediaClass</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>IORegistryEntryGetParentIterator</name><argument_list>( <argument><expr><name>service</name></expr></argument>,
<argument><expr><name>kIOServicePlane</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <name>KERN_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"IORegistryEntryGetParentIterator: 0x%08x"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IOObjectRelease</name><argument_list>( <argument><expr><name>service</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>IOObjectRelease</name><argument_list>( <argument><expr><name>service</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>service</name> <operator>=</operator> <call><name>IOIteratorNext</name><argument_list>( <argument><expr><name>iterator</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IOObjectRelease</name><argument_list>( <argument><expr><name>iterator</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>service</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"search for kIOCDMediaClass came up empty"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>IORegistryEntryCreateCFProperties</name><argument_list>( <argument><expr><name>service</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>properties</name></expr></argument>,
<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>kNilOptions</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <name>KERN_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"IORegistryEntryCreateCFProperties: 0x%08x"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IOObjectRelease</name><argument_list>( <argument><expr><name>service</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>data</name> <operator>=</operator> <operator>(</operator><name>CFDataRef</name><operator>)</operator> <call><name>CFDictionaryGetValue</name><argument_list>( <argument><expr><name>properties</name></expr></argument>,
<argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><name>kIOCDMediaTOCKey</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>CFRange</name></type> <name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFIndex</name></type> <name>buf_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf_len</name> <operator>=</operator> <call><name>CFDataGetLength</name><argument_list>( <argument><expr><name>data</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> <operator>=</operator> <call><name>CFRangeMake</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>pTOC</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>buf_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CFDataGetBytes</name><argument_list>( <argument><expr><name>data</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>pTOC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"CFDictionaryGetValue failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>( <argument><expr><name>properties</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IOObjectRelease</name><argument_list>( <argument><expr><name>service</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return<expr><operator>(</operator> <name>pTOC</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>darwin_getNumberOfTracks</name><parameter_list>( <parameter><decl><type><name>CDTOC</name> <modifier>*</modifier></type><name>pTOC</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_descriptors</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_first_track</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_last_track</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name></type> <name>track</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>i_tracks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_min</name> <init>= <expr><name>CD_MAX_TRACK_NO</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_max</name> <init>= <expr><name>CD_MIN_TRACK_NO</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CDTOCDescriptor</name> <modifier>*</modifier></type><name>pTrackDescriptors</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pTrackDescriptors</name> <operator>=</operator> <operator>(</operator><name>CDTOCDescriptor</name> <operator>*</operator><operator>)</operator><name><name>pTOC</name><operator>-&gt;</operator><name>descriptors</name></name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>i_descriptors</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>track</name> <operator>=</operator> <name><name>pTrackDescriptors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>point</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>track</name> <operator>&gt;</operator> <name>CD_MAX_TRACK_NO</name> <operator>||</operator> <name>track</name> <operator>&lt;</operator> <name>CD_MIN_TRACK_NO</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pTrackDescriptors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>adr</name> <operator>==</operator> <literal type="number">0x01</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_min</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name>i_min</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_max</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name>i_max</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_tracks</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_max</name> <operator>&lt;</operator> <name>i_min</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_first_track</name> <operator>=</operator> <operator>*</operator><name>pi_last_track</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_first_track</name> <operator>=</operator> <name>i_min</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_last_track</name> <operator>=</operator> <name>i_max</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return<expr><operator>(</operator> <name>i_tracks</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call></expr></cpp:if>





<function><type><specifier>static</specifier> <name>int</name></type> <name>win32_vcd_open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_dev</name></decl></parameter>,
<parameter><decl><type><name>vcddev_t</name> <modifier>*</modifier></type><name>p_vcddev</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>h_device_handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_win32_drive</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"using winNT/2K/XP ioctl layer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>( <argument><expr><name>psz_win32_drive</name></expr></argument>, <argument><expr><literal type="string">"\\\\.\\%c:"</literal></expr></argument>, <argument><expr><name><name>psz_dev</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>h_device_handle</name></name> <operator>=</operator> <call><name>CreateFileA</name><argument_list>( <argument><expr><name>psz_win32_drive</name></expr></argument>, <argument><expr><name>GENERIC_READ</name></expr></argument>,
<argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>,
<argument><expr><name>FILE_FLAG_NO_BUFFERING</name> <operator>|</operator>
<name>FILE_FLAG_RANDOM_ACCESS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>p_vcddev</name><operator>-&gt;</operator><name>h_device_handle</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>int</name></type> <name>os2_vcd_open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_dev</name></decl></parameter>,
<parameter><decl><type><name>vcddev_t</name> <modifier>*</modifier></type><name>p_vcddev</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>device</name><index>[]</index></name> <init>= <expr><literal type="string">"X:"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HFILE</name></type> <name>hcd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>i_action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>hcd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>device</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>psz_dev</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>DosOpen</name><argument_list>( <argument><expr><name>device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hcd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_action</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FILE_NORMAL</name></expr></argument>,
<argument><expr><name>OPEN_ACTION_OPEN_IF_EXISTS</name> <operator>|</operator> <name>OPEN_ACTION_FAIL_IF_NEW</name></expr></argument>,
<argument><expr><name>OPEN_ACCESS_READONLY</name> <operator>|</operator> <name>OPEN_SHARE_DENYNONE</name> <operator>|</operator> <name>OPEN_FLAGS_DASD</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"could not open the device %s"</literal></expr></argument>, <argument><expr><name>psz_dev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>hcd</name></name> <operator>=</operator> <name>hcd</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDTEXT_MAX_BLOCKS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDTEXT_MAX_TRACKS</name></cpp:macro> <cpp:value>0x7f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDTEXT_PACK_SIZE</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDTEXT_PACK_HEADER</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDTEXT_PACK_PAYLOAD</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDTEXT_TEXT_BUFFER</name></cpp:macro> <cpp:value>160</cpp:value></cpp:define> 

<enum>enum <name>cdtext_charset_e</name>
<block>{
<decl><name>CDTEXT_CHARSET_ISO88591</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>CDTEXT_CHARSET_ASCII7BIT</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>CDTEXT_CHARSET_MSJIS</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>,
}</block>;</enum>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CdTextAppendPayload</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_len</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>cdtext_charset_e</name></name></type> <name>e_charset</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_text</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_alloc</name> <init>= <expr><ternary><condition><expr><operator>*</operator><name>ppsz_text</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_text</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_extend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from_charset</name></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name>e_charset</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>CDTEXT_CHARSET_ASCII7BIT</name></expr>:</case>
<expr_stmt><expr><name>i_extend</name> <operator>=</operator> <name>i_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>from_charset</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CDTEXT_CHARSET_ISO88591</name></expr>:</case>
<expr_stmt><expr><name>i_extend</name> <operator>=</operator> <name>i_len</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>from_charset</name> <operator>=</operator> <literal type="string">"ISO-8859-1"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CDTEXT_CHARSET_MSJIS</name></expr>:</case>
<expr_stmt><expr><name>i_extend</name> <operator>=</operator> <name>i_len</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>from_charset</name> <operator>=</operator> <literal type="string">"SHIFT-JIS"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> 
<return>return;</return>
</block_content>}</block></switch>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_newsize</name> <init>= <expr><name>i_alloc</name> <operator>+</operator> <name>i_extend</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_text</name></expr></argument>, <argument><expr><name>i_newsize</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_realloc</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ppsz_text</name> <operator>=</operator> <name>psz_realloc</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>( <expr><name>from_charset</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_realloc</name><index>[<expr><name>i_alloc</name></expr>]</index></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz_realloc</name><index>[<expr><name>i_alloc</name> <operator>+</operator> <name>i_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EnsureUTF8</name><argument_list>( <argument><expr><name>psz_realloc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_iconv_t</name></type> <name>ic</name> <init>= <expr><call><name>vlc_iconv_open</name><argument_list>( <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><name>from_charset</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>ic</name> <operator>!=</operator> <operator>(</operator><name>vlc_iconv_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_in</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_in</name> <init>= <expr><name>i_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_out</name> <init>= <expr><operator>&amp;</operator><name><name>psz_realloc</name><index>[<expr><name>i_alloc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_out</name> <init>= <expr><name>i_extend</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>VLC_ICONV_ERR</name> <operator>!=</operator> <call><name>vlc_iconv</name><argument_list>( <argument><expr><name>ic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_out</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>psz_realloc</name><index>[<expr><name>i_alloc</name> <operator>+</operator> <name>i_extend</name> <operator>-</operator> <name>i_out</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_iconv_close</name><argument_list>( <argument><expr><name>ic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>CdTextPayloadLength</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buffer</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_doublebytes</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>b_doublebytes</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_buffer</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buffer</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>i_len</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><call><name>strnlen</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CdTextParsePackText</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_pack</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>cdtext_charset_e</name></name></type> <name>e_charset</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_textbuffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_repeatbuffer</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>textbuffer</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_last_track</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>pppsz_info</name><index>[<expr><name>CDTEXT_MAX_TRACKS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0x10</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_pack_type</name> <init>= <expr><name><name>p_pack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_track</name> <init>= <expr><name><name>p_pack</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_double_byte</name> <init>= <expr><name><name>p_pack</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_char_position</name> <init>= <expr><name><name>p_pack</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_char_position</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_textbuffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_start</name> <init>= <expr><operator>&amp;</operator><name><name>p_pack</name><index>[<expr><name>CDTEXT_PACK_HEADER</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><name>p_start</name> <operator>+</operator> <name>CDTEXT_PACK_PAYLOAD</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_readpos</name> <init>= <expr><name>p_start</name></expr></init></decl>;</init> <condition><expr><name>p_readpos</name> <operator>&lt;</operator> <name>p_end</name></expr> ;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_payload</name> <init>= <expr><call><name>CdTextPayloadLength</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_readpos</name></expr></argument>,
<argument><expr><name>p_end</name> <operator>-</operator> <name>p_readpos</name></expr></argument>,
<argument><expr><name>b_double_byte</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>i_payload</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_last_track</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><operator>*</operator><name>pi_last_track</name></expr></argument>, <argument><expr><name>i_track</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>i_payload</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_readpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator>
<operator>*</operator><name>pi_repeatbuffer</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>pi_textbuffer</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_textbuffer</name> <operator>=</operator> <operator>*</operator><name>pi_repeatbuffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>textbuffer</name><index>[<expr><operator>*</operator><name>pi_textbuffer</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_append</name> <init>= <expr><name>i_payload</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_textbuffer</name> <operator>+</operator> <name>i_payload</name> <operator>&gt;=</operator> <name>CDTEXT_TEXT_BUFFER</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_append</name> <operator>=</operator> <name>CDTEXT_TEXT_BUFFER</name> <operator>-</operator> <operator>*</operator><name>pi_textbuffer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>textbuffer</name><index>[<expr><operator>*</operator><name>pi_textbuffer</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_readpos</name></expr></argument>, <argument><expr><name>i_append</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_textbuffer</name> <operator>+=</operator> <name>i_append</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_repeatbuffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>&amp;</operator><name><name>p_readpos</name><index>[<expr><name>i_payload</name></expr>]</index></name> <operator>&lt;</operator> <name>p_end</name></expr> )</condition> 
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pi_textbuffer</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CdTextAppendPayload</name><argument_list>( <argument><expr><name>textbuffer</name></expr></argument>, <argument><expr><operator>*</operator><name>pi_textbuffer</name></expr></argument>, <argument><expr><name>e_charset</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>pppsz_info</name><index>[<expr><name>i_track</name></expr>]</index><index>[<expr><name>i_pack_type</name><operator>-</operator><literal type="number">0x80</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_repeatbuffer</name> <operator>=</operator> <operator>*</operator><name>pi_textbuffer</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_textbuffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>++</operator><name>i_track</name> <operator>&gt;</operator> <name>CDTEXT_MAX_TRACKS</name></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_readpos</name> <operator>=</operator> <name>p_readpos</name> <operator>+</operator> <name>i_payload</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>b_double_byte</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>p_readpos</name> <operator>=</operator> <name>p_end</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CdTextParse</name><parameter_list>( <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_tracks</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_tracks</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>pppsz_info</name><index>[<expr><name>CDTEXT_MAX_TRACKS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0x10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_track_last</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_buffer</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_buffer</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_buffer</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>bsznfopayl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_buffer</name><operator>/</operator><name>CDTEXT_PACK_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_pack</name> <init>= <expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>CDTEXT_PACK_SIZE</name><operator>*</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_block_number</name> <init>= <expr><operator>(</operator><name><name>p_pack</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_block_number</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_pack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x8f</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_track</name> <init>= <expr><name><name>p_pack</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_track</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bsznfopayl</name><index>[<expr><name>i_track</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bsznfopayl</name><index>[<expr><name>i_track</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_pack</name><index>[<expr><name>CDTEXT_PACK_HEADER</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>!</operator><name><name>bsznfopayl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <operator>!</operator><name><name>bsznfopayl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><name><name>bsznfopayl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <operator>!</operator><name><name>bsznfopayl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>pppsz_info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pppsz_info</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>cdtext_charset_e</name></name></type> <name>e_textpackcharset</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>bsznfopayl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>e_textpackcharset</name> <operator>=</operator> <name><name>bsznfopayl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>e_textpackcharset</name> <operator>==</operator> <name>CDTEXT_CHARSET_ASCII7BIT</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e_textpackcharset</name> <operator>=</operator> <name>CDTEXT_CHARSET_ISO88591</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>e_textpackcharset</name> <operator>=</operator> <name>CDTEXT_CHARSET_ASCII7BIT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<decl_stmt><decl><type><name>char</name></type> <name><name>textbuffer</name><index>[<expr><name>CDTEXT_TEXT_BUFFER</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_textbuffer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_repeatbuffer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_prev_pack_type</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_buffer</name><operator>/</operator><name>CDTEXT_PACK_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_pack</name> <init>= <expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>CDTEXT_PACK_SIZE</name><operator>*</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_pack_type</name> <init>= <expr><name><name>p_pack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_block_number</name> <init>= <expr><operator>(</operator><name><name>p_pack</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><name>i_textbuffer</name> <operator>&amp;&amp;</operator> <name>i_pack_type</name> <operator>!=</operator> <name>i_prev_pack_type</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_textbuffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_repeatbuffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_prev_pack_type</name> <operator>=</operator> <name>i_pack_type</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_track</name> <init>= <expr><name><name>p_pack</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_track</name> <operator>&gt;</operator> <name>CDTEXT_MAX_TRACKS</name> <operator>||</operator>
<operator>(</operator><name><name>p_pack</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>||</operator>
<name>i_block_number</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> 
)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_prev_pack_type</name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<switch>switch<condition>( <expr><name>i_pack_type</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x80</literal></expr>:</case>
<case>case <expr><literal type="number">0x81</literal></expr>:</case>
<case>case <expr><literal type="number">0x85</literal></expr>:</case>
<case>case <expr><literal type="number">0x87</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>CdTextParsePackText</name><argument_list>( <argument><expr><name>p_pack</name></expr></argument>, <argument><expr><name>e_textpackcharset</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_textbuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_repeatbuffer</name></expr></argument>, <argument><expr><name>textbuffer</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_track_last</name></expr></argument>, <argument><expr><name>pppsz_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="number">0x82</literal></expr>:</case>
<case>case <expr><literal type="number">0x83</literal></expr>:</case>
<case>case <expr><literal type="number">0x84</literal></expr>:</case>
<case>case <expr><literal type="number">0x86</literal></expr>:</case>
<case>case <expr><literal type="number">0x8d</literal></expr>:</case>
<case>case <expr><literal type="number">0x8e</literal></expr>:</case>
<default>default:</default>
<continue>continue;</continue>
</block_content>}</block></switch>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_track_last</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_tracks</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><name>i_track_last</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pp_tracks</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_tracks</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">0x10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>i_track_last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_default</name> <init>= <expr><name><name>pppsz_info</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><name><name>pppsz_info</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_value</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>psz_default</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_track</name> <init>= <expr><name><name>pp_tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_track</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_track</name> <operator>=</operator> <name><name>pp_tracks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_track</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch<condition>( <expr><literal type="number">0x80</literal> <operator>+</operator> <name>j</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x80</literal></expr>:</case> 
<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_meta_SetAlbum</name><argument_list>( <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>psz_value</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_SetTitle</name><argument_list>( <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_default</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_SetAlbum</name><argument_list>( <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>psz_default</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x81</literal></expr>:</case> 
<expr_stmt><expr><call><name>vlc_meta_SetArtist</name><argument_list>( <argument><expr><name>p_track</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>psz_value</name></expr> ?</condition><then> <expr><name>psz_value</name></expr> </then><else>: <expr><name>psz_default</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x85</literal></expr>:</case> 
<expr_stmt><expr><call><name>vlc_meta_SetDescription</name><argument_list>( <argument><expr><name>p_track</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>psz_value</name></expr> ?</condition><then> <expr><name>psz_value</name></expr> </then><else>: <expr><name>psz_default</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x87</literal></expr>:</case> 
<expr_stmt><expr><call><name>vlc_meta_SetGenre</name><argument_list>( <argument><expr><name>p_track</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>psz_value</name></expr> ?</condition><then> <expr><name>psz_value</name></expr> </then><else>: <expr><name>psz_default</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>





</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></for>

<label><name>exit</name>:</label>
<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">0x10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>i_track_last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>pppsz_info</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>ppp_tracks</name> <operator>=</operator> <name>pp_tracks</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_tracks</name> <operator>=</operator> <name>i_track_last</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>pp_tracks</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__APPLE__</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>( <argument><expr><name>__OS2__</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>( <argument><expr><name>HAVE_IOC_TOC_HEADER_IN_SYS_CDIO_H</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>( <argument><expr><name>HAVE_SCSIREQ_IN_SYS_SCSIIO_H</name></expr></argument> )</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>int</name></type> <name>CdTextRead</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vcddev_t</name> <modifier>*</modifier></type><name>p_vcddev</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_object</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_vcddev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>pp_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>pi_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call></expr></cpp:elif>
<function><type><specifier>static</specifier> <name>int</name></type> <name>CdTextRead</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vcddev_t</name> <modifier>*</modifier></type><name>p_vcddev</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_object</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CDROM_READ_TOC_EX</name></type> <name>TOCEx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TOCEx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TOCEx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>TOCEx</name><operator>.</operator><name>Format</name></name> <operator>=</operator> <name>CDROM_READ_TOC_EX_FORMAT_CDTEXT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_header_size</name> <init>= <expr><call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>MINIMUM_CDROM_READ_TOC_EX_SIZE</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>header</name><index>[<expr><name>i_header_size</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>i_read</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>DeviceIoControl</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>h_device_handle</name></name></expr></argument>, <argument><expr><name>IOCTL_CDROM_READ_TOC_EX</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>TOCEx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TOCEx</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>i_header_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_text</name> <init>= <expr><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_text</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_text</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_text</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_text</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>DeviceIoControl</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>h_device_handle</name></name></expr></argument>, <argument><expr><name>IOCTL_CDROM_READ_TOC_EX</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>TOCEx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TOCEx</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>p_text</name></expr></argument>, <argument><expr><name>i_text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>pp_buffer</name> <operator>=</operator> <name>p_text</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_buffer</name> <operator>=</operator> <name>i_text</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type> <name>CdTextRead</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vcddev_t</name> <modifier>*</modifier></type><name>p_vcddev</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_object</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_device_handle</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cdrom_generic_command</name></name></type> <name>gc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>header</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x43</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>gc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>gc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>gc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof> <operator>&gt;&gt;</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>.</operator><name>buflen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gc</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gc</name><operator>.</operator><name>data_direction</name></name> <operator>=</operator> <name>CGC_DATA_READ</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gc</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_device_handle</name></name></expr></argument>, <argument><expr><name>CDROM_SEND_PACKET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gc</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_text</name> <init>= <expr><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_text</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_text</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_text</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_text</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x43</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>gc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>gc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>gc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>i_text</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gc</name><operator>.</operator><name>cmd</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>i_text</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc</name><operator>.</operator><name>buflen</name></name> <operator>=</operator> <name>i_text</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gc</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>p_text</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gc</name><operator>.</operator><name>data_direction</name></name> <operator>=</operator> <name>CGC_DATA_READ</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gc</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ioctl</name><argument_list>( <argument><expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_device_handle</name></name></expr></argument>, <argument><expr><name>CDROM_SEND_PACKET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gc</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>pp_buffer</name> <operator>=</operator> <name>p_text</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_buffer</name> <operator>=</operator> <name>i_text</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>ioctl_GetCdText</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vcddev_t</name> <modifier>*</modifier></type><name>p_vcddev</name></decl></parameter>,
<parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_tracks</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_tracks</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_text</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_vcddev</name><operator>-&gt;</operator><name>i_vcdimage_handle</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>CdTextRead</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><name>p_vcddev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_text</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CdTextParse</name><argument_list>( <argument><expr><name>ppp_tracks</name></expr></argument>, <argument><expr><name>pi_tracks</name></expr></argument>, <argument><expr><name>p_text</name></expr></argument>, <argument><expr><name>i_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
