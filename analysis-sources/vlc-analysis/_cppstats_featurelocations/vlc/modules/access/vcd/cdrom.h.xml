<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\vcd\cdrom.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VLC_CDROM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CDROM_H</name></cpp:macro></cpp:define>

<enum>enum <block>{
<decl><name>CDDA_TYPE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VCD_TYPE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
}</block>;</enum>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CD_RAW_SECTOR_SIZE</name></cpp:macro> <cpp:value>2352</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CD_ROM_MODE1_DATA_SIZE</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CD_ROM_MODE2_DATA_SIZE</name></cpp:macro> <cpp:value>2336</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CD_ROM_XA_MODE2_F1_DATA_SIZE</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CD_ROM_XA_MODE2_F2_DATA_SIZE</name></cpp:macro> <cpp:value>2324</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CD_ROM_XA_FRAMES</name></cpp:macro> <cpp:value>75</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CD_ROM_XA_INTERVAL</name></cpp:macro> <cpp:value>((60 + 90 + 2) * CD_ROM_XA_FRAMES)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CD_ROM_DATA_FLAG</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CD_SECTOR_SIZE</name></cpp:macro> <cpp:value>CD_ROM_MODE1_DATA_SIZE</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCD_DATA_START</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCD_DATA_SIZE</name></cpp:macro> <cpp:value>CD_ROM_XA_MODE2_F2_DATA_SIZE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCD_SECTOR_SIZE</name></cpp:macro> <cpp:value>CD_RAW_SECTOR_SIZE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCD_ENTRIES_SECTOR</name></cpp:macro> <cpp:value>151</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDDA_DATA_START</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDDA_DATA_SIZE</name></cpp:macro> <cpp:value>CD_RAW_SECTOR_SIZE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDDA_SECTOR_SIZE</name></cpp:macro> <cpp:value>CD_RAW_SECTOR_SIZE</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>MSF_TO_LBA</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>sec</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>frame</name> <operator>+</operator> <literal type="number">75</literal> <operator>*</operator> <operator>(</operator><name>sec</name> <operator>+</operator> <literal type="number">60</literal> <operator>*</operator> <name>min</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>MSF_TO_LBA2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>sec</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>frame</name> <operator>+</operator> <literal type="number">75</literal> <operator>*</operator> <operator>(</operator><name>sec</name> <operator>-</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">60</literal> <operator>*</operator> <name>min</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BCD_TO_BIN</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uint8_t)((uint8_t)(0xf &amp; (uint8_t)i)+((uint8_t)10*((uint8_t)i &gt;&gt; 4)))</cpp:value></cpp:define>


<typedef>typedef <type><name><name>struct</name> <name>vcddev_s</name></name></type> <name>vcddev_t</name>;</typedef>
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_lba</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_control</name></decl>;</decl_stmt>
}</block></struct></type> <name>vcddev_sector_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_tracks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vcddev_sector_t</name> <modifier>*</modifier></type><name>p_sectors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_first_track</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_last_track</name></decl>;</decl_stmt>
}</block></struct></type> <name>vcddev_toc_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vcddev_toc_t</name> <modifier>*</modifier></type> <name>vcddev_toc_New</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vcddev_toc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vcddev_toc_Reset</name><parameter_list>( <parameter><decl><type><name>vcddev_toc_t</name> <modifier>*</modifier></type><name>toc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>toc</name><operator>-&gt;</operator><name>p_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>toc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>toc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vcddev_toc_Free</name><parameter_list>( <parameter><decl><type><name>vcddev_toc_t</name> <modifier>*</modifier></type><name>toc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>toc</name><operator>-&gt;</operator><name>p_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>toc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<typedef>typedef <type><struct>struct <name>msf_s</name>
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>minute</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>second</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>frame</name></decl>;</decl_stmt>
}</block></struct></type> <name>msf_t</name>;</typedef>




<typedef>typedef <type><struct>struct <name>entries_sect_s</name>
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>psz_id</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_sys_prof_tag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_entries_nb</name></decl>;</decl_stmt> 

<struct>struct
<block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_track</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>msf_t</name></type> <name>msf</name></decl>;</decl_stmt> 

}</block> <decl><name><name>entry</name><index>[<expr><literal type="number">500</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>zeros</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>entries_sect_t</name>;</typedef>




<function_decl><type><name>vcddev_t</name> <modifier>*</modifier></type><name>ioctl_Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ioctl_Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vcddev_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>vcddev_toc_t</name> <modifier>*</modifier></type> <name>ioctl_GetTOC</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vcddev_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ioctl_ReadSectors</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vcddev_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>



<function_decl><type><name>int</name></type> <name>ioctl_GetCdText</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vcddev_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_tracks</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_tracks</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
