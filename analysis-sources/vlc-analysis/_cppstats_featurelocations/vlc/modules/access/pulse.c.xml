<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\pulse.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pulse/pulseaudio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_output/vlcpulse.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HELP_TEXT</name></cpp:macro> <cpp:value>N_( "Pass pulse:// to open the default PulseAudio source, " "or pulse://SOURCE to open a specific source named SOURCE.")</cpp:value></cpp:define>



<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name> <argument_list>(<argument>N_(<literal type="string">"PulseAudio"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name> <argument_list>(<argument>N_(<literal type="string">"PulseAudio input"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name> <argument_list>(<argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>set_category</name> <argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name> <argument_list>(<argument>SUBCAT_INPUT_ACCESS</argument>)</argument_list></macro>
<macro><name>set_help</name> <argument_list>(<argument>HELP_TEXT</argument>)</argument_list></macro>

<macro><name>add_shortcut</name> <argument_list>(<argument><literal type="string">"pulse"</literal></argument>, <argument><literal type="string">"pulseaudio"</literal></argument>, <argument><literal type="string">"pa"</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name> <argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pa_threaded_mainloop</name> <modifier>*</modifier></type><name>mainloop</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>discontinuity</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>framesize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>caching</name></decl>;</decl_stmt> 
}</block></struct></type> <name>demux_sys_t</name>;</typedef>


<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_state_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pa_threaded_mainloop</name> <modifier>*</modifier></type><name>mainloop</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>pa_stream_get_state</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PA_STREAM_READY</name></expr>:</case>
<case>case <expr><name>PA_STREAM_FAILED</name></expr>:</case>
<case>case <expr><name>PA_STREAM_TERMINATED</name></expr>:</case>
<expr_stmt><expr><call><name>pa_threaded_mainloop_signal</name><argument_list>(<argument><expr><name>mainloop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_success_cb</name> <parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>success</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pa_threaded_mainloop</name> <modifier>*</modifier></type><name>mainloop</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_signal</name><argument_list>(<argument><expr><name>mainloop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>success</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_buffer_attr_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pa_buffer_attr</name></name> <modifier>*</modifier></type><name>pba</name> <init>= <expr><call><name>pa_stream_get_buffer_attr</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"using buffer metrics: maxlength=%"</literal><name>PRIu32</name><literal type="string">", "</literal>
<literal type="string">"fragsize=%"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name><name>pba</name><operator>-&gt;</operator><name>maxlength</name></name></expr></argument>, <argument><expr><name><name>pba</name><operator>-&gt;</operator><name>fragsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_moved_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>idx</name> <init>= <expr><call><name>pa_stream_get_device_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"connected to source %"</literal><name>PRIu32</name><literal type="string">": %s"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>,
<argument><expr><call><name>pa_stream_get_device_name</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stream_buffer_attr_cb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_overflow_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_started_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_suspended_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"suspended"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_underflow_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"underflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stream_wait</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>pa_threaded_mainloop</name> <modifier>*</modifier></type><name>mainloop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pa_stream_state_t</name></type> <name>state</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>state</name> <operator>=</operator> <call><name>pa_stream_get_state</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>PA_STREAM_READY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>PA_STREAM_FAILED</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>PA_STREAM_TERMINATED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_wait</name><argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_read_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>samples</name> <init>= <expr><name>length</name> <operator>/</operator> <name><name>sys</name><operator>-&gt;</operator><name>framesize</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pa_stream_peek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_pa_error</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot peek stream"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>pts</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_usec_t</name></type> <name>latency</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>negative</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pa_stream_get_latency</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>latency</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>negative</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_pa_error</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot determine latency"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pts</name> <operator>+=</operator> <name>latency</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pts</name> <operator>-=</operator> <name>latency</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>race</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>block</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name>samples</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>discontinuity</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>discontinuity</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>discontinuity</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<label><name>race</name>:</label>
<expr_stmt><expr><call><name>pa_stream_drop</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>pa_usec_t</name></type> <name>us</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pa_stream_get_time</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>us</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <name>us</name> <operator>*</operator> <literal type="number">10000000LL</literal> <operator>/</operator> <name>CLOCK_FREQ</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>




<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>caching</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DEMUX_HAS_UNSUPPORTED_META</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_RECORD</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_CONTROL_RATE</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>fourccs</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>PA_SAMPLE_U8</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_U8</name></expr>,
<expr><index>[<expr><name>PA_SAMPLE_ALAW</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_ALAW</name></expr>,
<expr><index>[<expr><name>PA_SAMPLE_ULAW</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_MULAW</name></expr>,
<expr><index>[<expr><name>PA_SAMPLE_S16LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S16L</name></expr>,
<expr><index>[<expr><name>PA_SAMPLE_S16BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S16B</name></expr>,
<expr><index>[<expr><name>PA_SAMPLE_FLOAT32LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_F32L</name></expr>,
<expr><index>[<expr><name>PA_SAMPLE_FLOAT32BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_F32B</name></expr>,
<expr><index>[<expr><name>PA_SAMPLE_S32LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S32L</name></expr>,
<expr><index>[<expr><name>PA_SAMPLE_S32BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S32B</name></expr>,
<expr><index>[<expr><name>PA_SAMPLE_S24LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S24L</name></expr>,
<expr><index>[<expr><name>PA_SAMPLE_S24BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S24B</name></expr>,
<expr><index>[<expr><name>PA_SAMPLE_S24_32LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S24L32</name></expr>,
<expr><index>[<expr><name>PA_SAMPLE_S24_32BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S24B32</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>vlc_pa_connect</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>discontinuity</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>caching</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"live-caching"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>pa_sample_spec</name></name></type> <name>ss</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PA_SAMPLE_S16NE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>rate</name></name> <operator>=</operator> <literal type="number">48000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pa_sample_spec_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pa_channel_map</name></name></type> <name>map</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>map</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_FRONT_LEFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_FRONT_RIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pa_channel_map_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pa_stream_flags_t</name></type> <name>flags</name> <init>= <expr><name>PA_STREAM_INTERPOLATE_TIMING</name>
<operator>|</operator> <name>PA_STREAM_AUTO_TIMING_UPDATE</name>
<operator>|</operator> <name>PA_STREAM_ADJUST_LATENCY</name>
<operator>|</operator> <name>PA_STREAM_FIX_FORMAT</name>
<operator>|</operator> <name>PA_STREAM_FIX_RATE</name></expr></init></decl>
;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>demux</name><operator>-&gt;</operator><name>psz_location</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>demux</name><operator>-&gt;</operator><name>psz_location</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dev</name> <operator>=</operator> <name><name>demux</name><operator>-&gt;</operator><name>psz_location</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pa_buffer_attr</name></name></type> <name>attr</name> <init>= <expr><block>{
<expr><operator>.</operator><name>maxlength</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>fragsize</name> <operator>=</operator> <call><name>pa_usec_to_bytes</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>caching</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>pa_stream_new</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><literal type="string">"audio stream"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_state_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_state_cb</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_read_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_read_cb</name></expr></argument>, <argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_buffer_attr_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_buffer_attr_cb</name></expr></argument>, <argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_moved_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_moved_cb</name></expr></argument>, <argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_overflow_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_overflow_cb</name></expr></argument>, <argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_started_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_started_cb</name></expr></argument>, <argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_suspended_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_suspended_cb</name></expr></argument>, <argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_underflow_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_underflow_cb</name></expr></argument>, <argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pa_stream_connect_record</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>stream_wait</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vlc_pa_error</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot connect record stream"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pa_sample_spec</name></name> <modifier>*</modifier></type><name>pss</name> <init>= <expr><call><name>pa_stream_get_sample_spec</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pss</name><operator>-&gt;</operator><name>format</name></name> <operator>&gt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>fourccs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>fourccs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"unknown PulseAudio sample format %u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pss</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>format</name> <init>= <expr><name><name>fourccs</name><index>[<expr><name><name>pss</name><operator>-&gt;</operator><name>format</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"unsupported PulseAudio sample format %u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pss</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name><name>ss</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>pss</name><operator>-&gt;</operator><name>rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <call><name>aout_BitsPerSample</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>*</operator> <name><name>ss</name><operator>.</operator><name>channels</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>*</operator> <name><name>ss</name><operator>.</operator><name>channels</name></name> <operator>*</operator> <name><name>pss</name><operator>-&gt;</operator><name>rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>framesize</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <call><name>es_out_Add</name> <argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>fragsize</name></name> <operator>=</operator> <call><name>pa_usec_to_bytes</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>caching</name></name></expr></argument>, <argument><expr><name>pss</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>pa_stream_set_buffer_attr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>stream_success_cb</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>pa_operation_get_state</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PA_OPERATION_RUNNING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_threaded_mainloop_wait</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>stream_buffer_attr_cb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_disconnect</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_state_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_read_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_buffer_attr_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_moved_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_overflow_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_started_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_suspended_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_underflow_callback</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_unref</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_pa_disconnect</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
