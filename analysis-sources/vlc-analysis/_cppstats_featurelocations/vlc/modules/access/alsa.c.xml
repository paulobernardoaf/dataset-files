<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\access\alsa.c">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alsa/asoundlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HELP_TEXT</name></cpp:macro> <cpp:value>N_( "Pass alsa:// to open the default ALSA capture device, " "or alsa://SOURCE to open a specific device named SOURCE.")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STEREO_TEXT</name></cpp:macro> <cpp:value>N_("Stereo")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATE_TEXT</name></cpp:macro> <cpp:value>N_("Sample rate")</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>rate_values</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">192000</literal></expr>, <expr><literal type="number">176400</literal></expr>,
<expr><literal type="number">96000</literal></expr>, <expr><literal type="number">88200</literal></expr>, <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">44100</literal></expr>,
<expr><literal type="number">32000</literal></expr>, <expr><literal type="number">22050</literal></expr>, <expr><literal type="number">24000</literal></expr>, <expr><literal type="number">16000</literal></expr>,
<expr><literal type="number">11025</literal></expr>, <expr><literal type="number">8000</literal></expr>, <expr><literal type="number">4000</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>rate_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"192000 Hz"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"176400 Hz"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"96000 Hz"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"88200 Hz"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"48000 Hz"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"44100 Hz"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"32000 Hz"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"22050 Hz"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"24000 Hz"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"16000 Hz"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"11025 Hz"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"8000 Hz"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"4000 Hz"</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name> <argument_list>(<argument>N_(<literal type="string">"ALSA"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name> <argument_list>(<argument>N_(<literal type="string">"ALSA audio capture"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name> <argument_list>(<argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>set_category</name> <argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name> <argument_list>(<argument>SUBCAT_INPUT_ACCESS</argument>)</argument_list></macro>
<macro><name>set_help</name> <argument_list>(<argument>HELP_TEXT</argument>)</argument_list></macro>

<macro><name>add_obsolete_string</name> <argument_list>(<argument><literal type="string">"alsa-format"</literal></argument>)</argument_list></macro> 
<macro><name>add_bool</name> <argument_list>(<argument><literal type="string">"alsa-stereo"</literal></argument>, <argument>true</argument>, <argument>STEREO_TEXT</argument>, <argument>STEREO_TEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"alsa-samplerate"</literal></argument>, <argument><literal type="number">48000</literal></argument>, <argument>RATE_TEXT</argument>, <argument>RATE_TEXT</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>change_integer_list</name> <argument_list>(<argument>rate_values</argument>, <argument>rate_names</argument>)</argument_list></macro>

<macro><name>add_shortcut</name> <argument_list>(<argument><literal type="string">"alsa"</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name> <argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>



<function><type><specifier>static</specifier> <name>void</name></type> <name>Dump</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>snd_output_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>snd_output_t</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>snd_output_buffer_open</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>cb</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot get info: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>snd_output_buffer_string</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"%s%.*s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snd_output_close</name> <argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Dump</name><parameter_list>(<parameter><type><name>o</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>cb</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Dump(VLC_OBJECT(o), m, (int (*)(void *, snd_output_t *))(cb), p)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>DumpDevice</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>pcm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>snd_pcm_info_t</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Dump</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>snd_pcm_dump</name></expr></argument>, <argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snd_pcm_info_alloca</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>snd_pcm_info</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" device name : %s"</literal></expr></argument>, <argument><expr><call><name>snd_pcm_info_get_name</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" device ID : %s"</literal></expr></argument>, <argument><expr><call><name>snd_pcm_info_get_id</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" subdevice name: %s"</literal></expr></argument>,
<argument><expr><call><name>snd_pcm_info_get_subdevice_name</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DumpDeviceStatus</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>pcm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>snd_pcm_status_t</name> <modifier>*</modifier></type><name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snd_pcm_status_alloca</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snd_pcm_status</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Dump</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"current status:\n"</literal></expr></argument>, <argument><expr><name>snd_pcm_status_dump</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DumpDeviceStatus</name><parameter_list>(<parameter><type><name>o</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DumpDeviceStatus(VLC_OBJECT(o), p)</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>pcm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>caching</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>snd_pcm_uframes_t</name></type> <name>period_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>rate</name></decl>;</decl_stmt>
}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Poll</name> <parameter_list>(<parameter><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>pcm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>canc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>snd_pcm_poll_descriptors_count</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>ufd</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>revents</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snd_pcm_poll_descriptors</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>ufd</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_restorecancel</name> <argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>poll</name> <argument_list>(<argument><expr><name>ufd</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<expr_stmt><expr><name>canc</name> <operator>=</operator> <call><name>vlc_savecancel</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snd_pcm_poll_descriptors_revents</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>ufd</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>revents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><operator>!</operator><name>revents</name></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Thread</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>pcm</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>pcm</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>canc</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>canc</name> <operator>=</operator> <call><name>vlc_savecancel</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>snd_pcm_frames_to_bytes</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>period_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_start</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot prepare device: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_Alloc</name> <argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>block</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>Poll</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>snd_pcm_sframes_t</name></type> <name>frames</name></decl>, <decl><type ref="prev"/><name>delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>frames</name> <operator>=</operator> <call><name>snd_pcm_readi</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>period_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>vlc_tick_now</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frames</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frames</name> <operator>==</operator> <operator>-</operator><name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_recover</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot read samples: %s"</literal></expr></argument>,
<argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>frames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>snd_pcm_state_t</name></type> <name>state</name> <init>= <expr><call><name>snd_pcm_state</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SND_PCM_STATE_PREPARED</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_start</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot prepare device: %s"</literal></expr></argument>,
<argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
<case>case <expr><name>SND_PCM_STATE_RUNNING</name></expr>:</case>
<continue>continue;</continue>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot recover record stream: %s"</literal></expr></argument>,
<argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DumpDeviceStatus</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>snd_pcm_delay</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delay</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>delay</name> <operator>+=</operator> <name>frames</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pts</name> <operator>-=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name>delay</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <call><name>snd_pcm_frames_to_bytes</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name>frames</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name>frames</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_out_Send</name> <argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>vlc_tick_now</name> <argument_list>()</argument_list></call> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>caching</name></name></expr>;</expr_stmt>
<break>break;</break>



<case>case <expr><name>DEMUX_HAS_UNSUPPORTED_META</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_RECORD</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_CONTROL_RATE</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break><empty_stmt>;</empty_stmt>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>formats</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>SND_PCM_FORMAT_S8</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S8</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_U8</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_U8</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_S16_LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S16L</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_S16_BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S16B</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_U16_LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_U16L</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_U16_BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_U16B</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_S24_LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S24L32</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_S24_BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S24B32</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_U24_LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_U32L</name></expr>, 
<expr><index>[<expr><name>SND_PCM_FORMAT_U24_BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_U32B</name></expr>, 
<expr><index>[<expr><name>SND_PCM_FORMAT_S32_LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S32L</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_S32_BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S32B</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_U32_LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_U32L</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_U32_BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_U32B</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_FLOAT_LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_F32L</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_FLOAT_BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_F32B</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_FLOAT64_LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_F64L</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_FLOAT64_BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_F64B</name></expr>,


<expr><index>[<expr><name>SND_PCM_FORMAT_MU_LAW</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_MULAW</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_A_LAW</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_ALAW</name></expr>,

<expr><index>[<expr><name>SND_PCM_FORMAT_MPEG</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_MPGA</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_GSM</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_GSM</name></expr>,

<expr><index>[<expr><name>SND_PCM_FORMAT_S24_3LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S24L</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_S24_3BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S24B</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_U24_3LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_U24L</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_U24_3BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_U24B</name></expr>,
<expr><index>[<expr><name>SND_PCM_FORMAT_S20_3LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S24L</name></expr>, 
<expr><index>[<expr><name>SND_PCM_FORMAT_S20_3BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S24B</name></expr>, 
<expr><index>[<expr><name>SND_PCM_FORMAT_U20_3LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_U24L</name></expr>, 
<expr><index>[<expr><name>SND_PCM_FORMAT_U20_3BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_U24B</name></expr>, 
<expr><index>[<expr><name>SND_PCM_FORMAT_S18_3LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S24L</name></expr>, 
<expr><index>[<expr><name>SND_PCM_FORMAT_S18_3BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_S24B</name></expr>, 
<expr><index>[<expr><name>SND_PCM_FORMAT_U18_3LE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_U24L</name></expr>, 
<expr><index>[<expr><name>SND_PCM_FORMAT_U18_3BE</name></expr>]</index> <operator>=</operator> <name>VLC_CODEC_U24B</name></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f##BE, f##LE</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f##LE, f##BE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>choices</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>C</name><argument_list>(<argument><expr><name>SND_PCM_FORMAT_FLOAT_</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>C</name><argument_list>(<argument><expr><name>SND_PCM_FORMAT_S32_</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>C</name><argument_list>(<argument><expr><name>SND_PCM_FORMAT_U32_</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>C</name><argument_list>(<argument><expr><name>SND_PCM_FORMAT_S16_</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>C</name><argument_list>(<argument><expr><name>SND_PCM_FORMAT_U16_</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>C</name><argument_list>(<argument><expr><name>SND_PCM_FORMAT_FLOAT64_</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>C</name><argument_list>(<argument><expr><name>SND_PCM_FORMAT_S24_3</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>C</name><argument_list>(<argument><expr><name>SND_PCM_FORMAT_U24_3</name></expr></argument>)</argument_list></call></expr>,
<expr><name>SND_PCM_FORMAT_MPEG</name></expr>,
<expr><name>SND_PCM_FORMAT_GSM</name></expr>,
<expr><name>SND_PCM_FORMAT_MU_LAW</name></expr>,
<expr><name>SND_PCM_FORMAT_A_LAW</name></expr>,
<expr><name>SND_PCM_FORMAT_S8</name></expr>,
<expr><name>SND_PCM_FORMAT_U8</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint16_t</name></type> <name><name>channel_maps</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><name>AOUT_CHANS_2_0</name></expr>, <expr><name>AOUT_CHANS_3_0</name></expr> ,
<expr><name>AOUT_CHANS_4_0</name></expr>, <expr><name>AOUT_CHANS_5_0</name></expr> , <expr><name>AOUT_CHANS_5_1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>psz_location</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>device</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name><name>device</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>device</name> <operator>=</operator> <literal type="string">"default"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mode</name> <init>= <expr><name>SND_PCM_NONBLOCK</name>

<operator>|</operator> <name>SND_PCM_NO_AUTO_CHANNELS</name></expr></init></decl>
;</decl_stmt>
<decl_stmt><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>pcm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>snd_pcm_open</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pcm</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>SND_PCM_STREAM_CAPTURE</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot open ALSA device \"%s\": %s"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pcm</name></name> <operator>=</operator> <name>pcm</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"using ALSA device: %s"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DumpDevice</name> <argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>snd_pcm_hw_params_t</name> <modifier>*</modifier></type><name>hw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snd_pcm_hw_params_alloca</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snd_pcm_hw_params_any</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Dump</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"initial hardware setup:\n"</literal></expr></argument>, <argument><expr><name>snd_pcm_hw_params_dump</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_rate_resample</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot disable resampling: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_access</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>,
<argument><expr><name>SND_PCM_ACCESS_RW_INTERLEAVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot set access mode: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>snd_pcm_format_t</name></type> <name>format</name> <init>= <expr><name>SND_PCM_FORMAT_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>choices</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>choices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>snd_pcm_hw_params_test_format</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><name><name>choices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_format</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><name><name>choices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot set sample format: %s"</literal></expr></argument>,
<argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name><name>choices</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>SND_PCM_FORMAT_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"no supported sample format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>format</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>formats</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name><name>formats</name><index>[<expr><name>format</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>var_InheritBool</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"alsa-stereo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_channels_max</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot restrict channels count: %s"</literal></expr></argument>,
<argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_channels_last</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot set channels count: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>param</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>param</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>channel_maps</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>channel_maps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name><name>channel_maps</name><index>[<expr><name>param</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"alsa-samplerate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_rate_max</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot restrict rate to %u Hz or less: %s"</literal></expr></argument>, <argument><expr><literal type="number">192000</literal></expr></argument>,
<argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_rate_last</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot set sample rate: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"sample rate is not integral"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <call><name>vlc_tick_now</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>caching</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"live-caching"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>param</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>caching</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_buffer_time_near</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot set buffer duration: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>param</name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_period_time_near</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot set period: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params_get_period_size</name> <argument_list>(<argument><expr><name>hw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>period_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot get period size: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>period_size</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot commit hardware parameters: %s"</literal></expr></argument>,
<argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Dump</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"final HW setup:\n"</literal></expr></argument>, <argument><expr><name>snd_pcm_hw_params_dump</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>aout_FormatPrepare</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <call><name>es_out_Add</name> <argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>Thread</name></expr></argument>, <argument><expr><name>demux</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_INPUT</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_out_Del</name> <argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>snd_pcm_close</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cancel</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snd_pcm_close</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pcm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
