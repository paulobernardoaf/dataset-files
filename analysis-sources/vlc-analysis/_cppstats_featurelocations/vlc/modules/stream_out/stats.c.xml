<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\stream_out\stats.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_md5.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>




<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>
}</block></struct></type> <name>sout_stream_sys_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>segment_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>next_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>previous_dts</name></decl>,<name>track_duration</name>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>md5_s</name></name></type> <name>hash</name></decl>;</decl_stmt>
}</block></struct></type> <name>sout_stream_id_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Add</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>sout_stream_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_stream_id_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>id</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_id</name></name></expr>;</expr_stmt>
<switch>switch<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"Video"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"Audio"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SPU_ES</name></expr>:</case>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"SPU"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="string">"Data"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>next_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>segment_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>previous_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>track_duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>hash</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"%s: Adding track type:%s id:%d"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Del</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>sout_stream_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>sout_stream_id_sys_t</name> <operator>*</operator><operator>)</operator><name>_id</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EndMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>hash</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outputhash</name> <init>= <expr><call><name>psz_md5_hash</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>hash</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num</name></decl>,<decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>( <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>track_duration</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>segment_number</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"%s: Removing track type:%s id:%d"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>output</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output</name></name></expr></argument>,<argument><expr><literal type="string">"#%s: final type:%s id:%d segments:%"</literal><name>PRIu64</name><literal type="string">" total_duration:%"</literal><name>PRId64</name><literal type="string">" avg_track:%d/%d md5:%16s\n"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>segment_number</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>track_duration</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>, <argument><expr><name>outputhash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"%s: final type:%s id:%d segments:%"</literal><name>PRIu64</name><literal type="string">" total_duration:%"</literal><name>PRId64</name><literal type="string">" avg_track:%d/%d md5:%16s"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>segment_number</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>track_duration</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>, <argument><expr><name>outputhash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>outputhash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Send</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>sout_stream_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>sout_stream_id_sys_t</name> <operator>*</operator><operator>)</operator><name>_id</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>md5_s</name></name></type> <name>hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name>p_buffer</name></expr></init></decl>;</decl_stmt>
<while>while <condition>( <expr><name>p_block</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>InitMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>hash</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AddMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EndMD5</name><argument_list>( <argument><expr><operator>&amp;</operator><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outputhash</name> <init>= <expr><call><name>psz_md5_hash</name><argument_list>( <argument><expr><operator>&amp;</operator><name>hash</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>dts_difference</name> <init>= <expr><name>VLC_TICK_INVALID</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>previous_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dts_difference</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name><name>id</name><operator>-&gt;</operator><name>previous_dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>output</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">"%s\t%d\t%s\t%"</literal><name>PRIu64</name><literal type="string">"\t%"</literal><name>PRId64</name><literal type="string">"\t%"</literal><name>PRId64</name><literal type="string">"\t%16s\n"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>++</operator><name><name>id</name><operator>-&gt;</operator><name>segment_number</name></name></expr></argument>, <argument><expr><name>dts_difference</name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>, <argument><expr><name>outputhash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"%s: track:%d type:%s segment_number:%"</literal><name>PRIu64</name><literal type="string">" dts_difference:%"</literal><name>PRId64</name><literal type="string">" length:%"</literal><name>PRId64</name><literal type="string">" md5:%16s"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>++</operator><name><name>id</name><operator>-&gt;</operator><name>segment_number</name></name></expr></argument>, <argument><expr><name>dts_difference</name></expr></argument>,
<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>, <argument><expr><name>outputhash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>track_duration</name></name> <operator>+=</operator> <ternary><condition><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr> ?</condition><then> <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr> </then><else>: <expr><name>dts_difference</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>outputhash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>previous_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_sout_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"output"</literal></expr>, <expr><literal type="string">"prefix"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-stats-"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outputFile</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_stream_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_sout_options</name></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>outputFile</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>outputFile</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>vlc_fopen</name><argument_list>( <argument><expr><name>outputFile</name></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>output</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Unable to open file '%s' for writing"</literal></expr></argument>, <argument><expr><name>outputFile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>outputFile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output</name></name></expr></argument>,<argument><expr><literal type="string">"#prefix\ttrack\ttype\tsegment_number\tdts_difference\tlength\tmd5\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>outputFile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"prefix"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OutputSend</name><parameter_list>(<parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Send</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OutputOpen</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>p_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>Open</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pf_add</name></name> <operator>=</operator> <name>Add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pf_del</name></name> <operator>=</operator> <name>Del</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pf_send</name></name> <operator>=</operator> <name>OutputSend</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>FilterAdd</name><parameter_list>(<parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>Add</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>id</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>next_id</name></name> <operator>=</operator> <call><name>sout_StreamIdAdd</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FilterDel</name><parameter_list>(<parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>next_id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sout_StreamIdDel</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>next_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Del</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FilterSend</name><parameter_list>(<parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Send</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>sout_StreamIdSend</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>next_id</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FilterOpen</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>p_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>Open</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pf_add</name></name> <operator>=</operator> <name>FilterAdd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pf_del</name></name> <operator>=</operator> <name>FilterDel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pf_send</name></name> <operator>=</operator> <name>FilterSend</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>sout_stream_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>output</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>output</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_TEXT</name></cpp:macro> <cpp:value>N_("Output file")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Writes stats to file instead of stdout" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_TEXT</name></cpp:macro> <cpp:value>N_("Prefix to show on output line")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Stats"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Writes statistic info about stream"</literal>)</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout output"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"stats"</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_STREAM</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>OutputOpen</argument>, <argument>Close</argument> )</argument_list></macro>
<expr_stmt><expr><call><name>add_string</name><argument_list>( <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"output"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>OUTPUT_TEXT</name></expr></argument>,<argument><expr><name>OUTPUT_LONGTEXT</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_string</name><argument_list>( <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"prefix"</literal></expr></argument>, <argument><expr><literal type="string">"stats"</literal></expr></argument>, <argument><expr><name>PREFIX_TEXT</name></expr></argument>,<argument><expr><name>PREFIX_TEXT</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<macro><name>add_submodule</name><argument_list>()</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"stats"</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>FilterOpen</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>
</unit>
