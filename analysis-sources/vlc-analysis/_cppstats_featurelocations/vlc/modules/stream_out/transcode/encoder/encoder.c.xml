<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\stream_out\transcode\encoder\encoder.c">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture_fifo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encoder_priv.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>transcode_encoder_config_init</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transcode_encoder_config_clean</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_lang</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>config_ChainDestroy</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>p_config_chain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transcode_encoder_delete</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_buffers</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_fifo_Delete</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pp_pics</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>transcode_encoder_t</name> <modifier>*</modifier></type> <name>transcode_encoder_new</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_encoder</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_encoder</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<case>case <expr><name>SPU_ES</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_enc</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_enc</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name></name> <operator>=</operator> <name>p_encoder</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_group</name></name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_group</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>psz_language</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pp_pics</name></name> <operator>=</operator> <call><name>picture_fifo_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>pp_pics</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>lock_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>p_enc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>transcode_encoder_format_in</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>transcode_encoder_format_out</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transcode_encoder_update_format_in</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transcode_encoder_update_format_out</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>transcode_encoder_opened</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name></name> <operator>&amp;&amp;</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_module</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type> <name>transcode_encoder_encode</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<return>return <expr><call><name>transcode_encoder_video_encode</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</return>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<return>return <expr><call><name>transcode_encoder_audio_encode</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</return>
<case>case <expr><name>SPU_ES</name></expr>:</case>
<return>return <expr><call><name>transcode_encoder_spu_encode</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type> <name>transcode_encoder_get_output_async</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>lock_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_buffers</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_buffers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>lock_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p_data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transcode_encoder_close</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<expr_stmt><expr><call><name>transcode_encoder_video_close</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name></name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>transcode_encoder_open</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>transcode_encoder_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>SPU_ES</name></expr>:</case>
<return>return <expr><call><name>transcode_encoder_spu_open</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument> )</argument_list></call></expr>;</return>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<return>return <expr><call><name>transcode_encoder_audio_open</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument> )</argument_list></call></expr>;</return>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<return>return <expr><call><name>transcode_encoder_video_open</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument> )</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transcode_encoder_drain</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>transcode_encoder_opened</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<return>return <expr><call><name>transcode_encoder_video_drain</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</return>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<return>return <expr><call><name>transcode_encoder_audio_drain</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</return>
<case>case <expr><name>SPU_ES</name></expr>:</case>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transcode_encoder_test</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_encoder</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>transcode_encoder_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_dec_fmtin</name></decl></parameter>,
<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec_in</name></decl></parameter>,
<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_enc_wanted_in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_encoder</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>( <expr><name><name>p_dec_fmtin</name><operator>-&gt;</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<return>return <expr><call><name>transcode_encoder_video_test</name><argument_list>( <argument><expr><name>p_encoder</name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><name>p_dec_fmtin</name></expr></argument>,
<argument><expr><name>i_codec_in</name></expr></argument>, <argument><expr><name>p_enc_wanted_in</name></expr></argument> )</argument_list></call></expr>;</return>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<return>return <expr><call><name>transcode_encoder_audio_test</name><argument_list>( <argument><expr><name>p_encoder</name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><name>p_dec_fmtin</name></expr></argument>,
<argument><expr><name>i_codec_in</name></expr></argument>, <argument><expr><name>p_enc_wanted_in</name></expr></argument> )</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
