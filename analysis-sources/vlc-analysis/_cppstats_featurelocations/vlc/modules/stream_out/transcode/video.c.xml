<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\stream_out\transcode\video.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_spu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transcode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<struct>struct <name>encoder_owner</name>
<block>{
<decl_stmt><decl><type><name>encoder_t</name></type> <name>enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>vlc_decoder_device</name> <modifier>*</modifier></type><name>TranscodeHoldDecoderDevice</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>dec_dev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>dec_dev</name></name> <operator>=</operator> <call><name>vlc_decoder_device_Create</name><argument_list>( <argument><expr><name>o</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name><name>id</name><operator>-&gt;</operator><name>dec_dev</name></name></expr> ?</condition><then> <expr><call><name>vlc_decoder_device_Hold</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>dec_dev</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>encoder_owner</name></name> <modifier>*</modifier></type><name>enc_get_owner</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>container_of</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr>struct <name>encoder_owner</name></expr></argument>, <argument><expr><name>enc</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_decoder_device</name> <modifier>*</modifier></type><name>video_get_encoder_device</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>enc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>encoder_owner</name></name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>enc_get_owner</name><argument_list>( <argument><expr><name>enc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_owner</name><operator>-&gt;</operator><name>id</name><operator>-&gt;</operator><name>dec_dev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>id</name><operator>-&gt;</operator><name>dec_dev</name></name> <operator>=</operator> <call><name>vlc_decoder_device_Create</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>p_owner</name><operator>-&gt;</operator><name>id</name><operator>-&gt;</operator><name>dec_dev</name></name></expr> ?</condition><then> <expr><call><name>vlc_decoder_device_Hold</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>id</name><operator>-&gt;</operator><name>dec_dev</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>encoder_owner_callbacks</name></name></type> <name>encoder_video_transcode_cbs</name> <init>= <expr><block>{
<expr><block>{ <expr><name>video_get_encoder_device</name></expr>, }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>vlc_decoder_device</name> <modifier>*</modifier></type> <name>video_get_decoder_device</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>TranscodeHoldDecoderDevice</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>debug_format</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"format now %4.4s/%4.4s %dx%d(%dx%d) Ã¸%d"</literal></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_decoder_device</name> <modifier>*</modifier></type> <name>transcode_video_filter_hold_device</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>sys</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>TranscodeHoldDecoderDevice</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>video_update_format_decoder</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_obj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>test_chain</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_enc_in</name> <init>= <expr><call><name>transcode_encoder_format_in</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>||</operator>
<call><name>video_format_IsSimilar</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>decoder_vctx_out</name></name> <operator>=</operator> <name>vctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>es_format_SetMeta</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"Checking if filter chain %4.4s -&gt; %4.4s is possible"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>test_chain</name> <operator>=</operator> <call><name>filter_chain_NewVideo</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>filter_chain_Reset</name><argument_list>( <argument><expr><name>test_chain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>p_enc_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chain_works</name> <init>= <expr><call><name>filter_chain_AppendConverter</name><argument_list>( <argument><expr><name>test_chain</name></expr></argument>, <argument><expr><name>p_enc_in</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>filter_chain_Delete</name><argument_list>( <argument><expr><name>test_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"Filter chain testing done, input chroma %4.4s seems to be %s for transcode"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>chain_works</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"possible"</literal></expr> </then><else>: <expr><literal type="string">"not possible"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>chain_works</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>video_new_buffer_encoder</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>picture_NewFromFormat</name><argument_list>( <argument><expr><operator>&amp;</operator><call><name>transcode_encoder_format_in</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument> )</argument_list></call><operator>-&gt;</operator><name>video</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>transcode_video_filter_buffer_new</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>
<return>return <expr><call><name>picture_NewFromFormat</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>decoder_queue_video</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>pic</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>p_pic</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>pic</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>transcode_dequeue_all_pics</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pics</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>pic</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>pic</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>pic</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>pic</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_pics</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transcode_video_init</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>,
<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,
<argument><expr><literal type="string">"creating video transcoding from fcc=`%4.4s' to fcc=`%4.4s'"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>pic</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>pic</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>pic</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>b_transcode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>decoder_vctx_out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument> )</argument_list></call><operator>-&gt;</operator><name>id</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>decoder_owner_callbacks</name></name></type> <name>dec_cbs</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>video</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>get_device</name> <operator>=</operator> <name>video_get_decoder_device</name></expr>,
<expr><operator>.</operator><name>format_update</name> <operator>=</operator> <name>video_update_format_decoder</name></expr>,
<expr><operator>.</operator><name>queue</name> <operator>=</operator> <name>decoder_queue_video</name></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>dec_cbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>pf_get_cc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator>
<call><name>module_need_var</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><literal type="string">"video decoder"</literal></expr></argument>, <argument><expr><literal type="string">"codec"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot find video decoder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>decoder_vctx_out</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
</block_content>}</block></if></if_stmt>









<decl_stmt><decl><type><name>es_format_t</name></type> <name>encoder_tested_fmt_in</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>encoder_tested_fmt_in</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>i_cat</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>encoder_owner</name></name> <modifier>*</modifier></type><name>p_enc_owner</name> <init>= <expr><operator>(</operator>struct <name>encoder_owner</name><operator>*</operator><operator>)</operator><call><name>sout_EncoderCreate</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>encoder_owner</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_enc_owner</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>encoder_tested_fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_enc_owner</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc_owner</name><operator>-&gt;</operator><name>enc</name><operator>.</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>encoder_video_transcode_cbs</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>transcode_encoder_test</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc_owner</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>,
<argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>,
<argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>encoder_tested_fmt_in</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>encoder_tested_fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_enc_owner</name> <operator>=</operator> <operator>(</operator>struct <name>encoder_owner</name> <operator>*</operator><operator>)</operator><call><name>sout_EncoderCreate</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>encoder_owner</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_enc_owner</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>encoder_tested_fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name> <operator>=</operator> <call><name>transcode_encoder_new</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc_owner</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoder_tested_fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>encoder_tested_fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_enc_owner</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_enc_owner</name><operator>-&gt;</operator><name>enc</name><operator>.</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>encoder_video_transcode_cbs</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>transcode_encoder_update_format_in</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoder_tested_fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>encoder_tested_fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>filter_video_callbacks</name></name></type> <name>transcode_filter_video_cbs</name> <init>=
<expr><block>{
<expr><name>transcode_video_filter_buffer_new</name></expr>, <expr><name>transcode_video_filter_hold_device</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>int</name></type> <name>transcode_video_set_conversions</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>,
<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_src</name></decl></parameter>,
<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_src_vctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_reorient</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>filter_owner_t</name></type> <name>owner</name> <init>= <expr><block>{
<expr><operator>.</operator><name>video</name> <operator>=</operator> <operator>&amp;</operator><name>transcode_filter_video_cbs</name></expr>,
<expr><operator>.</operator><name>sys</name> <operator>=</operator> <name>id</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<enum>enum
<block>{
<decl><name>STEP_NONSTATIC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>STEP_STATIC</name></decl>,
}</block>;</enum>
<for>for<control>( <init><decl><type><name>int</name></type> <name>step</name> <init>= <expr><name>STEP_NONSTATIC</name></expr></init></decl>;</init> <condition><expr><name>step</name> <operator>&lt;=</operator> <name>STEP_STATIC</name></expr>;</condition> <incr><expr><name>step</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_do_scale</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>pp_src</name><operator>)</operator><operator>-&gt;</operator><name><name>video</name><operator>.</operator><name>i_width</name></name></name> <operator>!=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>||</operator>
<name><operator>(</operator><operator>*</operator><name>pp_src</name><operator>)</operator><operator>-&gt;</operator><name><name>video</name><operator>.</operator><name>i_height</name></name></name> <operator>!=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_do_chroma</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>pp_src</name><operator>)</operator><operator>-&gt;</operator><name><name>video</name><operator>.</operator><name>i_chroma</name></name></name> <operator>!=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_do_orient</name> <init>= <expr><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_src</name><operator>)</operator><operator>-&gt;</operator><name><name>video</name><operator>.</operator><name>orientation</name></name></name> <operator>!=</operator> <name>ORIENT_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>b_reorient</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>step</name> <operator>==</operator> <name>STEP_STATIC</name> <operator>&amp;&amp;</operator> <name>b_do_orient</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_tmpdst</name> <init>= <expr><name>p_dst</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <operator>(</operator><name>b_do_scale</name> <operator>||</operator> <name>b_do_chroma</name> <operator>||</operator> <name>b_do_orient</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>tmpdst</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>b_do_orient</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tmpdst</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_ApplyRotation</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tmpdst</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_tmpdst</name> <operator>=</operator> <operator>&amp;</operator><name>tmpdst</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"adding (scale %d,chroma %d, orient %d) converters"</literal></expr></argument>,
<argument><expr><name>b_do_scale</name></expr></argument>, <argument><expr><name>b_do_chroma</name></expr></argument>, <argument><expr><name>b_do_orient</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_chain_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_chain</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>step</name> <operator>==</operator> <name>STEP_NONSTATIC</name><operator>)</operator></expr>
?</condition><then> <expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_conv_nonstatic</name></name></expr>
</then><else>: <expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_conv_static</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_chain</name> <operator>=</operator> <call><name>filter_chain_NewVideo</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>step</name> <operator>==</operator> <name>STEP_NONSTATIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>pp_chain</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>filter_chain_Reset</name><argument_list>( <argument><expr><operator>*</operator><name>pp_chain</name></expr></argument>, <argument><expr><operator>*</operator><name>pp_src</name></expr></argument>, <argument><expr><operator>*</operator><name>pp_src_vctx</name></expr></argument>, <argument><expr><name>p_tmpdst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>filter_chain_AppendConverter</name><argument_list>( <argument><expr><operator>*</operator><name>pp_chain</name></expr></argument>, <argument><expr><name>p_tmpdst</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_src</name> <operator>=</operator> <call><name>filter_chain_GetFmtOut</name><argument_list>( <argument><expr><operator>*</operator><name>pp_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_src_vctx</name> <operator>=</operator> <call><name>filter_chain_GetVideoCtxOut</name><argument_list>( <argument><expr><operator>*</operator><name>pp_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug_format</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>*</operator><name>pp_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>transcode_video_filters_configured</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>p_f_chain</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>transcode_video_filters_init</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>sout_filters_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_master_sync</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>,
<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>src_ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>,
<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>filter_owner_t</name></type> <name>owner</name> <init>= <expr><block>{
<expr><operator>.</operator><name>video</name> <operator>=</operator> <operator>&amp;</operator><name>transcode_filter_video_cbs</name></expr>,
<expr><operator>.</operator><name>sys</name> <operator>=</operator> <name>id</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_f_chain</name></name> <operator>=</operator> <call><name>filter_chain_NewVideo</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>p_f_chain</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>filter_chain_Reset</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_f_chain</name></name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>src_ctx</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>psz_deinterlace</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>filter_chain_AppendFilter</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_f_chain</name></name></expr></argument>,
<argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>psz_deinterlace</name></name></expr></argument>,
<argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>p_deinterlace_cfg</name></name></expr></argument>,
<argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_src</name> <operator>=</operator> <call><name>filter_chain_GetFmtOut</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_f_chain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ctx</name> <operator>=</operator> <call><name>filter_chain_GetVideoCtxOut</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_f_chain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_master_sync</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>filter_chain_AppendFilter</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_f_chain</name></name></expr></argument>, <argument><expr><literal type="string">"fps"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_src</name> <operator>=</operator> <call><name>filter_chain_GetFmtOut</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_f_chain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_ctx</name> <operator>=</operator> <call><name>filter_chain_GetVideoCtxOut</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_f_chain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>transcode_video_set_conversions</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_ctx</name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument>,
<argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>b_reorient</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_filters</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"adding user filters"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_uf_chain</name></name> <operator>=</operator> <call><name>filter_chain_NewVideo</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>p_uf_chain</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>filter_chain_Reset</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_uf_chain</name></name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>src_ctx</name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>filter_chain_AppendFromString</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_uf_chain</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_filters</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_src</name> <operator>=</operator> <call><name>filter_chain_GetFmtOut</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_uf_chain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug_format</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>transcode_encoder_update_format_in</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>psz_spu_sources</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>p_spu</name></name> <operator>||</operator> <operator>(</operator><name><name>id</name><operator>-&gt;</operator><name>p_spu</name></name> <operator>=</operator> <call><name>spu_Create</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>spu_ChangeSources</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_spu</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>psz_spu_sources</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transcode_video_clean</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>transcode_encoder_close</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_encoder_delete</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>transcode_remove_filters</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_f_chain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_remove_filters</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_conv_nonstatic</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_remove_filters</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_conv_static</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_remove_filters</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_uf_chain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_remove_filters</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_final_conv_static</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>p_spu_blender</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>filter_DeleteBlend</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_spu_blender</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>p_spu</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>spu_Destroy</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_spu</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>dec_dev</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>dec_dev</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transcode_video_push_spu</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpicture</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>p_spu</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_spu</name></name> <operator>=</operator> <call><name>spu_Create</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>p_spu</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_subpicture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>spu_PutSubpicture</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_spu</name></name></expr></argument>, <argument><expr><name>p_subpicture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transcode_video_get_output_dimensions</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>w</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>h</name><operator>)</operator></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type> <name>RenderSubpictures</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>p_spu</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_pic</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>, <decl><type ref="prev"/><name>outfmt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>outfmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name> <init>= <expr><call><name>spu_Render</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_spu</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>outfmt</name></expr></argument>, <argument><expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>p_subpic</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>filter_chain_IsEmpty</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_f_chain</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_tmp</name> <init>= <expr><call><name>video_new_buffer_encoder</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name>p_tmp</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Copy</name><argument_list>( <argument><expr><name>p_tmp</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <name>p_tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>p_spu_blender</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_spu_blender</name></name> <operator>=</operator> <call><name>filter_NewBlend</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_spu</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_spu_blender</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_BlendSubpicture</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_spu_blender</name></name></expr></argument>, <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>outfmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_pic</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tag_last_block_with_flag</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_flag</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_last</name> <init>= <expr><operator>*</operator><name>out</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_last</name></expr> )</condition>
<block>{<block_content>
<while>while<condition>( <expr><name><name>p_last</name><operator>-&gt;</operator><name>p_next</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_last</name> <operator>=</operator> <name><name>p_last</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>p_last</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>i_flag</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transcode_video_process</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_eos</name> <init>= <expr><name>in</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_END_OF_SEQUENCE</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>pf_decode</name></name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLCDEC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pics</name> <init>= <expr><call><name>transcode_dequeue_all_pics</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name>p_pics</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_pic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_pics</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>b_error</name></name> <operator>&amp;&amp;</operator> <name>p_pic</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pic</name> <operator>&amp;&amp;</operator> <operator>(</operator> <call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>transcode_encoder_opened</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>video_format_IsSimilar</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>transcode_encoder_opened</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>p_f_chain</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>p_uf_chain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_encoder_video_configure</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>,
<argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name></name></expr></argument>,
<argument><expr><call><name>picture_GetVideoContext</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"aspect-ratio changed, reiniting. %i -&gt; %i : %i -&gt; %i."</literal></expr></argument>,
<argument><expr><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr></argument>, <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_sar_num</name></name></expr></argument>,
<argument><expr><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr></argument>, <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_sar_den</name></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>transcode_remove_filters</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_f_chain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_remove_filters</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_conv_nonstatic</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_remove_filters</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_conv_static</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_remove_filters</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_uf_chain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_remove_filters</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_final_conv_static</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>p_spu_blender</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>filter_DeleteBlend</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_spu_blender</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_spu_blender</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_video_framerate_apply</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_video_sar_apply</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>decoder_vctx_out</name></name> <operator>=</operator> <call><name>picture_GetVideoContext</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>transcode_video_filters_configured</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>transcode_video_filters_init</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,
<argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_filterscfg</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>fps</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument>,
<argument><expr><name><name>id</name><operator>-&gt;</operator><name>decoder_vctx_out</name></name></expr></argument>,
<argument><expr><call><name>transcode_encoder_format_in</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><name>id</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<decl_stmt><decl><type><name>es_format_t</name></type> <name>filter_fmt_out</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>filter_fmt_out</name></expr></argument>, <argument><expr><call><name>transcode_encoder_format_in</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_encoder_open</name> <init>= <expr><call><name>transcode_encoder_opened</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><name>is_encoder_open</name> <operator>&amp;&amp;</operator>
<call><name>transcode_encoder_open</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot find video encoder (module:%s fourcc:%4.4s). "</literal>
<literal type="string">"Take a look few lines earlier to see possible reason."</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr> ?</condition><then> <expr><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr> </then><else>: <expr><literal type="string">"any"</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>encoder_fmt_in</name> <init>= <expr><call><name>transcode_encoder_format_in</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>( <expr><operator>!</operator><name>is_encoder_open</name> <operator>&amp;&amp;</operator>
<name><name>filter_fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name><name>encoder_fmt_in</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>p_final_conv_static</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_final_conv_static</name></name> <operator>=</operator>
<call><name>filter_chain_NewVideo</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>filter_chain_Reset</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_final_conv_static</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>filter_fmt_out</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>encoder_fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>filter_chain_AppendConverter</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_final_conv_static</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_fmt_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"destination (after video filters) %ux%u"</literal></expr></argument>,
<argument><expr><call><name>transcode_encoder_format_in</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call><operator>-&gt;</operator><name><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>,
<argument><expr><call><name>transcode_encoder_format_in</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call><operator>-&gt;</operator><name><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>downstream_id</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>downstream_id</name></name> <operator>=</operator>
<call><name><name>id</name><operator>-&gt;</operator><name>pf_transcode_downstream_add</name></name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>,
<argument><expr><call><name>transcode_encoder_format_out</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>downstream_id</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot output transcoded stream %4.4s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<for>for <control>( <init><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_in</name> <init>= <expr><name>p_pic</name></expr></init></decl>;</init> <condition>;</condition> <incr><expr><name>p_in</name> <operator>=</operator> <name>NULL</name></expr></incr> )</control>
<block>{<block_content>

<decl_stmt><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type> <name><name>primary_chains</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>id</name><operator>-&gt;</operator><name>p_f_chain</name></name></expr>,
<expr><name><name>id</name><operator>-&gt;</operator><name>p_conv_nonstatic</name></name></expr>,
<expr><name><name>id</name><operator>-&gt;</operator><name>p_conv_static</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p_in</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>primary_chains</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>primary_chains</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_in</name> <operator>=</operator> <call><name>filter_chain_VideoFilter</name><argument_list>( <argument><expr><name><name>primary_chains</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_in</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>( <init>;</init><condition>;</condition> <incr><expr><name>p_in</name> <operator>=</operator> <name>NULL</name></expr></incr> )</control>
<block>{<block_content>

<decl_stmt><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type> <name><name>secondary_chains</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>id</name><operator>-&gt;</operator><name>p_uf_chain</name></name></expr>,
<expr><name><name>id</name><operator>-&gt;</operator><name>p_final_conv_static</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p_in</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>secondary_chains</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>secondary_chains</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_in</name> <operator>=</operator> <call><name>filter_chain_VideoFilter</name><argument_list>( <argument><expr><name><name>secondary_chains</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_in</name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><name>p_in</name> <operator>=</operator> <call><name>RenderSubpictures</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_in</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_encoded</name> <init>= <expr><call><name>transcode_encoder_encode</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>p_in</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_encoded</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>p_encoded</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>b_eos</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Drain/restart on EOS"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>transcode_encoder_drain</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>transcode_encoder_close</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>transcode_remove_filters</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_f_chain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_remove_filters</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_conv_nonstatic</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_remove_filters</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_conv_static</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_remove_filters</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_uf_chain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_remove_filters</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_final_conv_static</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tag_last_block_with_flag</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>BLOCK_FLAG_END_OF_SEQUENCE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_eos</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<continue>continue;</continue>
<label><name>error</name>:</label>
<if_stmt><if>if<condition>( <expr><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block> while<condition>( <expr><name>p_pics</name></expr> )</condition>;</do>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>threads</name><operator>.</operator><name>i_count</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>transcode_encoder_get_output_async</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>b_error</name></name> <operator>&amp;&amp;</operator> <name>in</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>transcode_encoder_opened</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Flushing thread and waiting that"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>transcode_encoder_drain</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Flushing done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Flushing failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_eos</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tag_last_block_with_flag</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>BLOCK_FLAG_END_OF_SEQUENCE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>id</name><operator>-&gt;</operator><name>b_error</name></name></expr> ?</condition><then> <expr><name>VLC_EGENERIC</name></expr> </then><else>: <expr><name>VLC_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
