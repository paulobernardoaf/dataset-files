<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\stream_out\transcode\transcode.c">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_spu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transcode.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VENC_TEXT</name></cpp:macro> <cpp:value>N_("Video encoder")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VENC_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This is the video encoder module that will be used (and its associated ""options).")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCODEC_TEXT</name></cpp:macro> <cpp:value>N_("Destination video codec")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCODEC_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This is the video codec that will be used.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VB_TEXT</name></cpp:macro> <cpp:value>N_("Video bitrate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VB_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Target bitrate of the transcoded video stream." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_TEXT</name></cpp:macro> <cpp:value>N_("Video scaling")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Scale factor to apply to the video while transcoding (eg: 0.25)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS_TEXT</name></cpp:macro> <cpp:value>N_("Video frame-rate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Target output frame rate for the video stream." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEINTERLACE_TEXT</name></cpp:macro> <cpp:value>N_("Deinterlace video")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEINTERLACE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Deinterlace the video before encoding." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEINTERLACE_MODULE_TEXT</name></cpp:macro> <cpp:value>N_("Deinterlace module")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEINTERLACE_MODULE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Specify the deinterlace module to use." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH_TEXT</name></cpp:macro> <cpp:value>N_("Video width")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Output video width." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT_TEXT</name></cpp:macro> <cpp:value>N_("Video height")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Output video height." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXWIDTH_TEXT</name></cpp:macro> <cpp:value>N_("Maximum video width")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXWIDTH_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Maximum output video width." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXHEIGHT_TEXT</name></cpp:macro> <cpp:value>N_("Maximum video height")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXHEIGHT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Maximum output video height." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VFILTER_TEXT</name></cpp:macro> <cpp:value>N_("Video filter")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VFILTER_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Video filters will be applied to the video streams (after overlays " "are applied). You can enter a colon-separated list of filters." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AENC_TEXT</name></cpp:macro> <cpp:value>N_("Audio encoder")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AENC_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This is the audio encoder module that will be used (and its associated ""options).")</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACODEC_TEXT</name></cpp:macro> <cpp:value>N_("Destination audio codec")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACODEC_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This is the audio codec that will be used.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AB_TEXT</name></cpp:macro> <cpp:value>N_("Audio bitrate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AB_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Target bitrate of the transcoded audio stream." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARATE_TEXT</name></cpp:macro> <cpp:value>N_("Audio sample rate")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARATE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Sample rate of the transcoded audio stream (11250, 22500, 44100 or 48000).")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALANG_TEXT</name></cpp:macro> <cpp:value>N_("Audio language")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALANG_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This is the language of the audio stream.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACHANS_TEXT</name></cpp:macro> <cpp:value>N_("Audio channels")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACHANS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Number of audio channels in the transcoded streams." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AFILTER_TEXT</name></cpp:macro> <cpp:value>N_("Audio filter")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AFILTER_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Audio filters will be applied to the audio streams (after conversion " "filters are applied). You can enter a colon-separated list of filters." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENC_TEXT</name></cpp:macro> <cpp:value>N_("Subtitle encoder")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENC_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This is the subtitle encoder module that will be used (and its " "associated options)." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCODEC_TEXT</name></cpp:macro> <cpp:value>N_("Destination subtitle codec")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCODEC_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This is the subtitle codec that will be used." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFILTER_TEXT</name></cpp:macro> <cpp:value>N_("Overlays")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFILTER_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This allows you to add overlays (also known as \"subpictures\") on the ""transcoded video stream. The subpictures produced by the filters will ""be overlayed directly onto the video. You can specify a colon-separated ""list of subpicture modules." )</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREADS_TEXT</name></cpp:macro> <cpp:value>N_("Number of threads")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREADS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Number of threads used for the transcoding." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HP_TEXT</name></cpp:macro> <cpp:value>N_("High priority")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HP_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Runs the optional encoder thread at the OUTPUT priority instead of " "VIDEO." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POOL_TEXT</name></cpp:macro> <cpp:value>N_("Picture pool size")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POOL_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Defines how many pictures we allow to be in pool ""between decoder/encoder threads when threads &gt; 0" )</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_deinterlace_type</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"deinterlace"</literal></expr>, <expr><literal type="string">"ffmpeg-deinterlace"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-transcode-"</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Transcode"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Transcode stream output"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout filter"</literal></argument>, <argument><literal type="number">50</literal></argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"transcode"</literal></argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_STREAM</argument> )</argument_list></macro>
<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Video"</literal>)</argument>, <argument>NULL</argument> )</argument_list></macro>
<macro><name>add_module</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"venc"</literal></argument>, <argument><literal type="string">"encoder"</literal></argument>, <argument>NULL</argument>,
<argument>VENC_TEXT</argument>, <argument>VENC_LONGTEXT</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"vcodec"</literal></argument>, <argument>NULL</argument>, <argument>VCODEC_TEXT</argument>,
<argument>VCODEC_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"vb"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>VB_TEXT</argument>,
<argument>VB_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_float</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"scale"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>SCALE_TEXT</argument>,
<argument>SCALE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"fps"</literal></argument>, <argument>NULL</argument>, <argument>FPS_TEXT</argument>,
<argument>FPS_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<expr_stmt><expr><call><name>add_obsolete_bool</name><argument_list>( <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"hurry-up"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"deinterlace"</literal></argument>, <argument>false</argument>, <argument>DEINTERLACE_TEXT</argument>,
<argument>DEINTERLACE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"deinterlace-module"</literal></argument>, <argument><literal type="string">"deinterlace"</literal></argument>,
<argument>DEINTERLACE_MODULE_TEXT</argument>, <argument>DEINTERLACE_MODULE_LONGTEXT</argument>,
<argument>false</argument> )</argument_list></macro>
<macro><name>change_string_list</name><argument_list>( <argument>ppsz_deinterlace_type</argument>, <argument>ppsz_deinterlace_type</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"width"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>WIDTH_TEXT</argument>,
<argument>WIDTH_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"height"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>HEIGHT_TEXT</argument>,
<argument>HEIGHT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"maxwidth"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>MAXWIDTH_TEXT</argument>,
<argument>MAXWIDTH_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"maxheight"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>MAXHEIGHT_TEXT</argument>,
<argument>MAXHEIGHT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_module_list</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"vfilter"</literal></argument>, <argument><literal type="string">"video filter"</literal></argument>, <argument>NULL</argument>,
<argument>VFILTER_TEXT</argument>, <argument>VFILTER_LONGTEXT</argument>)</argument_list></macro>

<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Audio"</literal>)</argument>, <argument>NULL</argument> )</argument_list></macro>
<macro><name>add_module</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"aenc"</literal></argument>, <argument><literal type="string">"encoder"</literal></argument>, <argument>NULL</argument>,
<argument>AENC_TEXT</argument>, <argument>AENC_LONGTEXT</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"acodec"</literal></argument>, <argument>NULL</argument>, <argument>ACODEC_TEXT</argument>,
<argument>ACODEC_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"ab"</literal></argument>, <argument><literal type="number">96</literal></argument>, <argument>AB_TEXT</argument>,
<argument>AB_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"alang"</literal></argument>, <argument>NULL</argument>, <argument>ALANG_TEXT</argument>,
<argument>ALANG_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"channels"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ACHANS_TEXT</argument>,
<argument>ACHANS_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">9</literal></argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"samplerate"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ARATE_TEXT</argument>,
<argument>ARATE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">48000</literal></argument> )</argument_list></macro>
<macro><name>add_obsolete_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"audio-sync"</literal></argument> )</argument_list></macro> 
<macro><name>add_module_list</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"afilter"</literal></argument>, <argument><literal type="string">"audio filter"</literal></argument>, <argument>NULL</argument>,
<argument>AFILTER_TEXT</argument>, <argument>AFILTER_LONGTEXT</argument>)</argument_list></macro>

<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Overlays/Subtitles"</literal>)</argument>, <argument>NULL</argument> )</argument_list></macro>
<macro><name>add_module</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"senc"</literal></argument>, <argument><literal type="string">"encoder"</literal></argument>, <argument>NULL</argument>,
<argument>SENC_TEXT</argument>, <argument>SENC_LONGTEXT</argument>)</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"scodec"</literal></argument>, <argument>NULL</argument>, <argument>SCODEC_TEXT</argument>,
<argument>SCODEC_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"soverlay"</literal></argument>, <argument>false</argument>, <argument>SCODEC_TEXT</argument>,
<argument>SCODEC_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_module_list</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"sfilter"</literal></argument>, <argument><literal type="string">"spu source"</literal></argument>, <argument>NULL</argument>,
<argument>SFILTER_TEXT</argument>, <argument>SFILTER_LONGTEXT</argument>)</argument_list></macro>

<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Miscellaneous"</literal>)</argument>, <argument>NULL</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"threads"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>THREADS_TEXT</argument>,
<argument>THREADS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">32</literal></argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"pool-size"</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>POOL_TEXT</argument>, <argument>POOL_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1000</literal></argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"high-priority"</literal></argument>, <argument>false</argument>, <argument>HP_TEXT</argument>, <argument>HP_LONGTEXT</argument>,
<argument>true</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sout_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"venc"</literal></expr>, <expr><literal type="string">"vcodec"</literal></expr>, <expr><literal type="string">"vb"</literal></expr>,
<expr><literal type="string">"scale"</literal></expr>, <expr><literal type="string">"fps"</literal></expr>, <expr><literal type="string">"width"</literal></expr>, <expr><literal type="string">"height"</literal></expr>, <expr><literal type="string">"vfilter"</literal></expr>, <expr><literal type="string">"deinterlace"</literal></expr>,
<expr><literal type="string">"deinterlace-module"</literal></expr>, <expr><literal type="string">"threads"</literal></expr>, <expr><literal type="string">"aenc"</literal></expr>, <expr><literal type="string">"acodec"</literal></expr>, <expr><literal type="string">"ab"</literal></expr>, <expr><literal type="string">"alang"</literal></expr>,
<expr><literal type="string">"afilter"</literal></expr>, <expr><literal type="string">"samplerate"</literal></expr>, <expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">"senc"</literal></expr>, <expr><literal type="string">"scodec"</literal></expr>, <expr><literal type="string">"soverlay"</literal></expr>,
<expr><literal type="string">"sfilter"</literal></expr>, <expr><literal type="string">"high-priority"</literal></expr>, <expr><literal type="string">"maxwidth"</literal></expr>, <expr><literal type="string">"maxheight"</literal></expr>, <expr><literal type="string">"pool-size"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Add</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Del</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Send</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetAudioEncoderConfig</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>transcode_encoder_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_string</name> <init>= <expr><call><name>var_GetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"aenc"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_string</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_string</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_next</name> <init>= <expr><call><name>config_ChainCreate</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>p_config_chain</name></name></expr></argument>,
<argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_string</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"acodec"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_string</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_string</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>fcc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><literal type="string">" \0"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>fcc</name></expr></argument>, <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><call><name>__MIN</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <call><name>vlc_fourcc_GetCodecFromString</name><argument_list>( <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>fcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Checking codec mapping for %s got %4.4s "</literal></expr></argument>,
<argument><expr><name>fcc</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"ab"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitrate</name></name> <operator>&lt;</operator> <literal type="number">4000</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitrate</name></name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_sample_rate</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"samplerate"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"channels"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MP3</name> <operator>||</operator>
<name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MP2</name> <operator>||</operator>
<name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MPGA</name> <operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>p_cfg</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"%d channels invalid for mp2/mp3, forcing to 2"</literal></expr></argument>,
<argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"codec audio=%4.4s %dHz %d channels %dKb/s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_sample_rate</name></name></expr></argument>,
<argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_lang</name></name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"alang"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetVideoEncoderConfig</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>transcode_encoder_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_string</name> <init>= <expr><call><name>var_GetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"venc"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_string</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_string</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_next</name></decl>;</decl_stmt>
<expr_stmt><expr><name>psz_next</name> <operator>=</operator> <call><name>config_ChainCreate</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>p_config_chain</name></name></expr></argument>,
<argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_string</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"vcodec"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_string</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_string</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>fcc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><literal type="string">" \0"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>fcc</name></expr></argument>, <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><call><name>__MIN</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <call><name>vlc_fourcc_GetCodecFromString</name><argument_list>( <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>fcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Checking video codec mapping for %s got %4.4s "</literal></expr></argument>,
<argument><expr><name>fcc</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"vb"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_bitrate</name></name> <operator>&lt;</operator> <literal type="number">16000</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_bitrate</name></name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>f_scale</name></name> <operator>=</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"scale"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_InheritURational</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>fps</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>fps</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"fps"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"width"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"height"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_maxwidth</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"maxwidth"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_maxheight</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"maxheight"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>threads</name><operator>.</operator><name>i_count</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"threads"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>threads</name><operator>.</operator><name>pool_size</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"pool-size"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"high-priority"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>threads</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>VLC_THREAD_PRIORITY_OUTPUT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>threads</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>VLC_THREAD_PRIORITY_VIDEO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetSPUEncoderConfig</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>transcode_encoder_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_string</name> <init>= <expr><call><name>var_GetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"senc"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_string</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_string</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_next</name></decl>;</decl_stmt>
<expr_stmt><expr><name>psz_next</name> <operator>=</operator> <call><name>config_ChainCreate</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>p_config_chain</name></name></expr></argument>,
<argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_string</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"scodec"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_string</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_string</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>fcc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><literal type="string">" \0"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>fcc</name></expr></argument>, <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><call><name>__MIN</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <call><name>vlc_fourcc_GetCodecFromString</name><argument_list>( <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>fcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Checking spu codec mapping for %s got %4.4s "</literal></expr></argument>, <argument><expr><name>fcc</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>SOUT_STREAM_EMPTY</name></expr>:</case>
<return>return <expr><call><name>sout_StreamControlVa</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>SOUT_STREAM_ID_SPU_HIGHLIGHT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>sout_stream_id_sys_t</name> <operator>*</operator><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>spu_hl</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>downstream_id</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>sout_StreamControl</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>,
<argument><expr><name><name>id</name><operator>-&gt;</operator><name>downstream_id</name></name></expr></argument>, <argument><expr><name>spu_hl</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_sout_options</name></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>transcode_encoder_config_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>aenc_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetAudioEncoderConfig</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>aenc_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>sout_filters_config_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>afilters_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_string</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"afilter"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_string</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_string</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>afilters_cfg</name><operator>.</operator><name>psz_filters</name></name> <operator>=</operator> <name>psz_string</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>transcode_encoder_config_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>venc_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetVideoEncoderConfig</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>venc_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_master_sync</name></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>venc_cfg</name><operator>.</operator><name>video</name><operator>.</operator><name>fps</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>venc_cfg</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"codec video=%4.4s %dx%d scaling: %f %dkb/s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>venc_cfg</name><operator>.</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>venc_cfg</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>venc_cfg</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>venc_cfg</name><operator>.</operator><name>video</name><operator>.</operator><name>f_scale</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>venc_cfg</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>sout_filters_config_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>vfilters_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_string</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"vfilter"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_string</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_string</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vfilters_cfg</name><operator>.</operator><name>psz_filters</name></name> <operator>=</operator> <name>psz_string</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"deinterlace"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz_string</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,
<argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"deinterlace-module"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_string</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><call><name>config_ChainCreate</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>vfilters_cfg</name><operator>.</operator><name>video</name><operator>.</operator><name>psz_deinterlace</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>vfilters_cfg</name><operator>.</operator><name>video</name><operator>.</operator><name>p_deinterlace_cfg</name></name></expr></argument>, <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>psz_string</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"sfilter"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_string</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_string</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vfilters_cfg</name><operator>.</operator><name>video</name><operator>.</operator><name>psz_spu_sources</name></name> <operator>=</operator> <name>psz_string</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>transcode_encoder_config_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>senc_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetSPUEncoderConfig</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>senc_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>senc_cfg</name><operator>.</operator><name>i_codec</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"codec spu=%4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>senc_cfg</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_soverlay</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"soverlay"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>senc_cfg</name><operator>.</operator><name>spu</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>venc_cfg</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>venc_cfg</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr> </then><else>: <expr><literal type="number">1280</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>senc_cfg</name><operator>.</operator><name>spu</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>venc_cfg</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>venc_cfg</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr> </then><else>: <expr><literal type="number">720</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vfilters_cfg</name><operator>.</operator><name>video</name><operator>.</operator><name>b_reorient</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_soverlay</name></name> <operator>||</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>vfilters_cfg</name><operator>.</operator><name>video</name><operator>.</operator><name>psz_spu_sources</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_add</name></name> <operator>=</operator> <name>Add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_del</name></name> <operator>=</operator> <name>Del</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_send</name></name> <operator>=</operator> <name>Send</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>transcode_encoder_config_clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>venc_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sout_filters_config_clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>vfilters_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>transcode_encoder_config_clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>aenc_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sout_filters_config_clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>afilters_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>transcode_encoder_config_clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>senc_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DeleteSoutStreamID</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SendSpuToVideoCallback</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbdata</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpicture</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name>cbdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>id_video</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_subpicture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>transcode_video_push_spu</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id_video</name></name></expr></argument>, <argument><expr><name>p_subpicture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GetVideoDimensions</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbdata</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name>cbdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>id_video</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>transcode_video_get_output_dimensions</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id_video</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>GetMasterDrift</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbdata</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name>cbdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>drift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>id_master_sync</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>drift</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>id_master_sync</name><operator>-&gt;</operator><name>i_drift</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>drift</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ValidateDrift</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbdata</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_drift</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name>cbdata</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_drift</name> <operator>&gt;</operator> <name>MASTER_SYNC_MAX_DRIFT</name> <operator>||</operator>
<name>i_drift</name> <operator>&lt;</operator> <operator>-</operator><name>MASTER_SYNC_MAX_DRIFT</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"drift is too high (%"</literal><name>PRId64</name><literal type="string">"), resetting master sync"</literal></expr></argument>,
<argument><expr><name>i_drift</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>transcode_downstream_Add</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt_orig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>fmt</name><operator>-&gt;</operator><name>psz_language</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>aenc_cfg</name><operator>.</operator><name>psz_lang</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>aenc_cfg</name><operator>.</operator><name>psz_lang</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>fmt_orig</name><operator>-&gt;</operator><name>psz_language</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>fmt_orig</name><operator>-&gt;</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tmp</name><operator>.</operator><name>i_id</name></name> <operator>!=</operator> <name><name>fmt_orig</name><operator>-&gt;</operator><name>i_id</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name><name>fmt_orig</name><operator>-&gt;</operator><name>i_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tmp</name><operator>.</operator><name>i_group</name></name> <operator>!=</operator> <name><name>fmt_orig</name><operator>-&gt;</operator><name>i_group</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>i_group</name></name> <operator>=</operator> <name><name>fmt_orig</name><operator>-&gt;</operator><name>i_group</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>downstream</name> <init>= <expr><call><name>sout_StreamIdAdd</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>downstream</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Add</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_stream_id_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>id</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>pf_transcode_downstream_add</name></name> <operator>=</operator> <name>transcode_downstream_Add</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type> <name>p_owner</name> <init>= <expr><call><name>vlc_object_create</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_owner</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_owner</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_obj</name></name> <operator>=</operator> <call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decoder_Init</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_SetMeta</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_filterscfg</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>afilters_cfg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>aenc_cfg</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_master_sync</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>pf_drift_validate</name></name> <operator>=</operator> <name>ValidateDrift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>callback_data</name></name> <operator>=</operator> <name>p_stream</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_filterscfg</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>vfilters_cfg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>venc_cfg</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SPU_ES</name></expr>:</case>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_filterscfg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>senc_cfg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>pf_send_subpicture</name></name> <operator>=</operator> <name>SendSpuToVideoCallback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>pf_get_output_dimensions</name></name> <operator>=</operator> <name>GetVideoDimensions</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_master_sync</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>pf_get_master_drift</name></name> <operator>=</operator> <name>GetMasterDrift</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>callback_data</name></name> <operator>=</operator> <name>p_stream</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name> <operator>&amp;&amp;</operator> <name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <operator>!</operator><call><name>transcode_audio_init</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>success</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_master_sync</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>id_master_sync</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id_master_sync</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <operator>!</operator><call><name>transcode_video_init</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>success</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>id_video</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id_video</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name> <operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_soverlay</name></name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <operator>!</operator><call><name>transcode_spu_init</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"not transcoding a stream (fcc=`%4.4s')"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>downstream_id</name></name> <operator>=</operator> <call><name>transcode_downstream_Add</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>b_transcode</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>downstream_id</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>id</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>decoder_Destroy</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteSoutStreamID</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Del</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>sout_stream_id_sys_t</name> <operator>*</operator><operator>)</operator><name>_id</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>b_transcode</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_cat</name> <init>= <expr><ternary><condition><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr> ?</condition><then> <expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr> </then><else>: <expr><name>UNKNOWN_ES</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name>i_cat</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<expr_stmt><expr><call><name>Send</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decoder_Destroy</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>id</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>id_master_sync</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id_master_sync</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_audio_clean</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<expr_stmt><expr><call><name>Send</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decoder_Destroy</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>id</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>id_video</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id_video</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_video_clean</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SPU_ES</name></expr>:</case>
<expr_stmt><expr><call><name>decoder_Destroy</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transcode_spu_clean</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>decoder_Destroy</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>downstream_id</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sout_StreamIdDel</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>downstream_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DeleteSoutStreamID</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Send</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>sout_stream_id_sys_t</name> <operator>*</operator><operator>)</operator><name>_id</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>b_error</name></name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>b_transcode</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>downstream_id</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>sout_StreamIdSend</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>downstream_id</name></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>transcode_audio_process</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>transcode_video_process</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SPU_ES</name></expr>:</case>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>transcode_spu_process</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name>p_out</name> <operator>&amp;&amp;</operator>
<call><name>sout_StreamIdSend</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>downstream_id</name></name></expr></argument>, <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>
<label><name>error</name>:</label>
<if_stmt><if>if<condition>( <expr><name>p_buffer</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>
</unit>
