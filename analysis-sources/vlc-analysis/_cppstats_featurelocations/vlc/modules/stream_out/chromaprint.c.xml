<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\stream_out\chromaprint.c">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMAPRINT_NODLL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chromaprint.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chromaprint_data.h"</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Add</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Del</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Send</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DURATION_TEXT</name></cpp:macro> <cpp:value>N_("Duration of the fingerprinting" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DURATION_LONGTEXT</name></cpp:macro> <cpp:value>N_("Default: 90sec")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Chromaprint stream output"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout output"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"chromaprint"</literal></argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"duration"</literal></argument>, <argument><literal type="number">90</literal></argument>, <argument>DURATION_TEXT</argument>, <argument>DURATION_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<typedef>typedef <type><name><name>struct</name> <name>sout_stream_id_sys_t</name></name></type> <name>sout_stream_id_sys_t</name>;</typedef>
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_total_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_finished</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ChromaprintContext</name> <modifier>*</modifier></type><name>p_chromaprint_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chromaprint_fingerprint_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>sout_stream_sys_t</name>;</typedef>

<struct>struct <name>sout_stream_id_sys_t</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_samplerate</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTESPERSAMPLE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sout_stream_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator> <name>p_sys</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_finished</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_done</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"duration"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"fingerprint-data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_data</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Fingerprint data holder not set"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOVAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"chromaprint version %s"</literal></expr></argument>, <argument><expr><call><name>chromaprint_get_version</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_chromaprint_ctx</name></name> <operator>=</operator> <call><name>chromaprint_new</name><argument_list>( <argument><expr><name>CHROMAPRINT_ALGORITHM_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_chromaprint_ctx</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Can't create chromaprint context"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_add</name></name> <operator>=</operator> <name>Add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_del</name></name> <operator>=</operator> <name>Del</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_send</name></name> <operator>=</operator> <name>Send</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Finish</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fingerprint</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_finished</name></name> <operator>&amp;&amp;</operator> <call><name>chromaprint_finish</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_chromaprint_ctx</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>chromaprint_get_fingerprint</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_chromaprint_ctx</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>psz_fingerprint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>psz_fingerprint</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_data</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_total_samples</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>id</name><operator>-&gt;</operator><name>i_samplerate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_data</name><operator>-&gt;</operator><name>psz_fingerprint</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_fingerprint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>chromaprint_dealloc</name><argument_list>( <argument><expr><name>psz_fingerprint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"DURATION=%u;FINGERPRINT=%s"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_data</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_data</name><operator>-&gt;</operator><name>psz_fingerprint</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Cannot create %us fingerprint (not enough samples?)"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Fingerprinting finished"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_done</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Finish</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>chromaprint_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_chromaprint_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Add</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_S16N</name> <operator>||</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"bad input format: need s16l, 1 or 2 channels"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_stream_id_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>id</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>i_samplerate</name></name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>i_samples</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>*</operator> <name><name>id</name><operator>-&gt;</operator><name>i_samplerate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>chromaprint_start</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_chromaprint_ctx</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>i_channels</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Failed starting chromaprint on %uHz %uch samples"</literal></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>i_channels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Starting chromaprint on %uHz %uch samples"</literal></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>i_channels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Del</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Finish</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr> )</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Send</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>sout_stream_id_sys_t</name> <operator>*</operator><operator>)</operator><name>_id</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>id</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name>p_buf</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_samples</name> <init>= <expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <operator>(</operator><name>BYTESPERSAMPLE</name> <operator>*</operator> <name><name>id</name><operator>-&gt;</operator><name>i_channels</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_samples</name></name> <operator>+=</operator> <name>i_samples</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_finished</name></name> <operator>&amp;&amp;</operator> <name><name>id</name><operator>-&gt;</operator><name>i_samples</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator> <call><name>chromaprint_feed</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_chromaprint_ctx</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>p_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,
<argument><expr><name><name>p_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <name>BYTESPERSAMPLE</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"feed error"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>i_samples</name></name> <operator>-=</operator> <name>i_samples</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>i_samples</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_finished</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_finished</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Fingerprint collection finished"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name><name>p_buf</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buf</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
