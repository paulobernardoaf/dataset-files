<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\stream_out\rtpfmt.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../demux/xiph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../packetizer/hxxx_nal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_mpa</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_mpv</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_ac3</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_simple</name><parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_split</name><parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_pcm</name><parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_swab</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_mp4a</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_mp4a_latm</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_h263</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_h264</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_h265</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_amr</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_spx</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_t140</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_g726_16</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_g726_24</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_g726_32</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_g726_40</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_xiph</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_vp8</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_jpeg</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_r420</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_rgb24</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIPH_IDENT</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_xiph_pack_headers</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>room</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_extra</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_extra</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>i_buffer</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>theora_pixel_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>packet_size</name><index>[<expr><name>XIPH_MAX_HEADER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>packet</name><index>[<expr><name>XIPH_MAX_HEADER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>packet_count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xiph_SplitHeaders</name><argument_list>(<argument><expr><name>packet_size</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet_count</name></expr></argument>,
<argument><expr><name>i_extra</name></expr></argument>, <argument><expr><name>p_extra</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><name>packet_count</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name>theora_pixel_fmt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>packet_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">42</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>theora_pixel_fmt</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>packet</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><index>[<expr><literal type="number">41</literal></expr>]</index> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>length_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>size</name> <init>= <expr><name><name>packet_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>length_size</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>&gt;&gt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>i_buffer</name> <operator>=</operator> <name>room</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>length_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>length_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
<operator>+</operator> <name><name>packet_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>packet_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>packet_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_buffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>*</operator><name>i_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>p_buffer</name> <operator>+</operator> <name>room</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>size</name> <init>= <expr><name><name>length_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><name><name>packet_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>*</operator> <operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>packet</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>packet_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>packet_size</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rtp_xiph_b64_oob_config</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_extra</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_extra</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>theora_pixel_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_buffer</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rtp_xiph_pack_headers</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_buffer</name></expr></argument>,
<argument><expr><name>theora_pixel_fmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>SetDWBE</name><argument_list>(<argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ident</name> <init>= <expr><name>XIPH_IDENT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><name>p_buffer</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ident</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>ident</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><name>p_buffer</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><call><name>vlc_b64_encode_binary</name><argument_list>(<argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>config</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sprintf_hexa</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>hex</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_data</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>hex</name><index>[<expr><operator>(</operator><name><name>p_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>hex</name><index>[<expr><operator>(</operator><name><name>p_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator><operator>&amp;</operator><literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_data</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>rtp_get_fmt</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mux</name></decl></parameter>,
<parameter><decl><type><name>rtp_format_t</name> <modifier>*</modifier></type><name>rtp_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_fmt</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>mux</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>payload_type</name></name> <operator>=</operator> <literal type="number">96</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>cat</name></name> <operator>=</operator> <ternary><condition><expr><name>mux</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>VIDEO_ES</name></expr> </then><else>: <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>clock_rate</name></name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>clock_rate</name></name> <operator>=</operator> <literal type="number">90000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>=</operator> <ternary><condition><expr><name>p_fmt</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name><operator>/</operator><literal type="number">1000</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>mux</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>strncmp</name><argument_list>( <argument><expr><name>mux</name></expr></argument>, <argument><expr><literal type="string">"ts"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>payload_type</name></name> <operator>=</operator> <literal type="number">33</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"MP2T"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"MP2P"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_MULAW</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>==</operator> <literal type="number">8000</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>payload_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"PCMU"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_pcm</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_ALAW</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>==</operator> <literal type="number">8000</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>payload_type</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"PCMA"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_pcm</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S16B</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_S16L</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>==</operator> <literal type="number">44100</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>payload_type</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>==</operator> <literal type="number">44100</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>payload_type</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"L16"</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_S16B</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_pcm</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_swab</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_U8</name></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"L8"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_pcm</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S24B</name></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"L24"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_pcm</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_MPGA</name></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>payload_type</name></name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"MPA"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>clock_rate</name></name> <operator>=</operator> <literal type="number">90000</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_mpa</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_MPGV</name></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>payload_type</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"MPV"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_mpv</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_ADPCM_G726</name></expr>:</case>
<switch>switch<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"G726-16"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_g726_16</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"G726-24"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_g726_24</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">32</literal></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"G726-32"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_g726_32</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">40</literal></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"G726-40"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_g726_40</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot add this stream (unsupported "</literal>
<literal type="string">"G.726 bit rate: %u)"</literal></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_A52</name></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"ac3"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_ac3</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_H263</name></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"H263-1998"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_h263</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"H264"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_h264</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_64_sps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_64_pps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hexa</name><index>[<expr><literal type="number">6</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hxxx_iterator_ctx_t</name></type> <name>it</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hxxx_iterator_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_nal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nal</name></decl>;</decl_stmt>
<while>while<condition>( <expr><call><name>hxxx_annexb_iterate_next</name><argument_list>( <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nal</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_nal</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"No-info found in nal "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_nal_type</name> <init>= <expr><name><name>p_nal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x1f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"we found a startcode for NAL with TYPE:%d"</literal></expr></argument>, <argument><expr><name>i_nal_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_nal_type</name> <operator>==</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name>i_nal</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_64_sps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_64_sps</name> <operator>=</operator> <call><name>vlc_b64_encode_binary</name><argument_list>( <argument><expr><name>p_nal</name></expr></argument>, <argument><expr><name>i_nal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf_hexa</name><argument_list>( <argument><expr><name>hexa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_nal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_nal_type</name> <operator>==</operator> <literal type="number">8</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_64_pps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_64_pps</name> <operator>=</operator> <call><name>vlc_b64_encode_binary</name><argument_list>( <argument><expr><name>p_nal</name></expr></argument>, <argument><expr><name>i_nal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if<condition>( <expr><name>p_64_sps</name> <operator>&amp;&amp;</operator> <name>p_64_pps</name> <operator>&amp;&amp;</operator>
<operator>(</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument>,
<argument><expr><literal type="string">"packetization-mode=1;profile-level-id=%s;"</literal>
<literal type="string">"sprop-parameter-sets=%s,%s;"</literal></expr></argument>, <argument><expr><name>hexa</name></expr></argument>, <argument><expr><name>p_64_sps</name></expr></argument>,
<argument><expr><name>p_64_pps</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_64_sps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_64_pps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"packetization-mode=1"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>VLC_CODEC_HEVC</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"H265"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_h265</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_profile</name> <init>= <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_profile</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_level</name> <init>= <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_level</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_tiers</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_space</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>nalset_e</name>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_nal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_extend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_64</name></decl>;</decl_stmt>
}</block> <decl><name><name>nalsets</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"vps"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">33</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"sps"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">34</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"pps"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">39</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"sei"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>hxxx_iterator_ctx_t</name></type> <name>it</name></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nalset_e</name></name> <modifier>*</modifier></type><name>set</name> <init>= <expr><operator>&amp;</operator><name><name>nalsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hxxx_iterator_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_nal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nal</name></decl>;</decl_stmt>
<while>while<condition>( <expr><call><name>hxxx_annexb_iterate_next</name><argument_list>( <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nal</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_nal_type</name> <init>= <expr><operator>(</operator><name><name>p_nal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7E</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>i_nal_type</name> <argument_list type="generic">&lt; <argument><expr><name><name>set</name><operator>-&gt;</operator><name>i_nal</name></name> <operator>||</operator>
<name>i_nal_type</name></expr></argument> &gt;</argument_list></name> <name><name>set</name><operator>-&gt;</operator><name>i_nal</name></name> <operator>+</operator> <name><name>set</name><operator>-&gt;</operator><name>i_extend</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"we found a startcode for NAL with TYPE:%"</literal> <name>PRIu8</name></expr></argument>, <argument><expr><name>i_nal_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_temp</name> <init>= <expr><call><name>vlc_b64_encode_binary</name><argument_list>( <argument><expr><name>p_nal</name></expr></argument>, <argument><expr><name>i_nal</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_temp</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>set</name><operator>-&gt;</operator><name>psz_64</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>psz_64</name></name> <operator>=</operator> <name>psz_temp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_merged</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_merged</name></expr></argument>, <argument><expr><literal type="string">"%s,%s"</literal></expr></argument>, <argument><expr><name><name>set</name><operator>-&gt;</operator><name>psz_64</name></name></expr></argument>, <argument><expr><name>psz_temp</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>set</name><operator>-&gt;</operator><name>psz_64</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>psz_64</name></name> <operator>=</operator> <name>psz_merged</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_temp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_nal_type</name> <operator>==</operator> <literal type="number">33</literal> <operator>&amp;&amp;</operator> <name>i_nal</name> <operator>&gt;</operator> <literal type="number">12</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_profile</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_profile</name> <operator>=</operator> <name><name>p_nal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_space</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_space</name> <operator>=</operator> <name><name>p_nal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_tiers</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_tiers</name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>p_nal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_level</name> <operator>=</operator> <name><name>p_nal</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"tx-mode=SRST;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fmtp</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_profile</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_fmtp</name></expr></argument>, <argument><expr><literal type="string">"%sprofile-id=%d;"</literal></expr></argument>,
<argument><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument>, <argument><expr><name>i_profile</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <name>psz_fmtp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_level</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_fmtp</name></expr></argument>, <argument><expr><literal type="string">"%slevel-id=%d;"</literal></expr></argument>,
<argument><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument>, <argument><expr><name>i_level</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <name>psz_fmtp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_tiers</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_fmtp</name></expr></argument>, <argument><expr><literal type="string">"%stier-flag=%d;"</literal></expr></argument>,
<argument><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument>, <argument><expr><name>i_tiers</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <name>psz_fmtp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_space</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_fmtp</name></expr></argument>, <argument><expr><literal type="string">"%sprofile-space=%d;"</literal></expr></argument>,
<argument><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument>, <argument><expr><name>i_space</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <name>psz_fmtp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nalset_e</name></name> <modifier>*</modifier></type><name>set</name> <init>= <expr><operator>&amp;</operator><name><name>nalsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>set</name><operator>-&gt;</operator><name>psz_64</name></name> <operator>&amp;&amp;</operator>
<call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_fmtp</name></expr></argument>, <argument><expr><literal type="string">"%ssprop-%s=%s;"</literal></expr></argument>,
<argument><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument>,
<argument><expr><name><name>set</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,
<argument><expr><name><name>set</name><operator>-&gt;</operator><name>psz_64</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <name>psz_fmtp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>nalsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>
</block_content>}</block>

<case>case <expr><name>VLC_CODEC_MP4V</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"MP4V-ES"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_split</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>hexa</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf_hexa</name><argument_list>( <argument><expr><name>hexa</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument>,
<argument><expr><literal type="string">"profile-level-id=3; config=%s;"</literal></expr></argument>, <argument><expr><name>hexa</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VLC_CODEC_MP4A</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"sout-rtp-mp4a-latm"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>hexa</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"mpeg4-generic"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_mp4a</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf_hexa</name><argument_list>( <argument><expr><name>hexa</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument>,
<argument><expr><literal type="string">"streamtype=5; profile-level-id=15; "</literal>
<literal type="string">"mode=AAC-hbr; config=%s; SizeLength=13; "</literal>
<literal type="string">"IndexLength=3; IndexDeltaLength=3; Profile=1;"</literal></expr></argument>,
<argument><expr><name>hexa</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>hexa</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>config</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>aacsrates</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">96000</literal></expr>, <expr><literal type="number">88200</literal></expr>, <expr><literal type="number">64000</literal></expr>, <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">32000</literal></expr>, <expr><literal type="number">24000</literal></expr>, <expr><literal type="number">22050</literal></expr>,
<expr><literal type="number">16000</literal></expr>, <expr><literal type="number">12000</literal></expr>, <expr><literal type="number">11025</literal></expr>, <expr><literal type="number">8000</literal></expr>, <expr><literal type="number">7350</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>==</operator> <name><name>aacsrates</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>config</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0x40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">0x20</literal><operator>|</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name><operator>&lt;&lt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>=</operator><literal type="number">0x3f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>=</operator><literal type="number">0xc0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"MP4A-LATM"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_mp4a_latm</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf_hexa</name><argument_list>( <argument><expr><name>hexa</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument>, <argument><expr><literal type="string">"profile-level-id=15; "</literal>
<literal type="string">"object=2; cpresent=0; config=%s"</literal></expr></argument>, <argument><expr><name>hexa</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VLC_CODEC_AMR_NB</name></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"AMR"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"octet-align=1"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_amr</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_AMR_WB</name></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"AMR-WB"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"octet-align=1"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_amr</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_SPEEX</name></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"SPEEX"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_spx</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_VORBIS</name></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"vorbis"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_xiph</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><call><name>rtp_xiph_b64_oob_config</name><argument_list>(<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>config</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument>,
<argument><expr><literal type="string">"configuration=%s;"</literal></expr></argument>, <argument><expr><name>config</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_THEORA</name></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"theora"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_xiph</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>pixel_fmt</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><call><name>rtp_xiph_b64_oob_config</name><argument_list>(<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>pixel_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>config</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_fmt</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>pixel_fmt</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c2</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c2</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument>,
<argument><expr><literal type="string">"sampling=YCbCr-4:%d:%d; width=%d; height=%d; "</literal>
<literal type="string">"delivery-method=inline; configuration=%s; "</literal>
<literal type="string">"delivery-method=in_band;"</literal></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>,
<argument><expr><name>config</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_ITU_T140</name></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"t140"</literal></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>clock_rate</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_t140</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_GSM</name></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>payload_type</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"GSM"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_split</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_OPUS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Multistream opus not supported in RTP"</literal>
<literal type="string">" (having %d channels input)"</literal></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"opus"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_simple</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>clock_rate</name></name> <operator>=</operator> <literal type="number">48000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"sprop-stereo=1"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_VP8</name></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"VP8"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_vp8</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_R420</name></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"RAW"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_r420</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument>,
<argument><expr><literal type="string">"sampling=YCbCr-4:2:0; width=%d; height=%d; "</literal>
<literal type="string">"depth=8; colorimetry=BT%s"</literal></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>&gt;</operator> <literal type="number">576</literal></expr> ?</condition><then> <expr><literal type="string">"709-2"</literal></expr> </then><else>: <expr><literal type="string">"601-5"</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_RGB24</name></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"RAW"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_rgb24</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument>,
<argument><expr><literal type="string">"sampling=RGB; width=%d; height=%d; "</literal>
<literal type="string">"depth=8; colorimetry=SMPTE240M"</literal></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>,
<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_MJPG</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_JPEG</name></expr>:</case>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name> <operator>=</operator> <literal type="string">"JPEG"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>payload_type</name></name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>rtp_packetize_jpeg</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot add this stream (unsupported "</literal>
<literal type="string">"codec: %4.4s)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>rtp_packetize_h264_nal</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_data</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_last</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>rtp_packetize_xiph_config</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmtp</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fmtp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>fmtp</name></expr></argument>, <argument><expr><literal type="string">"configuration="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>start</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"configuration="</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>end</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>end</name> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b64</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b64</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>b64</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b64</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_max</name> <init>= <expr><call><name>rtp_mtu</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_orig</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_data</name> <operator>=</operator> <call><name>vlc_b64_decode_binary</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_orig</name></expr></argument>, <argument><expr><name>b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_data</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_data</name> <operator>=</operator> <name>p_orig</name> <operator>+</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><operator>(</operator> <name>i_data</name> <operator>+</operator> <name>i_max</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name>i_max</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_payload</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_max</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">18</literal> <operator>+</operator> <name>i_payload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>fragtype</name></decl>, <decl><type ref="prev"/><name>numpkts</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>fragtype</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>numpkts</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>numpkts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fragtype</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>i_count</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fragtype</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fragtype</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>header</name> <init>= <expr><operator>(</operator><operator>(</operator><name>XIPH_IDENT</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>fragtype</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>numpkts</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>i_payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>i_pts</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_payload</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_xiph</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_max</name> <init>= <expr><call><name>rtp_mtu</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><operator>(</operator> <name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>i_max</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name>i_max</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_payload</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_max</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">18</literal> <operator>+</operator> <name>i_payload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>fragtype</name></decl>, <decl><type ref="prev"/><name>numpkts</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i_count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>fragtype</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>numpkts</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>numpkts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fragtype</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>i_count</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fragtype</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fragtype</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>header</name> <init>= <expr><operator>(</operator><operator>(</operator><name>XIPH_IDENT</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>fragtype</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>numpkts</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>i_payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_payload</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_mpa</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_max</name> <init>= <expr><call><name>rtp_mtu</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><operator>(</operator> <name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>i_max</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name>i_max</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_payload</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_max</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">16</literal> <operator>+</operator> <name>i_payload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>i_count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <name>i_max</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_payload</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_mpv</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_max</name> <init>= <expr><call><name>rtp_mtu</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><operator>(</operator> <name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>i_max</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name>i_max</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_sequence_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_temporal_ref</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_picture_coding_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_fbv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_bfc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_ffv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_ffc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_start_slice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>hxxx_iterator_ctx_t</name></type> <name>it</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hxxx_iterator_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_seq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_seq</name></decl>;</decl_stmt>
<while>while<condition>( <expr><call><name>hxxx_annexb_iterate_next</name><argument_list>( <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_seq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_seq</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>p_seq</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0xb3</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>b_sequence_start</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name>i_seq</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>i_temporal_ref</name> <operator>=</operator> <operator>(</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator><operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x03</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i_picture_coding_type</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x07</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_picture_coding_type</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator>
<name>i_picture_coding_type</name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_ffv</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_ffc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>|</operator><operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">7</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_seq</name> <operator>&gt;</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>i_picture_coding_type</name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_fbv</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_bfc</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x07</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="number">0xaf</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_start_slice</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_payload</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_max</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">16</literal> <operator>+</operator> <name>i_payload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name> <init>= <expr><operator>(</operator> <name>i_temporal_ref</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator><operator>|</operator>
<operator>(</operator> <name>b_sequence_start</name> <operator>&lt;&lt;</operator> <literal type="number">13</literal> <operator>)</operator><operator>|</operator>
<operator>(</operator> <name>b_start_slice</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal> <operator>)</operator><operator>|</operator>
<operator>(</operator> <ternary><condition><expr><name>i</name> <operator>==</operator> <name>i_count</name> <operator>-</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator><operator>|</operator>
<operator>(</operator> <name>i_picture_coding_type</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator><operator>|</operator>
<operator>(</operator> <name>i_fbv</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal> <operator>)</operator><operator>|</operator><operator>(</operator> <name>i_bfc</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>)</operator><operator>|</operator><operator>(</operator> <name>i_ffv</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>)</operator><operator>|</operator><name>i_ffc</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>i_count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_payload</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_ac3</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_max</name> <init>= <expr><call><name>rtp_mtu</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><operator>(</operator> <name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>i_max</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name>i_max</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_payload</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_max</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">14</literal> <operator>+</operator> <name>i_payload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>i_count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_payload</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_simple</name><parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>marker</name> <init>= <expr><operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>block</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_split</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_max</name> <init>= <expr><call><name>rtp_mtu</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><operator>(</operator> <name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>i_max</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name>i_max</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_payload</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_max</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">12</literal> <operator>+</operator> <name>i_payload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>i_count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_payload</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_pcm</name><parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>max</name> <init>= <expr><call><name>rtp_mtu</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <name>max</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>duration</name> <init>= <expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>*</operator> <name>max</name><operator>)</operator> <operator>/</operator> <name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>marker</name> <init>= <expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><literal type="number">12</literal> <operator>+</operator> <name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>out</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+=</operator> <name>duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>-=</operator> <name>duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><call><name>rtp_packetize_simple</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_swab</name><parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>max</name> <init>= <expr><call><name>rtp_mtu</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>payload</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>max</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>max</name></expr> </then><else>: <expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>duration</name> <init>= <expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>*</operator> <name>payload</name><operator>)</operator> <operator>/</operator> <name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>marker</name> <init>= <expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><literal type="number">12</literal> <operator>+</operator> <name>payload</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>out</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>swab</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+=</operator> <name>duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>-=</operator> <name>duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_mp4a_latm</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_max</name> <init>= <expr><call><name>rtp_mtu</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>latmhdrsize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">0xff</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><operator>(</operator> <name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>i_max</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name>i_max</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_header</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_payload</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_max</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>latmhdrsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">12</literal> <operator>+</operator> <name>latmhdrsize</name> <operator>+</operator> <name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>i_count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_header</name><operator>=</operator><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name><operator>+</operator><literal type="number">12</literal></expr>;</expr_stmt>
<while>while<condition>( <expr><name>tmp</name> <operator>&gt;</operator> <literal type="number">0xfe</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_header</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_header</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>-=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>p_header</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal><operator>+</operator><name>latmhdrsize</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_payload</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_mp4a</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_max</name> <init>= <expr><call><name>rtp_mtu</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><operator>(</operator> <name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>i_max</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name>i_max</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_payload</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_max</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">16</literal> <operator>+</operator> <name>i_payload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>i_count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_payload</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTP_H263_HEADER_SIZE</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTP_H263_PAYLOAD_START</name></cpp:macro> <cpp:value>(14)</cpp:value></cpp:define> 
<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_h263</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_max</name> <init>= <expr><call><name>rtp_mtu</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>RTP_H263_HEADER_SIZE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_p_bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_v_bit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_plen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_pebit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>h</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <operator>(</operator> <name>i_data</name> <operator>+</operator> <name>i_max</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name>i_max</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_payload</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_max</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>RTP_H263_PAYLOAD_START</name> <operator>+</operator> <name>i_payload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>b_p_bit</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator> <name>b_p_bit</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal> <operator>)</operator><operator>|</operator>
<operator>(</operator> <name>b_v_bit</name> <operator>&lt;&lt;</operator> <literal type="number">9</literal> <operator>)</operator><operator>|</operator>
<operator>(</operator> <name>i_plen</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>)</operator><operator>|</operator>
<name>i_pebit</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>i_count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>RTP_H263_PAYLOAD_START</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_payload</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>rtp_packetize_h264_nal</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_data</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_last</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_max</name> <init>= <expr><call><name>rtp_mtu</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_nal_hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_nal_type</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_nal_hdr</name> <operator>=</operator> <name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_nal_type</name> <operator>=</operator> <name>i_nal_hdr</name><operator>&amp;</operator><literal type="number">0x1f</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;=</operator> <name>i_max</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">12</literal> <operator>+</operator> <name>i_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>i_length</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>b_last</name></expr></argument>, <argument><expr><name>i_pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_count</name> <init>= <expr><operator>(</operator> <name>i_data</name><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name>i_max</name><operator>-</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <operator>(</operator><name>i_max</name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_data</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name><operator>--</operator></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_payload</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_data</name></expr></argument>, <argument><expr><name>i_max</name><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">12</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>i_payload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>i_dts</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>i_length</name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>i_length</name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><name>b_last</name> <operator>&amp;&amp;</operator> <name>i_payload</name> <operator>==</operator> <name>i_data</name><operator>)</operator></expr></argument>,
<argument><expr><name>i_pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal> <operator>|</operator> <operator>(</operator><name>i_nal_hdr</name> <operator>&amp;</operator> <literal type="number">0x60</literal><operator>)</operator> <operator>|</operator> <literal type="number">28</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0x80</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary> <operator>)</operator> <operator>|</operator> <operator>(</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>i_count</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x40</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary> <operator>)</operator> <operator>|</operator> <name>i_nal_type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_h264</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hxxx_iterator_ctx_t</name></type> <name>it</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hxxx_iterator_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_nal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nal</name></decl>;</decl_stmt>
<while>while<condition>( <expr><call><name>hxxx_annexb_iterate_next</name><argument_list>( <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nal</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rtp_packetize_h264_nal</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_nal</name></expr></argument>, <argument><expr><name>i_nal</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>,
<argument><expr><name><name>it</name><operator>.</operator><name>p_head</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name><name>it</name><operator>.</operator><name>p_tail</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>*</operator> <name>i_nal</name> <operator>/</operator> <name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>rtp_packetize_h265_nal</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_last</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_max</name> <init>= <expr><call><name>rtp_mtu</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;=</operator> <name>i_max</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">12</literal> <operator>+</operator> <name>i_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>i_length</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>b_last</name></expr></argument>, <argument><expr><name>i_pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_nal_hdr</name> <init>= <expr><operator>(</operator><call><name>GetWBE</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x81FF</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x6200</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_nal_type</name> <init>= <expr><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7E</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_count</name> <init>= <expr><operator>(</operator> <name>i_data</name><operator>-</operator><literal type="number">2</literal> <operator>+</operator> <name>i_max</name><operator>-</operator><literal type="number">3</literal> <operator>-</operator> <literal type="number">2</literal> <operator>)</operator> <operator>/</operator> <operator>(</operator><name>i_max</name><operator>-</operator><literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_payload</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_data</name></expr></argument>, <argument><expr><name>i_max</name><operator>-</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">12</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>i_payload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>i_dts</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>i_length</name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>i_length</name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><name>b_last</name> <operator>&amp;&amp;</operator> <name>i_payload</name> <operator>==</operator> <name>i_data</name><operator>)</operator></expr></argument>,
<argument><expr><name>i_pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>i_nal_hdr</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>i_nal_hdr</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0x80</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary> <operator>)</operator> <operator>|</operator> <operator>(</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>i_count</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x40</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary> <operator>)</operator> <operator>|</operator> <name>i_nal_type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_h265</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hxxx_iterator_ctx_t</name></type> <name>it</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hxxx_iterator_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_nal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_nal</name></decl>;</decl_stmt>
<while>while<condition>( <expr><call><name>hxxx_annexb_iterate_next</name><argument_list>( <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nal</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rtp_packetize_h265_nal</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_nal</name></expr></argument>, <argument><expr><name>i_nal</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>,
<argument><expr><name><name>it</name><operator>.</operator><name>p_head</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name><name>it</name><operator>.</operator><name>p_tail</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>*</operator> <name>i_nal</name> <operator>/</operator> <name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_amr</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_max</name> <init>= <expr><call><name>rtp_mtu</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><operator>(</operator> <name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>i_max</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name>i_max</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_payload</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_max</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">14</literal> <operator>+</operator> <name>i_payload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>i_count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xF0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x7C</literal></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_payload</name><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>--</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_payload</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_t140</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_max</name> <init>= <expr><call><name>rtp_mtu</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_packet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_data</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i_packet</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_payload</name> <init>= <expr><name>i_data</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&gt;</operator> <name>i_max</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_payload</name> <operator>=</operator> <name>i_max</name></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>(</operator> <name><name>p_data</name><index>[<expr><name>i_payload</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_payload</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_payload</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">12</literal> <operator>+</operator> <name>i_payload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>out</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+</operator> <name>i_packet</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_payload</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_spx</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_data_size</name></decl>, <decl><type ref="prev"/><name>i_payload_size</name></decl>, <decl><type ref="prev"/><name>i_payload_padding</name></decl>;</decl_stmt>
<expr_stmt><expr><name>i_data_size</name> <operator>=</operator> <name>i_payload_size</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_payload_padding</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <call><name>rtp_mtu</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>










<if_stmt><if>if <condition>( <expr><name>i_payload_size</name> <operator>%</operator> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_payload_padding</name> <operator>=</operator> <literal type="number">4</literal> <operator>-</operator> <operator>(</operator> <name>i_payload_size</name> <operator>%</operator> <literal type="number">4</literal> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i_payload_size</name> <operator>+=</operator> <name>i_payload_padding</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>p_out</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">12</literal> <operator>+</operator> <name>i_payload_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_payload_padding</name></expr> )</condition>
<block>{<block_content>



<decl_stmt><decl><type><name>char</name></type> <name>c_first_pad</name></decl>, <decl><type ref="prev"/><name>c_remaining_pad</name></decl>;</decl_stmt>
<expr_stmt><expr><name>c_first_pad</name> <operator>=</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_remaining_pad</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>






<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal> <operator>+</operator> <name>i_data_size</name></expr>]</index></name> <operator>=</operator> <name>c_first_pad</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>i_payload_padding</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal> <operator>+</operator> <name>i_data_size</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c_remaining_pad</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal> <operator>+</operator> <name>i_data_size</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c_remaining_pad</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal> <operator>+</operator> <name>i_data_size</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>c_remaining_pad</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_data_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_g726</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pad</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_max</name> <init>= <expr><operator>(</operator><call><name>rtp_mtu</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call><operator>-</operator> <literal type="number">12</literal> <operator>+</operator> <name>i_pad</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>i_pad</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><operator>(</operator> <name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>i_max</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name>i_max</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_packet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>i_data</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_payload</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_max</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">12</literal> <operator>+</operator> <name>i_payload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name>i_packet</name><operator>++</operator> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_payload</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_g726_16</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rtp_packetize_g726</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_g726_24</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rtp_packetize_g726</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_g726_32</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rtp_packetize_g726</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_g726_40</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rtp_packetize_g726</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTP_VP8_HEADER_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTP_VP8_PAYLOAD_START</name></cpp:macro> <cpp:value>(12 + RTP_VP8_HEADER_SIZE)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_vp8</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_max</name> <init>= <expr><call><name>rtp_mtu</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>RTP_VP8_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><operator>(</operator> <name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>i_max</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name>i_max</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_max</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_payload</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_max</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>RTP_VP8_PAYLOAD_START</name> <operator>+</operator> <name>i_payload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>out</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>i_count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>RTP_VP8_PAYLOAD_START</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_payload</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_rawvideo</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_format</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_width</name></decl>, <decl><type ref="prev"/><name>i_height</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rtp_get_video_geometry</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_pgroup</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i_xdec</name></decl>, <decl><type ref="prev"/><name>i_ydec</name></decl>;</decl_stmt> 
<switch>switch<condition>( <expr><name>i_format</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_RGB24</name></expr>:</case>
<expr_stmt><expr><name>i_pgroup</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_xdec</name> <operator>=</operator> <name>i_ydec</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_R420</name></expr>:</case>
<expr_stmt><expr><name>i_pgroup</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_xdec</name> <operator>=</operator> <name>i_ydec</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>RTP_HEADER_LEN</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_line_header_size</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_min_line_size</name> <init>= <expr><name>i_line_header_size</name> <operator>+</operator> <name>i_pgroup</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint16_t</name></type> <name>i_line_number</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_column</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_line_number</name> <operator>&lt;</operator> <name>i_height</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_payload</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>rtp_mtu</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>RTP_HEADER_LEN</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_payload</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>RTP_HEADER_LEN</name> <operator>+</operator> <name>i_payload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>out</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_outdata</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>RTP_HEADER_LEN</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><name>p_outdata</name></expr></argument>, <argument><expr><call><name>rtp_get_extended_sequence</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_outdata</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_payload</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_headers</name> <init>= <expr><name>p_outdata</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i_cont</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>;</init> <condition><expr><name>i_cont</name> <operator>&amp;&amp;</operator> <name>i_payload</name> <operator>&gt;</operator> <name>i_min_line_size</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i_payload</name> <operator>-=</operator> <name>i_line_header_size</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pixels</name> <init>= <expr><name>i_width</name> <operator>-</operator> <name>i_column</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_length</name> <init>= <expr><operator>(</operator><name>i_pixels</name> <operator>*</operator> <name>i_pgroup</name><operator>)</operator> <operator>/</operator> <name>i_xdec</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_next_line</name> <init>= <expr><name>i_payload</name> <operator>&gt;=</operator> <name>i_length</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_next_line</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_pixels</name> <operator>=</operator> <operator>(</operator><name>i_payload</name> <operator>/</operator> <name>i_pgroup</name><operator>)</operator> <operator>*</operator> <name>i_xdec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_length</name> <operator>=</operator> <operator>(</operator><name>i_pixels</name> <operator>*</operator> <name>i_pgroup</name><operator>)</operator> <operator>/</operator> <name>i_xdec</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_payload</name> <operator>-=</operator> <name>i_length</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><name>p_outdata</name></expr></argument>, <argument><expr><name>i_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_outdata</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_field</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><name>p_outdata</name></expr></argument>, <argument><expr><name>i_line_number</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_outdata</name> <operator>|=</operator> <name>i_field</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_outdata</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>i_cont</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i_payload</name> <operator>&gt;</operator> <name>i_min_line_size</name> <operator>&amp;&amp;</operator> <name>i_line_number</name> <operator>&lt;</operator> <operator>(</operator><name>i_height</name> <operator>-</operator> <name>i_ydec</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x80</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><name>p_outdata</name></expr></argument>, <argument><expr><name>i_column</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_outdata</name> <operator>|=</operator> <name>i_cont</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_outdata</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_next_line</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_line_number</name> <operator>+=</operator> <name>i_ydec</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_column</name> <operator>+=</operator> <name>i_pixels</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i_cont</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>;</init> <condition><expr><name>i_cont</name></expr>;</condition> <incr><expr><name>p_headers</name> <operator>+=</operator> <name>i_line_header_size</name></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_length</name> <init>= <expr><call><name>GetWBE</name><argument_list>( <argument><expr><name>p_headers</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_lin</name> <init>= <expr><call><name>GetWBE</name><argument_list>( <argument><expr><name>p_headers</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7fff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_offs</name> <init>= <expr><call><name>GetWBE</name><argument_list>( <argument><expr><name>p_headers</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7fff</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_cont</name> <operator>=</operator> <name><name>p_headers</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_format</name> <operator>==</operator> <name>VLC_CODEC_RGB24</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_ystride</name> <init>= <expr><name>i_width</name> <operator>*</operator> <name>i_pgroup</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_offs</name> <operator>/=</operator> <name>i_xdec</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_outdata</name></expr></argument>, <argument><expr><name>p_data</name> <operator>+</operator> <operator>(</operator><name>i_lin</name> <operator>*</operator> <name>i_ystride</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i_offs</name> <operator>*</operator> <name>i_pgroup</name><operator>)</operator></expr></argument>, <argument><expr><name>i_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_outdata</name> <operator>+=</operator> <name>i_length</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name>i_format</name> <operator>==</operator> <name>VLC_CODEC_R420</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_outdata</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_outdata</name> <operator>+=</operator> <name>i_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_length</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>i_line_number</name> <operator>&gt;=</operator> <name>i_height</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_r420</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rtp_packetize_rawvideo</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>VLC_CODEC_R420</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_rgb24</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rtp_packetize_rawvideo</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>VLC_CODEC_RGB24</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_packetize_jpeg</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bufend</name> <init>= <expr><name>p_data</name> <operator>+</operator> <name>i_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>qtables</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_qtables</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>y_sampling_factor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>restart_interval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dri_found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>GetWBE</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0xffd8</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>header_finished</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><name>header_finished</name> <operator>&amp;&amp;</operator> <name>p_data</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;=</operator> <name>bufend</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>marker</name> <init>= <expr><call><name>GetWBE</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><name>p_data</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>section_size</name> <init>= <expr><call><name>GetWBE</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>section_body</name> <init>= <expr><name>p_data</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>section</name> <operator>+</operator> <name>section_size</name> <operator>&gt;</operator> <name>bufend</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>marker</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xff00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>marker</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0xffdb</literal></expr> :</case>
<if_stmt><if>if <condition>(<expr><name><name>section_body</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt> 


<expr_stmt><expr><name>nb_qtables</name> <operator>=</operator> <name>section_size</name> <operator>/</operator> <literal type="number">65</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>qtables</name> <operator>=</operator> <name>section_body</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xffc0</literal></expr> :</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>section_body</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>section_body</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <literal type="number">2040</literal> <operator>||</operator> <name>height</name> <operator>&gt;</operator> <literal type="number">2040</literal></expr>)</condition>
<block>{<block_content>

<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>width</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>height</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><name><name>section_body</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> 
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>section_body</name><index>[<expr><literal type="number">6</literal> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>y_sampling_factor</name> <operator>=</operator> <name><name>section_body</name><index>[<expr><literal type="number">6</literal> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>section_body</name><index>[<expr><literal type="number">6</literal> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x11</literal></expr>)</condition>
<block>{<block_content>

<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="number">0xffdd</literal></expr> :</case>
<expr_stmt><expr><name>restart_interval</name> <operator>=</operator> <call><name>GetWBE</name><argument_list>(<argument><expr><name>section_body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dri_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xffda</literal></expr> :</case>

<expr_stmt><expr><name>header_finished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name>section_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <literal type="number">2</literal> <operator>+</operator> <name>section_size</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>header_finished</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w</name> <operator>||</operator> <operator>!</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>y_sampling_factor</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x22</literal></expr>:</case> 
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x21</literal></expr>:</case> 
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<goto>goto <name>error</name>;</goto> 
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>dri_found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>( <expr><name>i_data</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hdr_size</name> <init>= <expr><literal type="number">8</literal> <operator>+</operator> <name>dri_found</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nb_qtables</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hdr_size</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">64</literal> <operator>*</operator> <name>nb_qtables</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_payload</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_data</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>rtp_mtu</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>hdr_size</name><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_payload</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">12</literal> <operator>+</operator> <name>hdr_size</name> <operator>+</operator> <name>i_payload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>out</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>SetDWBE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>off</name> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>h</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>dri_found</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>restart_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nb_qtables</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWBE</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <name>nb_qtables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_qtables</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qtables</name><index>[<expr><literal type="number">65</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><name>i_payload</name> <operator>==</operator> <name>i_data</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>in</name><operator>-&gt;</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_payload</name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>
</unit>
