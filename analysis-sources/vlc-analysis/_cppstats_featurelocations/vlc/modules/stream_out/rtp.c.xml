<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\stream_out\rtp.c">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SRTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;srtp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gcrypt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_gcrypt.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_DCCP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/dccp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_DCCP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPPROTO_DCCP</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_UDPLITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPPROTO_UDPLITE</name></cpp:macro> <cpp:value>136</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEST_TEXT</name></cpp:macro> <cpp:value>N_("Destination")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEST_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This is the output URL that will be used." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDP_TEXT</name></cpp:macro> <cpp:value>N_("SDP")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDP_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This allows you to specify how the SDP (Session Descriptor) for this RTP ""session will be made available. You must use a url: http:</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAP_TEXT</name></cpp:macro> <cpp:value>N_("SAP announcing")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAP_LONGTEXT</name></cpp:macro> <cpp:value>N_("Announce this session with SAP.")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUX_TEXT</name></cpp:macro> <cpp:value>N_("Muxer")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUX_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This allows you to specify the muxer used for the streaming output. " "Default is to use no muxer (standard RTP stream)." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_TEXT</name></cpp:macro> <cpp:value>N_("Session name")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This is the name of the session that will be announced in the SDP " "(Session Descriptor)." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAT_TEXT</name></cpp:macro> <cpp:value>N_("Session category")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This allows you to specify a category for the session, " "that will be announced if you choose to use SAP." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESC_TEXT</name></cpp:macro> <cpp:value>N_("Session description")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESC_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This allows you to give a short description with details about the stream, " "that will be announced in the SDP (Session Descriptor)." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_TEXT</name></cpp:macro> <cpp:value>N_("Port")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This allows you to specify the base port for the RTP streaming." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_AUDIO_TEXT</name></cpp:macro> <cpp:value>N_("Audio port")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_AUDIO_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This allows you to specify the default audio port for the RTP streaming." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_VIDEO_TEXT</name></cpp:macro> <cpp:value>N_("Video port")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_VIDEO_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This allows you to specify the default video port for the RTP streaming." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TTL_TEXT</name></cpp:macro> <cpp:value>N_("Hop limit (TTL)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TTL_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This is the hop limit (also known as \"Time-To-Live\" or TTL) of " "the multicast packets sent by the stream output (-1 = use operating " "system built-in default).")</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTCP_MUX_TEXT</name></cpp:macro> <cpp:value>N_("RTP/RTCP multiplexing")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTCP_MUX_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This sends and receives RTCP packet multiplexed over the same port " "as RTP packets." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHING_TEXT</name></cpp:macro> <cpp:value>N_("Caching value (ms)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHING_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Default caching value for outbound RTP streams. This " "value should be set in milliseconds." )</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_TEXT</name></cpp:macro> <cpp:value>N_("Transport protocol")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This selects which transport protocol to use for RTP." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRTP_KEY_TEXT</name></cpp:macro> <cpp:value>N_("SRTP key (hexadecimal)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRTP_KEY_LONGTEXT</name></cpp:macro> <cpp:value>N_( "RTP packets will be integrity-protected and ciphered ""with this Secure RTP master shared secret key. ""This must be a 32-character-long hexadecimal string.")</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRTP_SALT_TEXT</name></cpp:macro> <cpp:value>N_("SRTP salt (hexadecimal)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRTP_SALT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Secure RTP requires a (non-secret) master salt value. " "This must be a 28-character-long hexadecimal string.")</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_protos</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"dccp"</literal></expr>, <expr><literal type="string">"sctp"</literal></expr>, <expr><literal type="string">"tcp"</literal></expr>, <expr><literal type="string">"udp"</literal></expr>, <expr><literal type="string">"udplite"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_protocols</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"DCCP"</literal></expr>, <expr><literal type="string">"SCTP"</literal></expr>, <expr><literal type="string">"TCP"</literal></expr>, <expr><literal type="string">"UDP"</literal></expr>, <expr><literal type="string">"UDP-Lite"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFC3016_TEXT</name></cpp:macro> <cpp:value>N_("MP4A LATM")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFC3016_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This allows you to stream MPEG4 LATM audio streams (see RFC3016)." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTSP_TIMEOUT_TEXT</name></cpp:macro> <cpp:value>N_( "RTSP session timeout (s)" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTSP_TIMEOUT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "RTSP sessions will be closed after " "not receiving any RTSP request for this long. Setting it to a " "negative value or zero disables timeouts. The default is 60 (one " "minute)." )</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTSP_USER_TEXT</name></cpp:macro> <cpp:value>N_("Username")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTSP_USER_LONGTEXT</name></cpp:macro> <cpp:value>N_("Username that will be " "requested to access the stream." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTSP_PASS_TEXT</name></cpp:macro> <cpp:value>N_("Password")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTSP_PASS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Password that will be " "requested to access the stream." )</cpp:value></cpp:define>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-rtp-"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EMPTY_BLOCKS</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"RTP"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"RTP stream output"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout output"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"rtp"</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_STREAM</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"dst"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>DEST_TEXT</argument>,
<argument>DEST_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"sdp"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>SDP_TEXT</argument>,
<argument>SDP_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"mux"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>MUX_TEXT</argument>,
<argument>MUX_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"sap"</literal></argument>, <argument>false</argument>, <argument>SAP_TEXT</argument>, <argument>SAP_LONGTEXT</argument>,
<argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"name"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>NAME_TEXT</argument>,
<argument>NAME_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"cat"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>CAT_TEXT</argument>, <argument>CAT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"description"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>DESC_TEXT</argument>,
<argument>DESC_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_obsolete_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"url"</literal></argument> )</argument_list></macro> 
<macro><name>add_obsolete_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"email"</literal></argument> )</argument_list></macro> 
<macro><name>add_obsolete_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"phone"</literal></argument> )</argument_list></macro> 

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"proto"</literal></argument>, <argument><literal type="string">"udp"</literal></argument>, <argument>PROTO_TEXT</argument>,
<argument>PROTO_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_string_list</name><argument_list>( <argument>ppsz_protos</argument>, <argument>ppsz_protocols</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"port"</literal></argument>, <argument><literal type="number">5004</literal></argument>, <argument>PORT_TEXT</argument>,
<argument>PORT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"port-audio"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>PORT_AUDIO_TEXT</argument>,
<argument>PORT_AUDIO_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"port-video"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>PORT_VIDEO_TEXT</argument>,
<argument>PORT_VIDEO_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"ttl"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>TTL_TEXT</argument>,
<argument>TTL_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"rtcp-mux"</literal></argument>, <argument>false</argument>,
<argument>RTCP_MUX_TEXT</argument>, <argument>RTCP_MUX_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"caching"</literal></argument>, <argument>MS_FROM_VLC_TICK(DEFAULT_PTS_DELAY)</argument>,
<argument>CACHING_TEXT</argument>, <argument>CACHING_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SRTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"key"</literal></argument>, <argument><literal type="string">""</literal></argument>,
<argument>SRTP_KEY_TEXT</argument>, <argument>SRTP_KEY_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"salt"</literal></argument>, <argument><literal type="string">""</literal></argument>,
<argument>SRTP_SALT_TEXT</argument>, <argument>SRTP_SALT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"mp4a-latm"</literal></argument>, <argument>false</argument>, <argument>RFC3016_TEXT</argument>,
<argument>RFC3016_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sout_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"dst"</literal></expr>, <expr><literal type="string">"name"</literal></expr>, <expr><literal type="string">"cat"</literal></expr>, <expr><literal type="string">"port"</literal></expr>, <expr><literal type="string">"port-audio"</literal></expr>, <expr><literal type="string">"port-video"</literal></expr>, <expr><literal type="string">"*sdp"</literal></expr>, <expr><literal type="string">"ttl"</literal></expr>,
<expr><literal type="string">"mux"</literal></expr>, <expr><literal type="string">"sap"</literal></expr>, <expr><literal type="string">"description"</literal></expr>, <expr><literal type="string">"proto"</literal></expr>, <expr><literal type="string">"rtcp-mux"</literal></expr>, <expr><literal type="string">"caching"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SRTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"key"</literal></expr>, <expr><literal type="string">"salt"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">"mp4a-latm"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Add</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Del</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Send</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>MuxAdd</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MuxDel</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MuxSend</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>sout_access_out_t</name> <modifier>*</modifier></type><name>GrabberCreate</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_sout</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ThreadSend</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>rtp_listen_thread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SDPHandleUrl</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SapSetup</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>FileSetup</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>HttpSetup</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_url_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct
<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_sdp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock_sdp</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_sdp_file</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_export_sap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>session_descriptor_t</name> <modifier>*</modifier></type><name>p_session</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>httpd_host_t</name> <modifier>*</modifier></type><name>p_httpd_host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>httpd_file_t</name> <modifier>*</modifier></type><name>p_httpd_file</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>rtsp_stream_t</name> <modifier>*</modifier></type><name>rtsp</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_npt_zero</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_zero</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock_ts</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_destination</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_port_audio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_port_video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>proto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rtcp_mux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_latm</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_grab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock_es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>
}</block></struct></type> <name>sout_stream_sys_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>rtp_sink_t</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>rtp_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtcp_sender_t</name> <modifier>*</modifier></type><name>rtcp</name></decl>;</decl_stmt>
}</block></struct></type> <name>rtp_sink_t</name>;</typedef>

<struct>struct <name>sout_stream_id_sys_t</name>
<block>{
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sequence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_first_packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_ts_init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_ts_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ssrc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_seq_sent_next</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>rtp_format_t</name></type> <name>rtp_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_port</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_mtu</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SRTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>srtp_session_t</name> <modifier>*</modifier></type><name>srtp</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock_sink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sinkc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtp_sink_t</name> <modifier>*</modifier></type><name>sinkv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtsp_stream_id_t</name> <modifier>*</modifier></type><name>rtsp_id</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>
}</block> <decl><name>listen</name></decl>;</struct>

<decl_stmt><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>p_fifo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_caching</name></decl>;</decl_stmt>
}</block>;</struct>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_rtsp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name></expr></argument>,
<argument><expr><name>ppsz_sout_options</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_stream_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_destination</name></name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"dst"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_port</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"port"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_port_audio</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"port-audio"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_port_video</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"port-video"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rtcp_mux</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"rtcp-mux"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_port_audio</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_port_video</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_port_audio</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"audio and video RTP port must be distinct"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_destination</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_cfg</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></init></decl>;</init> <condition><expr><name>p_cfg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_cfg</name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"sdp"</literal></expr></argument> )</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>psz_value</name></name> <operator>!=</operator> <name>NULL</name> <operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument>, <argument><expr><literal type="string">"rtsp:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_rtsp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_rtsp</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"sdp"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"rtsp:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_rtsp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>proto</name></name> <operator>=</operator> <name>IPPROTO_UDP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>var_GetNonEmptyString</name> <argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name><literal type="string">"proto"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>psz</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name> <argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"udp"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else
if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"dccp"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>proto</name></name> <operator>=</operator> <name>IPPROTO_DCCP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rtcp_mux</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
else
if (!strcasecmp (psz, "sctp"))
{
p_sys-&gt;proto = IPPROTO_TCP;
p_sys-&gt;rtcp_mux = true; 
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
else
if (!strcasecmp (psz, "tcp"))
{
p_sys-&gt;proto = IPPROTO_TCP;
p_sys-&gt;rtcp_mux = true; 
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else
if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"udplite"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name> <argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"udp-lite"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>proto</name></name> <operator>=</operator> <name>IPPROTO_UDPLITE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"unknown or unsupported transport protocol \"%s\""</literal></expr></argument>,
<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"dccp-service"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_destination</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_rtsp</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"missing destination and not in RTSP mode"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ttl</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"ttl"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ttl</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"ttl"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"ttl"</literal></expr></argument>, <argument><expr><name>i_ttl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_latm</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"mp4a-latm"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_npt_zero</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_zero</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_es</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rtsp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_export_sap</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_host</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_sdp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_ts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"mux"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"ps"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"mpeg1"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"ts"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"unsupported muxer type for RTP (only TS/PS)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_destination</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_grab</name></name> <operator>=</operator> <call><name>GrabberCreate</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name></name> <operator>=</operator> <call><name>sout_MuxNew</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_grab</name></name></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot create muxer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sout_AccessOutDelete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_grab</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_destination</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_add</name></name> <operator>=</operator> <name>MuxAdd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_del</name></name> <operator>=</operator> <name>MuxDel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_send</name></name> <operator>=</operator> <name>MuxSend</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_grab</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_add</name></name> <operator>=</operator> <name>Add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_del</name></name> <operator>=</operator> <name>Del</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_send</name></name> <operator>=</operator> <name>Send</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pace_nocontrol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name><literal type="string">"sap"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SDPHandleUrl</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"sap://"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"sdp"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SDPHandleUrl</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>p_cfg</name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>p_cfg</name></name></expr>;</init> <condition><expr><name>p_cfg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_cfg</name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"sdp"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_value</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_value</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SDPHandleUrl</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>Add</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>id</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_es</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sout_MuxDelete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_es</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Del</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sout_AccessOutDelete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_grab</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>rtsp</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RtspUnsetup</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rtsp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_file</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>httpd_FileDelete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_file</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_host</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>httpd_HostDelete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_host</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp_file</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>unlink</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp_file</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp_file</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_destination</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>SDPHandleUrl</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_url_t</name></type> <name>url</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_UrlParse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_file</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"you can use sdp=http:// only once"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>HttpSetup</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot export SDP as HTTP"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name></expr></argument>, <argument><expr><literal type="string">"rtsp"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>rtsp</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"you can use sdp=rtsp:// only once"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>url</name><operator>.</operator><name>psz_host</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"\"%s\" RTSP host might be ignored in "</literal>
<literal type="string">"multiple-host configurations, use at your own risks."</literal></expr></argument>,
<argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Consider passing --rtsp-host=IP on the "</literal>
<literal type="string">"command line instead."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"rtsp-host"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"rtsp-host"</literal></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>url</name><operator>.</operator><name>i_port</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"rtsp-port"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"rtsp-port"</literal></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>i_port</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rtsp</name></name> <operator>=</operator> <call><name>RtspSetup</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>url</name><operator>.</operator><name>psz_path</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>rtsp</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot export SDP as RTSP"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>(</operator> <name><name>url</name><operator>.</operator><name>psz_protocol</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name></expr></argument>, <argument><expr><literal type="string">"sap"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>||</operator>
<operator>(</operator> <name><name>url</name><operator>.</operator><name>psz_host</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>url</name><operator>.</operator><name>psz_host</name></name></expr></argument>, <argument><expr><literal type="string">"sap"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_export_sap</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SapSetup</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp_file</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"you can use sdp=file:// only once"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp_file</name></name> <operator>=</operator> <call><name>vlc_uri2path</name><argument_list>( <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp_file</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FileSetup</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"unknown protocol for SDP (%s)"</literal></expr></argument>,
<argument><expr><name><name>url</name><operator>.</operator><name>psz_protocol</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>vlc_UrlClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>char</name> <modifier>*</modifier></type><name>SDPGenerate</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rtsp_url</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>sdp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_sdp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>dstlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>















<decl_stmt><decl><type><name>bool</name></type> <name>inclport</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_es</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>rtsp_url</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>es</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>rtsp_id</name><operator>)</operator></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_destination</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>inclport</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><name>dstlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>dst</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>listen</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getsockname</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>listen</name><operator>.</operator><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dstlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>getpeername</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>sinkv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rtp_fd</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dstlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>inclport</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>ipv6</name> <init>= <expr><name>rtsp_url</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>rtsp_url</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">7</literal>
<operator>&amp;&amp;</operator> <name><name>rtsp_url</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>dstlen</name> <operator>=</operator> <ternary><condition><expr><name>ipv6</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>sockaddr_in6</name></expr></argument> )</argument_list></sizeof></expr>
</then><else>: <expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>sockaddr_in</name></expr></argument> )</argument_list></sizeof></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dstlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>ss_family</name></name> <operator>=</operator> <ternary><condition><expr><name>ipv6</name></expr> ?</condition><then> <expr><name>AF_INET6</name></expr> </then><else>: <expr><name>AF_INET</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SA_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst</name><operator>.</operator><name>ss_len</name></name> <operator>=</operator> <name>dstlen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_sdp_Start</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sdp</name></expr></argument>, <argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><name>dstlen</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>rtcp_mux</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp</name></expr></argument>, <argument><expr><literal type="string">"a=rtcp-mux\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>rtsp_url</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp</name></expr></argument>, <argument><expr><literal type="string">"a=control:%s\r\n"</literal></expr></argument>, <argument><expr><name>rtsp_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><literal type="string">"RTP/AVP"</literal></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if<condition>( <expr><name>rtsp_url</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>proto</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>IPPROTO_UDP</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>IPPROTO_TCP</name></expr>:</case>
<expr_stmt><expr><name>proto</name> <operator>=</operator> <literal type="string">"TCP/RTP/AVP"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>IPPROTO_DCCP</name></expr>:</case>
<expr_stmt><expr><name>proto</name> <operator>=</operator> <literal type="string">"DCCP/RTP/AVP"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>IPPROTO_UDPLITE</name></expr>:</case>
<return>return <expr><name>psz_sdp</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_es</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtp_format_t</name> <modifier>*</modifier></type><name>rtp_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>rtp_fmt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mime_major</name></decl>;</decl_stmt> 

<switch>switch<condition>( <expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>cat</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<expr_stmt><expr><name>mime_major</name> <operator>=</operator> <literal type="string">"video"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<expr_stmt><expr><name>mime_major</name> <operator>=</operator> <literal type="string">"audio"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SPU_ES</name></expr>:</case>
<expr_stmt><expr><name>mime_major</name> <operator>=</operator> <literal type="string">"text"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<continue>continue;</continue>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp</name></expr></argument>, <argument><expr><literal type="string">"m=%s %u %s %"</literal><name>PRIu8</name><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><name>mime_major</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>inclport</name></expr> ?</condition><then> <expr><name><name>id</name><operator>-&gt;</operator><name>i_port</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>proto</name></expr></argument>,
<argument><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>payload_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp</name></expr></argument>, <argument><expr><literal type="string">"b=AS:%u\r\n"</literal></expr></argument>, <argument><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp</name></expr></argument>, <argument><expr><literal type="string">"b=RR:0\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%"</literal><name>PRIu8</name><literal type="string">" %s/%u"</literal></expr></argument>,
<argument><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>payload_type</name></name></expr></argument>, <argument><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>ptname</name></name></expr></argument>,
<argument><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>clock_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>cat</name></name> <operator>==</operator> <name>AUDIO_ES</name> <operator>&amp;&amp;</operator> <name><name>rtp_fmt</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp</name></expr></argument>, <argument><expr><literal type="string">"/%u"</literal></expr></argument>, <argument><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp</name></expr></argument>, <argument><expr><literal type="string">"a=fmtp:%"</literal><name>PRIu8</name><literal type="string">" %s\r\n"</literal></expr></argument>,
<argument><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>payload_type</name></name></expr></argument>, <argument><expr><name><name>rtp_fmt</name><operator>-&gt;</operator><name>fmtp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name>inclport</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rtcp_mux</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>id</name><operator>-&gt;</operator><name>i_port</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp</name></expr></argument>, <argument><expr><literal type="string">"a=rtcp:%u\r\n"</literal></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>i_port</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>rtsp_url</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>track_url</name> <init>= <expr><call><name>RtspAppendTrackPath</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>rtsp_id</name></name></expr></argument>, <argument><expr><name>rtsp_url</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>track_url</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp</name></expr></argument>, <argument><expr><literal type="string">"a=control:%s\r\n"</literal></expr></argument>, <argument><expr><name>track_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>track_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>listen</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp</name></expr></argument>, <argument><expr><literal type="string">"a=setup:passive\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>proto</name></name> <operator>==</operator> <name>IPPROTO_DCCP</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp</name></expr></argument>, <argument><expr><literal type="string">"a=dccp-service-code:SC:RTP%c"</literal></expr></argument>,
<argument><expr><call><name>toupper</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>mime_major</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><call><name>vlc_memstream_close</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sdp</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_sdp</name> <operator>=</operator> <name><name>sdp</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>psz_sdp</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>rtp_set_ptime</name> <parameter_list>(<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ptime_ms</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>spl</name> <init>= <expr><operator>(</operator><name><name>id</name><operator>-&gt;</operator><name>rtp_fmt</name><operator>.</operator><name>clock_rate</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>ptime_ms</name> <operator>/</operator> <literal type="number">1000</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bytes</name> <operator>*=</operator> <name><name>id</name><operator>-&gt;</operator><name>rtp_fmt</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>spl</name> <operator>*=</operator> <name>bytes</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spl</name> <operator>&lt;</operator> <call><name>rtp_mtu</name> <argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>i_mtu</name></name> <operator>=</operator> <literal type="number">12</literal> <operator>+</operator> <name>spl</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>i_mtu</name></name> <operator>=</operator> <literal type="number">12</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>id</name><operator>-&gt;</operator><name>i_mtu</name></name> <operator>-</operator> <literal type="number">12</literal><operator>)</operator> <operator>/</operator> <name>bytes</name><operator>)</operator> <operator>*</operator> <name>bytes</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>rtp_compute_ts</name><parameter_list>( <parameter><decl><type><name>unsigned</name></type> <name>i_clock_rate</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter> )</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><name>lldiv_t</name></type> <name>q</name> <init>= <expr><call><name>lldiv</name><argument_list>(<argument><expr><name>i_pts</name></expr></argument>, <argument><expr><name>CLOCK_FREQ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>q</name><operator>.</operator><name>quot</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>i_clock_rate</name>
<operator>+</operator> <name><name>q</name><operator>.</operator><name>rem</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>i_clock_rate</name> <operator>/</operator> <name>CLOCK_FREQ</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Add</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_sdp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>id</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_stream</name></name> <operator>=</operator> <name>p_stream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>i_mtu</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"mtu"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>i_mtu</name></name> <operator>&lt;=</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>i_mtu</name></name> <operator>=</operator> <literal type="number">576</literal> <operator>-</operator> <literal type="number">20</literal> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"maximum RTP packet size: %d bytes"</literal></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>i_mtu</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SRTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>srtp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>lock_sink</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>sinkc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>sinkv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>rtsp_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_fifo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>listen</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>b_first_packet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>i_caching</name></name> <operator>=</operator>
<call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"caching"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_rand_bytes</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>i_sequence</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>i_sequence</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_rand_bytes</name> <argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>ssrc</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>ssrc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>format</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>format</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>rtp_fmt</name><operator>.</operator><name>fmtp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"mux"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_fmt</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>psz</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>rtp_get_fmt</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>psz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>rtp_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SRTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>var_GetNonEmptyString</name> <argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name><literal type="string">"key"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_gcrypt_init</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>srtp</name></name> <operator>=</operator> <call><name>srtp_create</name> <argument_list>(<argument><expr><name>SRTP_ENCR_AES_CM</name></expr></argument>, <argument><expr><name>SRTP_AUTH_HMAC_SHA1</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>,
<argument><expr><name>SRTP_PRF_AES_CM</name></expr></argument>, <argument><expr><name>SRTP_RCC_MODE1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>srtp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>salt</name> <init>= <expr><call><name>var_GetNonEmptyString</name> <argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name><literal type="string">"salt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>srtp_setkeystring</name> <argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>srtp</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><ternary><condition><expr><name>salt</name></expr> ?</condition><then> <expr><name>salt</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"bad SRTP key/salt combination (%s)"</literal></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>i_sequence</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>i_seq_sent_next</name></name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>i_sequence</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mcast_fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_destination</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_fmt</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else
if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_port_audio</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_port</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_port_audio</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_port_video</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_port</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_port_video</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_port</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_es</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>i_port</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_port</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_port</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for> 
<for>for <control>(<init><decl><type><name>uint16_t</name></type> <name>p</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_port</name></name></expr></init></decl>;</init> <condition><expr><name>i_port</name> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"too many RTP elementary streams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_port</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_port</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_es</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_port</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_port</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>i_port</name></name> <operator>=</operator> <name>i_port</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>SOCK_STREAM</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>proto</name></name></expr> )</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOCK_DCCP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>IPPROTO_DCCP</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>rtp_fmt</name><operator>.</operator><name>cat</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VIDEO_ES</name></expr>:</case> <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="string">"RTPV"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AUDIO_ES</name></expr>:</case> <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="string">"RTPARTPV"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>SPU_ES</name></expr>:</case> <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="string">"RTPTRTPV"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="string">"RTPORTPV"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"dccp-service"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>SOCK_DCCP</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>IPPROTO_TCP</name></expr>:</case>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>listen</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>net_Listen</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_destination</name></name></expr></argument>, <argument><expr><name>i_port</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>proto</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>listen</name><operator>.</operator><name>fd</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"passive COMEDIA RTP socket failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>listen</name><operator>.</operator><name>thread</name></name></expr></argument>, <argument><expr><name>rtp_listen_thread</name></expr></argument>, <argument><expr><name>id</name></expr></argument>,
<argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>net_ListenClose</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>listen</name><operator>.</operator><name>fd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>listen</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>net_ConnectDgram</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_destination</name></name></expr></argument>,
<argument><expr><name>i_port</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>proto</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot create RTP socket"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<macro><name>setsockopt</name> <argument_list>(<argument>fd</argument>, <argument>SOL_SOCKET</argument>, <argument>SO_RCVBUF</argument>, <argument>&amp;(int){ <literal type="number">0</literal> }</argument>,
<argument>sizeof (int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>rtp_add_sink</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rtcp_mux</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mcast_fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_fmt</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<switch>switch<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_MULAW</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_ALAW</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_U8</name></expr>:</case>
<expr_stmt><expr><call><name>rtp_set_ptime</name> <argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S16B</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_S16L</name></expr>:</case>
<expr_stmt><expr><call><name>rtp_set_ptime</name> <argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_S24B</name></expr>:</case>
<expr_stmt><expr><call><name>rtp_set_ptime</name> <argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
int cscov = -1;
if( cscov != -1 )
cscov += 8 + 12 ;
if( id-&gt;sinkc &gt; 0 )
net_SetCSCov( id-&gt;sinkv[0].rtp_fd, cscov, -1 );
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_ts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>b_ts_init</name></name> <operator>=</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_npt_zero</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_ts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>b_ts_init</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>i_ts_offset</name></name> <operator>=</operator> <call><name>rtp_compute_ts</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>rtp_fmt</name><operator>.</operator><name>clock_rate</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>rtsp</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>rtsp_id</name></name> <operator>=</operator> <call><name>RtspAddId</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rtsp</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><call><name>GetDWBE</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>ssrc</name></name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><name><name>id</name><operator>-&gt;</operator><name>rtp_fmt</name><operator>.</operator><name>clock_rate</name></name></expr></argument>, <argument><expr><name>mcast_fd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_fifo</name></name> <operator>=</operator> <call><name>block_FifoNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_fifo</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>ThreadSend</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_HIGHEST</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_FifoRelease</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_fifo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_es</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_sdp</name> <operator>=</operator> <call><name>SDPGenerate</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_sdp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp</name></name> <operator>=</operator> <name>psz_sdp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_sdp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"sdp=\n%s"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_export_sap</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SapSetup</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp_file</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FileSetup</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>id</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>Del</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Del</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>sout_stream_id_sys_t</name> <operator>*</operator><operator>)</operator><name>_id</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_REMOVE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_es</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_fifo</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>thread</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_FifoRelease</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>rtp_fmt</name><operator>.</operator><name>fmtp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>rtsp_id</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RtspDelId</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rtsp</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>rtsp_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>listen</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>listen</name><operator>.</operator><name>thread</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>listen</name><operator>.</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>net_ListenClose</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>listen</name><operator>.</operator><name>fd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<while>while<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>sinkc</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rtp_del_sink</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>sinkv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rtp_fd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SRTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>srtp</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>srtp_destroy</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>srtp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_export_sap</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SapSetup</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp_file</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FileSetup</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Send</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>sout_stream_id_sys_t</name> <operator>*</operator><operator>)</operator><name>_id</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator><name>sout_stream_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name><operator>)</operator><operator>-&gt;</operator><name>p_mux</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_buffer</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>b_first_packet</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>b_first_packet</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>rtp_fmt</name><operator>.</operator><name>ptname</name></name></expr></argument>, <argument><expr><literal type="string">"vorbis"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>rtp_fmt</name><operator>.</operator><name>ptname</name></name></expr></argument>, <argument><expr><literal type="string">"theora"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rtp_packetize_xiph_config</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>rtp_fmt</name><operator>.</operator><name>fmtp</name></name></expr></argument>,
<argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name><name>id</name><operator>-&gt;</operator><name>rtp_fmt</name><operator>.</operator><name>pf_packetize</name></name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_buffer</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>SapSetup</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_session</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sout_AnnounceUnRegister</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_es</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_session</name></name> <operator>=</operator> <call><name>sout_AnnounceRegisterSDP</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_destination</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>FileSetup</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>f</name> <operator>=</operator> <call><name>vlc_fopen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp_file</name></name></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot open file '%s' (%s)"</literal></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp_file</name></name></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>HttpCallback</name><parameter_list>( <parameter><decl><type><name>httpd_file_sys_t</name> <modifier>*</modifier></type><name>p_args</name></decl></parameter>,
<parameter><decl><type><name>httpd_file_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_request</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_data</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>HttpSetup</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_url_t</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_host</name></name> <operator>=</operator> <call><name>vlc_http_HostNew</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_host</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_file</name></name> <operator>=</operator> <call><name>httpd_FileNew</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_host</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>url</name><operator>-&gt;</operator><name>psz_path</name></name></expr> ?</condition><then> <expr><name><name>url</name><operator>-&gt;</operator><name>psz_path</name></name></expr> </then><else>: <expr><literal type="string">"/"</literal></expr></else></ternary></expr></argument>,
<argument><expr><literal type="string">"application/sdp"</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>HttpCallback</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_file</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>HttpCallback</name><parameter_list>( <parameter><decl><type><name>httpd_file_sys_t</name> <modifier>*</modifier></type><name>p_args</name></decl></parameter>,
<parameter><decl><type><name>httpd_file_t</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_request</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>sout_stream_sys_t</name><operator>*</operator><operator>)</operator><name>p_args</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_sdp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_data</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_data</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><operator>*</operator><name>pi_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>*</operator><name>pp_data</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_sdp</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pi_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp_data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pi_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_sdp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ThreadSend</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOBUFS</name></cpp:macro> <cpp:value>WSAENOBUFS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAGAIN</name></cpp:macro> <cpp:value>WSAEWOULDBLOCK</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EWOULDBLOCK</name></cpp:macro> <cpp:value>WSAEWOULDBLOCK</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_caching</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>i_caching</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>block_FifoGet</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>block_cleanup_push</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SRTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>srtp</name></name></expr> )</condition>
<block>{<block_content> 
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>srtp_send</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>srtp</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_restorecancel</name> <argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>val</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_stream</name></name></expr></argument>, <argument><expr><literal type="string">"SRTP sending error: %s"</literal></expr></argument>,
<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_tick_wait</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name>i_caching</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vlc_tick_wait</name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name>i_caching</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_cleanup_pop</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>lock_sink</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>deadc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>deadv</name><index>[<expr><ternary><condition><expr><name><name>id</name><operator>-&gt;</operator><name>sinkc</name></name></expr> ?</condition><then> <expr><name><name>id</name><operator>-&gt;</operator><name>sinkc</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index></name></decl>;</decl_stmt> 

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>id</name><operator>-&gt;</operator><name>sinkc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SRTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>srtp</name></name></expr> )</condition><block type="pseudo"><block_content> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SendRTCP</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>sinkv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rtcp</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>send</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>sinkv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rtp_fd</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name>net_errno</name> <operator>!=</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <name>net_errno</name> <operator>!=</operator> <name>EWOULDBLOCK</name>
<operator>&amp;&amp;</operator> <name>net_errno</name> <operator>!=</operator> <name>ENOBUFS</name> <operator>&amp;&amp;</operator> <name>net_errno</name> <operator>!=</operator> <name>ENOMEM</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<macro><name>getsockopt</name><argument_list>( <argument>id-&gt;sinkv[i].rtp_fd</argument>, <argument>SOL_SOCKET</argument>, <argument>SO_TYPE</argument>,
<argument>&amp;type</argument>, <argument>&amp;(socklen_t){ sizeof(type) }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<if_stmt><if>if<condition>( <expr><name>type</name> <operator>==</operator> <name>SOCK_DGRAM</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>send</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>sinkv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rtp_fd</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>deadv</name><index>[<expr><name>deadc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>sinkv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rtp_fd</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>i_seq_sent_next</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>lock_sink</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>deadc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_stream</name></name></expr></argument>, <argument><expr><literal type="string">"removing socket %d"</literal></expr></argument>, <argument><expr><name><name>deadv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtp_del_sink</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>deadv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_restorecancel</name> <argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>rtp_listen_thread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>listen</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>net_Accept</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_stream</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>listen</name><operator>.</operator><name>fd</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>( )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rtp_add_sink</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>canc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>rtp_add_sink</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rtcp_mux</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>seq</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rtp_sink_t</name></type> <name>sink</name> <init>= <expr><block>{ <expr><name>fd</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sink</name><operator>.</operator><name>rtcp</name></name> <operator>=</operator> <call><name>OpenRTCP</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_stream</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>,
<argument><expr><name>rtcp_mux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>sink</name><operator>.</operator><name>rtcp</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_stream</name></name></expr></argument>, <argument><expr><literal type="string">"RTCP failed!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>lock_sink</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>sinkc</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>sinkv</name></name></expr></argument>, <argument><expr><name>sink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>seq</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>seq</name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>i_seq_sent_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>lock_sink</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rtp_del_sink</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rtp_sink_t</name></type> <name>sink</name> <init>= <expr><block>{ <expr><name>fd</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>lock_sink</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>id</name><operator>-&gt;</operator><name>sinkc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>sinkv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rtp_fd</name> <operator>==</operator> <name>fd</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>sink</name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>sinkv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_ERASE</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>sinkc</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>sinkv</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>lock_sink</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseRTCP</name><argument_list>( <argument><expr><name><name>sink</name><operator>.</operator><name>rtcp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name><name>sink</name><operator>.</operator><name>rtp_fd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>rtp_get_seq</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>seq</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>lock_sink</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seq</name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>i_seq_sent_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>lock_sink</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>seq</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>vlc_tick_t</name></type> <name>rtp_get_ts</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>p_npt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_npt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_npt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>p_stream</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_npt_zero</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_ts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_npt_zero</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_npt_zero</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_ts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_npt_zero</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_zero</name></name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>now</name> <operator>&lt;</operator> <name>i_npt_zero</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_zero</name></name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>npt</name> <init>= <expr><name>now</name> <operator>-</operator> <name>i_npt_zero</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p_npt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_npt</name> <operator>=</operator> <name>npt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_zero</name></name> <operator>+</operator> <name>npt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rtp_packetize_common</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>b_m_bit</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>b_ts_init</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_ts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_npt_zero</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>
<block>{<block_content>



<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_npt_zero</name></name> <operator>=</operator> <name>i_pts</name> <operator>+</operator> <name><name>id</name><operator>-&gt;</operator><name>i_caching</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_offset</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_zero</name></name> <operator>-</operator> <name>i_pts</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock_ts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>i_ts_offset</name></name> <operator>=</operator> <call><name>rtp_compute_ts</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>rtp_fmt</name><operator>.</operator><name>clock_rate</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>b_ts_init</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_timestamp</name> <init>= <expr><call><name>rtp_compute_ts</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>rtp_fmt</name><operator>.</operator><name>clock_rate</name></name></expr></argument>, <argument><expr><name>i_pts</name></expr></argument> )</argument_list></call>
<operator>+</operator> <name><name>id</name><operator>-&gt;</operator><name>i_ts_offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>b_m_bit</name></expr>?</condition><then><expr><literal type="number">0x80</literal></expr></then><else>:<expr><literal type="number">0x00</literal></expr></else></ternary><operator>)</operator><operator>|</operator><name><name>id</name><operator>-&gt;</operator><name>rtp_fmt</name><operator>.</operator><name>payload_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>id</name><operator>-&gt;</operator><name>i_sequence</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>id</name><operator>-&gt;</operator><name>i_sequence</name></name> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>i_timestamp</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>i_timestamp</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>i_timestamp</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>i_timestamp</name> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>ssrc</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>i_sequence</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>rtp_get_extended_sequence</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>id</name><operator>-&gt;</operator><name>i_sequence</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rtp_packetize_send</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>block_FifoPut</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>size_t</name></type> <name>rtp_mtu</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>id</name><operator>-&gt;</operator><name>i_mtu</name></name> <operator>-</operator> <literal type="number">12</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>MuxAdd</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_mux</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_input</name> <operator>=</operator> <call><name>sout_MuxAddStream</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_input</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot add this stream to the muxer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>sout_stream_id_sys_t</name> <operator>*</operator><operator>)</operator><name>p_input</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>MuxSend</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_mux</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>sout_MuxSendBuffer</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>(</operator><name>sout_input_t</name> <operator>*</operator><operator>)</operator><name>id</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>MuxDel</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_mux</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sout_MuxDeleteStream</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>(</operator><name>sout_input_t</name> <operator>*</operator><operator>)</operator><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>AccessOutGrabberWriteBuffer</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name> <init>= <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_dts</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_data</name> <init>= <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_max</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>i_mtu</name></name> <operator>-</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_dis</name> <init>= <expr><operator>(</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_packet</name> <init>= <expr><operator>(</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>i_max</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name>i_max</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>i_data</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>packet</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>i_data</name> <operator>&gt;</operator> <name>i_max</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rtp_packetize_send</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet</name></name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>i_mtu</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_packetize_common</name><argument_list>( <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name>b_dis</name></expr></argument>, <argument><expr><name>i_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_packet</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_dts</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>packet</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_dis</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_data</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>id</name><operator>-&gt;</operator><name>i_mtu</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>packet</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packet</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+=</operator> <name>i_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_size</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>AccessOutGrabberWrite</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>,
<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_buffer</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AccessOutGrabberWriteBuffer</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buffer</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>sout_access_out_t</name> <modifier>*</modifier></type><name>GrabberCreate</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_grab</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_grab</name> <operator>=</operator> <call><name>vlc_object_create</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_grab</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_grab</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_grab</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_grab</name><operator>-&gt;</operator><name>psz_access</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"grab"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_grab</name><operator>-&gt;</operator><name>p_cfg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_grab</name><operator>-&gt;</operator><name>psz_path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">""</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_grab</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_stream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_grab</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_grab</name><operator>-&gt;</operator><name>pf_write</name></name> <operator>=</operator> <name>AccessOutGrabberWrite</name></expr>;</expr_stmt>
<return>return <expr><name>p_grab</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rtp_get_video_geometry</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>sscanf</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>rtp_fmt</name><operator>.</operator><name>fmtp</name></name></expr></argument>, <argument><expr><literal type="string">"%*s width=%d; height=%d; "</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>ret</name> <operator>==</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
