<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\stream_out\smem.c">











































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_VIDEO_PRERENDER_CALLBACK</name></cpp:macro> <cpp:value>N_( "Video prerender callback" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LT_VIDEO_PRERENDER_CALLBACK</name></cpp:macro> <cpp:value>N_( "Address of the video prerender callback function. " "This function will set the buffer where render will be done." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_AUDIO_PRERENDER_CALLBACK</name></cpp:macro> <cpp:value>N_( "Audio prerender callback" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LT_AUDIO_PRERENDER_CALLBACK</name></cpp:macro> <cpp:value>N_( "Address of the audio prerender callback function. " "This function will set the buffer where render will be done." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_VIDEO_POSTRENDER_CALLBACK</name></cpp:macro> <cpp:value>N_( "Video postrender callback" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LT_VIDEO_POSTRENDER_CALLBACK</name></cpp:macro> <cpp:value>N_( "Address of the video postrender callback function. " "This function will be called when the render is into the buffer." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_AUDIO_POSTRENDER_CALLBACK</name></cpp:macro> <cpp:value>N_( "Audio postrender callback" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LT_AUDIO_POSTRENDER_CALLBACK</name></cpp:macro> <cpp:value>N_( "Address of the audio postrender callback function. " "This function will be called when the render is into the buffer." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_VIDEO_DATA</name></cpp:macro> <cpp:value>N_( "Video Callback data" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LT_VIDEO_DATA</name></cpp:macro> <cpp:value>N_( "Data for the video callback function." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_AUDIO_DATA</name></cpp:macro> <cpp:value>N_( "Audio callback data" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LT_AUDIO_DATA</name></cpp:macro> <cpp:value>N_( "Data for the audio callback function." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_TIME_SYNC</name></cpp:macro> <cpp:value>N_( "Time Synchronized output" )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LT_TIME_SYNC</name></cpp:macro> <cpp:value>N_( "Time Synchronisation option for output. " "If true, stream will render as usual, else " "it will be rendered as fast as possible.")</cpp:value></cpp:define>



<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-smem-"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_PREFIX_VIDEO</name></cpp:macro> <cpp:value>SOUT_CFG_PREFIX"video-"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_PREFIX_AUDIO</name></cpp:macro> <cpp:value>SOUT_CFG_PREFIX"audio-"</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Smem"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Stream output to memory buffer"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout output"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"smem"</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_STREAM</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_PREFIX_VIDEO <literal type="string">"prerender-callback"</literal></argument>, <argument><literal type="string">"0"</literal></argument>, <argument>T_VIDEO_PRERENDER_CALLBACK</argument>, <argument>LT_VIDEO_PRERENDER_CALLBACK</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_volatile</name><argument_list>()</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_PREFIX_AUDIO <literal type="string">"prerender-callback"</literal></argument>, <argument><literal type="string">"0"</literal></argument>, <argument>T_AUDIO_PRERENDER_CALLBACK</argument>, <argument>LT_AUDIO_PRERENDER_CALLBACK</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_volatile</name><argument_list>()</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_PREFIX_VIDEO <literal type="string">"postrender-callback"</literal></argument>, <argument><literal type="string">"0"</literal></argument>, <argument>T_VIDEO_POSTRENDER_CALLBACK</argument>, <argument>LT_VIDEO_POSTRENDER_CALLBACK</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_volatile</name><argument_list>()</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_PREFIX_AUDIO <literal type="string">"postrender-callback"</literal></argument>, <argument><literal type="string">"0"</literal></argument>, <argument>T_AUDIO_POSTRENDER_CALLBACK</argument>, <argument>LT_AUDIO_POSTRENDER_CALLBACK</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_volatile</name><argument_list>()</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_PREFIX_VIDEO <literal type="string">"data"</literal></argument>, <argument><literal type="string">"0"</literal></argument>, <argument>T_VIDEO_DATA</argument>, <argument>LT_VIDEO_DATA</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_volatile</name><argument_list>()</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_PREFIX_AUDIO <literal type="string">"data"</literal></argument>, <argument><literal type="string">"0"</literal></argument>, <argument>T_AUDIO_DATA</argument>, <argument>LT_VIDEO_DATA</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_volatile</name><argument_list>()</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"time-sync"</literal></argument>, <argument>true</argument>, <argument>T_TIME_SYNC</argument>, <argument>LT_TIME_SYNC</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>change_private</name><argument_list>()</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sout_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"video-prerender-callback"</literal></expr>, <expr><literal type="string">"audio-prerender-callback"</literal></expr>,
<expr><literal type="string">"video-postrender-callback"</literal></expr>, <expr><literal type="string">"audio-postrender-callback"</literal></expr>, <expr><literal type="string">"video-data"</literal></expr>, <expr><literal type="string">"audio-data"</literal></expr>, <expr><literal type="string">"time-sync"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Add</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Del</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Send</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>AddVideo</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>AddAudio</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SendVideo</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SendAudio</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>es_format_t</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>sout_stream_id_sys_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_mutex_t</name> <modifier>*</modifier></type><name>p_lock</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> ( <modifier>*</modifier><name>pf_video_prerender_callback</name> ) <parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_video_data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_pixel_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> ( <modifier>*</modifier><name>pf_audio_prerender_callback</name> ) <parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_audio_data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_pcm_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> ( <modifier>*</modifier><name>pf_video_postrender_callback</name> ) <parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_video_data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>p_pixel_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pixel_pitch</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> ( <modifier>*</modifier><name>pf_audio_postrender_callback</name> ) <parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_audio_data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>p_pcm_buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>rate</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bits_per_sample</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl></parameter> )</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>time_sync</name></decl>;</decl_stmt>
}</block></struct></type> <name>sout_stream_sys_t</name>;</typedef>

<function_decl><type><name>void</name></type> <name>VideoPrerenderDefaultCallback</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_video_data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_pixel_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AudioPrerenderDefaultCallback</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_audio_data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_pcm_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>VideoPostrenderDefaultCallback</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_video_data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>p_pixel_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pixel_pitch</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AudioPostrenderDefaultCallback</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_audio_data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>p_pcm_buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>rate</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bits_per_sample</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl></parameter> )</parameter_list>;</function_decl>





<function><type><name>void</name></type> <name>VideoPrerenderDefaultCallback</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_video_data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_pixel_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_video_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>pp_pixel_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AudioPrerenderDefaultCallback</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_audio_data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_pcm_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_audio_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>pp_pcm_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>VideoPostrenderDefaultCallback</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_video_data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>p_pixel_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pixel_pitch</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_video_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_pixel_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>pixel_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AudioPostrenderDefaultCallback</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_audio_data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>p_pcm_buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>rate</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bits_per_sample</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_audio_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_pcm_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>nb_samples</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>bits_per_sample</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_stream_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_sout_options</name></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>time_sync</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"time-sync"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_tmp</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_PREFIX_VIDEO</name> <literal type="string">"prerender-callback"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_video_prerender_callback</name></name> <operator>=</operator> <operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint8_t</name><operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><call><name>atoll</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_video_prerender_callback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_video_prerender_callback</name></name> <operator>=</operator> <name>VideoPrerenderDefaultCallback</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_tmp</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_PREFIX_AUDIO</name> <literal type="string">"prerender-callback"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_audio_prerender_callback</name></name> <operator>=</operator> <operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument> , <argument><expr><name>uint8_t</name><operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><call><name>atoll</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_audio_prerender_callback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_audio_prerender_callback</name></name> <operator>=</operator> <name>AudioPrerenderDefaultCallback</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_tmp</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_PREFIX_VIDEO</name> <literal type="string">"postrender-callback"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_video_postrender_callback</name></name> <operator>=</operator> <operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>uint8_t</name><operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><call><name>atoll</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_video_postrender_callback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_video_postrender_callback</name></name> <operator>=</operator> <name>VideoPostrenderDefaultCallback</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_tmp</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_PREFIX_AUDIO</name> <literal type="string">"postrender-callback"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_audio_postrender_callback</name></name> <operator>=</operator> <operator>(</operator><macro><name>void</name> <argument_list>(<argument>*</argument>)</argument_list></macro> <operator>(</operator><name>void</name><operator>*</operator><operator>,</operator> <name>uint8_t</name><operator>*</operator><operator>,</operator> <name>unsigned</name> <name>int</name><operator>,</operator> <name>unsigned</name> <name>int</name><operator>,</operator> <name>unsigned</name> <name>int</name><operator>,</operator> <name>unsigned</name> <name>int</name><operator>,</operator> <name>size_t</name><operator>,</operator> <name>vlc_tick_t</name><operator>)</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><call><name>atoll</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_audio_postrender_callback</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_audio_postrender_callback</name></name> <operator>=</operator> <name>AudioPostrenderDefaultCallback</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_add</name></name> <operator>=</operator> <name>Add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_del</name></name> <operator>=</operator> <name>Del</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_send</name></name> <operator>=</operator> <name>Send</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pace_nocontrol</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>time_sync</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Add</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>AddVideo</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>AddAudio</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>AddVideo</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_bits_per_pixel</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_RGB32</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_RGBA</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_ARGB</name></expr>:</case>
<expr_stmt><expr><name>i_bits_per_pixel</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_I444</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_RGB24</name></expr>:</case>
<expr_stmt><expr><name>i_bits_per_pixel</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_RGB16</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_RGB15</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_RGB8</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_I422</name></expr>:</case>
<expr_stmt><expr><name>i_bits_per_pixel</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_YV12</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>
<expr_stmt><expr><name>i_bits_per_pixel</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_RGBP</name></expr>:</case>
<expr_stmt><expr><name>i_bits_per_pixel</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>i_bits_per_pixel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"non raw video format detected (%4.4s), buffers will contain compressed video"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_stream_id_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>id</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_tmp</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_PREFIX_VIDEO</name> <literal type="string">"data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator> <name>intptr_t</name> <operator>)</operator><call><name>atoll</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <name>i_bits_per_pixel</name></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>AddAudio</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name><modifier>*</modifier></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_bits_per_sample</name> <init>= <expr><call><name>aout_BitsPerSample</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_bits_per_sample</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Smem does only support raw audio format"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_stream_id_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>id</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_tmp</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_PREFIX_AUDIO</name> <literal type="string">"data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator> <name>intptr_t</name> <operator>)</operator><call><name>atoll</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <name>i_bits_per_sample</name></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Del</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>sout_stream_id_sys_t</name> <operator>*</operator><operator>)</operator><name>_id</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>format</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Send</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>sout_stream_id_sys_t</name> <operator>*</operator><operator>)</operator><name>_id</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>SendVideo</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>SendAudio</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SendVideo</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>sout_stream_id_sys_t</name> <operator>*</operator><operator>)</operator><name>_id</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name> <init>= <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>p_pixels</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_video_prerender_callback</name></name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_pixels</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_pixels</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"No buffer given!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_pixels</name></expr></argument>, <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_video_postrender_callback</name></name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name>p_pixels</name></expr></argument>,
<argument><expr><name><name>id</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>,
<argument><expr><name><name>id</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>, <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SendAudio</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>sout_stream_id_sys_t</name> <operator>*</operator><operator>)</operator><name>_id</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>p_pcm_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"No buffer given!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_samples</name> <operator>=</operator> <name>i_size</name> <operator>/</operator> <operator>(</operator> <operator>(</operator> <name><name>id</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>/</operator> <literal type="number">8</literal> <operator>)</operator> <operator>*</operator> <name><name>id</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_audio_prerender_callback</name></name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_pcm_buffer</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_pcm_buffer</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"No buffer given!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_pcm_buffer</name></expr></argument>, <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_audio_postrender_callback</name></name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name>p_pcm_buffer</name></expr></argument>,
<argument><expr><name><name>id</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name>i_samples</name></expr></argument>,
<argument><expr><name><name>id</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>, <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

</unit>
