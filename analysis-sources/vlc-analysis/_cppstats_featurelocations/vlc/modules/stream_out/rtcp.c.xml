<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\stream_out\rtcp.c">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SOL_IP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOL_IP</name></cpp:macro> <cpp:value>IPPROTO_IP</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>















<struct>struct <name>rtcp_sender_t</name>
<block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>payload</name><index>[<expr><literal type="number">28</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <literal type="number">257</literal><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>handle</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>packets</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bytes</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>counter</name></decl>;</decl_stmt> 
}</block>;</struct>


<function><type><name>rtcp_sender_t</name> <modifier>*</modifier></type><name>OpenRTCP</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rtp_fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>proto</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>mux</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rtcp_sender_t</name> <modifier>*</modifier></type><name>rtcp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>src</name><index>[<expr><name>NI_MAXNUMERICHOST</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sport</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>net_GetSockAddress</name> <argument_list>(<argument><expr><name>rtp_fd</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sport</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mux</name></expr>)</condition>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>vlc_dup</name> <argument_list>(<argument><expr><name>rtp_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>WSAPROTOCOL_INFO</name></type> <name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>WSADuplicateSocket</name> <argument_list>(<argument><expr><name>rtp_fd</name></expr></argument>, <argument><expr><call><name>GetCurrentProcessId</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>WSASocket</name> <argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>iAddressFamily</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>iSocketType</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>iProtocol</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>dst</name><index>[<expr><name>NI_MAXNUMERICHOST</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dport</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>net_GetPeerAddress</name> <argument_list>(<argument><expr><name>rtp_fd</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dport</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sport</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dport</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>net_OpenDgram</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>sport</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dport</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ttl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>ttl</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getsockopt</name> <argument_list>(<argument><expr><name>rtp_fd</name></expr></argument>, <argument><expr><name>SOL_IP</name></expr></argument>, <argument><expr><name>IP_MULTICAST_TTL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ttl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setsockopt</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_IP</name></expr></argument>, <argument><expr><name>IP_MULTICAST_TTL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ttl</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<macro><name>setsockopt</name> <argument_list>(<argument>fd</argument>, <argument>SOL_SOCKET</argument>, <argument>SO_RCVBUF</argument>, <argument>&amp;(int){ <literal type="number">0</literal> }</argument>, <argument>sizeof (int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtcp</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>rtcp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rtcp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>net_Close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rtcp</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtcp</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>rtcp</name><operator>-&gt;</operator><name>packets</name></name> <operator>=</operator> <name><name>rtcp</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>strchr</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>rtcp</name><operator>-&gt;</operator><name>payload</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>SetWBE</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>SetQWBE</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><call><name>NTPtime64</name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">28</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sdes</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">202</literal></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>lenptr</name> <init>= <expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>NI_MAXNUMERICHOST</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>tool</name><index>[]</index></name> <init>= <expr><name>PACKAGE_STRING</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>tool</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <literal type="number">256</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>tool</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>tool</name></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ptr</name> <operator>-</operator> <name>sdes</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>SetWBE</name> <argument_list>(<argument><expr><name>lenptr</name></expr></argument>, <argument><expr><operator>(</operator><name>ptr</name> <operator>-</operator> <name>sdes</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rtcp</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name><name>rtcp</name><operator>-&gt;</operator><name>payload</name></name></expr>;</expr_stmt>
<return>return <expr><name>rtcp</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>CloseRTCP</name> <parameter_list>(<parameter><decl><type><name>rtcp_sender_t</name> <modifier>*</modifier></type><name>rtcp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rtcp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>rtcp</name><operator>-&gt;</operator><name>payload</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>now64</name> <init>= <expr><call><name>NTPtime64</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetQWBE</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>now64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>rtcp</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">203</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>SetWBE</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>rtcp</name><operator>-&gt;</operator><name>payload</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>rtcp</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>



<expr_stmt><expr><call><name>send</name> <argument_list>(<argument><expr><name><name>rtcp</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>rtcp</name><operator>-&gt;</operator><name>payload</name></name></expr></argument>, <argument><expr><name><name>rtcp</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>net_Close</name> <argument_list>(<argument><expr><name><name>rtcp</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>rtcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SendRTCP</name> <parameter_list>(<parameter><decl><type><name>rtcp_sender_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>rtcp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>rtp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rtcp</name> <operator>==</operator> <name>NULL</name><operator>)</operator> 
<operator>||</operator> <operator>(</operator><name><name>rtp</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>rtcp</name><operator>-&gt;</operator><name>packets</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtcp</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+=</operator> <name><name>rtp</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtcp</name><operator>-&gt;</operator><name>counter</name></name> <operator>+=</operator> <name><name>rtp</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rtcp</name><operator>-&gt;</operator><name>counter</name></name> <operator>/</operator> <literal type="number">80</literal><operator>)</operator> <operator>&lt;</operator> <name><name>rtcp</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>rtcp</name><operator>-&gt;</operator><name>payload</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>last</name> <init>= <expr><call><name>GetDWBE</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>now64</name> <init>= <expr><call><name>NTPtime64</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>now64</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>last</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>rtp</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>SetQWBE</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>now64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name><name>rtp</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>SetDWBE</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name><name>rtcp</name><operator>-&gt;</operator><name>packets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDWBE</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name><name>rtcp</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">28</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>rtp</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>send</name> <argument_list>(<argument><expr><name><name>rtcp</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>rtcp</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>rtcp</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtcp</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
