<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\stream_out\standard.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCESS_TEXT</name></cpp:macro> <cpp:value>N_("Output access method")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCESS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Output method to use for the stream." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUX_TEXT</name></cpp:macro> <cpp:value>N_("Output muxer")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUX_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Muxer to use for the stream." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEST_TEXT</name></cpp:macro> <cpp:value>N_("Output destination")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEST_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Destination (URL) to use for the stream. Overrides path and bind parameters" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIND_TEXT</name></cpp:macro> <cpp:value>N_("Address to bind to (helper setting for dst)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIND_LONGTEXT</name></cpp:macro> <cpp:value>N_( "address:port to bind vlc to listening incoming streams. ""Helper setting for dst, dst=bind+'/'+path. dst-parameter overrides this." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_TEXT</name></cpp:macro> <cpp:value>N_("Filename for stream (helper setting for dst)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Filename for stream. ""Helper setting for dst, dst=bind+'/'+path. dst-parameter overrides this." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_TEXT</name></cpp:macro> <cpp:value>N_("Session name")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This is the name of the session that will be announced in the SDP " "(Session Descriptor)." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESC_TEXT</name></cpp:macro> <cpp:value>N_("Session description")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESC_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This allows you to give a short description with details about the stream, " "that will be announced in the SDP (Session Descriptor)." )</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAP_TEXT</name></cpp:macro> <cpp:value>N_("SAP announcing")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAP_LONGTEXT</name></cpp:macro> <cpp:value>N_("Announce this session with SAP.")</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-standard-"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SRT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_SHORTCUT</name></cpp:macro> <cpp:value>"srt"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_SHORTCUT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Standard"</literal>)</argument>)</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Standard stream output"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout output"</literal></argument>, <argument><literal type="number">50</literal></argument> )</argument_list></macro>
<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"standard"</literal></argument>, <argument><literal type="string">"std"</literal></argument>, <argument><literal type="string">"file"</literal></argument>, <argument><literal type="string">"http"</literal></argument>, <argument><literal type="string">"udp"</literal></argument>, <argument>SRT_SHORTCUT</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_STREAM</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"access"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>ACCESS_TEXT</argument>, <argument>ACCESS_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"mux"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>MUX_TEXT</argument>, <argument>MUX_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"dst"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>DEST_TEXT</argument>, <argument>DEST_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"bind"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>BIND_TEXT</argument>, <argument>BIND_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"path"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>PATH_TEXT</argument>, <argument>PATH_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"sap"</literal></argument>, <argument>false</argument>, <argument>SAP_TEXT</argument>, <argument>SAP_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"name"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>NAME_TEXT</argument>, <argument>NAME_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_obsolete_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"group"</literal></argument> )</argument_list></macro> 
<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"description"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>DESC_TEXT</argument>, <argument>DESC_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_obsolete_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"url"</literal></argument> )</argument_list></macro> 
<macro><name>add_obsolete_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"email"</literal></argument> )</argument_list></macro> 
<macro><name>add_obsolete_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"phone"</literal></argument> )</argument_list></macro> 

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sout_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"access"</literal></expr>, <expr><literal type="string">"mux"</literal></expr>, <expr><literal type="string">"url"</literal></expr>, <expr><literal type="string">"dst"</literal></expr>,
<expr><literal type="string">"sap"</literal></expr>, <expr><literal type="string">"name"</literal></expr>, <expr><literal type="string">"description"</literal></expr>,
<expr><literal type="string">"bind"</literal></expr>, <expr><literal type="string">"path"</literal></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_PORT</name></cpp:macro> <cpp:value>1234</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>session_descriptor_t</name> <modifier>*</modifier></type><name>p_session</name></decl>;</decl_stmt>
}</block></struct></type> <name>sout_stream_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Add</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>sout_MuxAddStream</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Del</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sout_MuxDeleteStream</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name></name></expr></argument>, <argument><expr><operator>(</operator><name>sout_input_t</name><operator>*</operator><operator>)</operator><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Send</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>sout_MuxSendBuffer</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name></name></expr></argument>, <argument><expr><operator>(</operator><name>sout_input_t</name><operator>*</operator><operator>)</operator><name>id</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sout_MuxFlush</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name></name></expr></argument>, <argument><expr><operator>(</operator><name>sout_input_t</name><operator>*</operator><operator>)</operator><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_SDP</name><parameter_list>(<parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name> <init>= <expr><block>{
<expr><operator>.</operator><name>ai_family</name> <operator>=</operator> <name>AF_UNSPEC</name></expr>,
<expr><operator>.</operator><name>ai_socktype</name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>,
<expr><operator>.</operator><name>ai_protocol</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>ai_flags</name> <operator>=</operator> <name>AI_NUMERICHOST</name> <operator>|</operator> <name>AI_NUMERICSERV</name> <operator>|</operator> <name>AI_IDN</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shost</name> <init>= <expr><call><name>var_GetNonEmptyString</name> <argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"src-addr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dhost</name> <init>= <expr><call><name>var_GetNonEmptyString</name> <argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dst-addr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sport</name> <init>= <expr><call><name>var_GetInteger</name> <argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"src-port"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dport</name> <init>= <expr><call><name>var_GetInteger</name> <argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dst-port"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>srclen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dstlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_getaddrinfo</name> <argument_list>(<argument><expr><name>dhost</name></expr></argument>, <argument><expr><name>dport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name>dstlen</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_getaddrinfo</name> <argument_list>(<argument><expr><name>shost</name></expr></argument>, <argument><expr><name>sport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name>srclen</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name> <argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>sdp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_sdp_Start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp</name></expr></argument>, <argument><expr><call><name>VLC_OBJECT</name> <argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><name>srclen</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><name>dstlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp</name></expr></argument>, <argument><expr><literal type="string">"m=video %d udp mpeg\r\n"</literal></expr></argument>, <argument><expr><name>dport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>vlc_memstream_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Generated SDP:\n%s"</literal></expr></argument>, <argument><expr><name><name>sdp</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_session</name></name> <operator>=</operator>
<call><name>sout_AnnounceRegisterSDP</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>sdp</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>dhost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sdp</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>shost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dhost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getMuxFromAlias</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_alias</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> struct <block>{ <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>alias</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt> <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>mux</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name><name>mux_alias</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"avi"</literal></expr>, <expr><literal type="string">"avi"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ogg"</literal></expr>, <expr><literal type="string">"ogg"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ogm"</literal></expr>, <expr><literal type="string">"ogg"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ogv"</literal></expr>, <expr><literal type="string">"ogg"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"flac"</literal></expr>,<expr><literal type="string">"raw"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mp3"</literal></expr>, <expr><literal type="string">"raw"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mp4"</literal></expr>, <expr><literal type="string">"mp4"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mov"</literal></expr>, <expr><literal type="string">"mov"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"moov"</literal></expr>,<expr><literal type="string">"mov"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"asf"</literal></expr>, <expr><literal type="string">"asf"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"wma"</literal></expr>, <expr><literal type="string">"asf"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"wmv"</literal></expr>, <expr><literal type="string">"asf"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"trp"</literal></expr>, <expr><literal type="string">"ts"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ts"</literal></expr>, <expr><literal type="string">"ts"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mpg"</literal></expr>, <expr><literal type="string">"ps"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mpeg"</literal></expr>,<expr><literal type="string">"ps"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ps"</literal></expr>, <expr><literal type="string">"ps"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mpeg1"</literal></expr>,<expr><literal type="string">"mpeg1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"wav"</literal></expr>, <expr><literal type="string">"wav"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"flv"</literal></expr>, <expr><literal type="string">"avformat{mux=flv}"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mkv"</literal></expr>, <expr><literal type="string">"avformat{mux=matroska}"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"webm"</literal></expr>, <expr><literal type="string">"avformat{mux=webm}"</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_alias</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <name>mux_alias</name></sizeof> <operator>/</operator> <sizeof>sizeof <name/></sizeof>*<name>mux_alias</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_alias</name></expr></argument>, <argument><expr><name><name>mux_alias</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alias</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>mux_alias</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mux</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fixAccessMux</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_mux</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_access</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mux</name> <init>= <expr><operator>*</operator><name>ppsz_mux</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_access</name> <init>= <expr><operator>*</operator><name>ppsz_access</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_mux</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_ext</name> <init>= <expr><ternary><condition><expr><name>psz_url</name></expr> ?</condition><then> <expr><call><name>strrchr</name><argument_list>( <argument><expr><name>psz_url</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_ext</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_ext</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mux_byext</name> <init>= <expr><call><name>getMuxFromAlias</name><argument_list>( <argument><expr><name>psz_ext</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_access</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_mux_byext</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"no access _and_ no muxer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,
<argument><expr><literal type="string">"no access _and_ no muxer, extension gives file/%s"</literal></expr></argument>,
<argument><expr><name>psz_mux_byext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppsz_access</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppsz_mux</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_mux_byext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_access</name></expr></argument>, <argument><expr><literal type="string">"mmsh"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ppsz_mux</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"asfh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>psz_access</name></expr></argument>, <argument><expr><literal type="string">"udp"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ppsz_mux</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"ts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name>psz_mux_byext</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ppsz_mux</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz_mux_byext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"no mux specified or found by extension"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><name>psz_access</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_mux</name></expr></argument>, <argument><expr><literal type="string">"asfh"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ppsz_access</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"mmsh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><operator>*</operator><name>ppsz_access</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>exactMatch</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>i_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_target</name></expr></argument>, <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator> <name><name>psz_target</name><index>[<expr><name>i_len</name></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'a'</literal> <operator>||</operator> <name><name>psz_target</name><index>[<expr><name>i_len</name></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'z'</literal> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>checkAccessMux</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_access</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>exactMatch</name><argument_list>( <argument><expr><name>psz_access</name></expr></argument>, <argument><expr><literal type="string">"mmsh"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>exactMatch</name><argument_list>( <argument><expr><name>psz_mux</name></expr></argument>, <argument><expr><literal type="string">"asfh"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"mmsh output is only valid with asfh mux"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>exactMatch</name><argument_list>( <argument><expr><name>psz_access</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator> <call><name>exactMatch</name><argument_list>( <argument><expr><name>psz_mux</name></expr></argument>, <argument><expr><literal type="string">"mov"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>exactMatch</name><argument_list>( <argument><expr><name>psz_mux</name></expr></argument>, <argument><expr><literal type="string">"mp4"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"mov and mp4 mux are only valid with file output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><call><name>exactMatch</name><argument_list>( <argument><expr><name>psz_access</name></expr></argument>, <argument><expr><literal type="string">"udp"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>exactMatch</name><argument_list>( <argument><expr><name>psz_mux</name></expr></argument>, <argument><expr><literal type="string">"ffmpeg"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>exactMatch</name><argument_list>( <argument><expr><name>psz_mux</name></expr></argument>, <argument><expr><literal type="string">"avformat"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_ffmpeg_mux</name> <init>= <expr><call><name>var_CreateGetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"sout-avformat-mux"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_ffmpeg_mux</name> <operator>||</operator> <call><name>strncmp</name><argument_list>( <argument><expr><name>psz_ffmpeg_mux</name></expr></argument>, <argument><expr><literal type="string">"mpegts"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"UDP output is only valid with TS mux"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_ffmpeg_mux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>exactMatch</name><argument_list>( <argument><expr><name>psz_mux</name></expr></argument>, <argument><expr><literal type="string">"ts"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"UDP output is only valid with TS mux"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mux</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_access</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_sout_options</name></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_mux</name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"mux"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_access</name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"access"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_access</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_access</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_url</name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"dst"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_url</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_bind</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"bind"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_bind</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_path</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"path"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_path</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_url</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>psz_bind</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_url</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_bind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_url</name> <operator>=</operator> <name>psz_bind</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_stream_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>fixAccessMux</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_access</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>checkAccessMux</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>psz_access</name></expr></argument>, <argument><expr><name>psz_mux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_access</name> <operator>=</operator> <call><name>sout_AccessOutNew</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>psz_access</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_access</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"no suitable sout access module for `%s/%s://%s'"</literal></expr></argument>,
<argument><expr><name>psz_access</name></expr></argument>, <argument><expr><name>psz_mux</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name></name> <operator>=</operator> <call><name>sout_MuxNew</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>psz_mux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mux_guess</name> <init>= <expr><call><name>getMuxFromAlias</name><argument_list>( <argument><expr><name>psz_mux</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_mux_guess</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>psz_mux_guess</name></expr></argument>, <argument><expr><name>psz_mux</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Couldn't open mux `%s', trying `%s' instead"</literal></expr></argument>,
<argument><expr><name>psz_mux</name></expr></argument>, <argument><expr><name>psz_mux_guess</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name></name> <operator>=</operator> <call><name>sout_MuxNew</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>psz_mux_guess</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"no suitable sout mux module for `%s/%s://%s'"</literal></expr></argument>,
<argument><expr><name>psz_access</name></expr></argument>, <argument><expr><name>psz_mux</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sout_AccessOutDelete</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name><literal type="string">"sap"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>create_SDP</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_add</name></name> <operator>=</operator> <name>Add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_del</name></name> <operator>=</operator> <name>Del</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_send</name></name> <operator>=</operator> <name>Send</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>sout_AccessOutCanControlPace</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pace_nocontrol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"using `%s/%s://%s'"</literal></expr></argument>, <argument><expr><name>psz_access</name></expr></argument>, <argument><expr><name>psz_mux</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_mux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_session</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sout_AnnounceUnRegister</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_session</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sout_MuxDelete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_mux</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sout_AccessOutDelete</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
