<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\dash\mpd\MPD.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MPD_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPD_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../adaptive/playlist/AbstractPlaylist.hpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../adaptive/StreamFormat.hpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Profile.hpp"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>dash</name>
<block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>mpd</name>
<block>{<block_content>
<expr_stmt><expr><name>using</name> <name>namespace</name> <name>adaptive</name><operator>::</operator><name>playlist</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>adaptive</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ProgramInformation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MPD</name> <range>: <expr><name>public</name> <name>AbstractPlaylist</name>
<block>{
<expr><name>friend</name> <name>class</name> <name>IsoffMainParser</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>MPD</name><argument_list>(<argument><expr><name>vlc_object_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>Profile</name></expr></argument>)</argument_list></call></expr>;
<expr><name>virtual</name> <operator>~</operator><call><name>MPD</name><argument_list>()</argument_list></call></expr>;

<expr><name>Profile</name> <macro><name>getProfile</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <name>bool</name> <macro><name>isLive</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <name>bool</name> <macro><name>isLowLatency</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <call><name>setLowLatency</name><argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>debug</name><argument_list>()</argument_list></call></expr>;

<expr><name><name>Property</name><argument_list type="generic">&lt;<argument><expr><name>ProgramInformation</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>programInfo</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>Profile</name> <name>profile</name></expr>;
<expr><name>bool</name> <name>lowLatency</name></expr>;
}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
