<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\dash\mpd\IsoffMainParser.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ISOFFMAINPARSER_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISOFFMAINPARSER_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../adaptive/playlist/SegmentInfoCommon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Profile.hpp"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>adaptive</name>
<block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>playlist</name>
<block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>SegmentInformation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MediaSegmentTemplate</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>xml</name>
<block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Node</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>dash</name>
<block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>mpd</name>
<block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>AdaptationSet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MPD</name></decl>;</decl_stmt>

<expr_stmt><expr><name>using</name> <name>namespace</name> <name>adaptive</name><operator>::</operator><name>playlist</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>adaptive</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IsoffMainParser</name>
<block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>IsoffMainParser</name> <argument_list>(<argument><expr><name>xml</name><operator>::</operator><name>Node</name> <operator>*</operator><name>root</name></expr></argument>, <argument><expr><name>vlc_object_t</name> <operator>*</operator><name>p_object</name></expr></argument>,
<argument><expr><name>stream_t</name> <operator>*</operator><name>p_stream</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>IsoffMainParser</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>MPD</name> <modifier>*</modifier></type> <name>parse</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<expr_stmt><expr><name>mpd</name><operator>::</operator><name>Profile</name> <macro><name>getProfile</name> <argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>parseMPDBaseUrl</name> <argument_list>(<argument><expr><name>MPD</name> <operator>*</operator></expr></argument>, <argument><expr><name>xml</name><operator>::</operator><name>Node</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>parseMPDAttributes</name> <argument_list>(<argument><expr><name>MPD</name> <operator>*</operator></expr></argument>, <argument><expr><name>xml</name><operator>::</operator><name>Node</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>parseAdaptationSets</name> <argument_list>(<argument><expr><name>MPD</name> <operator>*</operator></expr></argument>, <argument><expr><name>xml</name><operator>::</operator><name>Node</name> <operator>*</operator><name>periodNode</name></expr></argument>, <argument><expr><name>Period</name> <operator>*</operator><name>period</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>parseRepresentations</name><argument_list>(<argument><expr><name>MPD</name> <operator>*</operator></expr></argument>, <argument><expr><name>xml</name><operator>::</operator><name>Node</name> <operator>*</operator><name>adaptationSetNode</name></expr></argument>, <argument><expr><name>AdaptationSet</name> <operator>*</operator><name>adaptationSet</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>parseInitSegment</name> <argument_list>(<argument><expr><name>xml</name><operator>::</operator><name>Node</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>Initializable</name><argument_list type="generic">&lt;<argument><expr><name>Segment</name></expr></argument>&gt;</argument_list></name> <operator>*</operator></expr></argument>, <argument><expr><name>SegmentInformation</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>parseTimeline</name> <argument_list>(<argument><expr><name>xml</name><operator>::</operator><name>Node</name> <operator>*</operator></expr></argument>, <argument><expr><name>MediaSegmentTemplate</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>parsePeriods</name> <argument_list>(<argument><expr><name>MPD</name> <operator>*</operator></expr></argument>, <argument><expr><name>xml</name><operator>::</operator><name>Node</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>parseSegmentInformation</name><argument_list>(<argument><expr><name>MPD</name> <operator>*</operator></expr></argument>, <argument><expr><name>xml</name><operator>::</operator><name>Node</name> <operator>*</operator></expr></argument>, <argument><expr><name>SegmentInformation</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>parseSegmentBase</name> <argument_list>(<argument><expr><name>MPD</name> <operator>*</operator></expr></argument>, <argument><expr><name>xml</name><operator>::</operator><name>Node</name> <operator>*</operator></expr></argument>, <argument><expr><name>SegmentInformation</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>parseSegmentList</name> <argument_list>(<argument><expr><name>MPD</name> <operator>*</operator></expr></argument>, <argument><expr><name>xml</name><operator>::</operator><name>Node</name> <operator>*</operator></expr></argument>, <argument><expr><name>SegmentInformation</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>parseSegmentTemplate</name><argument_list>(<argument><expr><name>MPD</name> <operator>*</operator></expr></argument>, <argument><expr><name>xml</name><operator>::</operator><name>Node</name> <operator>*</operator></expr></argument>, <argument><expr><name>SegmentInformation</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>parseProgramInformation</name><argument_list>(<argument><expr><name>xml</name><operator>::</operator><name>Node</name> <operator>*</operator></expr></argument>, <argument><expr><name>MPD</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>xml</name><operator>::</operator><name>Node</name> <operator>*</operator><name>root</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>playlisturl</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
