<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\xiph_metadata.h">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>input_attachment_t</name><modifier>*</modifier></type> <name>ParseFlacPicture</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_attachments</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_cover_score</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_cover_idx</name></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>vorbis_ParseComment</name><argument_list>( <argument><expr><name>es_format_t</name> <operator>*</operator><name>p_fmt</name></expr></argument>, <argument><expr><name>vlc_meta_t</name> <operator>*</operator><operator>*</operator><name>pp_meta</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>p_data</name></expr></argument>, <argument><expr><name>size_t</name> <name>i_data</name></expr></argument>,
<argument><expr><name>int</name> <operator>*</operator><name>i_attachments</name></expr></argument>, <argument><expr><name>input_attachment_t</name> <operator>*</operator><operator>*</operator><operator>*</operator><name>attachments</name></expr></argument>,
<argument><expr><name>int</name> <operator>*</operator><name>i_cover_score</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>i_cover_idx</name></expr></argument>,
<argument><expr><name>int</name> <operator>*</operator><name>i_seekpoint</name></expr></argument>, <argument><expr><name>seekpoint_t</name> <operator>*</operator><operator>*</operator><operator>*</operator><name>ppp_seekpoint</name></expr></argument>,
<argument><expr><call><name>float</name> <argument_list>(<argument><expr><operator>*</operator> <name>ppf_replay_gain</name></expr></argument>)</argument_list></call><index>[<expr><name>AUDIO_REPLAY_GAIN_MAX</name></expr>]</index></expr></argument>,
<argument><expr><call><name>float</name> <argument_list>(<argument><expr><operator>*</operator> <name>ppf_replay_peak</name></expr></argument>)</argument_list></call><index>[<expr><name>AUDIO_REPLAY_GAIN_MAX</name></expr>]</index></expr></argument> )</argument_list></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_i18n</name></decl>;</decl_stmt>
}</block> <decl><name><name>Katei18nCategories</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"CC"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Closed captions"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SUB"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Subtitles"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"TAD"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Textual audio descriptions"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"KTV"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Karaoke"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"TIK"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Ticker text"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AR"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Active regions"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"NB"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Semantic annotations"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"META"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Metadata"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"TRX"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Transcript"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LRC"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Lyrics"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LIN"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Linguistic markup"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CUE"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Cue points"</literal></argument>)</argument_list></macro> }</block></expr>,


<expr><block>{ <expr><literal type="string">"subtitles"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Subtitles"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"spu-subtitles"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Subtitles (images)"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lyrics"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Lyrics"</literal></argument>)</argument_list></macro> }</block></expr>,


<expr><block>{ <expr><literal type="string">"K-SPU"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Subtitles (images)"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"K-SLD-T"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Slides (text)"</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"K-SLD-I"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Slides (images)"</literal></argument>)</argument_list></macro> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FindKateCategoryName</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tag</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
