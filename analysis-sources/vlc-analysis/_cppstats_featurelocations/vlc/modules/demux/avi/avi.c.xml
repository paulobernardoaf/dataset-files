<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\avi\avi.c">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codecs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../rawdv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bitmapinfoheader.h"</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERLEAVE_TEXT</name></cpp:macro> <cpp:value>N_("Force interleaved method" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_TEXT</name></cpp:macro> <cpp:value>N_("Force index creation")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Recreate a index for the AVI file. Use this if your AVI file is damaged ""or incomplete (not seekable)." )</cpp:value></cpp:define>



<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_index</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_indexes</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Ask for action"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Always fix"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Never fix"</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>N_</name><argument_list>(<argument><literal type="string">"Fix when necessary"</literal></argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"AVI"</literal></argument> )</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"AVI demuxer"</literal>)</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">212</literal></argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"avi-interleaved"</literal></argument>, <argument>false</argument>,
<argument>INTERLEAVE_TEXT</argument>, <argument>INTERLEAVE_TEXT</argument>, <argument>true</argument> )</argument_list></macro>
<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"avi-index"</literal></argument>, <argument><literal type="number">0</literal></argument>,
<argument>INDEX_TEXT</argument>, <argument>INDEX_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>
<macro><name>change_integer_list</name><argument_list>( <argument>pi_index</argument>, <argument>ppsz_indexes</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Seek</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux_Seekable</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux_UnSeekable</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>FromACP</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>FromCharset</name><argument_list>(<argument><expr><call><name>vlc_pgettext</name><argument_list>(<argument><expr><literal type="string">"GetACP"</literal></expr></argument>, <argument><expr><literal type="string">"CP1252"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IGNORE_ES</name></cpp:macro> <cpp:value>DATA_ES</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_LENGTH</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(25)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_LENGTH_NONINTERLEAVED</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(1500)</cpp:value></cpp:define>



<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>i_peek</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>i_cat</name></decl>;</decl_stmt>
}</block></struct></type> <name>avi_packet_t</name>;</typedef>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_lengthtotal</name></decl>;</decl_stmt>

}</block></struct></type> <name>avi_entry_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl>;</decl_stmt>

}</block></struct></type> <name>avi_index_t</name>;</typedef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>avi_index_Init</name><parameter_list>( <parameter><decl><type><name>avi_index_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>avi_index_Clean</name><parameter_list>( <parameter><decl><type><name>avi_index_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>avi_index_Append</name><parameter_list>( <parameter><decl><type><name>avi_index_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>avi_entry_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_activated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_eof</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_samplesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>bitmapinfoheader_properties</name></name></type> <name>bihprops</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_next_block_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_dv_audio_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es_dv_audio</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>avi_index_t</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_idxposc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_idxposb</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_blockno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_blocksize</name></decl>;</decl_stmt>

}</block></struct></type> <name>avi_track_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_interleaved</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_seekable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_fastseekable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_indexloaded</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_read_increment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_avih_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_t</name></type> <name>ck_root</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_odml</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_movi_begin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_movi_lastchunk_pos</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_track</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>track</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>meta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_attachment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>attachment</name></decl>;</decl_stmt>
}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__EVEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 1) ? (x) + 1 : (x))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>AVI_PTSToChunk</name><parameter_list>( <parameter><decl><type><name>avi_track_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>AVI_PTSToByte</name> <parameter_list>( <parameter><decl><type><name>avi_track_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>AVI_GetDPTS</name> <parameter_list>( <parameter><decl><type><name>avi_track_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_count</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>AVI_GetPTS</name> <parameter_list>( <parameter><decl><type><name>avi_track_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AVI_StreamChunkFind</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_stream</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AVI_StreamChunkSet</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_stream</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_ck</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AVI_StreamBytesSet</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_stream</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_byte</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>vlc_fourcc_t</name></type> <name>AVI_FourccGetCodec</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_cat</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AVI_GetKeyFlag</name> <parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type></decl></parameter> , <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AVI_PacketGetHeader</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>avi_packet_t</name> <modifier>*</modifier></type><name>p_pk</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AVI_PacketNext</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AVI_PacketSearch</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AVI_IndexLoad</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AVI_IndexCreate</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AVI_ExtractSubtitle</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_stream</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>avi_chunk_STRING_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AVI_DvHandleAudio</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>avi_track_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>AVI_MovieGetLength</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AVI_MetaLoad</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_riff</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_avih_t</name> <modifier>*</modifier></type><name>p_avih</name></decl></parameter> )</parameter_list>;</function_decl>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AVI_TrackSeek</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AVI_TrackStopFinishedStreams</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QNAP_HEADER_SIZE</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsQNAPCodec</name><parameter_list>(<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>codec</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>, <argument><expr><literal type="char">'6'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'q'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>, <argument><expr><literal type="char">'6'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'Q'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>, <argument><expr><literal type="char">'6'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'q'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'Q'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'q'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'Q'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type> <name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl> ;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avi_index_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_ChunkFreeRoot</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ck_root</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>meta</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>meta</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_attachment</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_input_attachment_Delete</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachment</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_index</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>b_aborted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_do_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_riff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_hdrl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_movi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_avih_t</name> <modifier>*</modifier></type><name>p_avih</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_track</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_peeker</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">200</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i_peeker</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_peeker</name> <operator>&lt;</operator> <literal type="number">188</literal></expr>;</condition> <incr><expr><name>i_peeker</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"RIFF"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"AVI "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ON2 "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ON2f"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_peek</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>i_peeker</name> <operator>==</operator> <literal type="number">188</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peeker</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_peeker</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>i_peeker</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>demux_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_sys</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_odml</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>meta</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachment</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>STREAM_CAN_FASTSEEK</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_fastseekable</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>STREAM_CAN_SEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_interleaved</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"avi-interleaved"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>AVI_ChunkReadRoot</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ck_root</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"avi module discarded (invalid file)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>AVI_ChunkCount</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ck_root</name></name></expr></argument>, <argument><expr><name>AVIFOURCC_RIFF</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_count</name> <init>=
<expr><call><name>AVI_ChunkCount</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ck_root</name></name></expr></argument>, <argument><expr><name>AVIFOURCC_RIFF</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"multiple riff -&gt; OpenDML ?"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_sysx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sysx</name> <operator>=</operator> <call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ck_root</name></name></expr></argument>, <argument><expr><name>AVIFOURCC_RIFF</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_sysx</name> <operator>&amp;&amp;</operator> <name><name>p_sysx</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>AVIFOURCC_AVIX</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"detected OpenDML file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_odml</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_riff</name> <operator>=</operator> <call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ck_root</name></name></expr></argument>, <argument><expr><name>AVIFOURCC_RIFF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_hdrl</name> <operator>=</operator> <call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_riff</name></expr></argument>, <argument><expr><name>AVIFOURCC_hdrl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_movi</name> <operator>=</operator> <call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_riff</name></expr></argument>, <argument><expr><name>AVIFOURCC_movi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_movi</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_movi</name> <operator>=</operator> <call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ck_root</name></name></expr></argument>, <argument><expr><name>AVIFOURCC_movi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_hdrl</name> <operator>||</operator> <operator>!</operator><name>p_movi</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid file: cannot find hdrl or movi chunks"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>p_avih</name> <operator>=</operator> <call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_hdrl</name></expr></argument>, <argument><expr><name>AVIFOURCC_avih</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid file: cannot find avih chunk"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_track</name> <operator>=</operator> <call><name>AVI_ChunkCount</name><argument_list>( <argument><expr><name>p_hdrl</name></expr></argument>, <argument><expr><name>AVIFOURCC_strl</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_avih</name><operator>-&gt;</operator><name>i_streams</name></name> <operator>!=</operator> <name>i_track</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><literal type="string">"found %d stream but %d are declared"</literal></expr></argument>,
<argument><expr><name>i_track</name></expr></argument>, <argument><expr><name><name>p_avih</name><operator>-&gt;</operator><name>i_streams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_track</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"no stream defined!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"AVIH: %d stream, flags %s%s%s%s "</literal></expr></argument>,
<argument><expr><name>i_track</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_avih</name><operator>-&gt;</operator><name>i_flags</name></name><operator>&amp;</operator><name>AVIF_HASINDEX</name></expr>?</condition><then><expr><literal type="string">" HAS_INDEX"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_avih</name><operator>-&gt;</operator><name>i_flags</name></name><operator>&amp;</operator><name>AVIF_MUSTUSEINDEX</name></expr>?</condition><then><expr><literal type="string">" MUST_USE_INDEX"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_avih</name><operator>-&gt;</operator><name>i_flags</name></name><operator>&amp;</operator><name>AVIF_ISINTERLEAVED</name></expr>?</condition><then><expr><literal type="string">" IS_INTERLEAVED"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_avih</name><operator>-&gt;</operator><name>i_flags</name></name><operator>&amp;</operator><name>AVIF_TRUSTCKTYPE</name></expr>?</condition><then><expr><literal type="string">" TRUST_CKTYPE"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_interleaved</name></name> <operator>|=</operator> <operator>(</operator><name><name>p_avih</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>AVIF_ISINTERLEAVED</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fastseekable</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux_Seekable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_read_increment</name></name> <operator>=</operator> <name>READ_LENGTH</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux_Seekable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_read_increment</name></name> <operator>=</operator> <name>READ_LENGTH_NONINTERLEAVED</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_interleaved</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Non interleaved content over slow seekable, "</literal>
<literal type="string">"expect bad performance"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Non seekable content "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux_UnSeekable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_read_increment</name></name> <operator>=</operator> <name>READ_LENGTH_NONINTERLEAVED</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_interleaved</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Non seekable non interleaved content, "</literal>
<literal type="string">"disabling other tracks"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_track</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name>i_track</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>AVI_MetaLoad</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_riff</name></expr></argument>, <argument><expr><name>p_avih</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_avih_flags</name></name> <operator>=</operator> <name><name>p_avih</name><operator>-&gt;</operator><name>i_flags</name></name></expr>;</expr_stmt>


<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_track</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>avi_track_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>tk</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_strl</name> <init>= <expr><call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_hdrl</name></expr></argument>, <argument><expr><name>AVIFOURCC_strl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_strh_t</name> <modifier>*</modifier></type><name>p_strh</name> <init>= <expr><call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_strl</name></expr></argument>, <argument><expr><name>AVIFOURCC_strh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_STRING_t</name> <modifier>*</modifier></type><name>p_strn</name> <init>= <expr><call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_strl</name></expr></argument>, <argument><expr><name>AVIFOURCC_strn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_strf_auds_t</name> <modifier>*</modifier></type><name>p_auds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_strf_vids_t</name> <modifier>*</modifier></type><name>p_vids</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>b_activated</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_vids</name> <operator>=</operator> <operator>(</operator><name>avi_chunk_strf_vids_t</name><operator>*</operator><operator>)</operator><call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_strl</name></expr></argument>, <argument><expr><name>AVIFOURCC_strf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_auds</name> <operator>=</operator> <operator>(</operator><name>avi_chunk_strf_auds_t</name><operator>*</operator><operator>)</operator><name>p_vids</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_strl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>p_strh</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>p_vids</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"stream[%d] incomplete"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name><name>p_strh</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_scale</name></name> <operator>=</operator> <name><name>p_strh</name><operator>-&gt;</operator><name>i_scale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name> <operator>=</operator> <name><name>p_strh</name><operator>-&gt;</operator><name>i_samplesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"stream[%u] rate:%u scale:%u samplesize:%u"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_scale</name></name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>i_scale</name></name> <operator>||</operator> <operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>tk</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>*</operator> <name>CLOCK_FREQ</name> <operator>/</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_scale</name></name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_strh</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>
<block>{<block_content>
<case>case<expr><operator>(</operator> <name>AVIFOURCC_auds</name> <operator>)</operator></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>==</operator> <name>WAVE_FORMAT_EXTENSIBLE</name> <operator>&amp;&amp;</operator>
<name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WAVEFORMATEXTENSIBLE</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WAVEFORMATEX</name></expr></argument>)</argument_list></sizeof></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>WAVEFORMATEXTENSIBLE</name> <modifier>*</modifier></type><name>p_wfe</name> <init>= <expr><operator>(</operator><name>WAVEFORMATEXTENSIBLE</name> <operator>*</operator><operator>)</operator><name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <call><name>AVI_FourccGetCodec</name><argument_list>( <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name><name>p_wfe</name><operator>-&gt;</operator><name>SubFormat</name><operator>.</operator><name>Data1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <call><name>AVI_FourccGetCodec</name><argument_list>( <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_blocksize</name></name> <operator>=</operator> <name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_blocksize</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_blocksize</name></name> <operator>=</operator> <name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name> <operator>*</operator> <operator>(</operator><name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name><operator>/</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_blocksize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name> <operator>!=</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_blocksize</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"track[%u] samplesize=%u and blocksize=%u are not equal."</literal>
<literal type="string">"Using blocksize as a workaround."</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_blocksize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name> <operator>=</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_blocksize</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_VORBIS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_blocksize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MP4A</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_ADPCM_IMA_WAV</name> <operator>&amp;&amp;</operator>
<name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name> <operator>&amp;&amp;</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name> <operator>&gt;</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_rate</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_scale</name></name> <operator>=</operator> <literal type="number">1017</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MPGA</name> <operator>&amp;&amp;</operator>
<name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name> <operator>==</operator> <literal type="number">1152</literal> <operator>&amp;&amp;</operator> <name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name> <operator>==</operator> <literal type="number">1152</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name> <operator>=</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name><operator>*</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>=</operator> <name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>i_blocksize</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_info</name> <init>= <expr><call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_riff</name></expr></argument>, <argument><expr><name>AVIFOURCC_INFO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_info</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_chunk</name> <init>= <expr><name>AVIFOURCC_IAS1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_STRING_t</name> <modifier>*</modifier></type><name>p_lang</name> <init>= <expr><call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_info</name></expr></argument>, <argument><expr><name>i_chunk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_lang</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_lang</name><operator>-&gt;</operator><name>p_str</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <call><name>FromACP</name><argument_list>( <argument><expr><name><name>p_lang</name><operator>-&gt;</operator><name>p_str</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><literal type="string">"stream[%u] audio(0x%x - %s) %d channels %dHz %dbits"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name></expr></argument>,
<argument><expr><call><name>vlc_fourcc_GetDescription</name><argument_list>(<argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr></argument>,
<argument><expr><name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr></argument>,
<argument><expr><name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_cboff</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>WAVEFORMATEX</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_incboff</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>==</operator> <name>WAVE_FORMAT_EXTENSIBLE</name> <operator>)</operator></expr> ?</condition><then>
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>WAVEFORMATEXTENSIBLE</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WAVEFORMATEX</name></expr></argument>)</argument_list></sizeof></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_auds</name><operator>-&gt;</operator><name>i_chunk_size</name></name> <operator>&gt;=</operator> <name>i_cboff</name> <operator>+</operator> <name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name> <operator>&amp;&amp;</operator>
<name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name> <operator>&gt;</operator> <name>i_incboff</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_extra</name> <init>= <expr><name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name> <operator>-</operator> <name>i_incboff</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name>i_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>+</operator> <name>i_incboff</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case<expr><operator>(</operator> <name>AVIFOURCC_vids</name> <operator>)</operator></expr>:</case>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_vids</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'B'</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"stream[%u] subtitles"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name><name>p_vids</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>,
<argument><expr><call><name>AVI_FourccGetCodec</name><argument_list>( <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name><name>p_vids</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ParseBitmapInfoHeader</name><argument_list>( <argument><expr><name><name>p_vids</name><operator>-&gt;</operator><name>p_bih</name></name></expr></argument>, <argument><expr><name><name>p_vids</name><operator>-&gt;</operator><name>i_chunk_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>bihprops</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MP4V</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_strh</name><operator>-&gt;</operator><name>i_handler</name></name></expr></argument>, <argument><expr><literal type="string">"XVID"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator>
<name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>IsQNAPCodec</name><argument_list>( <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_scale</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>avi_chunk_vprp_t</name> <modifier>*</modifier></type><name>p_vprp</name> <init>= <expr><call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_strl</name></expr></argument>, <argument><expr><name>AVIFOURCC_vprp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_vprp</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_frame_aspect_ratio</name> <init>= <expr><name><name>p_vprp</name><operator>-&gt;</operator><name>i_frame_aspect_ratio</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_vprp</name><operator>-&gt;</operator><name>i_video_format_token</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>p_vprp</name><operator>-&gt;</operator><name>i_video_format_token</name></name> <operator>&lt;=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_frame_aspect_ratio</name> <operator>=</operator> <literal type="number">0x00040003</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i_frame_aspect_ratio</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>*</operator>
<name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i_frame_aspect_ratio</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>*</operator>
<name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"stream[%u] video(%4.4s) %"</literal><name>PRIu32</name><literal type="string">"x%"</literal><name>PRIu32</name><literal type="string">" %dbpp %ffps"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_vids</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument>,
<argument><expr><name><name>p_vids</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biWidth</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>p_vids</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biHeight</name></name> <operator>&lt;=</operator> <name>INT_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>p_vids</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biHeight</name></name></expr>
</then><else>: <expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name><name>p_vids</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biHeight</name></name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>p_vids</name><operator>-&gt;</operator><name>p_bih</name><operator>-&gt;</operator><name>biBitCount</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>tk</name><operator>-&gt;</operator><name>i_rate</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>tk</name><operator>-&gt;</operator><name>i_scale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case<expr><operator>(</operator> <name>AVIFOURCC_txts</name><operator>)</operator></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"stream[%u] subtitle attachment"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVI_ExtractSubtitle</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>p_strl</name></expr></argument>, <argument><expr><name>p_strn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case<expr><operator>(</operator> <name>AVIFOURCC_iavs</name><operator>)</operator></expr>:</case>
<case>case<expr><operator>(</operator> <name>AVIFOURCC_ivas</name><operator>)</operator></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"stream[%u] iavs with handler %4.4s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_strh</name><operator>-&gt;</operator><name>i_handler</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><call><name>AVI_FourccGetCodec</name><argument_list>( <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name><name>p_strh</name><operator>-&gt;</operator><name>i_handler</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_dv_audio_rate</name></name> <operator>=</operator> <ternary><condition><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DV</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator>
<name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_avih</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator>
<name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_avih</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case<expr><operator>(</operator> <name>AVIFOURCC_mids</name><operator>)</operator></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"stream[%u] midi is UNSUPPORTED"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<default>default:</default>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"stream[%u] unknown type %4.4s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_strh</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_strn</name> <operator>&amp;&amp;</operator> <name><name>p_strn</name><operator>-&gt;</operator><name>p_str</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_description</name></name> <operator>=</operator> <call><name>FromACP</name><argument_list>( <argument><expr><name><name>p_strn</name><operator>-&gt;</operator><name>p_str</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name></name></expr></argument>, <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"no valid track"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_do_index</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"avi-index"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_do_index</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition> 
<block>{<block_content>
<label><name>aviindex</name>:</label>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fastseekable</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AVI_IndexCreate</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AVI_IndexLoad</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot create index (unseekable stream)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AVI_IndexLoad</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>AVI_MovieGetLength</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_idx_totalframes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_idx_totalframes</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name>i_idx_totalframes</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>i_idx_totalframes</name> <operator>!=</operator> <name><name>p_avih</name><operator>-&gt;</operator><name>i_totalframes</name></name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&lt;</operator> <call><name>VLC_TICK_FROM_US</name><argument_list>( <argument><expr><name><name>p_avih</name><operator>-&gt;</operator><name>i_totalframes</name></name> <operator>*</operator>
<name><name>p_avih</name><operator>-&gt;</operator><name>i_microsecperframe</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"broken or missing index, 'seek' will be "</literal>
<literal type="string">"approximative or will exhibit strange behavior"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_do_index</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_do_index</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_index</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_fastseekable</name></name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>b_index</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<goto>goto <name>aviindex</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_do_index</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_msg</name> <init>= <expr><call><name>_</name><argument_list>(
<argument><expr><literal type="string">"Because this file index is broken or missing, "</literal>
<literal type="string">"seeking will not work correctly.\n"</literal>
<literal type="string">"VLC won't repair your file but can temporary fix this "</literal>
<literal type="string">"problem by building an index in memory.\n"</literal>
<literal type="string">"This step might take a long time on a large file.\n"</literal>
<literal type="string">"What do you want to do?"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch<condition>( <expr><call><name>vlc_dialog_wait_question</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><name>VLC_DIALOG_QUESTION_NORMAL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Do not play"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Build index then play"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Play as is"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Broken or missing Index"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_msg</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>b_aborted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>b_index</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Fixing AVI index"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>aviindex</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>b_index</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Fixing AVI index"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>aviindex</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_strl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_strf_auds_t</name> <modifier>*</modifier></type><name>p_auds</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>AUDIO_ES</name></expr> )</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator>
<name><name>tk</name><operator>-&gt;</operator><name>i_scale</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
<name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_strl</name> <operator>=</operator> <call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_hdrl</name></expr></argument>, <argument><expr><name>AVIFOURCC_strl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_auds</name> <operator>=</operator> <call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_strl</name></expr></argument>, <argument><expr><name>AVIFOURCC_strf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_auds</name> <operator>&amp;&amp;</operator>
<name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>!=</operator> <name>WAVE_FORMAT_PCM</name> <operator>&amp;&amp;</operator>
<name><name>tk</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>==</operator> <name><name>p_auds</name><operator>-&gt;</operator><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_track_length</name> <init>=
<expr><name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_length</name> <operator>+</operator>
<name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_lengthtotal</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name> <init>= <expr><call><name>VLC_TICK_FROM_US</name><argument_list>( <argument><expr><name><name>p_avih</name><operator>-&gt;</operator><name>i_totalframes</name></name> <operator>*</operator>
<name><name>p_avih</name><operator>-&gt;</operator><name>i_microsecperframe</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"track[%u] cannot be fixed (BeOS MediaKit generated)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name>i_track_length</name> <operator>*</operator> <name>CLOCK_FREQ</name> <operator>/</operator> <name>i_length</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"track[%u] fixed with rate=%u scale=%u (BeOS MediaKit generated)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_scale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_movi</name><operator>-&gt;</operator><name>i_chunk_pos</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">12</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_begin</name></name> <operator>=</operator> <name><name>p_movi</name><operator>-&gt;</operator><name>i_chunk_pos</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>b_aborted</name></expr> ?</condition><then> <expr><name>VLC_ETIMEOUT</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>ReadFrame</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>i_header</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frame</name> <init>= <expr><call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><call><name>__EVEN</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_frame</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>p_frame</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>%</operator> <literal type="number">2</literal></expr> )</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_header</name> <operator>&gt;=</operator> <name><name>p_frame</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>||</operator> <name><name>tk</name><operator>-&gt;</operator><name>bihprops</name><operator>.</operator><name>i_stride</name></name> <operator>&gt;</operator> <name>INT32_MAX</name> <operator>-</operator> <literal type="number">3</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>p_frame</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_header</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_header</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>i_stride_bytes</name> <init>= <expr><operator>(</operator><name><name>tk</name><operator>-&gt;</operator><name>bihprops</name><operator>.</operator><name>i_stride</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>bihprops</name><operator>.</operator><name>i_stride</name></name> <operator>||</operator> <operator>!</operator><name>i_stride_bytes</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>p_frame</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>i_stride_bytes</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>p_frame</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>bihprops</name><operator>.</operator><name>b_flipped</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><name><name>p_frame</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i_stride_bytes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><name><name>p_frame</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name><name>p_frame</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name><name>p_frame</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name><name>tk</name><operator>-&gt;</operator><name>bihprops</name><operator>.</operator><name>i_stride</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name><name>tk</name><operator>-&gt;</operator><name>bihprops</name><operator>.</operator><name>i_stride</name></name></expr>;</expr_stmt>

<while>while <condition>( <expr><name>p_src</name> <operator>+</operator> <name>i_stride_bytes</name> <operator>&lt;=</operator> <name>p_end</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>bihprops</name><operator>.</operator><name>i_stride</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <name>i_stride_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <name><name>tk</name><operator>-&gt;</operator><name>bihprops</name><operator>.</operator><name>i_stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+=</operator> <name><name>tk</name><operator>-&gt;</operator><name>bihprops</name><operator>.</operator><name>i_stride</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_flippedframe</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_flippedframe</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_lines</name> <init>= <expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <name>i_stride_bytes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><name><name>p_frame</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i_lines</name> <operator>*</operator> <name>i_stride_bytes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name><name>p_flippedframe</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_flippedframe</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>( <expr><name>i_lines</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_src</name> <operator>-=</operator> <name>i_stride_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>bihprops</name><operator>.</operator><name>i_stride</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <name><name>tk</name><operator>-&gt;</operator><name>bihprops</name><operator>.</operator><name>i_stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_flippedframe</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+=</operator> <name><name>tk</name><operator>-&gt;</operator><name>bihprops</name><operator>.</operator><name>i_stride</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_frame</name> <operator>=</operator> <name>p_flippedframe</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>p_frame</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>AVI_SendFrame</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frame</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_frame</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_frame</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_dv_audio_rate</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AVI_DvHandleAudio</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>p_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>IsQNAPCodec</name><argument_list>( <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;=</operator> <name>QNAP_HEADER_SIZE</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>QNAP_HEADER_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>QNAP_HEADER_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_next_block_flags</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_next_block_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>p_es</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>








<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_ok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_toread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_posf</name></decl>;</decl_stmt> 


}</block></struct></type> <name>avi_track_toread_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux_Seekable</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_track_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_track</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>avi_track_toread_t</name></type> <name><name>toread</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>



<for>for<control>( <init><expr><name>i_track</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_track</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i_track</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_track</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_GET_ES_STATE</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>p_es_dv_audio</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_extra</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_GET_ES_STATE</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>p_es_dv_audio</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>|=</operator> <name>b_extra</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>b</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>b_activated</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AVI_TrackSeek</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_track</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>b_activated</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><name>b</name> <operator>&amp;&amp;</operator> <name><name>tk</name><operator>-&gt;</operator><name>b_activated</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>b_activated</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>b</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_track_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_track_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_time</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_read_increment</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_time</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"no track selected, exiting..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_time</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_read_increment</name></name></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>i_track</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_track</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i_track</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_track</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>toread</name><index>[<expr><name>i_track</name></expr>]</index></name><operator>.</operator><name>b_ok</name> <operator>=</operator> <name><name>tk</name><operator>-&gt;</operator><name>b_activated</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>b_eof</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposc</name></name> <operator>&lt;</operator> <name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>toread</name><index>[<expr><name>i_track</name></expr>]</index></name><operator>.</operator><name>i_posf</name> <operator>=</operator> <name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposc</name></name></expr>]</index></name><operator>.</operator><name>i_pos</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposb</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>toread</name><index>[<expr><name>i_track</name></expr>]</index></name><operator>.</operator><name>i_posf</name> <operator>+=</operator> <literal type="number">8</literal> <operator>+</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_idxposb</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>toread</name><index>[<expr><name>i_track</name></expr>]</index></name><operator>.</operator><name>i_posf</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dpts</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_time</name></name> <operator>-</operator> <call><name>AVI_GetPTS</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>toread</name><index>[<expr><name>i_track</name></expr>]</index></name><operator>.</operator><name>i_toread</name> <operator>=</operator> <call><name>AVI_PTSToByte</name><argument_list>( <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>i_dpts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>( <expr><name>i_dpts</name> <operator>&gt;</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition> 
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_chunks_count</name> <init>= <expr><call><name>AVI_PTSToChunk</name><argument_list>( <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>i_dpts</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_dpts</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>AVI_GetDPTS</name><argument_list>( <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>i_chunks_count</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>i_dpts</name></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name>i_chunks_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>toread</name><index>[<expr><name>i_track</name></expr>]</index></name><operator>.</operator><name>i_toread</name> <operator>=</operator> <name>i_chunks_count</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>toread</name><index>[<expr><name>i_track</name></expr>]</index></name><operator>.</operator><name>i_toread</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name></decl>;</decl_stmt>


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>b_done</name> <operator>=</operator> <name>true</name></expr><operator>,</operator> <expr><name>i_pos</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>toread</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_ok</name> <operator>||</operator>
<operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_fastseekable</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_interleaved</name></name> <operator>&amp;&amp;</operator>
<call><name>AVI_GetDPTS</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>toread</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_toread</name></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <operator>-</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_read_increment</name></name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>toread</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_toread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>b_done</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>toread</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_posf</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>i_pos</name> <operator>&gt;</operator> <name><name>toread</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_posf</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_track</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <name><name>toread</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_posf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>b_done</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>toread</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_ok</name> <operator>&amp;&amp;</operator> <name><name>toread</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_toread</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"all tracks have failed, exiting..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>i_loop_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_lastchunk_pos</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_begin</name></name> <operator>+</operator> <literal type="number">12</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_lastchunk_pos</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>AVI_PacketNext</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return<expr><operator>(</operator> <ternary><condition><expr><call><name>AVI_TrackStopFinishedStreams</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_begin</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_packet_t</name></type> <name>avi_pk</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>AVI_PacketGetHeader</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avi_pk</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><literal type="string">"cannot get packet header, track disabled"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <ternary><condition><expr><call><name>AVI_TrackStopFinishedStreams</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>avi_pk</name><operator>.</operator><name>i_stream</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name> <operator>||</operator>
<operator>(</operator> <name><name>avi_pk</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>AUDIO_ES</name> <operator>&amp;&amp;</operator> <name><name>avi_pk</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>AVI_PacketNext</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><literal type="string">"cannot skip packet, track disabled"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <ternary><condition><expr><call><name>AVI_TrackStopFinishedStreams</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>++</operator><name>i_loop_count</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"don't seem to find any data..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_track</name> <operator>=</operator> <name><name>avi_pk</name><operator>.</operator><name>i_stream</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tk</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_track</name></expr>]</index></name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>avi_entry_t</name></type> <name>index</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name><name>avi_pk</name><operator>.</operator><name>i_fourcc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_flags</name></name> <operator>=</operator> <call><name>AVI_GetKeyFlag</name><argument_list>(<argument><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name><name>avi_pk</name><operator>.</operator><name>i_peek</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_pos</name></name> <operator>=</operator> <name><name>avi_pk</name><operator>.</operator><name>i_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_length</name></name> <operator>=</operator> <name><name>avi_pk</name><operator>.</operator><name>i_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_lengthtotal</name></name> <operator>=</operator> <name><name>index</name><operator>.</operator><name>i_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avi_index_Append</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_lastchunk_pos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><call><name>AVI_GetDPTS</name><argument_list>( <argument><expr><name>tk</name></expr></argument>, <argument><expr><name><name>toread</name><index>[<expr><name>i_track</name></expr>]</index></name><operator>.</operator><name>i_toread</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <operator>-</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_read_increment</name></name></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>AVI_PacketNext</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><literal type="string">"cannot skip packet, track disabled"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator> <ternary><condition><expr><call><name>AVI_TrackStopFinishedStreams</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>tk</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_track</name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_toread</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_toread</name> <operator>=</operator> <name><name>toread</name><index>[<expr><name>i_track</name></expr>]</index></name><operator>.</operator><name>i_toread</name> <operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_toread</name> <operator>=</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_toread</name> <operator>=</operator> <call><name>AVI_PTSToByte</name><argument_list>( <argument><expr><name>tk</name></expr></argument>, <argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_toread</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>i_toread</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_size</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposc</name></name></expr>]</index></name><operator>.</operator><name>i_length</name> <operator>-</operator>
<name><name>tk</name><operator>-&gt;</operator><name>i_idxposb</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>i_toread</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposc</name></name></expr>]</index></name><operator>.</operator><name>i_length</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposb</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_size</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_frame</name> <operator>=</operator> <call><name>ReadFrame</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_idxposb</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call> <operator>)</operator><operator>==</operator><name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"failed reading data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>toread</name><index>[<expr><name>i_track</name></expr>]</index></name><operator>.</operator><name>b_ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <call><name>AVI_GetPTS</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposc</name></name></expr>]</index></name><operator>.</operator><name>i_flags</name><operator>&amp;</operator><name>AVIIF_KEYFRAME</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name>BLOCK_FLAG_TYPE_PB</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposb</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_size</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>toread</name><index>[<expr><name>i_track</name></expr>]</index></name><operator>.</operator><name>i_toread</name> <operator>-=</operator> <name>i_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposb</name></name> <operator>+=</operator> <name>i_size</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposb</name></name> <operator>&gt;=</operator>
<name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposc</name></name></expr>]</index></name><operator>.</operator><name>i_length</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposc</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_length</name> <init>= <expr><name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposc</name></name></expr>]</index></name><operator>.</operator><name>i_length</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposc</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_blockno</name></name> <operator>+=</operator> <ternary><condition><expr><name><name>tk</name><operator>-&gt;</operator><name>i_blocksize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator> <name>i_length</name> <operator>+</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_blocksize</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_blocksize</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>toread</name><index>[<expr><name>i_track</name></expr>]</index></name><operator>.</operator><name>i_toread</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposc</name></name> <operator>&lt;</operator> <name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>toread</name><index>[<expr><name>i_track</name></expr>]</index></name><operator>.</operator><name>i_posf</name> <operator>=</operator>
<name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposc</name></name></expr>]</index></name><operator>.</operator><name>i_pos</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposb</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>toread</name><index>[<expr><name>i_track</name></expr>]</index></name><operator>.</operator><name>i_posf</name> <operator>+=</operator> <literal type="number">8</literal> <operator>+</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_idxposb</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>toread</name><index>[<expr><name>i_track</name></expr>]</index></name><operator>.</operator><name>i_posf</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>AVI_SendFrame</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>p_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux_UnSeekable</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>p_stream_master</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_packet</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<for>for<control>( <init><expr><name>i_stream</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_stream</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i_stream</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_GET_ES_STATE</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>p_es_dv_audio</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_extra</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_GET_ES_STATE</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>p_es_dv_audio</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>|=</operator> <name>b_extra</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_stream_master</name> <operator>=</operator> <name>tk</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><name>p_stream_master</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_stream_master</name> <operator>=</operator> <name>tk</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_stream_master</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_stream_master</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"no more stream selected"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_time</name></name> <operator>=</operator> <call><name>AVI_GetPTS</name><argument_list>( <argument><expr><name>p_stream_master</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_packet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_packet</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i_packet</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_packet_t</name></type> <name>avi_pk</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>AVI_PacketGetHeader</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avi_pk</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>avi_pk</name><operator>.</operator><name>i_stream</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name> <operator>||</operator>
<operator>(</operator> <name><name>avi_pk</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>AUDIO_ES</name> <operator>&amp;&amp;</operator> <name><name>avi_pk</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>




<switch>switch<condition>( <expr><name><name>avi_pk</name><operator>.</operator><name>i_fourcc</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AVIFOURCC_JUNK</name></expr>:</case>
<case>case <expr><name>AVIFOURCC_LIST</name></expr>:</case>
<case>case <expr><name>AVIFOURCC_RIFF</name></expr>:</case>
<return>return<expr><operator>(</operator> <ternary><condition><expr><operator>!</operator><call><name>AVI_PacketNext</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr>;</return>
<case>case <expr><name>AVIFOURCC_idx1</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_odml</name></name></expr> )</condition>
<block>{<block_content>
<return>return<expr><operator>(</operator> <ternary><condition><expr><operator>!</operator><call><name>AVI_PacketNext</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><literal type="string">"seems to have lost position @%"</literal><name>PRIu64</name><literal type="string">", resync"</literal></expr></argument>,
<argument><expr><call><name>vlc_stream_Tell</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>AVI_PacketSearch</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"resync failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name><name>avi_pk</name><operator>.</operator><name>i_stream</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_stream</name> <operator>==</operator> <name>p_stream_master</name> <operator>||</operator>
<call><name>llabs</name><argument_list>( <argument><expr><call><name>AVI_GetPTS</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call> <operator>-</operator>
<call><name>AVI_GetPTS</name><argument_list>( <argument><expr><name>p_stream_master</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call><operator>&lt;</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frame</name> <init>= <expr><call><name>ReadFrame</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>avi_pk</name><operator>.</operator><name>i_size</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_frame</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <call><name>AVI_GetPTS</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_SendFrame</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>AVI_PacketNext</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_samplesize</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposb</name></name> <operator>+=</operator> <name><name>avi_pk</name><operator>.</operator><name>i_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_blockno</name></name> <operator>+=</operator> <ternary><condition><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_blocksize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator> <name><name>avi_pk</name><operator>.</operator><name>i_size</name></name> <operator>+</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_blocksize</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_blocksize</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposc</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Seek</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>f_ratio</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_accurate</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"seek requested: %"</literal><name>PRId64</name><literal type="string">" seconds %2.2f%%"</literal></expr></argument>,
<argument><expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_date</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>f_ratio</name> <operator>*</operator> <literal type="number">100</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_pos_backup</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_indexloaded</name></name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_avih_flags</name></name> <operator>&amp;</operator> <name>AVIF_HASINDEX</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_riff</name> <init>= <expr><call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ck_root</name></name></expr></argument>, <argument><expr><name>AVIFOURCC_RIFF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_riff</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>AVI_ChunkFetchIndexes</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>p_riff</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>i_ret</name></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Tell</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>i_pos_backup</name>
<operator>&amp;&amp;</operator> <call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_pos_backup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_avih_flags</name></name> <operator>&amp;</operator> <name>AVIF_MUSTUSEINDEX</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>AVI_IndexLoad</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_indexloaded</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_stream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_lastchunk_pos</name></name> <operator>&amp;&amp;</operator> 
<operator>!</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_avih_flags</name></name> <operator>&amp;</operator> <name>AVIF_ISINTERLEAVED</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"seeking without index at %2.2f%%"</literal>
<literal type="string">" only works for interleaved files"</literal></expr></argument>, <argument><expr><name>f_ratio</name> <operator>*</operator> <literal type="number">100</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failandresetpos</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>f_ratio</name> <operator>&gt;=</operator> <literal type="number">1.0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot seek so far !"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failandresetpos</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>f_ratio</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>f_ratio</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>f_ratio</name> <operator>*</operator> <call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_begin</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>p_track</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_track</name><operator>-&gt;</operator><name>b_activated</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <name>p_track</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_stream</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_track</name><operator>-&gt;</operator><name>b_eof</name></name></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>p_stream</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot find any selected stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failandresetpos</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><call><name>AVI_StreamChunkSet</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot seek"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failandresetpos</name>;</goto>
</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name>i_pos</name> <operator>&gt;=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposc</name></name></expr>]</index></name><operator>.</operator><name>i_pos</name> <operator>+</operator>
<name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposc</name></name></expr>]</index></name><operator>.</operator><name>i_length</name> <operator>+</operator> <literal type="number">8</literal></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>AVI_StreamChunkSet</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><name>i_stream</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposc</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot seek"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failandresetpos</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>i_date</name> <operator>=</operator> <call><name>AVI_GetPTS</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"estimate date %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_wanted</name> <init>= <expr><name>i_date</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start</name> <init>= <expr><name>i_date</name></expr></init></decl>;</decl_stmt>


<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_stream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_stream</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i_stream</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>b_activated</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>i</name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <call><name>AVI_TrackSeek</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_stream</name></expr></argument>, <argument><expr><name>i_wanted</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>b_eof</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name> <operator>||</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_start</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name>i_start</name></expr></argument>, <argument><expr><call><name>AVI_GetPTS</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_wanted</name> <operator>=</operator> <name>i_start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_time</name></name> <operator>=</operator> <name>i_start</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_accurate</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_NEXT_DISPLAY_TIME</name></expr></argument>, <argument><expr><name>VLC_TICK_0</name> <operator>+</operator> <name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"seek: %"</literal><name>PRId64</name><literal type="string">" seconds"</literal></expr></argument>, <argument><expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_time</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>failandresetpos</name>:</label>

<if_stmt><if>if <condition>( <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <name>i_pos_backup</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_pos_backup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"shouldn't yet be executed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>double</name></type> <name>ControlGetPosition</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_time</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>i64</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>i64</name> <operator>/</operator> <call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0.0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>
<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <call><name>ControlGetPosition</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i64</name> <operator>=</operator> <name>f</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<return>return <expr><call><name>Seek</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i64</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_time</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i64</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i64</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_time</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>ControlGetPosition</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call> <operator>*</operator>
<operator>(</operator><name>double</name><operator>)</operator> <name>i64</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_time</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>Seek</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i64</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_FPS</name></expr>:</case>
<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_scale</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>tk</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>tk</name><operator>-&gt;</operator><name>i_scale</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_META</name></expr>:</case>
<expr_stmt><expr><name>p_meta</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_meta_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_meta_Merge</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>meta</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_ATTACHMENTS</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachment</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_attach</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>input_attachment_t</name><operator>*</operator><operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_int</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ppp_attach</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachment</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>ppp_attach</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><operator>*</operator><name>ppp_attach</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_int</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_attachment</name></name></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_attachment</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppp_attach</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>vlc_input_attachment_Duplicate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachment</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>
<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>
<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>AVI_Rescale</name><parameter_list>( <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_value</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_timescale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_newscale</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_timescale</name> <operator>==</operator> <name>i_newscale</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_value</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_value</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_value</name> <operator>&lt;=</operator> <name>INT64_MAX</name> <operator>/</operator> <name>i_newscale</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>i_value</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_value</name> <operator>&gt;=</operator> <name>INT64_MIN</name> <operator>/</operator> <name>i_newscale</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>i_value</name> <operator>*</operator> <name>i_newscale</name> <operator>/</operator> <name>i_timescale</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>int64_t</name></type> <name>q</name> <init>= <expr><name>i_value</name> <operator>/</operator> <name>i_timescale</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>r</name> <init>= <expr><name>i_value</name> <operator>%</operator> <name>i_timescale</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>q</name> <operator>*</operator> <name>i_newscale</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>i_newscale</name> <operator>/</operator> <name>i_timescale</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>AVI_PTSToChunk</name><parameter_list>( <parameter><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>i_scale</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_pts</name> <operator>=</operator> <call><name>AVI_Rescale</name><argument_list>( <argument><expr><name>i_pts</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_scale</name></name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_pts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>AVI_PTSToByte</name><parameter_list>( <parameter><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>i_scale</name></name> <operator>||</operator> <operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_pts</name> <operator>=</operator> <call><name>AVI_Rescale</name><argument_list>( <argument><expr><name>i_pts</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_scale</name></name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_pts</name> <operator>/</operator> <name>CLOCK_FREQ</name> <operator>*</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>AVI_GetDPTS</name><parameter_list>( <parameter><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_count</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dpts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>i_rate</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>i_scale</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_dpts</name> <operator>=</operator> <call><name>AVI_Rescale</name><argument_list>( <argument><expr><name>CLOCK_FREQ</name> <operator>*</operator> <name>i_count</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_scale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>i_dpts</name> <operator>/</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i_dpts</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>AVI_GetPTS</name><parameter_list>( <parameter><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name> <operator>&amp;&amp;</operator> <name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name> <init>= <expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposc</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>idx</name> <operator>&gt;=</operator> <name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>i_lengthtotal</name>
<operator>+</operator> <name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>i_length</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_count</name> <operator>=</operator> <name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>i_lengthtotal</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>AVI_GetDPTS</name><argument_list>( <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>i_count</name> <operator>+</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_idxposb</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVI_GetDPTS</name><argument_list>( <argument><expr><name>tk</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_blockno</name></name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>AVI_GetDPTS</name><argument_list>( <argument><expr><name>tk</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposc</name></name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_StreamChunkFind</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_stream</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_packet_t</name></type> <name>avi_pk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>i_loop_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_lastchunk_pos</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_begin</name></name> <operator>+</operator> <literal type="number">12</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_lastchunk_pos</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>AVI_PacketNext</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_begin</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>AVI_PacketGetHeader</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avi_pk</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot get packet header"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>avi_pk</name><operator>.</operator><name>i_stream</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name> <operator>||</operator>
<operator>(</operator> <name><name>avi_pk</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>AUDIO_ES</name> <operator>&amp;&amp;</operator> <name><name>avi_pk</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>AVI_PacketNext</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>++</operator><name>i_loop_count</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"don't seem to find any data..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>tk_pk</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name><name>avi_pk</name><operator>.</operator><name>i_stream</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>avi_entry_t</name></type> <name>index</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name><name>avi_pk</name><operator>.</operator><name>i_fourcc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_flags</name></name> <operator>=</operator> <call><name>AVI_GetKeyFlag</name><argument_list>(<argument><expr><name><name>tk_pk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name><name>avi_pk</name><operator>.</operator><name>i_peek</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_pos</name></name> <operator>=</operator> <name><name>avi_pk</name><operator>.</operator><name>i_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_length</name></name> <operator>=</operator> <name><name>avi_pk</name><operator>.</operator><name>i_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_lengthtotal</name></name> <operator>=</operator> <name><name>index</name><operator>.</operator><name>i_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avi_index_Append</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk_pk</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_lastchunk_pos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>avi_pk</name><operator>.</operator><name>i_stream</name></name> <operator>==</operator> <name>i_stream</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>AVI_PacketNext</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_StreamChunkSet</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_stream</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_ck</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposc</name></name> <operator>=</operator> <name>i_ck</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ck</name> <operator>&gt;=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposc</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposc</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>AVI_StreamChunkFind</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_stream</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposc</name></name> <operator>&lt;</operator> <name>i_ck</name></expr> )</condition>;</do>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_StreamBytesSet</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_stream</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>i_byte</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>)</operator>
<operator>&amp;&amp;</operator><operator>(</operator> <name>i_byte</name> <operator>&lt;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_lengthtotal</name> <operator>+</operator>
<name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_length</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>i_idxposc</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposc</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_idxmax</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_idxmin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name>i_idxposc</name></expr>]</index></name><operator>.</operator><name>i_lengthtotal</name> <operator>&gt;</operator> <name>i_byte</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_idxmax</name> <operator>=</operator> <name>i_idxposc</name></expr> ;</expr_stmt>
<expr_stmt><expr><name>i_idxposc</name> <operator>=</operator> <operator>(</operator> <name>i_idxmin</name> <operator>+</operator> <name>i_idxposc</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name>i_idxposc</name></expr>]</index></name><operator>.</operator><name>i_lengthtotal</name> <operator>+</operator>
<name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name>i_idxposc</name></expr>]</index></name><operator>.</operator><name>i_length</name> <operator>&lt;=</operator> <name>i_byte</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_idxmin</name> <operator>=</operator> <name>i_idxposc</name></expr> ;</expr_stmt>
<expr_stmt><expr><name>i_idxposc</name> <operator>=</operator> <operator>(</operator><name>i_idxmax</name> <operator>+</operator> <name>i_idxposc</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposc</name></name> <operator>=</operator> <name>i_idxposc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposb</name></name> <operator>=</operator> <name>i_byte</name> <operator>-</operator>
<name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name>i_idxposc</name></expr>]</index></name><operator>.</operator><name>i_lengthtotal</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposc</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposc</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>AVI_StreamChunkFind</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_stream</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposc</name></name></expr>]</index></name><operator>.</operator><name>i_lengthtotal</name> <operator>+</operator>
<name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposc</name></name></expr>]</index></name><operator>.</operator><name>i_length</name> <operator>&lt;=</operator> <name>i_byte</name></expr> )</condition>;</do>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposb</name></name> <operator>=</operator> <name>i_byte</name> <operator>-</operator>
<name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposc</name></name></expr>]</index></name><operator>.</operator><name>i_lengthtotal</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_TrackSeek</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i_stream</name></decl></parameter>,
<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p_stream</name></cpp:macro> <cpp:value>p_sys-&gt;track[i_stream]</cpp:value></cpp:define>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_oldpts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_oldpts</name> <operator>=</operator> <call><name>AVI_GetPTS</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>i_samplesize</name></name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>AVI_StreamChunkSet</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><name>i_stream</name></expr></argument>,
<argument><expr><call><name>AVI_PTSToChunk</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_blockno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_idxposc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_blocksize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_blockno</name></name> <operator>+=</operator> <operator>(</operator> <name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_length</name> <operator>+</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_blocksize</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_blocksize</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_blockno</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><literal type="string">"old:%"</literal><name>PRId64</name><literal type="string">" %s new %"</literal><name>PRId64</name></expr></argument>,
<argument><expr><name>i_oldpts</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i_oldpts</name> <operator>&gt;</operator> <name>i_date</name></expr> ?</condition><then> <expr><literal type="string">"&gt;"</literal></expr> </then><else>: <expr><literal type="string">"&lt;"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>
<block>{<block_content>


<block>{<block_content>
<while>while<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposc</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposc</name></name></expr>]</index></name><operator>.</operator><name>i_flags</name> <operator>&amp;</operator>
<name>AVIIF_KEYFRAME</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>AVI_StreamChunkSet</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><name>i_stream</name></expr></argument>,
<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_idxposc</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
else
{
while( p_stream-&gt;i_idxposc &lt; p_stream-&gt;idx.i_size &amp;&amp;
!( p_stream-&gt;idx.p_entry[p_stream-&gt;i_idxposc].i_flags &amp;
AVIIF_KEYFRAME ) )
{
if( AVI_StreamChunkSet( p_demux,
i_stream,
p_stream-&gt;i_idxposc + 1 ) )
{
return VLC_EGENERIC;
}
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>AVI_StreamBytesSet</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><name>i_stream</name></expr></argument>,
<argument><expr><call><name>AVI_PTSToByte</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>p_stream</name></cpp:undef>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_GetKeyFlag</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_byte</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>( <expr><name>i_fourcc</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_DIV1</name></expr>:</case>





<if_stmt><if>if<condition>( <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><name>p_byte</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0x00000100</literal></expr> )</condition>
<block>{<block_content>

<return>return <expr><name>AVIIF_KEYFRAME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name><name>p_byte</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x06</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>AVIIF_KEYFRAME</name></expr></else></ternary></expr>;</return>

<case>case <expr><name>VLC_CODEC_DIV2</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_DIV3</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_WMV1</name></expr>:</case>



<return>return <expr><ternary><condition><expr><name><name>p_byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>AVIIF_KEYFRAME</name></expr></else></ternary></expr>;</return>
<case>case <expr><name>VLC_CODEC_MP4V</name></expr>:</case>




<if_stmt><if>if<condition>( <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><name>p_byte</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0x000001b6</literal></expr> )</condition>
<block>{<block_content>

<return>return <expr><name>AVIIF_KEYFRAME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name><name>p_byte</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>AVIIF_KEYFRAME</name></expr></else></ternary></expr>;</return>

<default>default:</default>

<return>return <expr><name>AVIIF_KEYFRAME</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>vlc_fourcc_t</name></type> <name>AVI_FourccGetCodec</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_cat</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<switch>switch<condition>( <expr><name>i_cat</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AUDIO_ES</name></expr>:</case>
<expr_stmt><expr><call><name>wf_tag_to_fourcc</name><argument_list>( <argument><expr><name>i_codec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_codec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i_codec</name></expr>;</return>
<case>case <expr><name>VIDEO_ES</name></expr>:</case>
<return>return <expr><call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name>i_cat</name></expr></argument>, <argument><expr><name>i_codec</name></expr></argument> )</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><name>VLC_CODEC_UNKNOWN</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>AVI_ParseStreamHeader</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_id</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pi_number</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name> <modifier>*</modifier></type><name>pi_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i_id</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i_id</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>c1</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c1</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal> <operator>||</operator> <name><name>c2</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c2</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_number</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>pi_type</name> <operator>=</operator> <name>UNKNOWN_ES</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_number</name> <operator>=</operator> <operator>(</operator><name>c1</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>c2</name> <operator>-</operator> <literal type="char">'0'</literal> <operator>)</operator></expr>;</expr_stmt>
<switch>switch<condition>( <expr><call><name>VLC_TWOCC</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i_id</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i_id</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AVITWOCC_wb</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pi_type</name> <operator>=</operator> <name>AUDIO_ES</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVITWOCC_dc</name></expr>:</case>
<case>case <expr><name>AVITWOCC_db</name></expr>:</case>
<case>case <expr><name>AVITWOCC_AC</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pi_type</name> <operator>=</operator> <name>VIDEO_ES</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVITWOCC_tx</name></expr>:</case>
<case>case <expr><name>AVITWOCC_sb</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pi_type</name> <operator>=</operator> <name>SPU_ES</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVITWOCC_pc</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pi_type</name> <operator>=</operator> <name>IGNORE_ES</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>*</operator><name>pi_type</name> <operator>=</operator> <name>UNKNOWN_ES</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_PacketGetHeader</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>avi_packet_t</name> <modifier>*</modifier></type><name>p_pk</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">16</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p_pk</name><operator>-&gt;</operator><name>i_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pk</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pk</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_pk</name><operator>-&gt;</operator><name>i_fourcc</name></name> <operator>==</operator> <name>AVIFOURCC_LIST</name> <operator>||</operator> <name><name>p_pk</name><operator>-&gt;</operator><name>i_fourcc</name></name> <operator>==</operator> <name>AVIFOURCC_RIFF</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_pk</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_pk</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_pk</name><operator>-&gt;</operator><name>i_peek</name></name></expr></argument>, <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_ParseStreamHeader</name><argument_list>( <argument><expr><name><name>p_pk</name><operator>-&gt;</operator><name>i_fourcc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pk</name><operator>-&gt;</operator><name>i_stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pk</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_PacketNext</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_packet_t</name></type> <name>avi_ck</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>AVI_PacketGetHeader</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avi_ck</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>avi_ck</name><operator>.</operator><name>i_fourcc</name></name> <operator>==</operator> <name>AVIFOURCC_LIST</name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>avi_ck</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>AVIFOURCC_rec</name> <operator>||</operator> <name><name>avi_ck</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>AVIFOURCC_movi</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_skip</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>avi_ck</name><operator>.</operator><name>i_fourcc</name></name> <operator>==</operator> <name>AVIFOURCC_RIFF</name> <operator>&amp;&amp;</operator>
<name><name>avi_ck</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>AVIFOURCC_AVIX</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_skip</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>avi_ck</name><operator>.</operator><name>i_size</name></name> <operator>&gt;</operator> <name>UINT32_MAX</name> <operator>-</operator> <literal type="number">9</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i_skip</name> <operator>=</operator> <call><name>__EVEN</name><argument_list>( <argument><expr><name><name>avi_ck</name><operator>.</operator><name>i_size</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_skip</name> <operator>&gt;</operator> <name>SSIZE_MAX</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_ret</name> <init>= <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_skip</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>i_ret</name> <operator>!=</operator> <name>i_skip</name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_PacketSearch</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_packet_t</name></type> <name>avi_pk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>i_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>AVI_PacketGetHeader</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avi_pk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>avi_pk</name><operator>.</operator><name>i_stream</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name><name>avi_pk</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name> <operator>||</operator> <name><name>avi_pk</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch<condition>( <expr><name><name>avi_pk</name><operator>.</operator><name>i_fourcc</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AVIFOURCC_JUNK</name></expr>:</case>
<case>case <expr><name>AVIFOURCC_LIST</name></expr>:</case>
<case>case <expr><name>AVIFOURCC_RIFF</name></expr>:</case>
<case>case <expr><name>AVIFOURCC_idx1</name></expr>:</case>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>++</operator><name>i_count</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"trying to resync..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>avi_index_Init</name><parameter_list>( <parameter><decl><type><name>avi_index_t</name> <modifier>*</modifier></type><name>p_index</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>p_entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>avi_index_Clean</name><parameter_list>( <parameter><decl><type><name>avi_index_t</name> <modifier>*</modifier></type><name>p_index</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_index</name><operator>-&gt;</operator><name>p_entry</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>avi_index_Append</name><parameter_list>( <parameter><decl><type><name>avi_index_t</name> <modifier>*</modifier></type><name>p_index</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_last_pos</name></decl></parameter>,
<parameter><decl><type><name>avi_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_last_pos</name> <operator>&lt;</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>i_pos</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_last_pos</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>i_pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>( <expr><name><name>p_index</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&gt;=</operator> <name><name>p_index</name><operator>-&gt;</operator><name>i_max</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_max</name></name> <operator>+=</operator> <literal type="number">16384</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>p_entry</name></name> <operator>=</operator> <call><name>realloc_or_free</name><argument_list>( <argument><expr><name><name>p_index</name><operator>-&gt;</operator><name>p_entry</name></name></expr></argument>,
<argument><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_max</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name><name>p_index</name><operator>-&gt;</operator><name>p_entry</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_index</name><operator>-&gt;</operator><name>p_entry</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_index</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_lengthtotal</name></name> <operator>=</operator>
<name><name>p_index</name><operator>-&gt;</operator><name>p_entry</name><index>[<expr><name><name>p_index</name><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_length</name> <operator>+</operator>
<name><name>p_index</name><operator>-&gt;</operator><name>p_entry</name><index>[<expr><name><name>p_index</name><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_lengthtotal</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_lengthtotal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>p_entry</name><index>[<expr><name><name>p_index</name><operator>-&gt;</operator><name>i_size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p_entry</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_IndexFind_idx1</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,
<parameter><decl><type><name>avi_chunk_idx1_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_idx1</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_offset</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_riff</name> <init>= <expr><call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ck_root</name></name></expr></argument>, <argument><expr><name>AVIFOURCC_RIFF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_idx1_t</name> <modifier>*</modifier></type><name>p_idx1</name> <init>= <expr><call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_riff</name></expr></argument>, <argument><expr><name>AVIFOURCC_idx1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_idx1</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot find idx1 chunk, no index defined"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp_idx1</name> <operator>=</operator> <name>p_idx1</name></expr>;</expr_stmt>






<decl_stmt><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_movi</name> <init>= <expr><call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_riff</name></expr></argument>, <argument><expr><name>AVIFOURCC_movi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_movi</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_first_pos</name> <init>= <expr><name>UINT64_MAX</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_idx1</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>p_idx1</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_first_pos</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_first_pos</name></expr></argument>, <argument><expr><name><name>p_idx1</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_movi_content</name> <init>= <expr><name><name>p_movi</name><operator>-&gt;</operator><name>i_chunk_pos</name></name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_first_pos</name> <operator>&lt;</operator> <name>i_movi_content</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_offset</name> <operator>=</operator> <name>i_movi_content</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name> <operator>&amp;&amp;</operator> <name>i_first_pos</name> <operator>&lt;</operator> <name>UINT64_MAX</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_movi_content</name> <operator>+</operator> <name>i_first_pos</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
<operator>(</operator> <operator>!</operator><call><name>isdigit</name><argument_list>( <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isdigit</name><argument_list>( <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>isalpha</name><argument_list>( <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isalpha</name><argument_list>( <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_offset</name> <operator>=</operator> <name>i_movi_content</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_idx1</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr> )</condition>
<block>{<block_content>


<decl_stmt><decl><type><name>size_t</name></type> <name>i_dataend</name> <init>= <expr><operator>*</operator><name>pi_offset</name> <operator>+</operator> <name><name>p_idx1</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name><name>p_idx1</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pos</name> <operator>+</operator>
<name><name>p_idx1</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name><name>p_idx1</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_length</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_dataend</name> <operator>&gt;</operator> <name><name>p_movi</name><operator>-&gt;</operator><name>i_chunk_pos</name></name> <operator>+</operator> <name><name>p_movi</name><operator>-&gt;</operator><name>i_chunk_size</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pi_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pi_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_IndexLoad_idx1</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,
<parameter><decl><type><name>avi_index_t</name></type> <name><name>p_index</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_last_offset</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>avi_chunk_idx1_t</name> <modifier>*</modifier></type><name>p_idx1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>AVI_IndexFind_idx1</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_idx1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_offset</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_indexloaded</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <name><name>p_idx1</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>i_cat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_stream</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVI_ParseStreamHeader</name><argument_list>( <argument><expr><name><name>p_idx1</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_stream</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>i_cat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_stream</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>i_cat</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_stream</name></expr>]</index></name><operator>-&gt;</operator><name><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>||</operator> <name>i_cat</name> <operator>==</operator> <name>UNKNOWN_ES</name> <operator>)</operator></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_entry_t</name></type> <name>index</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name><name>p_idx1</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_flags</name></name> <operator>=</operator> <name><name>p_idx1</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_flags</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><name>AVIIF_FIXKEYFRAME</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_pos</name></name> <operator>=</operator> <name><name>p_idx1</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_pos</name> <operator>+</operator> <name>i_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_idx1</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_lengthtotal</name></name> <operator>=</operator> <name><name>index</name><operator>.</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avi_index_Append</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_index</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></argument>, <argument><expr><name>pi_last_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_index</name><operator>&lt;</operator> <name><name>p_idx1</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>&amp;&amp;</operator> <name>i_index</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_index</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>-&gt;</operator><name>i_samplesize</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_length</name> <operator>=</operator> <call><name>AVI_GetDPTS</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_index</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p_index</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name><name>p_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lengthtotal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_length</name> <operator>=</operator> <call><name>AVI_GetDPTS</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"index stream %d @%ld time %ld"</literal></expr></argument>, <argument><expr><name>i_index</name></expr></argument>,
<argument><expr><name><name>p_index</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name><name>p_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pos</name></expr></argument>, <argument><expr><name>i_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__Parse_indx</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>avi_index_t</name> <modifier>*</modifier></type><name>p_index</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_max_offset</name></decl></parameter>,
<parameter><decl><type><name>avi_chunk_indx_t</name> <modifier>*</modifier></type><name>p_indx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_entry_t</name></type> <name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_indexloaded</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"loading subindex(0x%x) %d entries"</literal></expr></argument>, <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_indextype</name></name></expr></argument>, <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_entriesinuse</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_indexsubtype</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_indx</name><operator>-&gt;</operator><name>i_entriesinuse</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name><name>p_indx</name><operator>-&gt;</operator><name>i_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_flags</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>std</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>AVIIF_KEYFRAME</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_pos</name></name> <operator>=</operator> <name><name>p_indx</name><operator>-&gt;</operator><name>i_baseoffset</name></name> <operator>+</operator> <name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>std</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_offset</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>std</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size</name><operator>&amp;</operator><literal type="number">0x7fffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_lengthtotal</name></name> <operator>=</operator> <name><name>index</name><operator>.</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avi_index_Append</name><argument_list>( <argument><expr><name>p_index</name></expr></argument>, <argument><expr><name>pi_max_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_indexsubtype</name></name> <operator>==</operator> <name>AVI_INDEX_2FIELD</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_indx</name><operator>-&gt;</operator><name>i_entriesinuse</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name><name>p_indx</name><operator>-&gt;</operator><name>i_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_flags</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>field</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>AVIIF_KEYFRAME</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_pos</name></name> <operator>=</operator> <name><name>p_indx</name><operator>-&gt;</operator><name>i_baseoffset</name></name> <operator>+</operator> <name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>field</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_offset</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>field</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_lengthtotal</name></name> <operator>=</operator> <name><name>index</name><operator>.</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avi_index_Append</name><argument_list>( <argument><expr><name>p_index</name></expr></argument>, <argument><expr><name>pi_max_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unknown subtype index(0x%x)"</literal></expr></argument>, <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_indexsubtype</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AVI_IndexLoad_indx</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,
<parameter><decl><type><name>avi_index_t</name></type> <name><name>p_index</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_last_offset</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_riff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_hdrl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_riff</name> <operator>=</operator> <call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ck_root</name></name></expr></argument>, <argument><expr><name>AVIFOURCC_RIFF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_hdrl</name> <operator>=</operator> <call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_riff</name></expr></argument>, <argument><expr><name>AVIFOURCC_hdrl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_stream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_stream</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i_stream</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_strl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_indx_t</name> <modifier>*</modifier></type><name>p_indx</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p_stream</name></cpp:macro> <cpp:value>p_sys-&gt;track[i_stream]</cpp:value></cpp:define>
<expr_stmt><expr><name>p_strl</name> <operator>=</operator> <call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_hdrl</name></expr></argument>, <argument><expr><name>AVIFOURCC_strl</name></expr></argument>, <argument><expr><name>i_stream</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_indx</name> <operator>=</operator> <call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_strl</name></expr></argument>, <argument><expr><name>AVIFOURCC_indx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_indx</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_odml</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot find indx (misdetect/broken OpenDML "</literal>
<literal type="string">"file?)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_indextype</name></name> <operator>==</operator> <name>AVI_INDEX_OF_CHUNKS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>__Parse_indx</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_index</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></argument>, <argument><expr><name>pi_last_offset</name></expr></argument>, <argument><expr><name>p_indx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_indextype</name></name> <operator>==</operator> <name>AVI_INDEX_OF_INDEXES</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>avi_chunk_t</name></type> <name>ck_sub</name></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_indx</name><operator>-&gt;</operator><name>i_entriesinuse</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>,
<argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>super</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr></argument> )</argument_list></call> <operator>||</operator>
<call><name>AVI_ChunkRead</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ck_sub</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>ck_sub</name><operator>.</operator><name>indx</name><operator>.</operator><name>i_indextype</name></name> <operator>==</operator> <name>AVI_INDEX_OF_CHUNKS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__Parse_indx</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_index</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></argument>, <argument><expr><name>pi_last_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ck_sub</name><operator>.</operator><name>indx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>AVI_ChunkClean</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ck_sub</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unknown type index(0x%x)"</literal></expr></argument>, <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_indextype</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>p_stream</name></cpp:undef>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AVI_IndexLoad</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name> <operator>&lt;=</operator> <literal type="number">100</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>avi_index_t</name></type> <name><name>p_idx_indx</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_index_t</name></type> <name><name>p_idx_idx1</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>]</index></name></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>avi_index_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_idx_indx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avi_index_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_idx_idx1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_indx_last_pos</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_lastchunk_pos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_idx1_last_pos</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_lastchunk_pos</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVI_IndexLoad_indx</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_idx_indx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_indx_last_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_odml</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AVI_IndexLoad_idx1</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_idx_idx1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_idx1_last_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_idx_indx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size</name> <operator>&gt;</operator> <name><name>p_idx_idx1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"selected ODML index for stream[%u]"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>idx</name> <operator>=</operator> <name><name>p_idx_indx</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avi_index_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_idx_idx1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"selected standard index for stream[%u]"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>idx</name> <operator>=</operator> <name><name>p_idx_idx1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avi_index_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_idx_indx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_lastchunk_pos</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>i_indx_last_pos</name></expr></argument>, <argument><expr><name>i_idx1_last_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_index_t</name> <modifier>*</modifier></type><name>p_index</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>idx</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>b_key</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>!</operator><name>b_key</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name><name>p_index</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>b_key</name> <operator>=</operator> <name><name>p_index</name><operator>-&gt;</operator><name>p_entry</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_flags</name> <operator>&amp;</operator> <name>AVIIF_KEYFRAME</name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_key</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"no key frame set for track %u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_index</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>p_entry</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_flags</name> <operator>|=</operator> <name>AVIIF_KEYFRAME</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"stream[%d] created %d index entries"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AVI_IndexCreate</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_riff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_movi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_movi_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dialog_update</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_dialog_id</name> <modifier>*</modifier></type><name>p_dialog_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_riff</name> <operator>=</operator> <call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ck_root</name></name></expr></argument>, <argument><expr><name>AVIFOURCC_RIFF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_movi</name> <operator>=</operator> <call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_riff</name></expr></argument>, <argument><expr><name>AVIFOURCC_movi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_movi</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot find p_movi"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i_stream</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_stream</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i_stream</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avi_index_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_stream</name></expr>]</index></name><operator>-&gt;</operator><name>idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>i_movi_end</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>p_movi</name><operator>-&gt;</operator><name>i_chunk_pos</name></name> <operator>+</operator> <name><name>p_movi</name><operator>-&gt;</operator><name>i_chunk_size</name></name><operator>)</operator></expr></argument>,
<argument><expr><call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_movi</name><operator>-&gt;</operator><name>i_chunk_pos</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"creating index from LIST-movi, will take time !"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>i_dialog_update</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">10000000</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_dialog_id</name> <operator>=</operator>
<call><name>vlc_dialog_display_progress</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cancel"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Broken or missing AVI Index"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Fixing AVI Index..."</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_packet_t</name></type> <name>pk</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name>p_dialog_id</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name>i_dialog_update</name> <operator>&gt;</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>vlc_dialog_is_cancelled</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_dialog_id</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_current</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f_size</name> <init>= <expr><call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f_pos</name> <init>= <expr><name>f_current</name> <operator>/</operator> <name>f_size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_dialog_update_progress</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_dialog_id</name></expr></argument>, <argument><expr><name>f_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_dialog_update</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>AVI_PacketGetHeader</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pk</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pk</name><operator>.</operator><name>i_stream</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name> <operator>&amp;&amp;</operator>
<name><name>pk</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name><name>pk</name><operator>.</operator><name>i_stream</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name><name>pk</name><operator>.</operator><name>i_stream</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>avi_entry_t</name></type> <name>index</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name><name>pk</name><operator>.</operator><name>i_fourcc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_flags</name></name> <operator>=</operator> <call><name>AVI_GetKeyFlag</name><argument_list>(<argument><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name><name>pk</name><operator>.</operator><name>i_peek</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_pos</name></name> <operator>=</operator> <name><name>pk</name><operator>.</operator><name>i_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_length</name></name> <operator>=</operator> <name><name>pk</name><operator>.</operator><name>i_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>index</name><operator>.</operator><name>i_lengthtotal</name></name> <operator>=</operator> <name><name>pk</name><operator>.</operator><name>i_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avi_index_Append</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_movi_lastchunk_pos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>pk</name><operator>.</operator><name>i_fourcc</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>AVIFOURCC_idx1</name></expr>:</case>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_odml</name></name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_sysx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p_sysx</name> <operator>=</operator> <call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ck_root</name></name></expr></argument>,
<argument><expr><name>AVIFOURCC_RIFF</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"looking for new RIFF chunk"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sysx</name> <operator>||</operator> <call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>,
<argument><expr><name><name>p_sysx</name><operator>-&gt;</operator><name>i_chunk_pos</name></name> <operator>+</operator> <literal type="number">24</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>print_stat</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<goto>goto <name>print_stat</name>;</goto>

<case>case <expr><name>AVIFOURCC_RIFF</name></expr>:</case>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"new RIFF chunk found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVIFOURCC_rec</name></expr>:</case>
<case>case <expr><name>AVIFOURCC_JUNK</name></expr>:</case>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"need resync, probably broken avi"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>AVI_PacketSearch</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"lost sync, abord index creation"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>print_stat</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_odml</name></name> <operator>&amp;&amp;</operator> <name><name>pk</name><operator>.</operator><name>i_pos</name></name> <operator>+</operator> <name><name>pk</name><operator>.</operator><name>i_size</name></name> <operator>&gt;=</operator> <name>i_movi_end</name> <operator>)</operator> <operator>||</operator>
<call><name>AVI_PacketNext</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<label><name>print_stat</name>:</label>
<if_stmt><if>if<condition>( <expr><name>p_dialog_id</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_dialog_release</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_dialog_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i_stream</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_stream</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i_stream</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"stream[%d] creating %d index entries"</literal></expr></argument>,
<argument><expr><name>i_stream</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i_stream</name></expr>]</index></name><operator>-&gt;</operator><name><name>idx</name><operator>.</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>AVI_MetaLoad</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,
<parameter><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_riff</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_avih_t</name> <modifier>*</modifier></type><name>p_avih</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>meta</name></name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_meta</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s%s%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_avih</name><operator>-&gt;</operator><name>i_flags</name></name><operator>&amp;</operator><name>AVIF_HASINDEX</name></expr> ?</condition><then> <expr><literal type="string">" HAS_INDEX"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_avih</name><operator>-&gt;</operator><name>i_flags</name></name><operator>&amp;</operator><name>AVIF_MUSTUSEINDEX</name></expr> ?</condition><then> <expr><literal type="string">" MUST_USE_INDEX"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_avih</name><operator>-&gt;</operator><name>i_flags</name></name><operator>&amp;</operator><name>AVIF_ISINTERLEAVED</name></expr> ?</condition><then> <expr><literal type="string">" IS_INTERLEAVED"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>p_avih</name><operator>-&gt;</operator><name>i_flags</name></name><operator>&amp;</operator><name>AVIF_TRUSTCKTYPE</name></expr> ?</condition><then> <expr><literal type="string">" TRUST_CKTYPE"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vlc_meta_SetSetting</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_info</name> <init>= <expr><call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_riff</name></expr></argument>, <argument><expr><name>AVIFOURCC_INFO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_info</name></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>
}</block> <decl><name><name>p_dsc</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>AVIFOURCC_IART</name></expr>, <expr><name>vlc_meta_Artist</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AVIFOURCC_ICMT</name></expr>, <expr><name>vlc_meta_Description</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AVIFOURCC_ICOP</name></expr>, <expr><name>vlc_meta_Copyright</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AVIFOURCC_IGNR</name></expr>, <expr><name>vlc_meta_Genre</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AVIFOURCC_INAM</name></expr>, <expr><name>vlc_meta_Title</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AVIFOURCC_ICRD</name></expr>, <expr><name>vlc_meta_Date</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AVIFOURCC_ILNG</name></expr>, <expr><name>vlc_meta_Language</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AVIFOURCC_IRTD</name></expr>, <expr><name>vlc_meta_Rating</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AVIFOURCC_IWEB</name></expr>, <expr><name>vlc_meta_URL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AVIFOURCC_IPRT</name></expr>, <expr><name>vlc_meta_TrackNumber</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AVIFOURCC_IFRM</name></expr>, <expr><name>vlc_meta_TrackTotal</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_dsc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_id</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_chunk_STRING_t</name> <modifier>*</modifier></type><name>p_strz</name> <init>= <expr><call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_info</name></expr></argument>, <argument><expr><name><name>p_dsc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_strz</name> <operator>||</operator> <operator>!</operator><name><name>p_strz</name><operator>-&gt;</operator><name>p_str</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><call><name>FromACP</name><argument_list>( <argument><expr><name><name>p_strz</name><operator>-&gt;</operator><name>p_str</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_value</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_value</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_Set</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name><name>p_dsc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_type</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_extra</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AVIFOURCC_IARL</name></expr>, <expr><name>AVIFOURCC_ICMS</name></expr>, <expr><name>AVIFOURCC_ICRP</name></expr>, <expr><name>AVIFOURCC_IDIM</name></expr>, <expr><name>AVIFOURCC_IDPI</name></expr>,
<expr><name>AVIFOURCC_IENG</name></expr>, <expr><name>AVIFOURCC_IKEY</name></expr>, <expr><name>AVIFOURCC_ILGT</name></expr>, <expr><name>AVIFOURCC_IMED</name></expr>, <expr><name>AVIFOURCC_IPLT</name></expr>,
<expr><name>AVIFOURCC_IPRD</name></expr>, <expr><name>AVIFOURCC_ISBJ</name></expr>, <expr><name>AVIFOURCC_ISFT</name></expr>, <expr><name>AVIFOURCC_ISHP</name></expr>, <expr><name>AVIFOURCC_ISRC</name></expr>,
<expr><name>AVIFOURCC_ISRF</name></expr>, <expr><name>AVIFOURCC_ITCH</name></expr>, <expr><name>AVIFOURCC_ISMP</name></expr>, <expr><name>AVIFOURCC_IDIT</name></expr>, <expr><name>AVIFOURCC_ISGN</name></expr>,
<expr><name>AVIFOURCC_IWRI</name></expr>, <expr><name>AVIFOURCC_IPRO</name></expr>, <expr><name>AVIFOURCC_ICNM</name></expr>, <expr><name>AVIFOURCC_IPDS</name></expr>, <expr><name>AVIFOURCC_IEDT</name></expr>,
<expr><name>AVIFOURCC_ICDS</name></expr>, <expr><name>AVIFOURCC_IMUS</name></expr>, <expr><name>AVIFOURCC_ISTD</name></expr>, <expr><name>AVIFOURCC_IDST</name></expr>, <expr><name>AVIFOURCC_ICNT</name></expr>,
<expr><name>AVIFOURCC_ISTR</name></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_extra</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_chunk_STRING_t</name> <modifier>*</modifier></type><name>p_strz</name> <init>= <expr><call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_info</name></expr></argument>, <argument><expr><name><name>p_extra</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_strz</name> <operator>||</operator> <operator>!</operator><name><name>p_strz</name><operator>-&gt;</operator><name>p_str</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><call><name>FromACP</name><argument_list>( <argument><expr><name><name>p_strz</name><operator>-&gt;</operator><name>p_str</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_value</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_value</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name><name>p_strz</name><operator>-&gt;</operator><name>p_type</name></name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AVI_DvHandleAudio</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frame</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_offset</name> <init>= <expr><literal type="number">80</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">80</literal> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>i_offset</name> <operator>+</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_frame</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0x50</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dv_get_audio_format</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_frame</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>p_es_dv_audio</name></name> <operator>&amp;&amp;</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_dv_audio_rate</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>p_es_dv_audio</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>p_es_dv_audio</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>p_es_dv_audio</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>p_es_dv_audio</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_dv_audio_rate</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frame_audio</name> <init>= <expr><call><name>dv_extract_audio</name><argument_list>( <argument><expr><name>p_frame</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_frame_audio</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>p_es_dv_audio</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>p_es_dv_audio</name></name></expr></argument>, <argument><expr><name>p_frame_audio</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_frame_audio</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>AVI_ExtractSubtitle</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_stream</name></decl></parameter>,
<parameter><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_strl</name></decl></parameter>,
<parameter><decl><type><name>avi_chunk_STRING_t</name> <modifier>*</modifier></type><name>p_strn</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>p_attachment</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_description</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_indx_t</name> <modifier>*</modifier></type><name>p_indx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_indx</name> <operator>=</operator> <call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_strl</name></expr></argument>, <argument><expr><name>AVIFOURCC_indx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>avi_chunk_t</name></type> <name>ck</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_size</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_indx</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_indextype</name></name> <operator>==</operator> <name>AVI_INDEX_OF_INDEXES</name> <operator>&amp;&amp;</operator>
<name><name>p_indx</name><operator>-&gt;</operator><name>i_entriesinuse</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>super</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_offset</name></expr></argument> )</argument_list></call> <operator>||</operator>
<call><name>AVI_ChunkRead</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ck</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_indx</name> <operator>=</operator> <operator>&amp;</operator><name><name>ck</name><operator>.</operator><name>indx</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_indextype</name></name> <operator>!=</operator> <name>AVI_INDEX_OF_CHUNKS</name> <operator>||</operator>
<name><name>p_indx</name><operator>-&gt;</operator><name>i_entriesinuse</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
<name><name>p_indx</name><operator>-&gt;</operator><name>i_indexsubtype</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_position</name> <operator>=</operator> <name><name>p_indx</name><operator>-&gt;</operator><name>i_baseoffset</name></name> <operator>+</operator>
<name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>std</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_offset</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_size</name> <operator>=</operator> <operator>(</operator><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>std</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_size</name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>avi_chunk_idx1_t</name> <modifier>*</modifier></type><name>p_idx1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>AVI_IndexFind_idx1</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_idx1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_offset</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_idx1</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>idx1_entry_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>&amp;</operator><name><name>p_idx1</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>i_cat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_stream_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVI_ParseStreamHeader</name><argument_list>( <argument><expr><name><name>e</name><operator>-&gt;</operator><name>i_fourcc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_stream_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_cat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_cat</name> <operator>==</operator> <name>SPU_ES</name> <operator>&amp;&amp;</operator> <name>i_stream_idx</name> <operator>==</operator> <name>i_stream</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_position</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name>i_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>i_length</name></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&gt;</operator> <literal type="number">10000000</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Attached subtitle too big: %u"</literal></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_position</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'t'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'x'</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_size</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&lt;</operator> <literal type="number">11</literal> <operator>||</operator> <call><name>memcmp</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"GAB2"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>||</operator>
<name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal> <operator>||</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0x2</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_name</name> <init>= <expr><call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><literal type="number">11</literal> <operator>+</operator> <name>i_size</name> <operator>&lt;=</operator> <name>i_name</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_name</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_description</name> <operator>=</operator> <call><name>FromCharset</name><argument_list>( <argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">11</literal> <operator>+</operator> <name>i_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_size</name> <operator>-=</operator> <literal type="number">11</literal> <operator>+</operator> <name>i_name</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>||</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0x04</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_payload</name> <init>= <expr><call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>+</operator> <name>i_payload</name> <operator>||</operator> <name>i_payload</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_size</name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_description</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_description</name> <operator>=</operator> <ternary><condition><expr><name>p_strn</name> <operator>&amp;&amp;</operator> <name><name>p_strn</name><operator>-&gt;</operator><name>p_str</name></name></expr> ?</condition><then> <expr><call><name>FromACP</name><argument_list>( <argument><expr><name><name>p_strn</name><operator>-&gt;</operator><name>p_str</name></name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"subtitle%d.srt"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachment</name></name></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_attachment</name> <operator>=</operator> <call><name>vlc_input_attachment_New</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>,
<argument><expr><literal type="string">"application/x-srt"</literal></expr></argument>,
<argument><expr><name>psz_description</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_attachment</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_attachment</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachment</name></name></expr></argument>, <argument><expr><name>p_attachment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_description</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_attachment</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Loaded an embedded subtitle"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Failed to load an embedded subtitle"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_indx</name> <operator>==</operator> <operator>&amp;</operator><name><name>ck</name><operator>.</operator><name>indx</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AVI_ChunkClean</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ck</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_TrackStopFinishedStreams</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_end</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_idxposc</name></name> <operator>&gt;=</operator> <name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>b_eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>b_end</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return<expr><operator>(</operator> <name>b_end</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>AVI_MovieGetLength</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_maxlength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_track</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>avi_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name></name></expr> )</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_samplesize</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_length</name> <operator>=</operator> <call><name>AVI_GetDPTS</name><argument_list>( <argument><expr><name>tk</name></expr></argument>,
<argument><expr><name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_lengthtotal</name> <operator>+</operator>
<name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i_length</name> <operator>=</operator> <call><name>AVI_GetDPTS</name><argument_list>( <argument><expr><name>tk</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><literal type="string">"stream[%d] length:%"</literal><name>PRId64</name><literal type="string">" (based on index)"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>,
<argument><expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_length</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_maxlength</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>i_maxlength</name></expr></argument>, <argument><expr><name>i_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>i_maxlength</name></expr>;</return>
</block_content>}</block></function>
</unit>
