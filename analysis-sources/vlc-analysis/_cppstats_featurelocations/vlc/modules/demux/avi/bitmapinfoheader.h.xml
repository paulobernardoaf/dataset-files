<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\avi\bitmapinfoheader.h">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codecs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BI_RGB</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BI_RLE8</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BI_RLE4</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BI_BITFIELDS</name></cpp:macro> <cpp:value>0x0003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BI_CMYK</name></cpp:macro> <cpp:value>0x000B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BI_CMYKRLE8</name></cpp:macro> <cpp:value>0x000C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BI_CMYKRLE4</name></cpp:macro> <cpp:value>0x000D</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_rmask</name></decl>, <decl><type ref="prev"/><name>i_gmask</name></decl>, <decl><type ref="prev"/><name>i_bmask</name></decl>;</decl_stmt>
}</block> <decl><name><name>bitmap_rgb_masks</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>VLC_CODEC_RGB15</name></expr>, <expr><literal type="number">0x7c00</literal></expr>,
<expr><literal type="number">0x03e0</literal></expr>,
<expr><literal type="number">0x001f</literal></expr>, }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_RGB16</name></expr>, <expr><literal type="number">0xf800</literal></expr>,
<expr><literal type="number">0x07e0</literal></expr>,
<expr><literal type="number">0x001f</literal></expr>, }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_RGB24</name></expr>, <expr><literal type="number">0x000000ff</literal></expr>, 
<expr><literal type="number">0x0000ff00</literal></expr>,
<expr><literal type="number">0x00ff0000</literal></expr>, }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_RGB32</name></expr>, <expr><literal type="number">0x0000ff00</literal></expr>, 
<expr><literal type="number">0x00ff0000</literal></expr>,
<expr><literal type="number">0xff000000U</literal></expr>, }</block></expr>,
<expr><block>{ <expr><name>VLC_CODEC_RGBA</name></expr>, <expr><literal type="number">0x0000ff00</literal></expr>, 
<expr><literal type="number">0x00ff0000</literal></expr>,
<expr><literal type="number">0xff000000U</literal></expr>, }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>SetBitmapRGBMasks</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter>, <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>bitmap_rgb_masks</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>bitmap_rgb_masks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec</name> <operator>==</operator> <name>i_fourcc</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_rmask</name></name> <operator>=</operator> <name><name>bitmap_rgb_masks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_rmask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_gmask</name></name> <operator>=</operator> <name><name>bitmap_rgb_masks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_gmask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_bmask</name></name> <operator>=</operator> <name><name>bitmap_rgb_masks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bmask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>i_fourcc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>video_format_FixRgb</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>MatchBitmapRGBMasks</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>bitmap_rgb_masks</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>bitmap_rgb_masks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec</name> <operator>==</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<return>return <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_rmask</name></name> <operator>==</operator> <name><name>bitmap_rgb_masks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_rmask</name> <operator>&amp;&amp;</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_gmask</name></name> <operator>==</operator> <name><name>bitmap_rgb_masks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_gmask</name> <operator>&amp;&amp;</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_bmask</name></name> <operator>==</operator> <name><name>bitmap_rgb_masks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bmask</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>bitmapinfoheader_properties</name>
<block>{
<decl_stmt><decl><type><name>bool</name></type> <name>b_flipped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i_stride</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ParseBitmapInfoHeader</name><parameter_list>( <parameter><decl><type><name>VLC_BITMAPINFOHEADER</name> <modifier>*</modifier></type><name>p_bih</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_bih</name></decl></parameter>,
<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bitmapinfoheader_properties</name></name> <modifier>*</modifier></type><name>p_props</name></decl></parameter> )</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_bihextra</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p_bih</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_bihextra</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>i_bih</name> <operator>&lt;=</operator> <name>INT_MAX</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VLC_BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>
<name>i_bih</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VLC_BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_bihextra</name> <operator>=</operator> <name>i_bih</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VLC_BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_bihextra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name> <operator>==</operator> <name>BI_RGB</name> <operator>||</operator>
<name><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name> <operator>==</operator> <name>BI_BITFIELDS</name></expr> )</condition>
<block>{<block_content>
<switch>switch<condition>( <expr><name><name>p_bih</name><operator>-&gt;</operator><name>biBitCount</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="number">32</literal></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_RGB32</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetBitmapRGBMasks</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_RGB24</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>SetBitmapRGBMasks</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_RGB16</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>SetBitmapRGBMasks</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case> 
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_RGB15</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetBitmapRGBMasks</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> 
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_I410</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<if_stmt><if>if <condition>( <expr><name><name>p_bih</name><operator>-&gt;</operator><name>biClrUsed</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_RGBP</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_GREY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if<condition>( <expr><name><name>p_bih</name><operator>-&gt;</operator><name>biClrUsed</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_RGBP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name> <operator>==</operator> <name>BI_BITFIELDS</name></expr> )</condition> 
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name>i_bihextra</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_rmask</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_bihextra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_gmask</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_bihextra</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_bmask</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_bihextra</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_bihextra</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr> )</condition> 
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_alpha</name> <init>= <expr><call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_bihextra</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_RGB32</name> <operator>&amp;&amp;</operator> <name>i_alpha</name> <operator>==</operator> <literal type="number">0xFF</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_BGRA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SetBitmapRGBMasks</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_RGBP</name></expr> )</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>video_palette_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>p_palette</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name>i_bihextra</name><operator>/</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>p_bihextra</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>k</name><operator>+</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>i_stride</name></name> <operator>=</operator> <name><name>p_bih</name><operator>-&gt;</operator><name>biWidth</name></name> <operator>*</operator> <operator>(</operator><name><name>p_bih</name><operator>-&gt;</operator><name>biBitCount</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>( <expr><name><name>p_bih</name><operator>-&gt;</operator><name>biHeight</name></name> <operator>&lt;=</operator> <name>INT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>b_flipped</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>( <expr><name>i_bihextra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_bihextra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <name>i_bihextra</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name>p_bihextra</name></expr></argument>, <argument><expr><name>i_bihextra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>SetBitmapRGBMasks</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>video_format_Setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>,
<argument><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biWidth</name></name></expr></argument>, <argument><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biHeight</name></name></expr></argument>,
<argument><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biWidth</name></name></expr></argument>, <argument><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biHeight</name></name></expr></argument>,
<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>&gt;</operator> <name>INT32_MAX</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name><name>p_bih</name><operator>-&gt;</operator><name>biHeight</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VLC_BITMAPINFOHEADER</name> <modifier>*</modifier></type> <name>CreateBitmapInfoHeader</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_total</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>biBitCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>biCompression</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_has_alpha</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>VLC_CODEC_RGB32</name></expr>:</case>
<expr_stmt><expr><name>biBitCount</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>biCompression</name> <operator>=</operator> <ternary><condition><expr><call><name>MatchBitmapRGBMasks</name><argument_list>( <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><name>BI_RGB</name></expr> </then><else>: <expr><name>BI_BITFIELDS</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_BGRA</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_RGBA</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_ARGB</name></expr>:</case>
<expr_stmt><expr><name>biBitCount</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>biCompression</name> <operator>=</operator> <ternary><condition><expr><call><name>MatchBitmapRGBMasks</name><argument_list>( <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><name>BI_RGB</name></expr> </then><else>: <expr><name>BI_BITFIELDS</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>b_has_alpha</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_RGB24</name></expr>:</case>
<expr_stmt><expr><name>biBitCount</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>biCompression</name> <operator>=</operator> <name>BI_RGB</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_RGB16</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_RGB15</name></expr>:</case>
<expr_stmt><expr><name>biBitCount</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>biCompression</name> <operator>=</operator> <name>BI_BITFIELDS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_RGBP</name></expr>:</case>
<case>case <expr><name>VLC_CODEC_GREY</name></expr>:</case>
<expr_stmt><expr><name>biBitCount</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>biCompression</name> <operator>=</operator> <name>BI_RGB</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VLC_CODEC_MP4V</name></expr>:</case>
<expr_stmt><expr><name>biCompression</name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>biCompression</name> <operator>=</operator> <ternary><condition><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_original_fourcc</name></name></expr>
?</condition><then> <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_original_fourcc</name></name></expr> </then><else>: <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_bih_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_bmiColors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>biCompression</name> <operator>==</operator> <name>BI_BITFIELDS</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_bmiColors</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>b_has_alpha</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_RGBP</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i_bmiColors</name> <operator>=</operator> <ternary><condition><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>p_palette</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i_bih_extra</name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>VLC_BITMAPINFOHEADER</name> <modifier>*</modifier></type><name>p_bih</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VLC_BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<name>i_bih_extra</name> <operator>+</operator> <name>i_bmiColors</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_bih</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bih_extra</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p_bih</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bmiColors</name> <init>= <expr><name>p_bih_extra</name> <operator>+</operator> <name>i_bih_extra</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biClrUsed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>biCompression</name> <operator>==</operator> <name>BI_BITFIELDS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_bmiColors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_rmask</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_bmiColors</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_gmask</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_bmiColors</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_bmask</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_has_alpha</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_bmiColors</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>~</operator><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_rmask</name></name> <operator>|</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_gmask</name></name> <operator>|</operator>
<name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_bmask</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_RGBP</name></expr> )</condition>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_bmiColors</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biClrUsed</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_bih_extra</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VLC_BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>i_bih_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name> <operator>=</operator> <name>biCompression</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biBitCount</name></name> <operator>=</operator> <name>biBitCount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biWidth</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biHeight</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biPlanes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biSizeImage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biXPelsPerMeter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biYPelsPerMeter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biClrImportant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_total</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VLC_BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>i_bih_extra</name> <operator>+</operator> <name>i_bmiColors</name></expr>;</expr_stmt>
<return>return <expr><name>p_bih</name></expr>;</return>
</block_content>}</block></function>
</unit>
