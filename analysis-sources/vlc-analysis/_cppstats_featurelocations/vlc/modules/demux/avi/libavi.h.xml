<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\avi\libavi.h">





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BI_RGB</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BI_RLE8</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BI_RLE4</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BI_BITFIELDS</name></cpp:macro> <cpp:value>0x0003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BI_JPEG</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BI_PNG</name></cpp:macro> <cpp:value>0x0005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BI_CMYK</name></cpp:macro> <cpp:value>0x000B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BI_CMYKRLE8</name></cpp:macro> <cpp:value>0x000C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BI_CMYKRLE4</name></cpp:macro> <cpp:value>0x000D</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIF_HASINDEX</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIF_MUSTUSEINDEX</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIF_ISINTERLEAVED</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIF_TRUSTCKTYPE</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIF_WASCAPTUREFILE</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIF_COPYRIGHTED</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIIF_LIST</name></cpp:macro> <cpp:value>0x00000001L</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIIF_KEYFRAME</name></cpp:macro> <cpp:value>0x00000010L</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIIF_NOTIME</name></cpp:macro> <cpp:value>0x00000100L</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIIF_COMPUSE</name></cpp:macro> <cpp:value>0x0FFF0000L</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIIF_FIXKEYFRAME</name></cpp:macro> <cpp:value>0x00001000L</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_CHUNK_COMMON</name></cpp:macro> <cpp:value>vlc_fourcc_t i_chunk_fourcc; uint64_t i_chunk_size; uint64_t i_chunk_pos; union avi_chunk_u *p_next; union avi_chunk_u *p_father; union avi_chunk_u *p_first;</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_CHUNK</name><parameter_list>( <parameter><type><name>p_chk</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(avi_chunk_t*)(p_chk)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>idx1_entry_s</name>
<block>{
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_length</name></decl>;</decl_stmt>

}</block></struct></type> <name>idx1_entry_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>avi_chunk_common_s</name>
<block>{
<expr_stmt><expr><name>AVI_CHUNK_COMMON</name></expr></expr_stmt>
}</block></struct></type> <name>avi_chunk_common_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>avi_chunk_list_s</name>
<block>{
<decl_stmt><decl><type><name>AVI_CHUNK_COMMON</name>
<name>vlc_fourcc_t</name></type> <name>i_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>avi_chunk_list_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>avi_chunk_idx1_s</name>
<block>{
<decl_stmt><decl><type><name>AVI_CHUNK_COMMON</name>
<name>unsigned</name> <name>int</name></type> <name>i_entry_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_entry_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>idx1_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

}</block></struct></type> <name>avi_chunk_idx1_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>avi_chunk_avih_s</name>
<block>{
<decl_stmt><decl><type><name>AVI_CHUNK_COMMON</name>
<name>uint32_t</name></type> <name>i_microsecperframe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_maxbytespersec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_reserved1</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_totalframes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_initialframes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_suggestedbuffersize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_length</name></decl>;</decl_stmt>
}</block></struct></type> <name>avi_chunk_avih_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>avi_chunk_strh_s</name>
<block>{
<decl_stmt><decl><type><name>AVI_CHUNK_COMMON</name>
<name>vlc_fourcc_t</name></type> <name>i_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_reserved1</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_initialframes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_length</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_suggestedbuffersize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_quality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_samplesize</name></decl>;</decl_stmt>
}</block></struct></type> <name>avi_chunk_strh_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>avi_chunk_strf_auds_s</name>
<block>{
<decl_stmt><decl><type><name>AVI_CHUNK_COMMON</name>
<name>int</name></type> <name>i_cat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WAVEFORMATEX</name> <modifier>*</modifier></type><name>p_wf</name></decl>;</decl_stmt>
}</block></struct></type> <name>avi_chunk_strf_auds_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>avi_chunk_strf_vids_s</name>
<block>{
<decl_stmt><decl><type><name>AVI_CHUNK_COMMON</name>
<name>int</name></type> <name>i_cat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC_BITMAPINFOHEADER</name> <modifier>*</modifier></type><name>p_bih</name></decl>;</decl_stmt>
}</block></struct></type> <name>avi_chunk_strf_vids_t</name>;</typedef>

<typedef>typedef <type><union>union <name>avi_chunk_strf_u</name>
<block>{
<decl_stmt><decl><type><name>avi_chunk_strf_auds_t</name></type> <name>auds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_strf_vids_t</name></type> <name>vids</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>AVI_CHUNK_COMMON</name>
<name>int</name></type> <name>i_cat</name></decl>;</decl_stmt>
}</block> <decl><name>common</name></decl>;</struct>
}</block></union></type> <name>avi_chunk_strf_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>avi_chunk_strd_s</name>
<block>{
<decl_stmt><decl><type><name>AVI_CHUNK_COMMON</name>
<name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>avi_chunk_strd_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>avi_chunk_vprp_s</name>
<block>{
<decl_stmt><decl><type><name>AVI_CHUNK_COMMON</name>
<name>uint32_t</name></type> <name>i_video_format_token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_video_standard</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_vertical_refresh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_h_total_in_t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_v_total_in_lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_frame_aspect_ratio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_frame_width_in_pixels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_frame_height_in_pixels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_nb_fields_per_frame</name></decl>;</decl_stmt>
<struct>struct
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_compressed_bm_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_compressed_bm_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_valid_bm_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_valid_bm_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_valid_bm_x_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_valid_bm_y_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_video_x_offset_in_t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_video_y_valid_start_line</name></decl>;</decl_stmt>
}</block> <decl><name><name>field_info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</struct>

}</block></struct></type> <name>avi_chunk_vprp_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>avi_chunk_dmlh_s</name>
<block>{
<decl_stmt><decl><type><name>AVI_CHUNK_COMMON</name>
<name>uint32_t</name></type> <name>dwTotalFrames</name></decl>;</decl_stmt>
}</block></struct></type> <name>avi_chunk_dmlh_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_ZEROSIZED_CHUNK</name></cpp:macro> <cpp:value>0xFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_ZERO_FOURCC</name></cpp:macro> <cpp:value>0xFE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_INDEX_OF_INDEXES</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_INDEX_OF_CHUNKS</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_INDEX_IS_DATA</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_INDEX_2FIELD</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>indx_std_entry_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_offsetfield2</name></decl>;</decl_stmt>
}</block></struct></type> <name>indx_field_entry_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_duration</name></decl>;</decl_stmt>
}</block></struct></type> <name>indx_super_entry_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>avi_chunk_indx_s</name>
<block>{
<decl_stmt><decl><type><name>AVI_CHUNK_COMMON</name>
<name>int16_t</name></type> <name>i_longsperentry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>i_indexsubtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>i_indextype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entriesinuse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_baseoffset</name></decl>;</decl_stmt>

<union>union
<block>{
<decl_stmt><decl><type><name>indx_std_entry_t</name> <modifier>*</modifier></type><name>std</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>indx_field_entry_t</name> <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>indx_super_entry_t</name> <modifier>*</modifier></type><name>super</name></decl>;</decl_stmt>
}</block> <decl><name>idx</name></decl>;</union>
}</block></struct></type> <name>avi_chunk_indx_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>avi_chunk_STRING_s</name>
<block>{
<decl_stmt><decl><type><name>AVI_CHUNK_COMMON</name>
<name>char</name> <modifier>*</modifier></type><name>p_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_str</name></decl>;</decl_stmt>
}</block></struct></type> <name>avi_chunk_STRING_t</name>;</typedef>

<typedef>typedef <type><union>union <name>avi_chunk_u</name>
<block>{
<decl_stmt><decl><type><name>avi_chunk_common_t</name></type> <name>common</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_list_t</name></type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_idx1_t</name></type> <name>idx1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_avih_t</name></type> <name>avih</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_strh_t</name></type> <name>strh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_strf_t</name></type> <name>strf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_strd_t</name></type> <name>strd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_vprp_t</name></type> <name>vprp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_indx_t</name></type> <name>indx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avi_chunk_STRING_t</name></type> <name>strz</name></decl>;</decl_stmt>
}</block></union></type> <name>avi_chunk_t</name>;</typedef>




<function_decl><type><name>int</name></type> <name>AVI_ChunkRead</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter>,
<parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_father</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AVI_ChunkClean</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>AVI_ChunkCount_</name><parameter_list>( <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>AVI_ChunkFind_</name> <parameter_list>( <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>AVI_ChunkReadRoot</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_root</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AVI_ChunkFreeRoot</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>AVI_ChunkFetchIndexes</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_riff</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_ChunkCount</name><parameter_list>( <parameter><type><name>p_chk</name></type></parameter>, <parameter><type><name>i_fourcc</name></type></parameter>, <parameter><type><name>b_list</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>AVI_ChunkCount_( AVI_CHUNK(p_chk), i_fourcc, b_list )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_ChunkFind</name><parameter_list>( <parameter><type><name>p_chk</name></type></parameter>, <parameter><type><name>i_fourcc</name></type></parameter>, <parameter><type><name>i_number</name></type></parameter>, <parameter><type><name>b_list</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>AVI_ChunkFind_( AVI_CHUNK(p_chk), i_fourcc, i_number, b_list )</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_RIFF</name></cpp:macro> <cpp:value>VLC_FOURCC('R','I','F','F')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ON2</name></cpp:macro> <cpp:value>VLC_FOURCC('O','N','2',' ')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_LIST</name></cpp:macro> <cpp:value>VLC_FOURCC('L','I','S','T')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_JUNK</name></cpp:macro> <cpp:value>VLC_FOURCC('J','U','N','K')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_AVI</name></cpp:macro> <cpp:value>VLC_FOURCC('A','V','I',' ')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_AVIX</name></cpp:macro> <cpp:value>VLC_FOURCC('A','V','I','X')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ON2f</name></cpp:macro> <cpp:value>VLC_FOURCC('O','N','2','f')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_WAVE</name></cpp:macro> <cpp:value>VLC_FOURCC('W','A','V','E')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_INFO</name></cpp:macro> <cpp:value>VLC_FOURCC('I','N','F','O')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_avih</name></cpp:macro> <cpp:value>VLC_FOURCC('a','v','i','h')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ON2h</name></cpp:macro> <cpp:value>VLC_FOURCC('O','N','2','h')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_hdrl</name></cpp:macro> <cpp:value>VLC_FOURCC('h','d','r','l')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_movi</name></cpp:macro> <cpp:value>VLC_FOURCC('m','o','v','i')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_idx1</name></cpp:macro> <cpp:value>VLC_FOURCC('i','d','x','1')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_strl</name></cpp:macro> <cpp:value>VLC_FOURCC('s','t','r','l')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_strh</name></cpp:macro> <cpp:value>VLC_FOURCC('s','t','r','h')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_strf</name></cpp:macro> <cpp:value>VLC_FOURCC('s','t','r','f')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_strd</name></cpp:macro> <cpp:value>VLC_FOURCC('s','t','r','d')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_strn</name></cpp:macro> <cpp:value>VLC_FOURCC('s','t','r','n')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_indx</name></cpp:macro> <cpp:value>VLC_FOURCC('i','n','d','x')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_vprp</name></cpp:macro> <cpp:value>VLC_FOURCC('v','p','r','p')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_dmlh</name></cpp:macro> <cpp:value>VLC_FOURCC('d','m','l','h')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_rec</name></cpp:macro> <cpp:value>VLC_FOURCC('r','e','c',' ')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_auds</name></cpp:macro> <cpp:value>VLC_FOURCC('a','u','d','s')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_vids</name></cpp:macro> <cpp:value>VLC_FOURCC('v','i','d','s')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_txts</name></cpp:macro> <cpp:value>VLC_FOURCC('t','x','t','s')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_mids</name></cpp:macro> <cpp:value>VLC_FOURCC('m','i','d','s')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_iavs</name></cpp:macro> <cpp:value>VLC_FOURCC('i','a','v','s')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ivas</name></cpp:macro> <cpp:value>VLC_FOURCC('i','v','a','s')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IARL</name></cpp:macro> <cpp:value>VLC_FOURCC('I','A','R','L')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IART</name></cpp:macro> <cpp:value>VLC_FOURCC('I','A','R','T')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ICMS</name></cpp:macro> <cpp:value>VLC_FOURCC('I','C','M','S')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ICMT</name></cpp:macro> <cpp:value>VLC_FOURCC('I','C','M','T')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ICOP</name></cpp:macro> <cpp:value>VLC_FOURCC('I','C','O','P')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ICRD</name></cpp:macro> <cpp:value>VLC_FOURCC('I','C','R','D')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ICRP</name></cpp:macro> <cpp:value>VLC_FOURCC('I','C','R','P')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IDIM</name></cpp:macro> <cpp:value>VLC_FOURCC('I','D','I','M')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IDPI</name></cpp:macro> <cpp:value>VLC_FOURCC('I','D','P','I')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IENG</name></cpp:macro> <cpp:value>VLC_FOURCC('I','E','N','G')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IGNR</name></cpp:macro> <cpp:value>VLC_FOURCC('I','G','N','R')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ISGN</name></cpp:macro> <cpp:value>VLC_FOURCC('I','S','G','N')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IKEY</name></cpp:macro> <cpp:value>VLC_FOURCC('I','K','E','Y')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ILGT</name></cpp:macro> <cpp:value>VLC_FOURCC('I','L','G','T')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IMED</name></cpp:macro> <cpp:value>VLC_FOURCC('I','M','E','D')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_INAM</name></cpp:macro> <cpp:value>VLC_FOURCC('I','N','A','M')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IPLT</name></cpp:macro> <cpp:value>VLC_FOURCC('I','P','L','T')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IPRD</name></cpp:macro> <cpp:value>VLC_FOURCC('I','P','R','D')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ISBJ</name></cpp:macro> <cpp:value>VLC_FOURCC('I','S','B','J')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ISFT</name></cpp:macro> <cpp:value>VLC_FOURCC('I','S','F','T')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ISHP</name></cpp:macro> <cpp:value>VLC_FOURCC('I','S','H','P')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ISRC</name></cpp:macro> <cpp:value>VLC_FOURCC('I','S','R','C')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ISRF</name></cpp:macro> <cpp:value>VLC_FOURCC('I','S','R','F')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ITCH</name></cpp:macro> <cpp:value>VLC_FOURCC('I','T','C','H')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ISMP</name></cpp:macro> <cpp:value>VLC_FOURCC('I','S','M','P')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IDIT</name></cpp:macro> <cpp:value>VLC_FOURCC('I','D','I','T')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ILNG</name></cpp:macro> <cpp:value>VLC_FOURCC('I','L','N','G')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IRTD</name></cpp:macro> <cpp:value>VLC_FOURCC('I','R','T','D')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IWEB</name></cpp:macro> <cpp:value>VLC_FOURCC('I','W','E','B')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IPRT</name></cpp:macro> <cpp:value>VLC_FOURCC('I','P','R','T')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IWRI</name></cpp:macro> <cpp:value>VLC_FOURCC('I','W','R','I')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IPRO</name></cpp:macro> <cpp:value>VLC_FOURCC('I','P','R','O')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ICNM</name></cpp:macro> <cpp:value>VLC_FOURCC('I','C','N','M')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IPDS</name></cpp:macro> <cpp:value>VLC_FOURCC('I','P','D','S')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IEDT</name></cpp:macro> <cpp:value>VLC_FOURCC('I','E','D','T')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ICDS</name></cpp:macro> <cpp:value>VLC_FOURCC('I','C','D','S')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IMUS</name></cpp:macro> <cpp:value>VLC_FOURCC('I','M','U','S')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ISTD</name></cpp:macro> <cpp:value>VLC_FOURCC('I','S','T','D')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IDST</name></cpp:macro> <cpp:value>VLC_FOURCC('I','D','S','T')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ICNT</name></cpp:macro> <cpp:value>VLC_FOURCC('I','C','N','T')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_ISTR</name></cpp:macro> <cpp:value>VLC_FOURCC('I','S','T','R')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IFRM</name></cpp:macro> <cpp:value>VLC_FOURCC('I','F','R','M')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IAS1</name></cpp:macro> <cpp:value>VLC_FOURCC('I','A','S','1')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IAS2</name></cpp:macro> <cpp:value>VLC_FOURCC('I','A','S','2')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IAS3</name></cpp:macro> <cpp:value>VLC_FOURCC('I','A','S','3')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IAS4</name></cpp:macro> <cpp:value>VLC_FOURCC('I','A','S','4')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IAS5</name></cpp:macro> <cpp:value>VLC_FOURCC('I','A','S','5')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IAS6</name></cpp:macro> <cpp:value>VLC_FOURCC('I','A','S','6')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IAS7</name></cpp:macro> <cpp:value>VLC_FOURCC('I','A','S','7')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IAS8</name></cpp:macro> <cpp:value>VLC_FOURCC('I','A','S','8')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVIFOURCC_IAS9</name></cpp:macro> <cpp:value>VLC_FOURCC('I','A','S','9')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVITWOCC_wb</name></cpp:macro> <cpp:value>VLC_TWOCC('w','b')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVITWOCC_db</name></cpp:macro> <cpp:value>VLC_TWOCC('d','b')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVITWOCC_dc</name></cpp:macro> <cpp:value>VLC_TWOCC('d','c')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVITWOCC_pc</name></cpp:macro> <cpp:value>VLC_TWOCC('p','c')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVITWOCC_AC</name></cpp:macro> <cpp:value>VLC_TWOCC('A','C')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVITWOCC_tx</name></cpp:macro> <cpp:value>VLC_TWOCC('t','x')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVITWOCC_sb</name></cpp:macro> <cpp:value>VLC_TWOCC('s','b')</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOURCC_dvsd</name></cpp:macro> <cpp:value>VLC_FOURCC('d','v','s','d')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOURCC_dvhd</name></cpp:macro> <cpp:value>VLC_FOURCC('d','v','h','d')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOURCC_dvsl</name></cpp:macro> <cpp:value>VLC_FOURCC('d','v','s','l')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOURCC_dv25</name></cpp:macro> <cpp:value>VLC_FOURCC('d','v','2','5')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOURCC_dv50</name></cpp:macro> <cpp:value>VLC_FOURCC('d','v','5','0')</cpp:value></cpp:define>
</unit>
