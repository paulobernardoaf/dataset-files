<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\vobsub.c">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg/pes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg/ps.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vobsub.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"subtitle_helper.h"</cpp:file></cpp:include>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Vobsub subtitles parser"</literal>)</argument> )</argument_list></macro>
<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>
<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">1</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"vobsub"</literal></argument>, <argument><literal type="string">"subtitle"</literal></argument> )</argument_list></macro>
<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>





<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_line_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
}</block></struct></type> <name>text_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_vobsub_location</name></decl>;</decl_stmt>
}</block></struct></type> <name>subtitle_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_track_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_current_subtitle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_subtitles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_delay</name></decl>;</decl_stmt>
}</block></struct></type> <name>vobsub_track_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_next_demux_date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_t</name></type> <name>txt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_vobsub_stream</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i_tracks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vobsub_track_t</name> <modifier>*</modifier></type><name>track</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_original_frame_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_original_frame_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b_palette</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>palette</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>demux_sys_t</name>;</typedef>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TextLoad</name><parameter_list>( <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TextUnload</name><parameter_list>( <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseVobSubIDX</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DemuxVobSub</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_vobname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_read_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>s</name> <operator>=</operator> <call><name>peek_Readline</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_read_offset</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasestr</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"#VobSub index file"</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"this doesn't seem to be a vobsub file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"could not read vobsub IDX file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>demux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_sys</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vobsub_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>vobsub_track_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_original_frame_width</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_original_frame_height</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_palette</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>uint32_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>TextLoad</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>, <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ParseVobSubIDX</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>TextUnload</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>txt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_subtitles</name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_subtitles</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_subtitles</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_start</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_subtitles</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_subtitles</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>+=</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_vobname</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>psz_vobname</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_vobname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>psz_vobname</name> <operator>+</operator> <name>i_len</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">".sub"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vobsub_stream</name></name> <operator>=</operator> <call><name>vlc_stream_NewURL</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>psz_vobname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vobsub_stream</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"couldn't open .sub Vobsub file: %s"</literal></expr></argument>,
<argument><expr><name>psz_vobname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_vobname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_vobname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_subtitles</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vobsub_stream</name></name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vobsub_stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_subtitles</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>pf</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>
<block>{<block_content>
<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_selected</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_GET_ES_STATE</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_selected</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_selected</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_current_subtitle</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_subtitles</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_subtitles</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_current_subtitle</name></expr>]</index></name><operator>.</operator><name>i_start</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>
<expr_stmt><expr><name>i64</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_current_subtitle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_current_subtitle</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_subtitles</name> <operator>&amp;&amp;</operator>
<name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_subtitles</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_current_subtitle</name></expr>]</index></name><operator>.</operator><name>i_start</name> <operator>&lt;</operator> <name>i64</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_current_subtitle</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_current_subtitle</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_subtitles</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>
<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b_selected</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_GET_ES_STATE</name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_es</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_selected</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>b_selected</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_current_subtitle</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_subtitles</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_subtitles</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_subtitles</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_current_subtitle</name></expr>]</index></name><operator>.</operator><name>i_start</name> <operator>/</operator>
<operator>(</operator><name>double</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i64</name> <operator>=</operator> <operator>(</operator><name>vlc_tick_t</name><operator>)</operator> <name>f</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>
<return>return <expr><call><name>demux_Control</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>DEMUX_SET_TIME</name></expr></argument>, <argument><expr><name>i64</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_SET_NEXT_DEMUX_TIME</name></expr>:</case>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_date</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>
<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>
<case>case <expr><name>DEMUX_GET_FPS</name></expr>:</case>
<case>case <expr><name>DEMUX_GET_META</name></expr>:</case>
<case>case <expr><name>DEMUX_GET_TITLE_INFO</name></expr>:</case>
<case>case <expr><name>DEMUX_HAS_UNSUPPORTED_META</name></expr>:</case>
<case>case <expr><name>DEMUX_GET_ATTACHMENTS</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_RECORD</name></expr>:</case>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_maxdate</name></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vobsub_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_current_subtitle</name></name> <operator>&gt;=</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_subtitles</name></name></expr> )</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_maxdate</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_date</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>i_maxdate</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_current_subtitle</name></name> <operator>&lt;</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_subtitles</name></name></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>i_maxdate</name> <operator>=</operator> <name><name>tk</name><operator>-&gt;</operator><name>p_subtitles</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_current_subtitle</name></name></expr>]</index></name><operator>.</operator><name>i_start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_current_subtitle</name></name> <operator>&lt;</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_subtitles</name></name> <operator>&amp;&amp;</operator>
<name><name>tk</name><operator>-&gt;</operator><name>p_subtitles</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_current_subtitle</name></name></expr>]</index></name><operator>.</operator><name>i_start</name> <operator>&lt;</operator> <name>i_maxdate</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_pos</name> <init>= <expr><name><name>tk</name><operator>-&gt;</operator><name>p_subtitles</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_current_subtitle</name></name></expr>]</index></name><operator>.</operator><name>i_vobsub_location</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_current_subtitle</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_subtitles</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name><name>tk</name><operator>-&gt;</operator><name>p_subtitles</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_current_subtitle</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_vobsub_location</name> <operator>-</operator> <name>i_pos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_size</name> <operator>=</operator> <literal type="number">65535</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vobsub_stream</name></name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,
<argument><expr><literal type="string">"cannot seek in the VobSub to the correct time %d"</literal></expr></argument>, <argument><expr><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_current_subtitle</name></name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vobsub_stream</name></name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">6</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <name><name>tk</name><operator>-&gt;</operator><name>p_subtitles</name><index>[<expr><name><name>tk</name><operator>-&gt;</operator><name>i_current_subtitle</name></name></expr>]</index></name><operator>.</operator><name>i_start</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DemuxVobSub</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_current_subtitle</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>


<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_date</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TextLoad</name><parameter_list>( <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>lines</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name>vlc_stream_ReadLine</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_new</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>n</name> <operator>&gt;=</operator> <name>INT_MAX</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ppsz_new</name> <operator>=</operator> <call><name>realloc</name><argument_list>( <argument><expr><name>lines</name></expr></argument>, <argument><expr><operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>ppsz_new</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lines</name> <operator>=</operator> <name>ppsz_new</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lines</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>psz</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>txt</name><operator>-&gt;</operator><name>i_line_count</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>txt</name><operator>-&gt;</operator><name>i_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>txt</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name>lines</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TextUnload</name><parameter_list>( <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>txt</name><operator>-&gt;</operator><name>i_line_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>line</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>txt</name><operator>-&gt;</operator><name>i_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>txt</name><operator>-&gt;</operator><name>i_line_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>TextGetLine</name><parameter_list>( <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><name><name>txt</name><operator>-&gt;</operator><name>i_line</name></name> <operator>&gt;=</operator> <name><name>txt</name><operator>-&gt;</operator><name>i_line_count</name></name></expr> )</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>txt</name><operator>-&gt;</operator><name>line</name><index>[<expr><name><name>txt</name><operator>-&gt;</operator><name>i_line</name></name><operator>++</operator></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseVobSubIDX</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>txt</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>line</name> <operator>=</operator> <call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<return>return<expr><operator>(</operator> <name>VLC_EGENERIC</name> <operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'#'</literal></expr> )</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><literal type="string">"size:"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vobsub_size_parse</name><argument_list>( <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_original_frame_width</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_original_frame_height</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"original frame size: %dx%d"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_original_frame_width</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_original_frame_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"reading original frame size failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><literal type="string">"palette:"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>vobsub_palette_parse</name><argument_list>( <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>palette</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_palette</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"vobsub palette read"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"reading original palette failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><literal type="string">"id:"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>language</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_track_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"id: %32[^ ,], index: %d"</literal></expr></argument>,
<argument><expr><name>language</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_track_id</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"id: , index: %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_track_id</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"reading new track failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>language</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vobsub_track_t</name> <modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><call><name>vlc_reallocarray</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name></name></expr></argument>,
<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_realloc</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_realloc</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>track</name></name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name><operator>++</operator></expr>;</expr_stmt>


<decl_stmt><decl><type><name>vobsub_track_t</name> <modifier>*</modifier></type><name>current_tk</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>current_tk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>vobsub_track_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_tk</name><operator>-&gt;</operator><name>i_current_subtitle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_tk</name><operator>-&gt;</operator><name>i_subtitles</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_tk</name><operator>-&gt;</operator><name>p_subtitles</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_tk</name><operator>-&gt;</operator><name>i_track_id</name></name> <operator>=</operator> <name>i_track_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_tk</name><operator>-&gt;</operator><name>i_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_SPU</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>i_original_frame_width</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_original_frame_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>i_original_frame_height</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_original_frame_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <name>language</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_palette</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>palette</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SPU_PALETTE_DEFINED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>palette</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>uint32_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name>i_track_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_tk</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"New vobsub track detected: %i [%s]"</literal></expr></argument>, <argument><expr><name>i_track_id</name></expr></argument>, <argument><expr><name>language</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"timestamp:"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>loc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i_location</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>sscanf</name><argument_list>( <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"timestamp: %02d:%02d:%02d:%03d, filepos: %"</literal><name>SCNx64</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vobsub_track_t</name> <modifier>*</modifier></type><name>current_tk</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>current_sub</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_start</name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>h</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s</name></expr></argument> )</argument_list></call> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><name>ms</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_location</name> <operator>=</operator> <name>loc</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><call><name>vlc_reallocarray</name><argument_list>( <argument><expr><name><name>current_tk</name><operator>-&gt;</operator><name>p_subtitles</name></name></expr></argument>,
<argument><expr><name><name>current_tk</name><operator>-&gt;</operator><name>i_subtitles</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_realloc</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>p_realloc</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>current_tk</name><operator>-&gt;</operator><name>p_subtitles</name></name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current_sub</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_realloc</name><index>[<expr><name><name>current_tk</name><operator>-&gt;</operator><name>i_subtitles</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_sub</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name>i_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_sub</name><operator>-&gt;</operator><name>i_start</name></name> <operator>+=</operator> <name><name>current_tk</name><operator>-&gt;</operator><name>i_delay</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_sub</name><operator>-&gt;</operator><name>i_vobsub_location</name></name> <operator>=</operator> <name>i_location</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"reading timestamp failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"delay:"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>ms</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_sign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_gap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>sscanf</name><argument_list>( <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%*celay: %02d%n:%02d:%02d:%03d"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vobsub_track_t</name> <modifier>*</modifier></type><name>current_tk</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name><name>line</name><index>[<expr><name>count</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i_sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>-</operator><name>h</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_gap</name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>h</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s</name></expr></argument> )</argument_list></call> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><name>ms</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current_tk</name><operator>-&gt;</operator><name>i_delay</name></name> <operator>+=</operator> <name>i_gap</name> <operator>*</operator> <name>i_sign</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sign: %+d gap: %+"</literal><name>PRId64</name><literal type="string">" global delay: %+"</literal><name>PRId64</name><literal type="string">""</literal></expr></argument>,
<argument><expr><name>i_sign</name></expr></argument>, <argument><expr><name>i_gap</name></expr></argument>, <argument><expr><name><name>current_tk</name><operator>-&gt;</operator><name>i_delay</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"reading delay failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxVobSub</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_bk</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_bk</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><operator>&amp;</operator><name><name>p_bk</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_bk</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p</name> <operator>+</operator> <literal type="number">6</literal> <operator>&lt;</operator> <name>p_end</name></expr> )</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><call><name>ps_pkt_size</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name> <operator>-</operator> <name>p</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_spu</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&gt;</operator> <name>p_end</name> <operator>-</operator> <name>p</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"broken PES size"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x01</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid PES"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_id</name> <operator>=</operator> <call><name>ps_pkt_id</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_id</name><operator>&amp;</operator><literal type="number">0xffe0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0xbd20</literal></expr> )</condition>
<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i_size</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_pkt</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_pkt</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i_size</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ps_pkt_parse_pes</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p_pkt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i_spu</name> <operator>=</operator> <name>i_id</name><operator>&amp;</operator><literal type="number">0x1f</literal></expr>;</expr_stmt>


<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>vobsub_track_t</name> <modifier>*</modifier></type><name>p_tk</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>track</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_pkt</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_bk</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_tk</name><operator>-&gt;</operator><name>p_es</name></name> <operator>&amp;&amp;</operator> <name><name>p_tk</name><operator>-&gt;</operator><name>i_track_id</name></name> <operator>==</operator> <name>i_spu</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_tk</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_bk</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_tracks</name></name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

</unit>
