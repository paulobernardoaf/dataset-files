<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats_featurelocations\vlc\modules\demux\dmxmus.c">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>date_t</name></type> <name>pts</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>tick</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>length</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>start_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>end_offset</name><range>:<expr><literal type="number">17</literal></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>primaries</name><range>:<expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>secondaries</name><range>:<expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>volume</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<enum>enum <block>{
<decl><name>MUS_EV_RELEASE</name></decl>,
<decl><name>MUS_EV_PLAY</name></decl>,
<decl><name>MUS_EV_PITCH</name></decl>,
<decl><name>MUS_EV_CONTROL</name></decl>,
<decl><name>MUS_EV_CONTROL_VALUE</name></decl>,
<decl><name>MUS_EV_MEASURE_END</name></decl>,
<decl><name>MUS_EV_TRACK_END</name></decl>,
<decl><name>MUS_EV_DUMMY</name></decl>,
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUS_EV</name><parameter_list>(<parameter><type><name>byte</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((byte) &gt;&gt; 4) &amp; 0x7)</cpp:value></cpp:define>

<enum>enum <block>{
<decl><name>MUS_CTRL_PROGRAM_CHANGE</name></decl>,
<decl><name>MUS_CTRL_BANK_SELECT</name></decl>,
<decl><name>MUS_CTRL_MODULATION</name></decl>,
<decl><name>MUS_CTRL_VOLUME</name></decl>,
<decl><name>MUS_CTRL_PAN</name></decl>,
<decl><name>MUS_CTRL_EXPRESSION</name></decl>,
<decl><name>MUS_CTRL_REVERB</name></decl>,
<decl><name>MUS_CTRL_CHORUS</name></decl>,
<decl><name>MUS_CTRL_PEDAL_HOLD</name></decl>,
<decl><name>MUS_CTRL_PEDAL_SOFT</name></decl>,
<decl><name>MUS_CTRL_SOUND_OFF</name></decl>,
<decl><name>MUS_CTRL_NOTES_OFF</name></decl>,
<decl><name>MUS_CTRL_MONO</name></decl>,
<decl><name>MUS_CTRL_POLY</name></decl>,
<decl><name>MUS_CTRL_RESET</name></decl>,
<decl><name>MUS_CTRL_EVENT</name></decl>,
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUS_FREQ</name></cpp:macro> <cpp:value>140</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GetByte</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>vlc_stream_Read</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadEvent</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><call><name>GetByte</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>byte</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint_fast8_t</name></type> <name>type</name> <init>= <expr><call><name>MUS_EV</name><argument_list>(<argument><expr><name>byte</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>byte</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>type</name> <operator>!=</operator> <name>MUS_EV_MEASURE_END</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>MUS_EV_TRACK_END</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>GetByte</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MUS_EV_PLAY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MUS_EV_CONTROL_VALUE</name></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>GetByte</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>delay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>byte</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <call><name>GetByte</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>byte</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>delay</name> <operator>&lt;&lt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>delay</name> <operator>|=</operator> <name>byte</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Event2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>ev</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>type</name> <operator>|</operator> <name>channel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ev</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Event3</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>channel</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>data2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>ev</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>type</name> <operator>|</operator> <name>channel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>data2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ev</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>HandleControl</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>num</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MUS_CTRL_SOUND_OFF</name></expr>:</case>
<return>return <expr><call><name>Event3</name><argument_list>(<argument><expr><literal type="number">0xB0</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>MUS_CTRL_NOTES_OFF</name></expr>:</case>
<return>return <expr><call><name>Event3</name><argument_list>(<argument><expr><literal type="number">0xB0</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>MUS_CTRL_MONO</name></expr>:</case>
<case>case <expr><name>MUS_CTRL_POLY</name></expr>:</case>
<break>break;</break> 

<case>case <expr><name>MUS_CTRL_RESET</name></expr>:</case>
<return>return <expr><call><name>Event3</name><argument_list>(<argument><expr><literal type="number">0xB0</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="number">121</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>MUS_CTRL_EVENT</name></expr>:</case>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"unknown control %u"</literal></expr></argument>, <argument><expr><name>num</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><name>ev</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>HandleControlValue</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>channel</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>num</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MUS_CTRL_PROGRAM_CHANGE</name></expr>:</case>
<return>return <expr><call><name>Event2</name><argument_list>(<argument><expr><literal type="number">0xC0</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>MUS_CTRL_BANK_SELECT</name></expr>:</case>
<return>return <expr><name>NULL</name></expr>;</return>

<case>case <expr><name>MUS_CTRL_MODULATION</name></expr>:</case>
<return>return <expr><call><name>Event3</name><argument_list>(<argument><expr><literal type="number">0xB0</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>MUS_CTRL_VOLUME</name></expr>:</case>
<return>return <expr><call><name>Event3</name><argument_list>(<argument><expr><literal type="number">0xB0</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>MUS_CTRL_PAN</name></expr>:</case>
<return>return <expr><call><name>Event3</name><argument_list>(<argument><expr><literal type="number">0xB0</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>MUS_CTRL_EXPRESSION</name></expr>:</case>
<return>return <expr><call><name>Event3</name><argument_list>(<argument><expr><literal type="number">0xB0</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>MUS_CTRL_REVERB</name></expr>:</case>
<return>return <expr><call><name>Event3</name><argument_list>(<argument><expr><literal type="number">0xB0</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="number">91</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>MUS_CTRL_CHORUS</name></expr>:</case>
<return>return <expr><call><name>Event3</name><argument_list>(<argument><expr><literal type="number">0xB0</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="number">93</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>MUS_CTRL_PEDAL_HOLD</name></expr>:</case>
<return>return <expr><call><name>Event3</name><argument_list>(<argument><expr><literal type="number">0xB0</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>MUS_CTRL_PEDAL_SOFT</name></expr>:</case>
<return>return <expr><call><name>Event3</name><argument_list>(<argument><expr><literal type="number">0xB0</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="number">67</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>
<return>return <expr><call><name>HandleControl</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Tell</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>sys</name><operator>-&gt;</operator><name>end_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>tick</name></name> <operator>&lt;</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>tick</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>tick</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tick</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xF9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tick</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>tick</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>tick</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>tick</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>tick</name></name> <operator>+=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>delay</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ReadEvent</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delay</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint_fast8_t</name></type> <name>channel</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>&gt;=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>channel</name> <operator>&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>sys</name><operator>-&gt;</operator><name>primaries</name></name></expr> </then><else>: <expr><operator>(</operator><literal type="number">10</literal> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>secondaries</name></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>channel</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>MUS_EV</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MUS_EV_RELEASE</name></expr>:</case>
<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>Event2</name><argument_list>(<argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MUS_EV_PLAY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>volume</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>Event3</name><argument_list>(<argument><expr><literal type="number">0x90</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>volume</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MUS_EV_PITCH</name></expr>:</case>
<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>Event3</name><argument_list>(<argument><expr><literal type="number">0xE0</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MUS_EV_CONTROL</name></expr>:</case>
<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>HandleControl</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MUS_EV_CONTROL_VALUE</name></expr>:</case>
<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>HandleControlValue</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MUS_EV_MEASURE_END</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>MUS_EV_TRACK_END</name></expr>:</case>
<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return>

<case>case <expr><name>MUS_EV_DUMMY</name></expr>:</case>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>es_out_Send</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>date_Increment</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SeekSet0</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>start_offset</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>GetLength</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>parts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SeekSet0</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>delay</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ReadEvent</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delay</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>MUS_EV</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MUS_EV_TRACK_END</name>
<operator>||</operator> <call><name>vlc_stream_Tell</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>sys</name><operator>-&gt;</operator><name>end_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>parts</name> <operator>+=</operator> <name>delay</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name>parts</name></expr></argument>, <argument><expr><name>MUS_FREQ</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<break>break;</break>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>pos</name> <init>= <expr><literal type="number">0.</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>VLC_TICK_INVALID</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Oops"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VLC_TICK_0</name><operator>)</operator> <operator>*</operator> <literal type="number">1.</literal> <operator>/</operator> <name><name>sys</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>
<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>
<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>
<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>
<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Peek</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><literal type="string">"MUS\x1A"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint_fast16_t</name></type> <name>length</name> <init>= <expr><call><name>GetWLE</name><argument_list>(<argument><expr><name>hdr</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast16_t</name></type> <name>offset</name> <init>= <expr><call><name>GetWLE</name><argument_list>(<argument><expr><name>hdr</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast16_t</name></type> <name>primaries</name> <init>= <expr><call><name>GetWLE</name><argument_list>(<argument><expr><name>hdr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint_fast16_t</name></type> <name>secondaries</name> <init>= <expr><call><name>GetWLE</name><argument_list>(<argument><expr><name>hdr</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>primaries</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>||</operator> <name>secondaries</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>instc</name> <init>= <expr><call><name>GetWLE</name><argument_list>(<argument><expr><name>hdr</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hdrlen</name> <init>= <expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>instc</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>hdrlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"MIDI channels: %u primary, %u secondary"</literal></expr></argument>,
<argument><expr><call><name>GetWLE</name><argument_list>(<argument><expr><name>hdr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GetWLE</name><argument_list>(<argument><expr><name>hdr</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>end_offset</name></name> <operator>=</operator> <operator>(</operator><name>uint_fast32_t</name><operator>)</operator><name>offset</name> <operator>+</operator> <operator>(</operator><name>uint_fast32_t</name><operator>)</operator><name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>primaries</name></name> <operator>=</operator> <name>primaries</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>secondaries</name></name> <operator>=</operator> <name>secondaries</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>can_seek</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vlc_stream_Control</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>STREAM_CAN_SEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>can_seek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>can_seek</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>GetLength</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SeekSet0</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>-=</operator> <name>hdrlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Read</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MIDI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">44100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>MUS_FREQ</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>tick</name></name> <operator>=</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>
<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>
<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"DMX music demuxer"</literal>)</argument>)</argument_list></macro>
<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>
<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_DEMUX</argument>)</argument_list></macro>
<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro>
<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>
</unit>
